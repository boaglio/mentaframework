/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:31:41 PM
 * Time to generate: 02:38.104 seconds
 *
 */

package org.mentawai.bean;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import org.mentawai.bean.type.AutoIncrementType;
import org.mentawai.bean.type.DateType;
import org.mentawai.bean.type.DoubleType;
import org.mentawai.bean.type.FloatType;
import org.mentawai.bean.type.IntegerType;
import org.mentawai.bean.type.SequenceType;
import org.mentawai.bean.type.StringType;

public class BeanConfigAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return BeanConfig.class;
    }
    
    public void testConstructor() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        assertEquals("beanConfig.getNumberOfFields()", 0, beanConfig.getNumberOfFields());
        assertNull("beanConfig.getSequenceField()", beanConfig.getSequenceField());
        assertEquals("beanConfig.getBeanClass()", Integer.class, beanConfig.getBeanClass());
        assertEquals("beanConfig.getTableName()", "testBeanConfigTableName", beanConfig.getTableName());
        assertEquals("beanConfig.joins.size()", 0, ((Map) getPrivateField(beanConfig, "joins")).size());
        assertEquals("beanConfig.getNumberOfPKs()", 0, beanConfig.getNumberOfPKs());
        assertNull("beanConfig.getAutoIncrementField()", beanConfig.getAutoIncrementField());
    }
    
    public void testJoinConstructor() throws Throwable {
        callPrivateMethod("org.mentawai.bean.BeanConfig$Join", "<init>", new Class[] {Class.class, Class.class}, null, new Object[] {Integer.class, Integer.class});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAddField() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.addField("testBeanConfigName", "testBeanConfigDbName", new AutoIncrementType(), true);
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertEquals("beanConfig.getAutoIncrementField().getDbName()", "testBeanConfigDbName", beanConfig.getAutoIncrementField().getDbName());
        assertSame("result", beanConfig, result);
    }
    
    public void testAddField1() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.addField("testBeanConfigName", "testBeanConfigDbName", new SequenceType(), true);
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertEquals("beanConfig.getSequenceField().getDbName()", "testBeanConfigDbName", beanConfig.getSequenceField().getDbName());
        assertSame("result", beanConfig, result);
    }
    
    public void testAddField2() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        beanConfig.pk("testBeanConfigName", "testBeanConfigDbName", new SequenceType(), "testBeanConfigForeignName");
        BeanConfig result = beanConfig.addField("testBeanConfigName", "testBeanConfigDbName", new SequenceType(), true, "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 2, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 2, beanConfig.getNumberOfPKs());
        assertSame("result", beanConfig, result);
    }
    
    public void testAddField3() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.addField("testBeanConfigName", "testBeanConfigDbName", new AutoIncrementType(), true, "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertEquals("beanConfig.getAutoIncrementField().getDbName()", "testBeanConfigDbName", beanConfig.getAutoIncrementField().getDbName());
        assertSame("result", beanConfig, result);
    }
    
    public void testAddField4() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.addField("testBeanConfigName", "testBeanConfigDbName", new FloatType(), false, "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertSame("result", beanConfig, result);
    }
    
    public void testAddField5() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        beanConfig.field("testBeanConfigName", "testBeanConfigDbName", new AutoIncrementType(), true, "testBeanConfigForeignName");
        BeanConfig result = beanConfig.addField("testBeanConfigName", "testBeanConfigDbName", new AutoIncrementType(), true, "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 2, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 2, beanConfig.getNumberOfPKs());
        assertSame("result", beanConfig, result);
    }
    
    public void testAddField6() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.addField("testBeanConfigName", "testBeanConfigDbName", new SequenceType(), true, "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertEquals("beanConfig.getSequenceField().getDbName()", "testBeanConfigDbName", beanConfig.getSequenceField().getDbName());
        assertSame("result", beanConfig, result);
    }
    
    public void testAddField7() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.addField("testBeanConfigName", "testBeanConfigDbName", new DoubleType(), true, "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertSame("result", beanConfig, result);
    }
    
    public void testAddField8() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        beanConfig.field("testBeanConfigName", "testBeanConfigDbName", new SequenceType(), true, "testBeanConfigForeignName");
        BeanConfig result = beanConfig.addField("testBeanConfigName", new SequenceType(), true, "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 2, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 2, beanConfig.getNumberOfPKs());
        assertSame("result", beanConfig, result);
    }
    
    public void testAddField9() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.addField("testBeanConfigName", new AutoIncrementType(), false, "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertSame("result", beanConfig, result);
    }
    
    public void testAddField10() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.addField("testBeanConfigName", new AutoIncrementType(), true, "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertEquals("beanConfig.getAutoIncrementField().getDbName()", "testBeanConfigName", beanConfig.getAutoIncrementField().getDbName());
        assertSame("result", beanConfig, result);
    }
    
    public void testAddField11() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        beanConfig.field("testBeanConfigName", "testBeanConfigDbName", new SequenceType(), true, "testBeanConfigForeignName");
        BeanConfig result = beanConfig.addField("testBeanConfigName", "testBeanConfigDbName", new SequenceType(), true);
        assertEquals("beanConfig.getNumberOfFields()", 2, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 2, beanConfig.getNumberOfPKs());
        assertSame("result", beanConfig, result);
    }
    
    public void testAddField12() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.addField("testBeanConfigName", "testBeanConfigDbName", new AutoIncrementType(), false);
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertSame("result", beanConfig, result);
    }
    
    public void testAddField13() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.addField("testBeanConfigName", new AutoIncrementType());
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertSame("result", beanConfig, result);
    }
    
    public void testAddField14() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.addField("testBeanConfigName", new SequenceType(), true);
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertEquals("beanConfig.getSequenceField().getDbName()", "testBeanConfigName", beanConfig.getSequenceField().getDbName());
        assertSame("result", beanConfig, result);
    }
    
    public void testAddField15() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.addField("testBeanConfigName", DBTypes.TIMESTAMP, true);
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertSame("result", beanConfig, result);
    }
    
    public void testAddField16() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.addField("testBeanConfigName", new AutoIncrementType(), true);
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertEquals("beanConfig.getAutoIncrementField().getDbName()", "testBeanConfigName", beanConfig.getAutoIncrementField().getDbName());
        assertSame("result", beanConfig, result);
    }
    
    public void testAddField17() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.addField("testBeanConfigName", new AutoIncrementType(), false);
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertSame("result", beanConfig, result);
    }
    
    public void testAddField18() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.addField("testBeanConfigName", "testBeanConfigDbName", new AutoIncrementType());
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertSame("result", beanConfig, result);
    }
    
    public void testAddJoin() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        JoinConfig join = new JoinConfig(Object.class, "testBeanConfigTableName");
        beanConfig.addJoin(join);
        BeanConfig result = beanConfig.addJoin(join);
        assertSame("result", beanConfig, result);
        assertEquals("beanConfig.joins.size()", 1, ((Map) getPrivateField(beanConfig, "joins")).size());
    }
    
    public void testAddJoin1() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        beanConfig.join(new JoinConfig(Integer.class, "testBeanConfigTableName"));
        BeanConfig result = beanConfig.addJoin(Integer.class, "testBeanConfigTableName");
        assertSame("result", beanConfig, result);
        assertEquals("beanConfig.joins.size()", 1, ((Map) getPrivateField(beanConfig, "joins")).size());
    }
    
    public void testDefaultToNow() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        beanConfig.field("testString", "testBeanConfigDbName", new AutoIncrementType(), true, "testBeanConfigForeignName");
        BeanConfig result = beanConfig.defaultToNow("testString");
        boolean actual = ((DBField) ((List) getPrivateField(beanConfig, "fieldList")).get(0)).isDefaultToNow();
        assertTrue("beanConfig.fieldList.get(0).isDefaultToNow()", actual);
        assertSame("result", beanConfig, result);
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
    }
    
    public void testDefaultToNow1() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(String.class, "testBeanConfigTableName");
        beanConfig.addField("testBeanConfigName", "testBeanConfigDbName", new AutoIncrementType());
        beanConfig.pk("", "testBeanConfigDbName", new AutoIncrementType(), "testBeanConfigForeignName");
        BeanConfig result = beanConfig.defaultToNow("");
        boolean actual = ((DBField) ((List) getPrivateField(beanConfig, "fieldList")).get(1)).isDefaultToNow();
        assertTrue("beanConfig.fieldList.get(1).isDefaultToNow()", actual);
        assertSame("result", beanConfig, result);
        assertEquals("beanConfig.getNumberOfFields()", 2, beanConfig.getNumberOfFields());
    }
    
    public void testField() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        beanConfig.addField("testBeanConfigName", "testBeanConfigDbName", new SequenceType(), true, "testBeanConfigForeignName");
        BeanConfig result = beanConfig.field("testBeanConfigName", new SequenceType(), true);
        assertEquals("beanConfig.getNumberOfFields()", 2, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 2, beanConfig.getNumberOfPKs());
        assertSame("result", beanConfig, result);
    }
    
    public void testField1() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.field("testBeanConfigName", new StringType(), true);
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertSame("result", beanConfig, result);
    }
    
    public void testField2() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        beanConfig.field("testBeanConfigName", "testBeanConfigDbName", new SequenceType(), true, "testBeanConfigForeignName");
        BeanConfig result = beanConfig.field("testBeanConfigName", DBTypes.SEQUENCE, true, "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 2, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 2, beanConfig.getNumberOfPKs());
        assertSame("result", beanConfig, result);
    }
    
    public void testField3() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.field("testBeanConfigName", new AutoIncrementType(), true, "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertEquals("beanConfig.getAutoIncrementField().getDbName()", "testBeanConfigName", beanConfig.getAutoIncrementField().getDbName());
        assertSame("result", beanConfig, result);
    }
    
    public void testField4() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.field("testBeanConfigName", DBTypes.INTEGER, false, "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertSame("result", beanConfig, result);
    }
    
    public void testField5() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.field("testBeanConfigName", "testBeanConfigDbName", new SequenceType(), true, "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertEquals("beanConfig.getSequenceField().getDbName()", "testBeanConfigDbName", beanConfig.getSequenceField().getDbName());
        assertSame("result", beanConfig, result);
    }
    
    public void testField6() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        beanConfig.addField("testBeanConfigName", "testBeanConfigDbName", new SequenceType(), true, "testBeanConfigForeignName");
        BeanConfig result = beanConfig.field("testBeanConfigName", "testBeanConfigDbName", new SequenceType(), true, "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 2, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 2, beanConfig.getNumberOfPKs());
        assertSame("result", beanConfig, result);
    }
    
    public void testField7() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.field("testBeanConfigName", "testBeanConfigDbName", new AutoIncrementType(), true, "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertEquals("beanConfig.getAutoIncrementField().getDbName()", "testBeanConfigDbName", beanConfig.getAutoIncrementField().getDbName());
        assertSame("result", beanConfig, result);
    }
    
    public void testField8() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.field("testBeanConfigName", "testBeanConfigDbName", new AutoIncrementType(), false, "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertSame("result", beanConfig, result);
    }
    
    public void testField9() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.field("testBeanConfigName", new AutoIncrementType(), false);
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertSame("result", beanConfig, result);
    }
    
    public void testField10() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.field("testBeanConfigName", new AutoIncrementType(), true);
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertEquals("beanConfig.getAutoIncrementField().getDbName()", "testBeanConfigName", beanConfig.getAutoIncrementField().getDbName());
        assertSame("result", beanConfig, result);
    }
    
    public void testField11() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.field("testBeanConfigName", "testBeanConfigDbName", DBTypes.SEQUENCE, true);
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertEquals("beanConfig.getSequenceField().getDbName()", "testBeanConfigDbName", beanConfig.getSequenceField().getDbName());
        assertSame("result", beanConfig, result);
    }
    
    public void testField12() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.field("testBeanConfigName", "testBeanConfigDbName", new DateType(), true);
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertSame("result", beanConfig, result);
    }
    
    public void testField13() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.field("testBeanConfigName", "testBeanConfigDbName", new FloatType(), false);
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertSame("result", beanConfig, result);
    }
    
    public void testField14() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.field("testBeanConfigName", "testBeanConfigDbName", DBTypes.AUTOINCREMENT, true);
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertEquals("beanConfig.getAutoIncrementField().getDbName()", "testBeanConfigDbName", beanConfig.getAutoIncrementField().getDbName());
        assertSame("result", beanConfig, result);
    }
    
    public void testField15() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.field("testBeanConfigName", new DateType());
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertSame("result", beanConfig, result);
    }
    
    public void testField16() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.field("testBeanConfigName", "testBeanConfigDbName", DBTypes.SEQUENCE);
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertSame("result", beanConfig, result);
    }
    
    public void testFields() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        beanConfig.field("testBeanConfigName", "testBeanConfigDbName", DBTypes.SEQUENCE);
        ListIterator result = (ListIterator) beanConfig.fields();
        assertTrue("result.hasNext()", result.hasNext());
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
    }
    
    public void testFields1() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        ListIterator result = (ListIterator) beanConfig.fields();
        assertFalse("result.hasNext()", result.hasNext());
        assertEquals("beanConfig.getNumberOfFields()", 0, beanConfig.getNumberOfFields());
    }
    
    public void testFindDBField() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        beanConfig.addField("testBeanConfigName", new SequenceType());
        Object result = callPrivateMethod("org.mentawai.bean.BeanConfig", "findDBField", new Class[] {String.class}, beanConfig, new Object[] {"testBeanConfigName1"});
        assertNull("result", result);
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
    }
    
    public void testFindDBField1() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        IntegerType type = (IntegerType) Mockingbird.getProxyObject(IntegerType.class);
        Mockingbird.enterRecordingMode();
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        Mockingbird.replaceObjectForRecording(DBField.class, "<init>(java.lang.String,java.lang.String,org.mentawai.bean.DBType,boolean,java.lang.String)", dBField);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.setReturnValue(false, linkedList, "add", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.enterTestMode(BeanConfig.class);
        beanConfig.field("testBeanConfigName", "testBeanConfigDbName", type);
        beanConfig.join(Integer.class, "testBeanConfigTableName");
        Mockingbird.enterRecordingMode();
        Iterator listIterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, linkedList, "iterator", "()java.util.Iterator", listIterator, 1);
        Mockingbird.setReturnValue(false, listIterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Mockingbird.setReturnValue(false, listIterator, "next", "()java.lang.Object", new Object[] {}, dBField2, 1);
        Mockingbird.setReturnValue(dBField2.getName(), "testString");
        Mockingbird.setReturnValue(false, listIterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, listIterator, "next", "()java.lang.Object", new Object[] {}, dBField, 1);
        Mockingbird.setReturnValue(dBField.getName(), "  ");
        Mockingbird.enterTestMode(BeanConfig.class);
        DBField result = (DBField) callPrivateMethod("org.mentawai.bean.BeanConfig", "findDBField", new Class[] {String.class}, beanConfig, new Object[] {"  "});
        assertSame("result", dBField, result);
        assertEquals("beanConfig.getNumberOfFields()", 0, beanConfig.getNumberOfFields());
    }
    
    public void testFindDBField2() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        beanConfig.addField("testString", "testBeanConfigDbName", new AutoIncrementType());
        beanConfig.addField("testBeanConfigName", new AutoIncrementType());
        DBField result = (DBField) callPrivateMethod("org.mentawai.bean.BeanConfig", "findDBField", new Class[] {String.class}, beanConfig, new Object[] {"testString"});
        assertEquals("result.getDbName()", "testBeanConfigDbName", result.getDbName());
        assertEquals("beanConfig.getNumberOfFields()", 2, beanConfig.getNumberOfFields());
    }
    
    public void testFindDBField3() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        Object result = callPrivateMethod("org.mentawai.bean.BeanConfig", "findDBField", new Class[] {String.class}, beanConfig, new Object[] {"testBeanConfigName"});
        assertNull("result", result);
        assertEquals("beanConfig.getNumberOfFields()", 0, beanConfig.getNumberOfFields());
    }
    
    public void testGetAutoIncrementField() throws Throwable {
        DBField result = new BeanConfig(Integer.class, "testBeanConfigTableName").getAutoIncrementField();
        assertNull("result", result);
    }
    
    public void testGetBeanClass() throws Throwable {
        Class result = new BeanConfig(Object.class, "testBeanConfigTableName").getBeanClass();
        assertSame("result", Object.class, result);
    }
    
    public void testGetFirstPK() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        beanConfig.pk("testBeanConfigName", "testBeanConfigDbName", new SequenceType(), "testBeanConfigForeignName");
        DBField result = beanConfig.getFirstPK();
        assertEquals("result.getDbName()", "testBeanConfigDbName", result.getDbName());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
    }
    
    public void testGetJoinConfig() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        beanConfig.addJoin(Object.class, "testBeanConfigTableName");
        beanConfig.addJoin(Integer.class, "testBeanConfigTableName1");
        JoinConfig result = beanConfig.getJoinConfig(Object.class);
        assertEquals("result.getTableName()", "testBeanConfigTableName", result.getTableName());
        assertEquals("beanConfig.joins.size()", 2, ((Map) getPrivateField(beanConfig, "joins")).size());
    }
    
    public void testGetJoinConfig1() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(String.class, "testBeanConfigTableName");
        JoinConfig result = beanConfig.getJoinConfig(Integer.class);
        assertNull("result", result);
        assertEquals("beanConfig.joins.size()", 0, ((Map) getPrivateField(beanConfig, "joins")).size());
    }
    
    public void testGetNumberOfFields() throws Throwable {
        int result = new BeanConfig(Integer.class, "testBeanConfigTableName").getNumberOfFields();
        assertEquals("result", 0, result);
    }
    
    public void testGetNumberOfFields1() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        beanConfig.field("testBeanConfigName", new SequenceType());
        int result = beanConfig.getNumberOfFields();
        assertEquals("result", 1, result);
    }
    
    public void testGetNumberOfPKs() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(String.class, "testBeanConfigTableName");
        beanConfig.pk("testBeanConfigName", "testBeanConfigDbName", new AutoIncrementType(), "testBeanConfigForeignName");
        int result = beanConfig.getNumberOfPKs();
        assertEquals("result", 1, result);
    }
    
    public void testGetNumberOfPKs1() throws Throwable {
        int result = new BeanConfig(Integer.class, "testBeanConfigTableName").getNumberOfPKs();
        assertEquals("result", 0, result);
    }
    
    public void testGetSequenceField() throws Throwable {
        DBField result = new BeanConfig(Object.class, "testBeanConfigTableName").getSequenceField();
        assertNull("result", result);
    }
    
    public void testGetTableName() throws Throwable {
        String result = new BeanConfig(Integer.class, "testBeanConfigTableName").getTableName();
        assertEquals("result", "testBeanConfigTableName", result);
    }
    
    public void testHasPK() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        boolean result = beanConfig.hasPK();
        assertFalse("result", result);
        assertEquals("beanConfig.getNumberOfPKs()", 0, beanConfig.getNumberOfPKs());
    }
    
    public void testHasPK1() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        beanConfig.addField("testBeanConfigName", "testBeanConfigDbName", new StringType(), true, "testBeanConfigForeignName");
        boolean result = beanConfig.hasPK();
        assertTrue("result", result);
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
    }
    
    public void testJoin() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        beanConfig.join(String.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.join(new JoinConfig(String.class, "testBeanConfigTableName"));
        assertSame("result", beanConfig, result);
        assertEquals("beanConfig.joins.size()", 1, ((Map) getPrivateField(beanConfig, "joins")).size());
    }
    
    public void testJoin1() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        beanConfig.addJoin(Integer.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.join(Integer.class, "testBeanConfigTableName");
        assertSame("result", beanConfig, result);
        assertEquals("beanConfig.joins.size()", 1, ((Map) getPrivateField(beanConfig, "joins")).size());
    }
    
    public void testJoinEqualsWithAggressiveMocks() throws Throwable {
        Object obj = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.BeanConfig$Join"), true);
        Class class2 = (Class) Mockingbird.getProxyObject(Class.class);
        Class class3 = (Class) Mockingbird.getProxyObject(Class.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.BeanConfig$Join"), true);
        Class class4 = (Class) Mockingbird.getProxyObject(Class.class);
        Class class5 = (Class) Mockingbird.getProxyObject(Class.class);
        setPrivateField(obj, "klass1", class2);
        setPrivateField(obj, "klass2", class3);
        setPrivateField(obj2, "klass1", class4);
        setPrivateField(obj2, "klass2", class5);
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, class4, "equals", "(java.lang.Object)boolean", new Object[] {class2}, boolean2, 1);
        Mockingbird.setReturnValue(false, class5, "equals", "(java.lang.Object)boolean", new Object[] {class3}, boolean2, 1);
        Mockingbird.enterTestMode(Class.forName("org.mentawai.bean.BeanConfig$Join"));
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.bean.BeanConfig$Join", "equals", new Class[] {Object.class}, obj, new Object[] {obj2})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testJoinEqualsWithAggressiveMocks1() throws Throwable {
        Object obj = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.BeanConfig$Join"), true);
        Mockingbird.enterTestMode(Class.forName("org.mentawai.bean.BeanConfig$Join"));
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.bean.BeanConfig$Join", "equals", new Class[] {Object.class}, obj, new Object[] {null})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testJoinEqualsWithAggressiveMocks2() throws Throwable {
        Object obj = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.BeanConfig$Join"), true);
        Class class2 = (Class) Mockingbird.getProxyObject(Class.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.BeanConfig$Join"), true);
        Class class3 = (Class) Mockingbird.getProxyObject(Class.class);
        setPrivateField(obj, "klass1", class2);
        setPrivateField(obj2, "klass1", class3);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, class3, "equals", "(java.lang.Object)boolean", new Object[] {class2}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(Class.forName("org.mentawai.bean.BeanConfig$Join"));
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.bean.BeanConfig$Join", "equals", new Class[] {Object.class}, obj, new Object[] {obj2})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testJoinEqualsWithAggressiveMocks3() throws Throwable {
        Object obj = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.BeanConfig$Join"), true);
        Class class2 = (Class) Mockingbird.getProxyObject(Class.class);
        Class class3 = (Class) Mockingbird.getProxyObject(Class.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.BeanConfig$Join"), true);
        Class class4 = (Class) Mockingbird.getProxyObject(Class.class);
        Class class5 = (Class) Mockingbird.getProxyObject(Class.class);
        setPrivateField(obj, "klass1", class2);
        setPrivateField(obj, "klass2", class3);
        setPrivateField(obj2, "klass1", class4);
        setPrivateField(obj2, "klass2", class5);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, class4, "equals", "(java.lang.Object)boolean", new Object[] {class2}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, class5, "equals", "(java.lang.Object)boolean", new Object[] {class3}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(Class.forName("org.mentawai.bean.BeanConfig$Join"));
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.bean.BeanConfig$Join", "equals", new Class[] {Object.class}, obj, new Object[] {obj2})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testJoinHashCodeWithAggressiveMocks() throws Throwable {
        Object obj = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.BeanConfig$Join"), true);
        Class class2 = (Class) Mockingbird.getProxyObject(Class.class);
        Class class3 = (Class) Mockingbird.getProxyObject(Class.class);
        setPrivateField(obj, "klass1", class2);
        setPrivateField(obj, "klass2", class3);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, class2, "hashCode", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, class3, "hashCode", "()int", new Object[] {}, new Integer(-5), 1);
        Mockingbird.enterTestMode(Class.forName("org.mentawai.bean.BeanConfig$Join"));
        int result = ((Number) callPrivateMethod("org.mentawai.bean.BeanConfig$Join", "hashCode", new Class[] {}, obj, new Object[] {})).intValue();
        assertEquals("result", 26, result);
    }
    
    public void testPk() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        beanConfig.addField("testBeanConfigName", "testBeanConfigDbName", new SequenceType(), true, "testBeanConfigForeignName");
        BeanConfig result = beanConfig.pk("testBeanConfigName", DBTypes.SEQUENCE, "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 2, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 2, beanConfig.getNumberOfPKs());
        assertSame("result", beanConfig, result);
    }
    
    public void testPk1() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.pk("testBeanConfigName", new AutoIncrementType(), "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertEquals("beanConfig.getAutoIncrementField().getDbName()", "testBeanConfigName", beanConfig.getAutoIncrementField().getDbName());
        assertSame("result", beanConfig, result);
    }
    
    public void testPk2() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.pk("testBeanConfigName", "testBeanConfigDbName", new AutoIncrementType(), "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertEquals("beanConfig.getAutoIncrementField().getDbName()", "testBeanConfigDbName", beanConfig.getAutoIncrementField().getDbName());
        assertSame("result", beanConfig, result);
    }
    
    public void testPk3() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.pk("testBeanConfigName", "testBeanConfigDbName", new SequenceType(), "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertEquals("beanConfig.getSequenceField().getDbName()", "testBeanConfigDbName", beanConfig.getSequenceField().getDbName());
        assertSame("result", beanConfig, result);
    }
    
    public void testPk4() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        DBType type = new SequenceType();
        beanConfig.addField("testBeanConfigName", "testBeanConfigDbName", type, true, "testBeanConfigForeignName");
        BeanConfig result = beanConfig.pk("testBeanConfigName", "testBeanConfigDbName", type, "testBeanConfigForeignName");
        assertEquals("beanConfig.getNumberOfFields()", 2, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 2, beanConfig.getNumberOfPKs());
        assertSame("result", beanConfig, result);
    }
    
    public void testPk5() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.pk("testBeanConfigName", "testBeanConfigDbName", new AutoIncrementType());
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertEquals("beanConfig.getAutoIncrementField().getDbName()", "testBeanConfigDbName", beanConfig.getAutoIncrementField().getDbName());
        assertSame("result", beanConfig, result);
    }
    
    public void testPk6() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.pk("testBeanConfigName", "testBeanConfigDbName", DBTypes.TIME);
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertSame("result", beanConfig, result);
    }
    
    public void testPk7() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.pk("testBeanConfigName", "testBeanConfigDbName", DBTypes.SEQUENCE);
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertEquals("beanConfig.getSequenceField().getDbName()", "testBeanConfigDbName", beanConfig.getSequenceField().getDbName());
        assertSame("result", beanConfig, result);
    }
    
    public void testPk8() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        beanConfig.pk("testBeanConfigName", "testBeanConfigDbName", new SequenceType(), "testBeanConfigForeignName");
        BeanConfig result = beanConfig.pk("testBeanConfigName", new SequenceType());
        assertEquals("beanConfig.getNumberOfFields()", 2, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 2, beanConfig.getNumberOfPKs());
        assertSame("result", beanConfig, result);
    }
    
    public void testPk9() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        BeanConfig result = beanConfig.pk("testBeanConfigName", DBTypes.AUTOINCREMENT);
        assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
        assertEquals("beanConfig.getAutoIncrementField().getDbName()", "testBeanConfigName", beanConfig.getAutoIncrementField().getDbName());
        assertSame("result", beanConfig, result);
    }
    
    public void testPks() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        ListIterator result = (ListIterator) beanConfig.pks();
        assertFalse("result.hasNext()", result.hasNext());
        assertEquals("beanConfig.getNumberOfPKs()", 0, beanConfig.getNumberOfPKs());
    }
    
    public void testPks1() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        beanConfig.pk("testBeanConfigName", "testBeanConfigDbName", new AutoIncrementType(), "testBeanConfigForeignName");
        ListIterator result = (ListIterator) beanConfig.pks();
        assertTrue("result.hasNext()", result.hasNext());
        assertEquals("beanConfig.getNumberOfPKs()", 1, beanConfig.getNumberOfPKs());
    }
    
    public void testToString() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        String result = beanConfig.toString();
        assertEquals("result", "BeanConfig: java.lang.Object tableName=testBeanConfigTableName", result);
        assertEquals("beanConfig.getBeanClass()", Object.class, beanConfig.getBeanClass());
    }
    
    public void testAddFieldThrowsNullPointerException() throws Throwable {
        DBType type = new AutoIncrementType();
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.addField("testString", "", type, true, "testString"), beanConfig);
        Mockingbird.enterTestMode(BeanConfig.class);
        beanConfig.field("testString", "", type, true, "testString");
        try {
            beanConfig.addField("testBeanConfigName", "testBeanConfigDbName", new AutoIncrementType(), true, "testBeanConfigForeignName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BeanConfig.class, ex);
            assertNull("beanConfig.fieldList", getPrivateField(beanConfig, "fieldList"));
            assertNull("beanConfig.getSequenceField()", beanConfig.getSequenceField());
            assertNull("beanConfig.pkList", getPrivateField(beanConfig, "pkList"));
            assertNull("beanConfig.getAutoIncrementField()", beanConfig.getAutoIncrementField());
        }
    }
    
    public void testAddJoinThrowsNullPointerException() throws Throwable {
        JoinConfig join = new JoinConfig(Integer.class, "testBeanConfigTableName");
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.addJoin(join), beanConfig);
        Mockingbird.enterTestMode(BeanConfig.class);
        beanConfig.join(join);
        try {
            beanConfig.addJoin(new JoinConfig(Integer.class, "testBeanConfigTableName1"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BeanConfig.class, ex);
            assertNull("beanConfig.joins", getPrivateField(beanConfig, "joins"));
        }
    }
    
    public void testAddJoinThrowsNullPointerException1() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        try {
            beanConfig.addJoin(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BeanConfig.class, ex);
            assertEquals("beanConfig.joins.size()", 0, ((Map) getPrivateField(beanConfig, "joins")).size());
        }
    }
    
    public void testAddJoinThrowsNullPointerException2() throws Throwable {
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, beanConfig.addJoin(null), beanConfig);
        Mockingbird.enterTestMode(BeanConfig.class);
        beanConfig.addJoin(Integer.class, "testBeanConfigTableName");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, beanConfig.addJoin(null), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(BeanConfig.class);
        try {
            beanConfig.addJoin(null, "testBeanConfigTableName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("beanConfig.joins", getPrivateField(beanConfig, "joins"));
        }
    }
    
    public void testDefaultToNowThrowsIllegalArgumentException() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(String.class, "testBeanConfigTableName");
        beanConfig.field("testString", "testBeanConfigDbName", new AutoIncrementType());
        beanConfig.defaultToNow("testString");
        try {
            beanConfig.defaultToNow("testBeanConfigName");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Cannot find field with name: testBeanConfigName", ex.getMessage());
            assertThrownBy(BeanConfig.class, ex);
            assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        }
    }
    
    public void testDefaultToNowThrowsIllegalArgumentException1() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        try {
            beanConfig.defaultToNow("testBeanConfigName");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Cannot find field with name: testBeanConfigName", ex.getMessage());
            assertThrownBy(BeanConfig.class, ex);
            assertEquals("beanConfig.getNumberOfFields()", 0, beanConfig.getNumberOfFields());
        }
    }
    
    public void testDefaultToNowThrowsNullPointerException() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        beanConfig.addField(null, "testBeanConfigDbName", DBTypes.AUTOINCREMENT);
        beanConfig.join(new JoinConfig(Integer.class, "testBeanConfigTableName"));
        try {
            beanConfig.defaultToNow("testBeanConfigName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BeanConfig.class, ex);
            assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        }
    }
    
    public void testDefaultToNowThrowsNullPointerException1() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        beanConfig.field("testBeanConfigName", "testBeanConfigDbName", new AutoIncrementType(), true, "testBeanConfigForeignName");
        beanConfig.field(null, "testBeanConfigDbName", new DateType());
        beanConfig.addJoin(Integer.class, "testBeanConfigTableName");
        try {
            beanConfig.defaultToNow("testBeanConfigName1");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BeanConfig.class, ex);
            assertEquals("beanConfig.getNumberOfFields()", 2, beanConfig.getNumberOfFields());
        }
    }
    
    public void testDefaultToNowThrowsNullPointerException2() throws Throwable {
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, beanConfig.addJoin(null), beanConfig);
        Mockingbird.enterTestMode(BeanConfig.class);
        beanConfig.addJoin(Integer.class, "testBeanConfigTableName");
        try {
            beanConfig.defaultToNow("testBeanConfigName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BeanConfig.class, ex);
            assertNull("beanConfig.fieldList", getPrivateField(beanConfig, "fieldList"));
        }
    }
    
    public void testFieldsThrowsNullPointerException() throws Throwable {
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.addField("Canno9 find field with name: ", null), beanConfig);
        Mockingbird.enterTestMode(BeanConfig.class);
        beanConfig.field("Canno9 find field with name: ", null);
        try {
            beanConfig.fields();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BeanConfig.class, ex);
            assertNull("beanConfig.fieldList", getPrivateField(beanConfig, "fieldList"));
        }
    }
    
    public void testFindDBFieldThrowsNullPointerException() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        beanConfig.addField(null, "testBeanConfigDbName", new IntegerType(), true, "testBeanConfigForeignName");
        try {
            callPrivateMethod("org.mentawai.bean.BeanConfig", "findDBField", new Class[] {String.class}, beanConfig, new Object[] {"testBeanConfigName"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BeanConfig.class, ex);
            assertEquals("beanConfig.getNumberOfFields()", 1, beanConfig.getNumberOfFields());
        }
    }
    
    public void testFindDBFieldThrowsNullPointerException1() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        DBType type = new IntegerType();
        beanConfig.addField("testBeanConfigName", "testBeanConfigDbName", type, true, "testBeanConfigForeignName");
        beanConfig.addField(null, "testBeanConfigDbName1", type, false, "testBeanConfigForeignName1");
        try {
            callPrivateMethod("org.mentawai.bean.BeanConfig", "findDBField", new Class[] {String.class}, beanConfig, new Object[] {"testBeanConfigName1"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BeanConfig.class, ex);
            assertEquals("beanConfig.getNumberOfFields()", 2, beanConfig.getNumberOfFields());
        }
    }
    
    public void testFindDBFieldThrowsNullPointerException2() throws Throwable {
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        AutoIncrementType type = (AutoIncrementType) Mockingbird.getProxyObject(AutoIncrementType.class);
        Mockingbird.enterRecordingMode();
        BeanConfig field = beanConfig.addField("Cannot fi+nd field with name: ", "Cannot fi+nd field with name: ", type, false, "");
        Mockingbird.setReturnValue(field, beanConfig);
        Mockingbird.enterTestMode(BeanConfig.class);
        beanConfig.addField("Cannot fi+nd field with name: ", type);
        try {
            callPrivateMethod("org.mentawai.bean.BeanConfig", "findDBField", new Class[] {String.class}, beanConfig, new Object[] {"testBeanConfigName"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BeanConfig.class, ex);
            assertNull("beanConfig.fieldList", getPrivateField(beanConfig, "fieldList"));
        }
    }
    
    public void testGetFirstPKThrowsIndexOutOfBoundsException() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Object.class, "testBeanConfigTableName");
        try {
            beanConfig.getFirstPK();
            fail("Expected IndexOutOfBoundsException to be thrown");
        } catch (IndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "Index: 0, Size: 0", ex.getMessage());
            assertThrownBy(LinkedList.class, ex);
            assertEquals("beanConfig.getNumberOfPKs()", 0, beanConfig.getNumberOfPKs());
        }
    }
    
    public void testGetFirstPKThrowsNullPointerException() throws Throwable {
        DBType type = new AutoIncrementType();
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.addField("testString", "testString", type, false, ""), beanConfig);
        Mockingbird.enterTestMode(BeanConfig.class);
        beanConfig.addField("testString", type);
        try {
            beanConfig.getFirstPK();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BeanConfig.class, ex);
            assertNull("beanConfig.pkList", getPrivateField(beanConfig, "pkList"));
        }
    }
    
    public void testGetJoinConfigThrowsNullPointerException() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(Integer.class, "testBeanConfigTableName");
        try {
            beanConfig.getJoinConfig(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("beanConfig.joins.size()", 0, ((Map) getPrivateField(beanConfig, "joins")).size());
        }
    }
    
    public void testGetNumberOfFieldsThrowsNullPointerException() throws Throwable {
        DBType type = new SequenceType();
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.addField("", type), beanConfig);
        Mockingbird.enterTestMode(BeanConfig.class);
        beanConfig.field("", type);
        try {
            beanConfig.getNumberOfFields();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BeanConfig.class, ex);
        }
    }
    
    public void testGetNumberOfPKsThrowsNullPointerException() throws Throwable {
        DBType type = new AutoIncrementType();
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Mockingbird.enterRecordingMode();
        BeanConfig field = beanConfig.addField("Cannot fi+nd field with name: ", "Cannot fi+nd field with name: ", type, false, "");
        Mockingbird.setReturnValue(field, beanConfig);
        Mockingbird.enterTestMode(BeanConfig.class);
        beanConfig.addField("Cannot fi+nd field with name: ", type);
        try {
            beanConfig.getNumberOfPKs();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BeanConfig.class, ex);
        }
    }
    
    public void testHasPKThrowsNullPointerException() throws Throwable {
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.addJoin(Integer.class, "BeanConfig: "), beanConfig);
        Mockingbird.enterTestMode(BeanConfig.class);
        beanConfig.join(Integer.class, "BeanConfig: ");
        try {
            beanConfig.hasPK();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BeanConfig.class, ex);
            assertNull("beanConfig.pkList", getPrivateField(beanConfig, "pkList"));
        }
    }
    
    public void testJoinThrowsNullPointerException() throws Throwable {
        JoinConfig join = new JoinConfig(Integer.class, "testBeanConfigTableName");
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.addJoin(join), beanConfig);
        Mockingbird.enterTestMode(BeanConfig.class);
        beanConfig.join(join);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(beanConfig.addJoin(null), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(BeanConfig.class);
        try {
            beanConfig.join(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("beanConfig.joins", getPrivateField(beanConfig, "joins"));
        }
    }
    
    public void testJoinThrowsNullPointerException1() throws Throwable {
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.addJoin(Integer.class, "testString"), beanConfig);
        Mockingbird.enterTestMode(BeanConfig.class);
        beanConfig.join(Integer.class, "testString");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(beanConfig.addJoin(null, "testString"), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(BeanConfig.class);
        try {
            beanConfig.join(null, "testString");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("beanConfig.joins", getPrivateField(beanConfig, "joins"));
        }
    }
    
    public void testPksThrowsNullPointerException() throws Throwable {
        DBType type = new AutoIncrementType();
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.addField("testString", "testString", type, true, "testString"), beanConfig);
        Mockingbird.enterTestMode(BeanConfig.class);
        beanConfig.pk("testString", "testString", type, "testString");
        try {
            beanConfig.pks();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BeanConfig.class, ex);
            assertNull("beanConfig.pkList", getPrivateField(beanConfig, "pkList"));
        }
    }
    
    public void testToStringThrowsNullPointerException() throws Throwable {
        BeanConfig beanConfig = new BeanConfig(null, "testBeanConfigTableName");
        try {
            beanConfig.toString();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BeanConfig.class, ex);
            assertNull("beanConfig.getBeanClass()", beanConfig.getBeanClass());
        }
    }
}

