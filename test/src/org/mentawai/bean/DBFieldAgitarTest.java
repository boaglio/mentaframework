/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:33:26 PM
 * Time to generate: 00:18.768 seconds
 *
 */

package org.mentawai.bean;

import com.agitar.lib.junit.AgitarTestCase;
import org.mentawai.bean.type.AutoIncrementType;
import org.mentawai.bean.type.BooleanIntType;
import org.mentawai.bean.type.BooleanStringType;
import org.mentawai.bean.type.DateType;
import org.mentawai.bean.type.DoubleType;
import org.mentawai.bean.type.IntegerType;
import org.mentawai.bean.type.StringType;
import org.mentawai.bean.type.TimeType;
import org.mentawai.bean.type.TimestampType;

public class DBFieldAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return DBField.class;
    }
    
    public void testConstructor() throws Throwable {
        DBType type = new IntegerType();
        DBField dBField = new DBField("testDBFieldName", "testDBFieldDbName", type);
        assertNull("dBField.getForeignName()", dBField.getForeignName());
        assertEquals("dBField.getDbName()", "testDBFieldDbName", dBField.getDbName());
        assertFalse("dBField.isDefaultToNow()", dBField.isDefaultToNow());
        assertSame("dBField.getType()", type, dBField.getType());
        assertEquals("dBField.getName()", "testDBFieldName", dBField.getName());
        assertFalse("dBField.isPK()", dBField.isPK());
    }
    
    public void testConstructor1() throws Throwable {
        DBField dBField = new DBField("testDBFieldName", new DoubleType(), false, "testDBFieldForeignName");
        assertEquals("dBField.getDbName()", "testDBFieldName", dBField.getDbName());
    }
    
    public void testConstructor2() throws Throwable {
        DBField dBField = new DBField("testDBFieldName", new DoubleType(), true, "testDBFieldForeignName");
        assertEquals("dBField.getDbName()", "testDBFieldName", dBField.getDbName());
    }
    
    public void testConstructor3() throws Throwable {
        DBType type = new IntegerType();
        DBField dBField = new DBField("testDBFieldName", "testDBFieldDbName", type, true, "testDBFieldForeignName");
        assertEquals("dBField.getForeignName()", "testDBFieldForeignName", dBField.getForeignName());
        assertEquals("dBField.getDbName()", "testDBFieldDbName", dBField.getDbName());
        assertFalse("dBField.isDefaultToNow()", dBField.isDefaultToNow());
        assertSame("dBField.getType()", type, dBField.getType());
        assertEquals("dBField.getName()", "testDBFieldName", dBField.getName());
        assertTrue("dBField.isPK()", dBField.isPK());
    }
    
    public void testConstructor4() throws Throwable {
        DBField dBField = new DBField("testDBFieldName", new AutoIncrementType(), false);
        assertEquals("dBField.getDbName()", "testDBFieldName", dBField.getDbName());
    }
    
    public void testConstructor5() throws Throwable {
        DBField dBField = new DBField("testDBFieldName", new TimestampType(), true);
        assertEquals("dBField.getDbName()", "testDBFieldName", dBField.getDbName());
    }
    
    public void testConstructor6() throws Throwable {
        DBType type = new StringType();
        DBField dBField = new DBField("testDBFieldName", type);
        assertNull("dBField.getForeignName()", dBField.getForeignName());
        assertEquals("dBField.getDbName()", "testDBFieldName", dBField.getDbName());
        assertFalse("dBField.isDefaultToNow()", dBField.isDefaultToNow());
        assertSame("dBField.getType()", type, dBField.getType());
        assertEquals("dBField.getName()", "testDBFieldName", dBField.getName());
        assertFalse("dBField.isPK()", dBField.isPK());
    }
    
    public void testConstructor7() throws Throwable {
        DBField dBField = new DBField("testDBFieldName", "testDBFieldDbName", new AutoIncrementType(), false);
        assertEquals("dBField.getDbName()", "testDBFieldDbName", dBField.getDbName());
    }
    
    public void testConstructor8() throws Throwable {
        DBField dBField = new DBField("testDBFieldName", "testDBFieldDbName", new AutoIncrementType(), true);
        assertEquals("dBField.getDbName()", "testDBFieldDbName", dBField.getDbName());
    }
    
    public void testEquals() throws Throwable {
        boolean result = new DBField("testDBFieldName", new DateType(), true, "testDBFieldForeignName").equals("");
        assertFalse("result", result);
    }
    
    public void testEquals1() throws Throwable {
        DBField obj = new DBField("testDBFieldName", "testDBFieldDbName", new StringType(), true, "testDBFieldForeignName");
        boolean result = new DBField("testDBFieldName1", new BooleanStringType()).equals(obj);
        assertFalse("result", result);
    }
    
    public void testEquals2() throws Throwable {
        DBType type = new TimestampType();
        DBField dBField = new DBField("testString", type);
        DBField obj = new DBField("testString", "testDBFieldDbName", type, true, "testDBFieldForeignName");
        boolean result = dBField.equals(obj);
        assertTrue("result", result);
    }
    
    public void testGetDbName() throws Throwable {
        DBField dBField = new DBField("testDBFieldName", "testDBFieldDbName", new IntegerType(), true, "testDBFieldForeignName");
        String result = dBField.getDbName();
        assertEquals("result", "testDBFieldDbName", result);
    }
    
    public void testGetForeignName() throws Throwable {
        DBField dBField = new DBField("testDBFieldName", "testDBFieldDbName", new TimestampType(), true, "testDBFieldForeignName");
        String result = dBField.getForeignName();
        assertEquals("result", "testDBFieldForeignName", result);
    }
    
    public void testGetName() throws Throwable {
        DBField dBField = new DBField("testDBFieldName", "testDBFieldDbName", new TimeType(), true, "testDBFieldForeignName");
        String result = dBField.getName();
        assertEquals("result", "testDBFieldName", result);
    }
    
    public void testGetType() throws Throwable {
        DBType type = new AutoIncrementType();
        DBField dBField = new DBField("testDBFieldName", "testDBFieldDbName", type, true, "testDBFieldForeignName");
        DBType result = dBField.getType();
        assertSame("result", type, result);
    }
    
    public void testHashCode() throws Throwable {
        DBField dBField = new DBField("", new BooleanIntType(), true, "testDBFieldForeignName");
        int result = dBField.hashCode();
        assertEquals("result", 0, result);
        assertEquals("dBField.getName()", "", dBField.getName());
    }
    
    public void testHashCode1() throws Throwable {
        DBField dBField = new DBField("testDBFieldName", "testDBFieldDbName", new StringType(), true, "testDBFieldForeignName");
        int result = dBField.hashCode();
        assertEquals("result", -1076964363, result);
        assertEquals("dBField.getName()", "testDBFieldName", dBField.getName());
    }
    
    public void testIsPK() throws Throwable {
        DBField dBField = new DBField("testDBFieldName", "testDBFieldDbName", new DateType(), true, "testDBFieldForeignName");
        boolean result = dBField.isPK();
        assertTrue("result", result);
    }
    
    public void testIsPK1() throws Throwable {
        DBField dBField = new DBField("testDBFieldName", "testDBFieldDbName", new DoubleType(), false, "testDBFieldForeignName");
        boolean result = dBField.isPK();
        assertFalse("result", result);
    }
    
    public void testSetDefaultToNow() throws Throwable {
        DBField dBField = new DBField("testDBFieldName", "testDBFieldDbName", new BooleanIntType());
        dBField.setDefaultToNow(true);
        assertTrue("dBField.isDefaultToNow()", dBField.isDefaultToNow());
    }
    
    public void testToString() throws Throwable {
        DBField dBField = new DBField("testDBFieldName", "testDBFieldDbName", null, true, "testDBFieldForeignName");
        String result = dBField.toString();
        assertEquals("result", "DBField: testDBFieldName type=null dbName=testDBFieldDbName", result);
    }
    
    public void testEqualsThrowsNullPointerException() throws Throwable {
        DBType type = new AutoIncrementType();
        DBField obj = new DBField((String) null, "testDBFieldDbName", type, true);
        try {
            new DBField("testString", "testDBFieldDbName1", type, false).equals(obj);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DBField.class, ex);
        }
    }
    
    public void testHashCodeThrowsNullPointerException() throws Throwable {
        DBField dBField = new DBField(null, "testDBFieldDbName", new TimestampType(), true, "testDBFieldForeignName");
        try {
            dBField.hashCode();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DBField.class, ex);
            assertNull("dBField.getName()", dBField.getName());
        }
    }
}

