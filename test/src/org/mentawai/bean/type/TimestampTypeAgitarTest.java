/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:45:27 PM
 * Time to generate: 00:17.352 seconds
 *
 */

package org.mentawai.bean.type;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.Date;

public class TimestampTypeAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return TimestampType.class;
    }
    
    public void testConstructor() throws Throwable {
        TimestampType timestampType = new TimestampType();
        assertEquals("timestampType.getTypeClass()", Date.class, timestampType.getTypeClass());
    }
    
    public void testBindToStmt() throws Throwable {
        TimestampType timestampType = new TimestampType();
        PreparedStatement stmt = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Date value = new Date();
        Mockingbird.enterRecordingMode();
        Timestamp timestamp = (Timestamp) Mockingbird.getProxyObject(Timestamp.class);
        Mockingbird.replaceObjectForRecording(Timestamp.class, "<init>(long)", timestamp);
        stmt.setTimestamp(1000000000, timestamp);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(TimestampType.class);
        timestampType.bindToStmt(stmt, 1000000000, value);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testBindToStmt1() throws Throwable {
        Timestamp value = new Timestamp(100L);
        TimestampType timestampType = new TimestampType();
        PreparedStatement stmt = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Mockingbird.enterRecordingMode();
        stmt.setTimestamp(0, value);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(TimestampType.class);
        timestampType.bindToStmt(stmt, 0, value);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testBindToStmt2() throws Throwable {
        TimestampType timestampType = new TimestampType();
        PreparedStatement stmt = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Mockingbird.enterRecordingMode();
        stmt.setTimestamp(0, null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(TimestampType.class);
        timestampType.bindToStmt(stmt, 0, null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetFromResultSet() throws Throwable {
        ResultSet rset = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        TimestampType timestampType = new TimestampType();
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rset.getTimestamp(100), null);
        Mockingbird.enterTestMode(TimestampType.class);
        Object result = timestampType.getFromResultSet(rset, 100);
        assertNull("result", result);
    }
    
    public void testGetFromResultSet1() throws Throwable {
        TimestampType timestampType = new TimestampType();
        ResultSet rset = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.enterRecordingMode();
        Timestamp timestamp = (Timestamp) Mockingbird.getProxyObject(Timestamp.class);
        Mockingbird.setReturnValue(rset.getTimestamp(0), timestamp);
        Mockingbird.enterTestMode(TimestampType.class);
        Timestamp result = (Timestamp) timestampType.getFromResultSet(rset, 0);
        assertSame("result", timestamp, result);
    }
    
    public void testGetFromResultSet2() throws Throwable {
        TimestampType timestampType = new TimestampType();
        ResultSet rset = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.enterRecordingMode();
        Timestamp timestamp = (Timestamp) Mockingbird.getProxyObject(Timestamp.class);
        Mockingbird.setReturnValue(rset.getTimestamp("L"), timestamp);
        Mockingbird.enterTestMode(TimestampType.class);
        Timestamp result = (Timestamp) timestampType.getFromResultSet(rset, "L");
        assertSame("result", timestamp, result);
    }
    
    public void testGetFromResultSet3() throws Throwable {
        TimestampType timestampType = new TimestampType();
        ResultSet rset = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rset.getTimestamp("testTimestampTypeParam1"), null);
        Mockingbird.enterTestMode(TimestampType.class);
        Object result = timestampType.getFromResultSet(rset, "testTimestampTypeField");
        assertNull("result", result);
    }
    
    public void testGetTypeClass() throws Throwable {
        Class result = new TimestampType().getTypeClass();
        assertEquals("result", Date.class, result);
    }
    
    public void testToString() throws Throwable {
        String result = new TimestampType().toString();
        assertEquals("result", "TimestampType", result);
    }
    
    public void testBindToStmtThrowsIllegalArgumentException() throws Throwable {
        TimestampType timestampType = new TimestampType();
        PreparedStatement stmt = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Mockingbird.enterTestMode(TimestampType.class);
        try {
            timestampType.bindToStmt(stmt, 100, new Integer(0));
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "value is not a timestamp!", ex.getMessage());
            assertThrownBy(TimestampType.class, ex);
        }
    }
    
    public void testBindToStmtThrowsNullPointerException() throws Throwable {
        Date value = new Date();
        TimestampType timestampType = new TimestampType();
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Timestamp.class, "<init>(long)", Mockingbird.getProxyObject(Timestamp.class));
        Mockingbird.enterTestMode(TimestampType.class);
        try {
            timestampType.bindToStmt(null, 100, value);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(TimestampType.class, ex);
        }
    }
    
    public void testBindToStmtThrowsNullPointerException1() throws Throwable {
        try {
            new TimestampType().bindToStmt(null, 100, new Timestamp(100L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(TimestampType.class, ex);
        }
    }
    
    public void testBindToStmtThrowsNullPointerException2() throws Throwable {
        try {
            new TimestampType().bindToStmt(null, 100, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(TimestampType.class, ex);
        }
    }
    
    public void testGetFromResultSetThrowsNullPointerException() throws Throwable {
        try {
            new TimestampType().getFromResultSet(null, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(TimestampType.class, ex);
        }
    }
    
    public void testGetFromResultSetThrowsNullPointerException1() throws Throwable {
        try {
            new TimestampType().getFromResultSet(null, "testTimestampTypeField");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(TimestampType.class, ex);
        }
    }
}

