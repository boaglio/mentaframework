/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:39:35 PM
 * Time to generate: 00:16.241 seconds
 *
 */

package org.mentawai.bean.type;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class DoubleTypeAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return DoubleType.class;
    }
    
    public void testConstructor() throws Throwable {
        DoubleType doubleType = new DoubleType();
        assertEquals("doubleType.getTypeClass()", Double.class, doubleType.getTypeClass());
    }
    
    public void testBindToStmt() throws Throwable {
        DoubleType doubleType = new DoubleType();
        PreparedStatement stmt = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Mockingbird.enterRecordingMode();
        stmt.setDouble(0, 0.0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DoubleType.class);
        doubleType.bindToStmt(stmt, 0, new Double(0.0));
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testBindToStmt1() throws Throwable {
        DoubleType doubleType = new DoubleType();
        PreparedStatement stmt = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Mockingbird.enterRecordingMode();
        stmt.setNull(1, 8);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DoubleType.class);
        doubleType.bindToStmt(stmt, 1, null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetFromResultSet() throws Throwable {
        DoubleType doubleType = new DoubleType();
        ResultSet rset = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rset.getDouble(2), 50.802459716796875);
        Double double2 = new Double(50.802459716796875);
        Mockingbird.setReturnValue(true, Double.class, "valueOf", "(double)java.lang.Double", new Object[] {new Double(50.802459716796875)}, double2, 1);
        Mockingbird.enterTestMode(DoubleType.class);
        Double result = (Double) doubleType.getFromResultSet(rset, 2);
        assertSame("result", double2, result);
    }
    
    public void testGetFromResultSet1() throws Throwable {
        DoubleType doubleType = new DoubleType();
        ResultSet rset = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rset.getDouble(100), 0.0);
        Double double2 = new Double(0.0);
        Mockingbird.setReturnValue(true, Double.class, "valueOf", "(double)java.lang.Double", new Object[] {new Double(0.0)}, double2, 1);
        Mockingbird.enterTestMode(DoubleType.class);
        Double result = (Double) doubleType.getFromResultSet(rset, 100);
        assertSame("result", double2, result);
    }
    
    public void testGetFromResultSet2() throws Throwable {
        DoubleType doubleType = new DoubleType();
        ResultSet rset = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rset.getDouble("testString"), 2.461979389190674);
        Double double2 = new Double(2.461979389190674);
        Mockingbird.setReturnValue(true, Double.class, "valueOf", "(double)java.lang.Double", new Object[] {new Double(2.461979389190674)}, double2, 1);
        Mockingbird.enterTestMode(DoubleType.class);
        Double result = (Double) doubleType.getFromResultSet(rset, "testString");
        assertSame("result", double2, result);
    }
    
    public void testGetFromResultSet3() throws Throwable {
        DoubleType doubleType = new DoubleType();
        ResultSet rset = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rset.getDouble("testDoubleTypeParam1"), 0.0);
        Double double2 = new Double(0.0);
        Mockingbird.setReturnValue(true, Double.class, "valueOf", "(double)java.lang.Double", new Object[] {new Double(0.0)}, double2, 1);
        Mockingbird.enterTestMode(DoubleType.class);
        Double result = (Double) doubleType.getFromResultSet(rset, "testDoubleTypeField");
        assertSame("result", double2, result);
    }
    
    public void testGetTypeClass() throws Throwable {
        Class result = new DoubleType().getTypeClass();
        assertEquals("result", Double.class, result);
    }
    
    public void testToString() throws Throwable {
        String result = new DoubleType().toString();
        assertEquals("result", "DoubleType", result);
    }
    
    public void testBindToStmtThrowsIllegalArgumentException() throws Throwable {
        DoubleType doubleType = new DoubleType();
        PreparedStatement stmt = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Mockingbird.enterTestMode(DoubleType.class);
        try {
            doubleType.bindToStmt(stmt, 100, "");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "value is not a double!", ex.getMessage());
            assertThrownBy(DoubleType.class, ex);
        }
    }
    
    public void testBindToStmtThrowsNullPointerException() throws Throwable {
        try {
            new DoubleType().bindToStmt(null, 100, new Double(0.0));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DoubleType.class, ex);
        }
    }
    
    public void testBindToStmtThrowsNullPointerException1() throws Throwable {
        try {
            new DoubleType().bindToStmt(null, 100, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DoubleType.class, ex);
        }
    }
    
    public void testGetFromResultSetThrowsNullPointerException() throws Throwable {
        try {
            new DoubleType().getFromResultSet(null, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DoubleType.class, ex);
        }
    }
    
    public void testGetFromResultSetThrowsNullPointerException1() throws Throwable {
        try {
            new DoubleType().getFromResultSet(null, "testDoubleTypeField");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DoubleType.class, ex);
        }
    }
}

