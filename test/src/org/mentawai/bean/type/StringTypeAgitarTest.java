/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:43:08 PM
 * Time to generate: 00:16.435 seconds
 *
 */

package org.mentawai.bean.type;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class StringTypeAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return StringType.class;
    }
    
    public void testConstructor() throws Throwable {
        StringType stringType = new StringType();
        assertEquals("stringType.getTypeClass()", String.class, stringType.getTypeClass());
    }
    
    public void testBindToStmt() throws Throwable {
        StringType stringType = new StringType();
        PreparedStatement stmt = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Mockingbird.enterRecordingMode();
        stmt.setString(-1, "testString");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(StringType.class);
        stringType.bindToStmt(stmt, -1, "testString");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testBindToStmt1() throws Throwable {
        StringType stringType = new StringType();
        PreparedStatement stmt = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Mockingbird.enterRecordingMode();
        stmt.setString(-1, "");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(StringType.class);
        stringType.bindToStmt(stmt, -1, null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetFromResultSet() throws Throwable {
        StringType stringType = new StringType();
        ResultSet rset = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rset.getString(100), ">Us'M~01(: cF/g/qy`*");
        Mockingbird.enterTestMode(StringType.class);
        String result = (String) stringType.getFromResultSet(rset, 100);
        assertEquals("result", ">Us'M~01(: cF/g/qy`*", result);
    }
    
    public void testGetFromResultSet1() throws Throwable {
        StringType stringType = new StringType();
        ResultSet rset = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rset.getString("testStringTypeParam1"), "");
        Mockingbird.enterTestMode(StringType.class);
        String result = (String) stringType.getFromResultSet(rset, "testStringTypeField");
        assertEquals("result", "", result);
    }
    
    public void testGetFromResultSet2() throws Throwable {
        StringType stringType = new StringType();
        ResultSet rset = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rset.getString("testString"), null);
        Mockingbird.enterTestMode(StringType.class);
        Object result = stringType.getFromResultSet(rset, "testString");
        assertNull("result", result);
    }
    
    public void testGetTypeClass() throws Throwable {
        Class result = new StringType().getTypeClass();
        assertEquals("result", String.class, result);
    }
    
    public void testToString() throws Throwable {
        String result = new StringType().toString();
        assertEquals("result", "StringType", result);
    }
    
    public void testBindToStmtThrowsIllegalArgumentException() throws Throwable {
        StringType stringType = new StringType();
        PreparedStatement stmt = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Mockingbird.enterTestMode(StringType.class);
        try {
            stringType.bindToStmt(stmt, 100, new Integer(0));
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "value is not a string!", ex.getMessage());
            assertThrownBy(StringType.class, ex);
        }
    }
    
    public void testBindToStmtThrowsNullPointerException() throws Throwable {
        try {
            new StringType().bindToStmt(null, 100, "testString");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(StringType.class, ex);
        }
    }
    
    public void testBindToStmtThrowsNullPointerException1() throws Throwable {
        try {
            new StringType().bindToStmt(null, 100, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(StringType.class, ex);
        }
    }
    
    public void testGetFromResultSetThrowsNullPointerException() throws Throwable {
        try {
            new StringType().getFromResultSet(null, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(StringType.class, ex);
        }
    }
    
    public void testGetFromResultSetThrowsNullPointerException1() throws Throwable {
        try {
            new StringType().getFromResultSet(null, "testStringTypeField");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(StringType.class, ex);
        }
    }
}

