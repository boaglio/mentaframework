/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:39:25 PM
 * Time to generate: 00:17.533 seconds
 *
 */

package org.mentawai.bean.type;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class FloatTypeAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return FloatType.class;
    }
    
    public void testConstructor() throws Throwable {
        FloatType floatType = new FloatType();
        assertEquals("floatType.getTypeClass()", Float.class, floatType.getTypeClass());
    }
    
    public void testBindToStmt() throws Throwable {
        PreparedStatement stmt = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        FloatType floatType = new FloatType();
        Mockingbird.enterRecordingMode();
        stmt.setFloat(7, 0.0F);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(FloatType.class);
        floatType.bindToStmt(stmt, 7, new Float(0.0F));
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetFromResultSet() throws Throwable {
        FloatType floatType = new FloatType();
        ResultSet rset = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rset.getFloat("testString"), 2.4619794F);
        Float float2 = new Float(2.4619794F);
        Mockingbird.setReturnValue(true, Float.class, "valueOf", "(float)java.lang.Float", new Object[] {new Float(2.4619794F)}, float2, 1);
        Mockingbird.enterTestMode(FloatType.class);
        Float result = (Float) floatType.getFromResultSet(rset, "testString");
        assertSame("result", float2, result);
    }
    
    public void testGetFromResultSet1() throws Throwable {
        FloatType floatType = new FloatType();
        ResultSet rset = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rset.getFloat("testFloatTypeParam1"), 0.0F);
        Float float2 = new Float(0.0F);
        Mockingbird.setReturnValue(true, Float.class, "valueOf", "(float)java.lang.Float", new Object[] {new Float(0.0F)}, float2, 1);
        Mockingbird.enterTestMode(FloatType.class);
        Float result = (Float) floatType.getFromResultSet(rset, "testFloatTypeField");
        assertSame("result", float2, result);
    }
    
    public void testGetFromResultSet2() throws Throwable {
        FloatType floatType = new FloatType();
        ResultSet rset = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rset.getFloat(-1), -12.6553755F);
        Float float2 = new Float(-12.6553755F);
        Mockingbird.setReturnValue(true, Float.class, "valueOf", "(float)java.lang.Float", new Object[] {new Float(-12.6553755F)}, float2, 1);
        Mockingbird.enterTestMode(FloatType.class);
        Float result = (Float) floatType.getFromResultSet(rset, -1);
        assertSame("result", float2, result);
    }
    
    public void testGetFromResultSet3() throws Throwable {
        FloatType floatType = new FloatType();
        ResultSet rset = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rset.getFloat(100), 0.0F);
        Float float2 = new Float(0.0F);
        Mockingbird.setReturnValue(true, Float.class, "valueOf", "(float)java.lang.Float", new Object[] {new Float(0.0F)}, float2, 1);
        Mockingbird.enterTestMode(FloatType.class);
        Float result = (Float) floatType.getFromResultSet(rset, 100);
        assertSame("result", float2, result);
    }
    
    public void testGetTypeClass() throws Throwable {
        Class result = new FloatType().getTypeClass();
        assertEquals("result", Float.class, result);
    }
    
    public void testToString() throws Throwable {
        String result = new FloatType().toString();
        assertEquals("result", "FloatType", result);
    }
    
    public void testBindToStmtThrowsIllegalArgumentException() throws Throwable {
        PreparedStatement stmt = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        FloatType floatType = new FloatType();
        Mockingbird.enterRecordingMode();
        stmt.setNull(6, 6);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(FloatType.class);
        try {
            floatType.bindToStmt(stmt, 6, null);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "value is not a float!", ex.getMessage());
            assertThrownBy(FloatType.class, ex);
        }
    }
    
    public void testBindToStmtThrowsIllegalArgumentException1() throws Throwable {
        FloatType floatType = new FloatType();
        PreparedStatement stmt = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Mockingbird.enterTestMode(FloatType.class);
        try {
            floatType.bindToStmt(stmt, 100, "");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "value is not a float!", ex.getMessage());
            assertThrownBy(FloatType.class, ex);
        }
    }
    
    public void testBindToStmtThrowsNullPointerException() throws Throwable {
        try {
            new FloatType().bindToStmt(null, 100, new Float(0.0F));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FloatType.class, ex);
        }
    }
    
    public void testBindToStmtThrowsNullPointerException1() throws Throwable {
        try {
            new FloatType().bindToStmt(null, 100, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FloatType.class, ex);
        }
    }
    
    public void testGetFromResultSetThrowsNullPointerException() throws Throwable {
        try {
            new FloatType().getFromResultSet(null, "testFloatTypeField");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FloatType.class, ex);
        }
    }
    
    public void testGetFromResultSetThrowsNullPointerException1() throws Throwable {
        try {
            new FloatType().getFromResultSet(null, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FloatType.class, ex);
        }
    }
}

