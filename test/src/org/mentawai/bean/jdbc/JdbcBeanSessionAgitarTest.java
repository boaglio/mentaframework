/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:48:18 PM
 * Time to generate: 08:08.673 seconds
 *
 */

package org.mentawai.bean.jdbc;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.agitar.lib.mockingbird.MockingbirdSystem;
import java.io.PrintStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.mentawai.bean.BeanConfig;
import org.mentawai.bean.BeanException;
import org.mentawai.bean.DBField;
import org.mentawai.bean.DBType;
import org.mentawai.bean.DBTypes;
import org.mentawai.bean.JoinConfig;
import org.mentawai.bean.type.AutoIncrementType;
import org.mentawai.bean.type.BooleanIntType;
import org.mentawai.bean.type.DateType;
import org.mentawai.bean.type.DoubleType;
import org.mentawai.bean.type.TimeType;
import org.mentawai.bean.type.TimestampType;
import org.mentawai.core.ApplicationManager;
import org.mentawai.transaction.JdbcTransaction;
import org.mentawai.util.InjectionUtils;

public class JdbcBeanSessionAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return JdbcBeanSession.class;
    }
    
    public void testConstructor() throws Throwable {
        JdbcBeanSession jdbcBeanSession = new JdbcBeanSession();
        assertEquals("jdbcBeanSession.loaded.size()", 0, jdbcBeanSession.loaded.size());
        assertNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testConstructor1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = new JdbcBeanSession(null);
        assertNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertEquals("jdbcBeanSession.loaded.size()", 0, jdbcBeanSession.loaded.size());
        assertNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testValueConstructor() throws Throwable {
        callPrivateMethod("org.mentawai.bean.jdbc.JdbcBeanSession$Value", "<init>", new Class[] {DBField.class, Object.class, boolean.class}, null, new Object[] {new DBField("testValueName", "testValueDbName", new DoubleType(), true), "1", Boolean.TRUE});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testValueConstructor1() throws Throwable {
        DBField dBField = new DBField("testValueName", new BooleanIntType(), true, "testValueForeignName");
        callPrivateMethod("org.mentawai.bean.jdbc.JdbcBeanSession$Value", "<init>", new Class[] {DBField.class, Object.class}, null, new Object[] {dBField, "testString"});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAddWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "type", dBType);
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "type", dBType2);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig.getFirstPK(), dBField);
        Mockingbird.setReturnValue(beanConfig2.getFirstPK(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 2.802596928649634E-45);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        boolean result = jdbcBeanSession.add(obj, obj2);
        assertFalse("result", result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testAddWithAggressiveMocks1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        Object obj4 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "type", dBType);
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "type", dBType2);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig.getFirstPK(), dBField);
        Mockingbird.setReturnValue(beanConfig2.getFirstPK(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj4, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        boolean result = jdbcBeanSession.add(obj, obj2);
        assertFalse("result", result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testAddWithAggressiveMocks2() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        Object obj4 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "type", dBType);
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "type", dBType2);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig.getFirstPK(), dBField);
        Mockingbird.setReturnValue(beanConfig2.getFirstPK(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj4, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        boolean result = jdbcBeanSession.add(obj, obj2);
        assertFalse("result", result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testBeginTransaction() throws Throwable {
        JdbcBeanSession jdbcBeanSession = new JdbcBeanSession((Connection) Mockingbird.getProxyObject(Connection.class));
        Mockingbird.enterRecordingMode();
        JdbcTransaction jdbcTransaction = (JdbcTransaction) Mockingbird.getProxyObject(JdbcTransaction.class);
        Mockingbird.replaceObjectForRecording(JdbcTransaction.class, "<init>(java.sql.Connection)", jdbcTransaction);
        jdbcTransaction.begin();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        JdbcTransaction result = (JdbcTransaction) jdbcBeanSession.beginTransaction();
        assertSame("result", jdbcTransaction, result);
    }
    
    public void testBuildSelectWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", null, 1);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        String result = jdbcBeanSession.buildSelect(null);
        assertNull("result", result);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testBuildSelectWithAggressiveMocks1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(applicationManager.getBeanConfig(null), beanConfig);
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "dbName", "");
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        String result = jdbcBeanSession.buildSelect(null, null);
        assertEquals("result", "", result);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testBuildSelectWithAggressiveMocks2() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(applicationManager.getBeanConfig(null), beanConfig);
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "dbName", "");
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        String result = jdbcBeanSession.buildSelect(null, "");
        assertEquals("result", "", result);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testCheckPK() throws Throwable {
        callPrivateMethod("org.mentawai.bean.jdbc.JdbcBeanSession", "checkPK", new Class[] {Object.class, DBField.class}, null, new Object[] {new Double(1.0E-5), new DBField("testJdbcBeanSessionName", DBTypes.LONG, true)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCheckPK1() throws Throwable {
        DBField dBField = new DBField("testJdbcBeanSessionName", "testJdbcBeanSessionDbName", DBTypes.LONG);
        callPrivateMethod("org.mentawai.bean.jdbc.JdbcBeanSession", "checkPK", new Class[] {Object.class, DBField.class}, null, new Object[] {new Object(), dBField});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCountJoinWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        setPrivateField(obj3, "field", dBField5);
        setPrivateField(obj3, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj4, "field", dBField6);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 2.802596928649634E-45);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getInt(1), 0);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        int result = jdbcBeanSession.countJoin(obj, null);
        assertEquals("result", 0, result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testCountJoinWithAggressiveMocks1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField5);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj5, "field", dBField6);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getInt(1), 0);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        int result = jdbcBeanSession.countJoin(obj, null);
        assertEquals("result", 0, result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testCountJoinWithAggressiveMocks2() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField5);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj5, "field", dBField6);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getInt(1), 0);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        int result = jdbcBeanSession.countJoin(obj, null);
        assertEquals("result", 0, result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testDeleteWithAggressiveMocks() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        JdbcBeanSession.DEBUG = false;
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(obj3, "field", dBField3);
        setPrivateField(obj3, "value", null);
        setPrivateField(dBField3, "type", dBType);
        setPrivateField(obj4, "field", dBField4);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField4, "type", dBType2);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 2.802596928649634E-45);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj3);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj4);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 0);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        boolean result = jdbcBeanSession.delete(obj);
        assertFalse("result", result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNull("jdbcBeanSession.loaded", jdbcBeanSession.loaded);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testDeleteWithAggressiveMocks1() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField3);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField3, "type", dBType);
        setPrivateField(obj5, "field", dBField4);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField4, "type", dBType2);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 0);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        boolean result = jdbcBeanSession.delete(obj);
        assertFalse("result", result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNull("jdbcBeanSession.loaded", jdbcBeanSession.loaded);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testDeleteWithAggressiveMocks2() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField3);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField3, "type", dBType);
        setPrivateField(obj5, "field", dBField4);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField4, "type", dBType2);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 0);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        boolean result = jdbcBeanSession.delete(obj);
        assertFalse("result", result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNull("jdbcBeanSession.loaded", jdbcBeanSession.loaded);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testDeleteWithAggressiveMocks3() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        jdbcBeanSession.loaded = identityHashMap;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField3);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField3, "type", dBType);
        setPrivateField(obj5, "field", dBField4);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField4, "type", dBType2);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(false, identityHashMap, "remove", "(java.lang.Object)java.lang.Object", new Object[] {obj}, null, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        boolean result = jdbcBeanSession.delete(obj);
        assertTrue("result", result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertEquals("jdbcBeanSession.loaded.size()", 0, jdbcBeanSession.loaded.size());
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testDeleteWithAggressiveMocks4() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        jdbcBeanSession.loaded = identityHashMap;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField3);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField3, "type", dBType);
        setPrivateField(obj5, "field", dBField4);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField4, "type", dBType2);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(false, identityHashMap, "remove", "(java.lang.Object)java.lang.Object", new Object[] {obj}, null, 1);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        boolean result = jdbcBeanSession.delete(obj);
        assertTrue("result", result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertEquals("jdbcBeanSession.loaded.size()", 0, jdbcBeanSession.loaded.size());
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testGetConnection() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcBeanSession jdbcBeanSession = new JdbcBeanSession(conn);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        Connection result = jdbcBeanSession.getConnection();
        assertSame("result", conn, result);
    }
    
    public void testGetNow() throws Throwable {
        JdbcBeanSession jdbcBeanSession = new JdbcBeanSession();
        String result = jdbcBeanSession.getNow();
        assertNull("result", result);
    }
    
    public void testHandleLimit() throws Throwable {
        JdbcBeanSession jdbcBeanSession = new JdbcBeanSession((Connection) Mockingbird.getProxyObject(Connection.class));
        StringBuilder sb = new StringBuilder();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        StringBuilder result = jdbcBeanSession.handleLimit(sb, "testJdbcBeanSessionOrderBy", 100);
        assertSame("result", sb, result);
    }
    
    public void testHandleLimit1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = new JdbcBeanSession((Connection) Mockingbird.getProxyObject(Connection.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        StringBuilder result = jdbcBeanSession.handleLimit(null, "testJdbcBeanSessionOrderBy", 100);
        assertNull("result", result);
    }
    
    public void testInsertWithAggressiveMocks() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType = new DateType();
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        TimestampType timestampType = new TimestampType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        jdbcBeanSession.loaded = identityHashMap;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", null);
        JdbcBeanSession.DEBUG = false;
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", autoIncrementType2);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.FALSE);
        setPrivateField(dBField8, "name", "");
        setPrivateField(dBField8, "dbName", "");
        setPrivateField(dBField8, "type", dateType);
        Mockingbird.enterNormalMode();
        dBField8.setDefaultToNow(true);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", timestampType);
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.TRUE);
        setPrivateField(obj2, "isSysdate", Boolean.TRUE);
        setPrivateField(obj3, "isSysdate", Boolean.FALSE);
        setPrivateField(obj3, "value", null);
        setPrivateField(obj3, "field", dBField11);
        setPrivateField(dBField11, "type", dBType);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj4, "isSysdate", Boolean.TRUE);
        setPrivateField(obj4, "value", null);
        setPrivateField(obj4, "field", dBField12);
        setPrivateField(dBField12, "type", dBType2);
        setPrivateField(dBField12, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj3);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(false, identityHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {obj, hashMap}, null, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        jdbcBeanSession.insert(obj);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertEquals("jdbcBeanSession.loaded.size()", 0, jdbcBeanSession.loaded.size());
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testInsertWithAggressiveMocks1() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        TimeType timeType = new TimeType();
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        TimestampType timestampType = new TimestampType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        jdbcBeanSession.loaded = identityHashMap;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", autoIncrementType2);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        JdbcBeanSession.DEBUG = false;
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", null);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.FALSE);
        setPrivateField(dBField8, "name", "");
        setPrivateField(dBField8, "dbName", "");
        setPrivateField(dBField8, "type", timeType);
        Mockingbird.enterNormalMode();
        dBField8.setDefaultToNow(true);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", timestampType);
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.TRUE);
        setPrivateField(obj2, "isSysdate", Boolean.TRUE);
        setPrivateField(obj3, "isSysdate", Boolean.FALSE);
        setPrivateField(obj3, "value", null);
        setPrivateField(obj3, "field", dBField11);
        setPrivateField(dBField11, "type", dBType);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj4, "isSysdate", Boolean.TRUE);
        setPrivateField(obj4, "value", null);
        setPrivateField(obj4, "field", dBField12);
        setPrivateField(dBField12, "type", dBType2);
        setPrivateField(dBField12, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj3);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(false, identityHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {obj, hashMap}, null, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        jdbcBeanSession.insert(obj);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertEquals("jdbcBeanSession.loaded.size()", 0, jdbcBeanSession.loaded.size());
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testInsertWithAggressiveMocks2() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        TimestampType timestampType = new TimestampType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        jdbcBeanSession.loaded = identityHashMap;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", autoIncrementType2);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        JdbcBeanSession.DEBUG = false;
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", null);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.FALSE);
        setPrivateField(dBField8, "name", "");
        setPrivateField(dBField8, "dbName", "");
        setPrivateField(dBField8, "type", null);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", timestampType);
        Mockingbird.enterNormalMode();
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.TRUE);
        setPrivateField(obj2, "isSysdate", Boolean.TRUE);
        setPrivateField(obj3, "isSysdate", Boolean.FALSE);
        setPrivateField(obj3, "value", null);
        setPrivateField(obj3, "field", dBField11);
        setPrivateField(dBField11, "type", dBType);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj4, "isSysdate", Boolean.TRUE);
        setPrivateField(obj4, "value", null);
        setPrivateField(obj4, "field", dBField12);
        setPrivateField(dBField12, "type", dBType2);
        setPrivateField(dBField12, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj3);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(false, identityHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {obj, hashMap}, null, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        jdbcBeanSession.insert(obj);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertEquals("jdbcBeanSession.loaded.size()", 0, jdbcBeanSession.loaded.size());
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testInsertWithAggressiveMocks3() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType = new DateType();
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        TimestampType timestampType = new TimestampType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        jdbcBeanSession.loaded = identityHashMap;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", autoIncrementType2);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        JdbcBeanSession.DEBUG = false;
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", null);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.FALSE);
        setPrivateField(dBField8, "name", "");
        setPrivateField(dBField8, "dbName", "");
        setPrivateField(dBField8, "type", dateType);
        Mockingbird.enterNormalMode();
        dBField8.setDefaultToNow(false);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", timestampType);
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.TRUE);
        setPrivateField(obj2, "isSysdate", Boolean.TRUE);
        setPrivateField(obj3, "isSysdate", Boolean.FALSE);
        setPrivateField(obj3, "value", null);
        setPrivateField(obj3, "field", dBField11);
        setPrivateField(dBField11, "type", dBType);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj4, "isSysdate", Boolean.TRUE);
        setPrivateField(obj4, "value", null);
        setPrivateField(obj4, "field", dBField12);
        setPrivateField(dBField12, "type", dBType2);
        setPrivateField(dBField12, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj3);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(false, identityHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {obj, hashMap}, null, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        jdbcBeanSession.insert(obj);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertEquals("jdbcBeanSession.loaded.size()", 0, jdbcBeanSession.loaded.size());
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testInsertWithAggressiveMocks4() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType = new DateType();
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        TimestampType timestampType = new TimestampType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        jdbcBeanSession.loaded = identityHashMap;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", autoIncrementType2);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        JdbcBeanSession.DEBUG = false;
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", null);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.FALSE);
        setPrivateField(dBField8, "name", "");
        setPrivateField(dBField8, "dbName", "");
        setPrivateField(dBField8, "type", dateType);
        Mockingbird.enterNormalMode();
        dBField8.setDefaultToNow(true);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", timestampType);
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.TRUE);
        setPrivateField(obj3, "isSysdate", Boolean.TRUE);
        setPrivateField(obj4, "isSysdate", Boolean.FALSE);
        setPrivateField(obj4, "value", null);
        setPrivateField(obj4, "field", dBField11);
        setPrivateField(dBField11, "type", dBType);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj5, "isSysdate", Boolean.TRUE);
        setPrivateField(obj5, "value", null);
        setPrivateField(obj5, "field", dBField12);
        setPrivateField(dBField12, "type", dBType2);
        setPrivateField(dBField12, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj9 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj9);
        Mockingbird.setReturnValue(linkedList.add(obj9), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(false, identityHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {obj, hashMap}, null, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        jdbcBeanSession.insert(obj);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertEquals("jdbcBeanSession.loaded.size()", 0, jdbcBeanSession.loaded.size());
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testInsertWithAggressiveMocks5() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType = new DateType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        TimestampType timestampType = new TimestampType();
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        jdbcBeanSession.loaded = identityHashMap;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", autoIncrementType2);
        setPrivateField(dBField3, "isPK", Boolean.FALSE);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", autoIncrementType3);
        setPrivateField(dBField4, "isPK", Boolean.FALSE);
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", autoIncrementType4);
        setPrivateField(dBField5, "isPK", Boolean.TRUE);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", dateType);
        Mockingbird.enterNormalMode();
        dBField6.setDefaultToNow(true);
        JdbcBeanSession.DEBUG = false;
        setPrivateField(dBField7, "isPK", Boolean.FALSE);
        setPrivateField(dBField7, "name", "");
        setPrivateField(dBField7, "dbName", "");
        setPrivateField(dBField7, "type", timestampType);
        dBField7.setDefaultToNow(true);
        setPrivateField(dBField8, "isPK", Boolean.TRUE);
        setPrivateField(obj2, "isSysdate", Boolean.TRUE);
        setPrivateField(obj3, "isSysdate", Boolean.FALSE);
        setPrivateField(obj3, "value", null);
        setPrivateField(obj3, "field", dBField9);
        setPrivateField(dBField9, "type", dBType);
        setPrivateField(dBField9, "name", "");
        setPrivateField(obj4, "isSysdate", Boolean.TRUE);
        setPrivateField(obj4, "value", null);
        setPrivateField(obj4, "field", dBField10);
        setPrivateField(dBField10, "type", dBType2);
        setPrivateField(dBField10, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj3);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(false, identityHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {obj, hashMap}, null, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        jdbcBeanSession.insert(obj);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertEquals("jdbcBeanSession.loaded.size()", 0, jdbcBeanSession.loaded.size());
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testInsertWithAggressiveMocks6() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType = new DateType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType2 = new DateType();
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        jdbcBeanSession.loaded = identityHashMap;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", autoIncrementType2);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", null);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.TRUE);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", dateType);
        Mockingbird.enterNormalMode();
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.FALSE);
        setPrivateField(dBField10, "name", "");
        setPrivateField(dBField10, "dbName", "");
        setPrivateField(dBField10, "type", dateType2);
        dBField10.setDefaultToNow(true);
        setPrivateField(obj2, "isSysdate", Boolean.TRUE);
        setPrivateField(obj3, "isSysdate", Boolean.TRUE);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "isSysdate", Boolean.FALSE);
        setPrivateField(obj4, "value", null);
        setPrivateField(obj4, "field", dBField11);
        setPrivateField(dBField11, "type", dBType);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj5, "isSysdate", Boolean.FALSE);
        setPrivateField(obj5, "value", null);
        setPrivateField(obj5, "field", dBField12);
        setPrivateField(dBField12, "type", dBType2);
        setPrivateField(dBField12, "name", "");
        setPrivateField(obj6, "isSysdate", Boolean.TRUE);
        setPrivateField(obj7, "isSysdate", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj9 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj9);
        Mockingbird.setReturnValue(linkedList.add(obj9), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj10 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj10);
        Mockingbird.setReturnValue(linkedList.add(obj10), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj11 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj11);
        Mockingbird.setReturnValue(linkedList.add(obj11), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), "");
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), "");
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj6);
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj7);
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(false, identityHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {obj, hashMap}, null, 1);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        jdbcBeanSession.insert(obj);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testInsertWithAggressiveMocks7() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType = new DateType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType2 = new DateType();
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        jdbcBeanSession.loaded = identityHashMap;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", autoIncrementType2);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", null);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.TRUE);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", dateType);
        Mockingbird.enterNormalMode();
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.FALSE);
        setPrivateField(dBField10, "name", "");
        setPrivateField(dBField10, "dbName", "");
        setPrivateField(dBField10, "type", dateType2);
        dBField10.setDefaultToNow(true);
        setPrivateField(obj2, "isSysdate", Boolean.TRUE);
        setPrivateField(obj3, "isSysdate", Boolean.TRUE);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "isSysdate", Boolean.FALSE);
        setPrivateField(obj4, "value", null);
        setPrivateField(obj4, "field", dBField11);
        setPrivateField(dBField11, "type", dBType);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj5, "isSysdate", Boolean.FALSE);
        setPrivateField(obj5, "value", null);
        setPrivateField(obj5, "field", dBField12);
        setPrivateField(dBField12, "type", dBType2);
        setPrivateField(dBField12, "name", "");
        setPrivateField(obj6, "isSysdate", Boolean.TRUE);
        setPrivateField(obj7, "isSysdate", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj9 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj9);
        Mockingbird.setReturnValue(linkedList.add(obj9), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), "");
        Object obj10 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj10);
        Mockingbird.setReturnValue(linkedList.add(obj10), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj11 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj11);
        Mockingbird.setReturnValue(linkedList.add(obj11), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), "");
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), "");
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj6);
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj7);
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(false, identityHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {obj, hashMap}, null, 1);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        jdbcBeanSession.insert(obj);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testInsertWithAggressiveMocks8() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType = new DateType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType2 = new DateType();
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        jdbcBeanSession.loaded = identityHashMap;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", autoIncrementType2);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", null);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.TRUE);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", dateType);
        Mockingbird.enterNormalMode();
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.FALSE);
        setPrivateField(dBField10, "name", "");
        setPrivateField(dBField10, "dbName", "");
        setPrivateField(dBField10, "type", dateType2);
        dBField10.setDefaultToNow(true);
        setPrivateField(obj2, "isSysdate", Boolean.FALSE);
        setPrivateField(obj3, "isSysdate", Boolean.TRUE);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "isSysdate", Boolean.FALSE);
        setPrivateField(obj4, "value", null);
        setPrivateField(obj4, "field", dBField11);
        setPrivateField(dBField11, "type", dBType);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj5, "isSysdate", Boolean.FALSE);
        setPrivateField(obj5, "value", null);
        setPrivateField(obj5, "field", dBField12);
        setPrivateField(dBField12, "type", dBType2);
        setPrivateField(dBField12, "name", "");
        setPrivateField(obj6, "isSysdate", Boolean.TRUE);
        setPrivateField(obj7, "isSysdate", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj9 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj9);
        Mockingbird.setReturnValue(linkedList.add(obj9), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj10 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj10);
        Mockingbird.setReturnValue(linkedList.add(obj10), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj11 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj11);
        Mockingbird.setReturnValue(linkedList.add(obj11), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), "");
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj6);
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj7);
        Mockingbird.setReturnValue(jdbcBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(false, identityHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {obj, hashMap}, null, 1);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        jdbcBeanSession.insert(obj);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testIsSet() throws Throwable {
        JdbcBeanSession jdbcBeanSession = new JdbcBeanSession();
        boolean result = jdbcBeanSession.isSet(new Integer(0), Integer.class);
        assertTrue("result", result);
    }
    
    public void testIsSet1() throws Throwable {
        JdbcBeanSession oracleBeanSession = new OracleBeanSession();
        boolean result = oracleBeanSession.isSet(null, Integer.class);
        assertFalse("result", result);
    }
    
    public void testIsSetWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        Class class2 = (Class) Mockingbird.getProxyObject(Class.class);
        Class class3 = (Class) Mockingbird.getProxyObject(Class.class);
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, class2, "equals", "(java.lang.Object)boolean", new Object[] {class3}, boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Object.class), "equals", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Object.class), "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Object.class), "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(number.intValue(), 1);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        boolean result = jdbcBeanSession.isSet(number, class2);
        assertTrue("result", result);
    }
    
    public void testIsSetWithAggressiveMocks1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Class class2 = (Class) Mockingbird.getProxyObject(Class.class);
        Class class3 = (Class) Mockingbird.getProxyObject(Class.class);
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, class2, "equals", "(java.lang.Object)boolean", new Object[] {class3}, boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Object.class), "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Object.class), "equals", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        boolean result = jdbcBeanSession.isSet(obj, class2);
        assertTrue("result", result);
    }
    
    public void testLoadJoinIdsWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType3 = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType4 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        setPrivateField(obj3, "field", dBField5);
        setPrivateField(obj3, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj4, "field", dBField6);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        setPrivateField(dBField7, "type", dBType3);
        setPrivateField(dBField8, "type", dBType4);
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 2.802596928649634E-45);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        LinkedList linkedList2 = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList2);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), dBField7);
        Mockingbird.setReturnValue(false, dBType3, "getFromResultSet", "(java.sql.ResultSet,int)java.lang.Object", new Integer(100), 1);
        Mockingbird.setReturnValue(linkedList2.add(new Integer(100)), false);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), dBField8);
        Mockingbird.setReturnValue(false, dBType4, "getFromResultSet", "(java.sql.ResultSet,int)java.lang.Object", new Integer(100), 1);
        Mockingbird.setReturnValue(linkedList2.add(new Integer(100)), false);
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        List result = jdbcBeanSession.loadJoinIds(obj, null);
        assertNotNull("result", result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testLoadJoinIdsWithAggressiveMocks1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType3 = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType4 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField5);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj5, "field", dBField6);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        setPrivateField(dBField7, "type", dBType3);
        setPrivateField(dBField8, "type", dBType4);
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        LinkedList linkedList2 = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList2);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), dBField7);
        Mockingbird.setReturnValue(false, dBType3, "getFromResultSet", "(java.sql.ResultSet,int)java.lang.Object", new Integer(100), 1);
        Mockingbird.setReturnValue(linkedList2.add(new Integer(100)), false);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), dBField8);
        Mockingbird.setReturnValue(false, dBType4, "getFromResultSet", "(java.sql.ResultSet,int)java.lang.Object", new Integer(100), 1);
        Mockingbird.setReturnValue(linkedList2.add(new Integer(100)), false);
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        List result = jdbcBeanSession.loadJoinIds(obj, null);
        assertNotNull("result", result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testLoadJoinIdsWithAggressiveMocks2() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType3 = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType4 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField5);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj5, "field", dBField6);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        setPrivateField(dBField7, "type", dBType3);
        setPrivateField(dBField8, "type", dBType4);
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        LinkedList linkedList2 = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList2);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), dBField7);
        Mockingbird.setReturnValue(false, dBType3, "getFromResultSet", "(java.sql.ResultSet,int)java.lang.Object", new Integer(100), 1);
        Mockingbird.setReturnValue(linkedList2.add(new Integer(100)), false);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), dBField8);
        Mockingbird.setReturnValue(false, dBType4, "getFromResultSet", "(java.sql.ResultSet,int)java.lang.Object", new Integer(100), 1);
        Mockingbird.setReturnValue(linkedList2.add(new Integer(100)), false);
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        List result = jdbcBeanSession.loadJoinIds(obj, null);
        assertNotNull("result", result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testLoadList() throws Throwable {
        ArrayList result = (ArrayList) new MySQLBeanSession().loadList("1", 0);
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testLoadList1() throws Throwable {
        ArrayList result = (ArrayList) new JdbcBeanSession().loadList("", "testJdbcBeanSessionOrderBy", 0);
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testLoadListWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, jdbcBeanSession, "loadList", "(java.lang.Object,java.lang.String,int)java.util.List", null, 1);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        List result = jdbcBeanSession.loadList(null);
        assertNull("result", result);
        assertNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testLoadListWithAggressiveMocks1() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method = (Method) Mockingbird.getProxyObject(Method.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method2 = (Method) Mockingbird.getProxyObject(Method.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method3 = (Method) Mockingbird.getProxyObject(Method.class);
        StringBuilder stringBuilder = new StringBuilder();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType3 = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType4 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "name", "");
        JdbcBeanSession.DEBUG = false;
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "name", "");
        setPrivateField(obj2, "field", dBField6);
        setPrivateField(obj2, "value", null);
        setPrivateField(dBField6, "type", dBType);
        setPrivateField(obj3, "field", dBField7);
        setPrivateField(obj3, "value", null);
        setPrivateField(dBField7, "type", dBType2);
        setPrivateField(dBField8, "name", "");
        setPrivateField(dBField8, "type", dBType3);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "type", dBType4);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, jdbcBeanSession, "isSet", "(java.lang.Object,java.lang.Class)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method2, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, jdbcBeanSession, "isSet", "(java.lang.Object,java.lang.Class)boolean", Boolean.TRUE, 1);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj4);
        Mockingbird.setReturnValue(linkedList.add(obj4), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method3, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, jdbcBeanSession, "isSet", "(java.lang.Object,java.lang.Class)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, jdbcBeanSession, "handleLimit", "(java.lang.StringBuilder,java.lang.String,int)java.lang.StringBuilder", stringBuilder, 1);
        Mockingbird.setReturnValue(false, stringBuilder, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        LinkedList linkedList2 = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList2);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(false, linkedList2, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(false, linkedList2, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), dBField8);
        Mockingbird.setReturnValue(false, dBType3, "getFromResultSet", "(java.sql.ResultSet,int)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, dBType3, "getTypeClass", "()java.lang.Class", null, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "injectValue", "(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)void", null, 1);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), dBField9);
        Mockingbird.setReturnValue(false, dBType4, "getFromResultSet", "(java.sql.ResultSet,int)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, dBType4, "getTypeClass", "()java.lang.Class", null, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "injectValue", "(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)void", null, 1);
        Mockingbird.setReturnValue(iterator6.hasNext(), false);
        Mockingbird.setReturnValue(false, linkedList2, "add", "(java.lang.Object)boolean", boolean2, 1);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        List result = jdbcBeanSession.loadList(obj, 3);
        assertNotNull("result", result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testLoadWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(obj3, "field", dBField5);
        setPrivateField(obj3, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj4, "field", dBField6);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 2.802596928649634E-45);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        boolean result = jdbcBeanSession.load(obj);
        assertFalse("result", result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNull("jdbcBeanSession.loaded", jdbcBeanSession.loaded);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testLoadWithAggressiveMocks1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField5);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj5, "field", dBField6);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        boolean result = jdbcBeanSession.load(obj);
        assertFalse("result", result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNull("jdbcBeanSession.loaded", jdbcBeanSession.loaded);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testLoadWithAggressiveMocks2() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField5);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj5, "field", dBField6);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        boolean result = jdbcBeanSession.load(obj);
        assertFalse("result", result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNull("jdbcBeanSession.loaded", jdbcBeanSession.loaded);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testRemoveWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "type", dBType);
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "type", dBType2);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig.getFirstPK(), dBField);
        Mockingbird.setReturnValue(beanConfig2.getFirstPK(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 2.802596928649634E-45);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 0);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        boolean result = jdbcBeanSession.remove(obj, obj2);
        assertFalse("result", result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testRemoveWithAggressiveMocks1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        Object obj4 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "type", dBType);
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "type", dBType2);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig.getFirstPK(), dBField);
        Mockingbird.setReturnValue(beanConfig2.getFirstPK(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj4, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 0);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        boolean result = jdbcBeanSession.remove(obj, obj2);
        assertFalse("result", result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testRemoveWithAggressiveMocks2() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        Object obj4 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "type", dBType);
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "type", dBType2);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig.getFirstPK(), dBField);
        Mockingbird.setReturnValue(beanConfig2.getFirstPK(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj4, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        boolean result = jdbcBeanSession.remove(obj, obj2);
        assertTrue("result", result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testRemoveWithAggressiveMocks3() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        Object obj4 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "type", dBType);
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "type", dBType2);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig.getFirstPK(), dBField);
        Mockingbird.setReturnValue(beanConfig2.getFirstPK(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj4, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        boolean result = jdbcBeanSession.remove(obj, obj2);
        assertTrue("result", result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testSetConn() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcBeanSession jdbcBeanSession = new JdbcBeanSession(conn);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        jdbcBeanSession.setConn(conn);
        assertSame("jdbcBeanSession.conn", conn, jdbcBeanSession.conn);
    }
    
    public void testSetConnection() throws Throwable {
        JdbcBeanSession mySQLBeanSession = new MySQLBeanSession();
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        mySQLBeanSession.setConnection(conn);
        assertSame("(MySQLBeanSession) mySQLBeanSession.conn", conn, ((MySQLBeanSession) mySQLBeanSession).conn);
    }
    
    public void testUpdateWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method = (Method) Mockingbird.getProxyObject(Method.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method2 = (Method) Mockingbird.getProxyObject(Method.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        jdbcBeanSession.loaded = identityHashMap;
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "isPK", Boolean.FALSE);
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "isPK", Boolean.FALSE);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField3, "isPK", Boolean.TRUE);
        setPrivateField(dBField4, "isPK", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, identityHashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {obj}, null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", Mockingbird.getProxyObject(LinkedList.class));
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, jdbcBeanSession, "isSet", "(java.lang.Object,java.lang.Class)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method2, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, jdbcBeanSession, "isSet", "(java.lang.Object,java.lang.Class)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        int result = jdbcBeanSession.update(obj);
        assertEquals("result", 1, result);
        assertNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testUpdateWithAggressiveMocks1() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method = (Method) Mockingbird.getProxyObject(Method.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method2 = (Method) Mockingbird.getProxyObject(Method.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj9 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj10 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField13 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj11 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj12 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField14 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj13 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        jdbcBeanSession.loaded = identityHashMap;
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, identityHashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {obj}, map, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "isPK", Boolean.TRUE);
        setPrivateField(dBField2, "isPK", Boolean.TRUE);
        setPrivateField(dBField3, "isPK", Boolean.FALSE);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField4, "isPK", Boolean.FALSE);
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField7);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField7, "type", dBType);
        setPrivateField(obj5, "field", dBField8);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField8, "type", dBType2);
        setPrivateField(obj6, "field", dBField9);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(obj7, "field", dBField10);
        setPrivateField(dBField10, "isPK", Boolean.FALSE);
        setPrivateField(dBField10, "name", "");
        setPrivateField(obj8, "field", dBField11);
        setPrivateField(dBField11, "isPK", Boolean.TRUE);
        setPrivateField(obj9, "field", dBField12);
        setPrivateField(dBField12, "isPK", Boolean.TRUE);
        setPrivateField(obj10, "field", dBField13);
        setPrivateField(obj10, "value", null);
        setPrivateField(dBField13, "isPK", Boolean.FALSE);
        setPrivateField(dBField13, "name", "");
        setPrivateField(obj12, "field", dBField14);
        setPrivateField(obj12, "value", null);
        setPrivateField(dBField14, "isPK", Boolean.FALSE);
        setPrivateField(dBField14, "name", "");
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj14 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj14);
        Mockingbird.setReturnValue(linkedList.add(obj14), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method2, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj15 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj15);
        Mockingbird.setReturnValue(linkedList.add(obj15), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", obj2, 1);
        Object obj16 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj16);
        Mockingbird.setReturnValue(linkedList.add(obj16), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", obj3, 1);
        Object obj17 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj17);
        Mockingbird.setReturnValue(linkedList.add(obj17), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj6);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj7);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj8);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj9);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj10);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj11, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj12);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj13, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        int result = jdbcBeanSession.update(obj, false);
        assertEquals("result", 1, result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testUpdateWithAggressiveMocks2() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method = (Method) Mockingbird.getProxyObject(Method.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method2 = (Method) Mockingbird.getProxyObject(Method.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method3 = (Method) Mockingbird.getProxyObject(Method.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj5 = Mockingbird.getProxyObject(Object.class);
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method4 = (Method) Mockingbird.getProxyObject(Method.class);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj7 = Mockingbird.getProxyObject(Object.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj8 = Mockingbird.getProxyObject(Object.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj9 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj10 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj11 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj12 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj13 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj14 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField13 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj15 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField14 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj16 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField15 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj17 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj18 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField16 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj19 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        jdbcBeanSession.loaded = identityHashMap;
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, identityHashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {obj}, map, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "isPK", Boolean.FALSE);
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        JdbcBeanSession.DEBUG = true;
        setPrivateField(obj2, "value", null);
        setPrivateField(dBField2, "isPK", Boolean.FALSE);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(obj3, "value", null);
        setPrivateField(dBField3, "isPK", Boolean.TRUE);
        setPrivateField(dBField4, "isPK", Boolean.TRUE);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(obj4, "value", obj5);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(obj6, "value", obj7);
        setPrivateField(dBField7, "name", "");
        setPrivateField(dBField7, "dbName", "");
        setPrivateField(dBField8, "name", "");
        setPrivateField(dBField8, "dbName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj10, "field", dBField9);
        setPrivateField(obj10, "value", null);
        setPrivateField(dBField9, "type", dBType);
        setPrivateField(obj11, "field", dBField10);
        setPrivateField(obj11, "value", null);
        setPrivateField(dBField10, "type", dBType2);
        setPrivateField(obj12, "field", dBField11);
        setPrivateField(dBField11, "isPK", Boolean.FALSE);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj13, "field", dBField12);
        setPrivateField(dBField12, "isPK", Boolean.FALSE);
        setPrivateField(dBField12, "name", "");
        setPrivateField(obj14, "field", dBField13);
        setPrivateField(dBField13, "isPK", Boolean.TRUE);
        setPrivateField(obj15, "field", dBField14);
        setPrivateField(dBField14, "isPK", Boolean.TRUE);
        setPrivateField(obj16, "field", dBField15);
        setPrivateField(obj16, "value", null);
        setPrivateField(dBField15, "isPK", Boolean.FALSE);
        setPrivateField(dBField15, "name", "");
        setPrivateField(obj18, "field", dBField16);
        setPrivateField(obj18, "value", null);
        setPrivateField(dBField16, "isPK", Boolean.FALSE);
        setPrivateField(dBField16, "name", "");
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method2, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj3, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField5);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method3, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj4, 1);
        Object obj20 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj20);
        Mockingbird.setReturnValue(linkedList.add(obj20), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField6);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method4, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj6, 1);
        Object obj21 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj21);
        Mockingbird.setReturnValue(linkedList.add(obj21), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", obj8, 1);
        Object obj22 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj22);
        Mockingbird.setReturnValue(linkedList.add(obj22), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", obj9, 1);
        Object obj23 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj23);
        Mockingbird.setReturnValue(linkedList.add(obj23), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj10);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj11);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj12);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj13);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj14);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj15);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj16);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj17, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj18);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj19, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        int result = jdbcBeanSession.update(obj, true);
        assertEquals("result", 1, result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testUpdateWithAggressiveMocks3() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method = (Method) Mockingbird.getProxyObject(Method.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method2 = (Method) Mockingbird.getProxyObject(Method.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method3 = (Method) Mockingbird.getProxyObject(Method.class);
        Object obj4 = Mockingbird.getProxyObject(Object.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method4 = (Method) Mockingbird.getProxyObject(Method.class);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj7 = Mockingbird.getProxyObject(Object.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj8 = Mockingbird.getProxyObject(Object.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj9 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj10 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj11 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj12 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj13 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj14 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField13 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj15 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField14 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj16 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField15 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj17 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj18 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField16 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj19 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        jdbcBeanSession.loaded = identityHashMap;
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, identityHashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {obj}, map, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "isPK", Boolean.FALSE);
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        JdbcBeanSession.DEBUG = true;
        setPrivateField(obj2, "value", null);
        setPrivateField(dBField2, "isPK", Boolean.FALSE);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(obj3, "value", null);
        setPrivateField(dBField3, "isPK", Boolean.TRUE);
        setPrivateField(dBField4, "isPK", Boolean.TRUE);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(obj6, "value", obj7);
        setPrivateField(dBField7, "name", "");
        setPrivateField(dBField7, "dbName", "");
        setPrivateField(dBField8, "name", "");
        setPrivateField(dBField8, "dbName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj10, "field", dBField9);
        setPrivateField(obj10, "value", null);
        setPrivateField(dBField9, "type", dBType);
        setPrivateField(obj11, "field", dBField10);
        setPrivateField(obj11, "value", null);
        setPrivateField(dBField10, "type", dBType2);
        setPrivateField(obj12, "field", dBField11);
        setPrivateField(dBField11, "isPK", Boolean.FALSE);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj13, "field", dBField12);
        setPrivateField(dBField12, "isPK", Boolean.FALSE);
        setPrivateField(dBField12, "name", "");
        setPrivateField(obj14, "field", dBField13);
        setPrivateField(dBField13, "isPK", Boolean.TRUE);
        setPrivateField(obj15, "field", dBField14);
        setPrivateField(dBField14, "isPK", Boolean.TRUE);
        setPrivateField(obj16, "field", dBField15);
        setPrivateField(obj16, "value", null);
        setPrivateField(dBField15, "isPK", Boolean.FALSE);
        setPrivateField(dBField15, "name", "");
        setPrivateField(obj18, "field", dBField16);
        setPrivateField(obj18, "value", null);
        setPrivateField(dBField16, "isPK", Boolean.FALSE);
        setPrivateField(dBField16, "name", "");
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method2, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj3, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField5);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method3, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj4, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj5, 1);
        Object obj20 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj20);
        Mockingbird.setReturnValue(linkedList.add(obj20), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField6);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method4, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj6, 1);
        Object obj21 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj21);
        Mockingbird.setReturnValue(linkedList.add(obj21), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", obj8, 1);
        Object obj22 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj22);
        Mockingbird.setReturnValue(linkedList.add(obj22), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", obj9, 1);
        Object obj23 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj23);
        Mockingbird.setReturnValue(linkedList.add(obj23), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj10);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj11);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj12);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj13);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj14);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj15);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj16);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj17, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj18);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj19, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        int result = jdbcBeanSession.update(obj, true);
        assertEquals("result", 1, result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testUpdateWithAggressiveMocks4() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method = (Method) Mockingbird.getProxyObject(Method.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method2 = (Method) Mockingbird.getProxyObject(Method.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method3 = (Method) Mockingbird.getProxyObject(Method.class);
        Object obj4 = Mockingbird.getProxyObject(Object.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj6 = Mockingbird.getProxyObject(Object.class);
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method4 = (Method) Mockingbird.getProxyObject(Method.class);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj8 = Mockingbird.getProxyObject(Object.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj9 = Mockingbird.getProxyObject(Object.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj10 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj11 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj12 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj13 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj14 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj15 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField13 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj16 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField14 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj17 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField15 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj18 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj19 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField16 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj20 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        jdbcBeanSession.loaded = identityHashMap;
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, identityHashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {obj}, map, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "isPK", Boolean.FALSE);
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        JdbcBeanSession.DEBUG = true;
        setPrivateField(obj2, "value", null);
        setPrivateField(dBField2, "isPK", Boolean.FALSE);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(obj3, "value", null);
        setPrivateField(dBField3, "isPK", Boolean.TRUE);
        setPrivateField(dBField4, "isPK", Boolean.TRUE);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(obj5, "value", obj6);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(obj7, "value", obj8);
        setPrivateField(dBField7, "name", "");
        setPrivateField(dBField7, "dbName", "");
        setPrivateField(dBField8, "name", "");
        setPrivateField(dBField8, "dbName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj11, "field", dBField9);
        setPrivateField(obj11, "value", null);
        setPrivateField(dBField9, "type", dBType);
        setPrivateField(obj12, "field", dBField10);
        setPrivateField(obj12, "value", null);
        setPrivateField(dBField10, "type", dBType2);
        setPrivateField(obj13, "field", dBField11);
        setPrivateField(dBField11, "isPK", Boolean.FALSE);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj14, "field", dBField12);
        setPrivateField(dBField12, "isPK", Boolean.FALSE);
        setPrivateField(dBField12, "name", "");
        setPrivateField(obj15, "field", dBField13);
        setPrivateField(dBField13, "isPK", Boolean.TRUE);
        setPrivateField(obj16, "field", dBField14);
        setPrivateField(dBField14, "isPK", Boolean.TRUE);
        setPrivateField(obj17, "field", dBField15);
        setPrivateField(obj17, "value", null);
        setPrivateField(dBField15, "isPK", Boolean.FALSE);
        setPrivateField(dBField15, "name", "");
        setPrivateField(obj19, "field", dBField16);
        setPrivateField(obj19, "value", null);
        setPrivateField(dBField16, "isPK", Boolean.FALSE);
        setPrivateField(dBField16, "name", "");
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method2, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj3, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField5);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method3, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj4, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj5, 1);
        Mockingbird.setReturnValue(false, obj4, "equals", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Object obj21 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj21);
        Mockingbird.setReturnValue(linkedList.add(obj21), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField6);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method4, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj7, 1);
        Object obj22 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj22);
        Mockingbird.setReturnValue(linkedList.add(obj22), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", obj9, 1);
        Object obj23 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj23);
        Mockingbird.setReturnValue(linkedList.add(obj23), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", obj10, 1);
        Object obj24 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj24);
        Mockingbird.setReturnValue(linkedList.add(obj24), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj11);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj12);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj13);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj14);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj15);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj16);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj17);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj18, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj19);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj20, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        int result = jdbcBeanSession.update(obj, true);
        assertEquals("result", 1, result);
        assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
        assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
    }
    
    public void testAddThrowsBeanExceptionWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.add(obj, obj2);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testAddThrowsBeanExceptionWithAggressiveMocks1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.add(obj, obj2);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testAddThrowsBeanExceptionWithAggressiveMocks2() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.add(obj, obj2);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testAddThrowsBeanExceptionWithAggressiveMocks3() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), false);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.add(obj, obj2);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testAddThrowsBeanExceptionWithAggressiveMocks4() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), false);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.add(obj, obj2);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testAddThrowsBeanExceptionWithAggressiveMocks5() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.getNumberOfPKs(), 2);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.add(obj, obj2);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testAddThrowsBeanExceptionWithAggressiveMocks6() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 2);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.add(obj, obj2);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testAddThrowsNullPointerException() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcBeanSession jdbcBeanSession = new JdbcBeanSession(conn);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.add("", " ");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
            assertSame("jdbcBeanSession.conn", conn, jdbcBeanSession.conn);
        }
    }
    
    public void testAddThrowsThrowableWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "type", dBType);
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "type", dBType2);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig.getFirstPK(), dBField);
        Mockingbird.setReturnValue(beanConfig2.getFirstPK(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 2.802596928649634E-45);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setException(resultSet.next(), sQLException);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.add(obj, obj2);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testAddThrowsThrowableWithAggressiveMocks1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        Object obj4 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "type", dBType);
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "type", dBType2);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig.getFirstPK(), dBField);
        Mockingbird.setReturnValue(beanConfig2.getFirstPK(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj4, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setException(resultSet.next(), sQLException);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.add(obj, obj2);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testAddThrowsThrowableWithAggressiveMocks2() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        Object obj4 = Mockingbird.getProxyObject(Object.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField2, "name", "");
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig.getFirstPK(), dBField);
        Mockingbird.setReturnValue(beanConfig2.getFirstPK(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj4, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.add(obj, obj2);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testBeginTransactionThrowsBeanException() throws Throwable {
        try {
            new JdbcBeanSession().beginTransaction();
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertEquals("ex.getMessage()", "conn == null when creating a transaction!", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("ex.getCause()", ex.getCause());
        }
    }
    
    public void testBuildSelectThrowsNullPointerException() throws Throwable {
        JdbcBeanSession mySQLBeanSession = new MySQLBeanSession();
        try {
            mySQLBeanSession.buildSelect(Integer.class, "testJdbcBeanSessionTablePrefix");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("(MySQLBeanSession) mySQLBeanSession.appManager", ((MySQLBeanSession) mySQLBeanSession).appManager);
        }
    }
    
    public void testBuildSelectThrowsNullPointerException1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = new JdbcBeanSession();
        try {
            jdbcBeanSession.buildSelect(Integer.class);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testCheckPKThrowsBeanException() throws Throwable {
        try {
            callPrivateMethod("org.mentawai.bean.jdbc.JdbcBeanSession", "checkPK", new Class[] {Object.class, DBField.class}, null, new Object[] {new Double(-1.0E-5), new DBField("testJdbcBeanSessionName", new DateType())});
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertEquals("ex.getMessage()", "Number pk is missing: DBField: testJdbcBeanSessionName type=DateType dbName=testJdbcBeanSessionName", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("ex.getCause()", ex.getCause());
        }
    }
    
    public void testCheckPKThrowsBeanException1() throws Throwable {
        try {
            callPrivateMethod("org.mentawai.bean.jdbc.JdbcBeanSession", "checkPK", new Class[] {Object.class, DBField.class}, null, new Object[] {null, new DBField("testJdbcBeanSessionName", DBTypes.LONG, true)});
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertEquals("ex.getMessage()", "pk is missing: DBField: testJdbcBeanSessionName type=LongType dbName=testJdbcBeanSessionName", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("ex.getCause()", ex.getCause());
        }
    }
    
    public void testCountJoinThrowsBeanExceptionWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.countJoin(obj, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testCountJoinThrowsBeanExceptionWithAggressiveMocks1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), null);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.countJoin(obj, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testCountJoinThrowsBeanExceptionWithAggressiveMocks2() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.countJoin(obj, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testCountJoinThrowsBeanExceptionWithAggressiveMocks3() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), false);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.countJoin(obj, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testCountJoinThrowsBeanExceptionWithAggressiveMocks4() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), false);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.countJoin(obj, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testCountJoinThrowsBeanExceptionWithAggressiveMocks5() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 2);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.countJoin(obj, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testCountJoinThrowsBeanExceptionWithAggressiveMocks6() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj3);
        Mockingbird.setReturnValue(linkedList.add(obj3), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 2.802596928649634E-45);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj4);
        Mockingbird.setReturnValue(linkedList.add(obj4), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.countJoin(obj, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testCountJoinThrowsNullPointerException() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcBeanSession jdbcBeanSession = new JdbcBeanSession(conn);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.countJoin("tr", Object.class);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
            assertSame("jdbcBeanSession.conn", conn, jdbcBeanSession.conn);
        }
    }
    
    public void testCountJoinThrowsThrowableWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException3 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj3, "field", dBField5);
        setPrivateField(obj3, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj4, "field", dBField6);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 2.802596928649634E-45);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setException(resultSet.getInt(1), sQLException);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException3);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.countJoin(obj, null);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testCountJoinThrowsThrowableWithAggressiveMocks1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField5);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj5, "field", dBField6);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), false);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.countJoin(obj, null);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("jdbcBeanSession.getNow()", jdbcBeanSession.getNow());
        }
    }
    
    public void testCountJoinThrowsThrowableWithAggressiveMocks2() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField5);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj5, "field", dBField6);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setException(resultSet.getInt(1), sQLException);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.countJoin(obj, null);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testCountJoinThrowsThrowableWithAggressiveMocks3() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType3 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField5);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj5, "field", dBField6);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        setPrivateField(obj6, "field", dBField7);
        setPrivateField(obj6, "value", null);
        setPrivateField(dBField7, "type", dBType3);
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj6);
        Mockingbird.setException(false, dBType3, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", sQLException, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.countJoin(obj, null);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testCountJoinThrowsThrowableWithAggressiveMocks4() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField5);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj5, "field", dBField6);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setException(resultSet.getInt(1), sQLException);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.countJoin(obj, null);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testCountJoinThrowsThrowableWithAggressiveMocks5() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj4);
        Mockingbird.setReturnValue(linkedList.add(obj4), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setException(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", sQLException, 1);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.countJoin(obj, null);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testDeleteThrowsBeanExceptionWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.hasPK(), false);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.delete(obj);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testDeleteThrowsBeanExceptionWithAggressiveMocks1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj3);
        Mockingbird.setReturnValue(linkedList.add(obj3), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 2.802596928649634E-45);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj4);
        Mockingbird.setReturnValue(linkedList.add(obj4), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.delete(obj);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testDeleteThrowsBeanExceptionWithAggressiveMocks2() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj4);
        Mockingbird.setReturnValue(linkedList.add(obj4), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 0.0);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.delete(obj);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testDeleteThrowsBeanExceptionWithAggressiveMocks3() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj3);
        Mockingbird.setReturnValue(linkedList.add(obj3), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 2.802596928649634E-45);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj4);
        Mockingbird.setReturnValue(linkedList.add(obj4), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.delete(obj);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testDeleteThrowsNullPointerException() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcBeanSession jdbcBeanSession = new JdbcBeanSession(conn);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.delete("");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
            assertSame("jdbcBeanSession.conn", conn, jdbcBeanSession.conn);
            assertEquals("jdbcBeanSession.loaded.size()", 0, jdbcBeanSession.loaded.size());
        }
    }
    
    public void testDeleteThrowsThrowableWithAggressiveMocks() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType3 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj3, "field", dBField3);
        setPrivateField(obj3, "value", null);
        setPrivateField(dBField3, "type", dBType);
        setPrivateField(obj4, "field", dBField4);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField4, "type", dBType2);
        setPrivateField(obj5, "field", dBField5);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField5, "type", dBType3);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 2.802596928649634E-45);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj3);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj4);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj5);
        Mockingbird.setException(false, dBType3, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", sQLException, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.delete(obj);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNull("jdbcBeanSession.loaded", jdbcBeanSession.loaded);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testDeleteThrowsThrowableWithAggressiveMocks1() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField3);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField3, "type", dBType);
        setPrivateField(obj5, "field", dBField4);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField4, "type", dBType2);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.delete(obj);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("jdbcBeanSession.getNow()", jdbcBeanSession.getNow());
        }
    }
    
    public void testDeleteThrowsThrowableWithAggressiveMocks2() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType3 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField3);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField3, "type", dBType);
        setPrivateField(obj5, "field", dBField4);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField4, "type", dBType2);
        setPrivateField(obj6, "field", dBField5);
        setPrivateField(obj6, "value", null);
        setPrivateField(dBField5, "type", dBType3);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj6);
        Mockingbird.setException(false, dBType3, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", sQLException, 1);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.delete(obj);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNull("jdbcBeanSession.loaded", jdbcBeanSession.loaded);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testDeleteThrowsThrowableWithAggressiveMocks3() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj4);
        Mockingbird.setReturnValue(linkedList.add(obj4), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setException(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", sQLException, 1);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.delete(obj);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNull("jdbcBeanSession.loaded", jdbcBeanSession.loaded);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testGetValueFromBeanThrowsBeanException() throws Throwable {
        try {
            JdbcBeanSession.getValueFromBean(new Integer(31), "testJdbcBeanSessionFieldName");
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertEquals("ex.getMessage()", "Cannot find method to get field from bean: testJdbcBeanSessionFieldName", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("ex.getCause()", ex.getCause());
        }
    }
    
    public void testGetValueFromBeanThrowsNullPointerException() throws Throwable {
        try {
            JdbcBeanSession.getValueFromBean(null, "testJdbcBeanSessionFieldName", null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
        }
    }
    
    public void testGetValueFromBeanThrowsNullPointerException1() throws Throwable {
        try {
            JdbcBeanSession.getValueFromBean(null, "testJdbcBeanSessionFieldName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
        }
    }
    
    public void testGetValueFromBeanThrowsStringIndexOutOfBoundsException() throws Throwable {
        try {
            JdbcBeanSession.getValueFromBean("", "");
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "String index out of range: 1", ex.getMessage());
            assertThrownBy(String.class, ex);
        }
    }
    
    public void testInjectValueThrowsBeanException() throws Throwable {
        try {
            JdbcBeanSession.injectValue("", "testJdbcBeanSessionFieldName", null, Object.class);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertEquals("ex.getMessage()", "Cannot find field or method to inject:  / testJdbcBeanSessionFieldName", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("ex.getCause()", ex.getCause());
        }
    }
    
    public void testInjectValueThrowsBeanException1() throws Throwable {
        try {
            JdbcBeanSession.injectValue("testString", "testJdbcBeanSessionFieldName", Boolean.TRUE, Object.class);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertEquals("ex.getMessage()", "Cannot find field or method to inject: testString / testJdbcBeanSessionFieldName", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("ex.getCause()", ex.getCause());
        }
    }
    
    public void testInjectValueThrowsBeanException2() throws Throwable {
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        Field field = (Field) Mockingbird.getProxyObject(Field.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToInject", "(java.lang.Class,java.lang.String,java.lang.Class)java.lang.reflect.Method", null, 1);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findFieldToInject", "(java.lang.Class,java.lang.String,java.lang.Class)java.lang.reflect.Field", field, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Throwable.class), "printStackTrace", "()void", null, 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.Throwable)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            JdbcBeanSession.injectValue(obj, "", obj2, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testInjectValueThrowsBeanException3() throws Throwable {
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        Method method = (Method) Mockingbird.getProxyObject(Method.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToInject", "(java.lang.Class,java.lang.String,java.lang.Class)java.lang.reflect.Method", method, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Throwable.class), "printStackTrace", "()void", null, 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.Throwable)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            JdbcBeanSession.injectValue(obj, "", obj2, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testInjectValueThrowsNullPointerException() throws Throwable {
        Integer bean = new Integer(5);
        try {
            JdbcBeanSession.injectValue(bean, null, bean, Object.class);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(InjectionUtils.class, ex);
        }
    }
    
    public void testInjectValueThrowsNullPointerException1() throws Throwable {
        try {
            JdbcBeanSession.injectValue(null, "testJdbcBeanSessionFieldName", "", Object.class);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
        }
    }
    
    public void testInjectValueThrowsStringIndexOutOfBoundsException() throws Throwable {
        Object bean = new Object();
        try {
            JdbcBeanSession.injectValue(bean, "", bean, Integer.class);
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "String index out of range: 1", ex.getMessage());
            assertThrownBy(String.class, ex);
        }
    }
    
    public void testInsertThrowsBeanExceptionWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.insert(obj);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testInsertThrowsBeanExceptionWithAggressiveMocks1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType = new DateType();
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        TimestampType timestampType = new TimestampType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", null);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", autoIncrementType2);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.FALSE);
        setPrivateField(dBField8, "name", "");
        setPrivateField(dBField8, "dbName", "");
        setPrivateField(dBField8, "type", dateType);
        Mockingbird.enterNormalMode();
        dBField8.setDefaultToNow(true);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", timestampType);
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.TRUE);
        setPrivateField(obj2, "isSysdate", Boolean.FALSE);
        setPrivateField(obj3, "isSysdate", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj4);
        Mockingbird.setReturnValue(linkedList.add(obj4), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.insert(obj);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testInsertThrowsNullPointerException() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcBeanSession jdbcBeanSession = new JdbcBeanSession(conn);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.insert("");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
            assertSame("jdbcBeanSession.conn", conn, jdbcBeanSession.conn);
            assertEquals("jdbcBeanSession.loaded.size()", 0, jdbcBeanSession.loaded.size());
        }
    }
    
    public void testInsertThrowsThrowableWithAggressiveMocks() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType = new DateType();
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        TimestampType timestampType = new TimestampType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField13 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType3 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", null);
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", autoIncrementType2);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.FALSE);
        setPrivateField(dBField8, "name", "");
        setPrivateField(dBField8, "dbName", "");
        setPrivateField(dBField8, "type", dateType);
        Mockingbird.enterNormalMode();
        dBField8.setDefaultToNow(true);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", timestampType);
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.TRUE);
        setPrivateField(obj2, "isSysdate", Boolean.FALSE);
        setPrivateField(obj3, "isSysdate", Boolean.FALSE);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "isSysdate", Boolean.FALSE);
        setPrivateField(obj4, "value", null);
        setPrivateField(obj4, "field", dBField11);
        setPrivateField(dBField11, "type", dBType);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj5, "isSysdate", Boolean.FALSE);
        setPrivateField(obj5, "value", null);
        setPrivateField(obj5, "field", dBField12);
        setPrivateField(dBField12, "type", dBType2);
        setPrivateField(dBField12, "name", "");
        setPrivateField(obj6, "isSysdate", Boolean.FALSE);
        setPrivateField(obj6, "field", dBField13);
        setPrivateField(obj6, "value", null);
        setPrivateField(dBField13, "type", dBType3);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj9 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj9);
        Mockingbird.setReturnValue(linkedList.add(obj9), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj10 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj10);
        Mockingbird.setReturnValue(linkedList.add(obj10), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj6);
        Mockingbird.setException(false, dBType3, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", sQLException, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.insert(obj);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNull("jdbcBeanSession.loaded", jdbcBeanSession.loaded);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testInsertThrowsThrowableWithAggressiveMocks1() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType = new DateType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType2 = new DateType();
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", autoIncrementType2);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", null);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.TRUE);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", dateType);
        Mockingbird.enterNormalMode();
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.FALSE);
        setPrivateField(dBField10, "name", "");
        setPrivateField(dBField10, "dbName", "");
        setPrivateField(dBField10, "type", dateType2);
        dBField10.setDefaultToNow(true);
        setPrivateField(obj2, "isSysdate", Boolean.FALSE);
        setPrivateField(obj3, "isSysdate", Boolean.FALSE);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "isSysdate", Boolean.FALSE);
        setPrivateField(obj4, "value", null);
        setPrivateField(obj4, "field", dBField11);
        setPrivateField(dBField11, "type", dBType);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj5, "isSysdate", Boolean.FALSE);
        setPrivateField(obj5, "value", null);
        setPrivateField(obj5, "field", dBField12);
        setPrivateField(dBField12, "type", dBType2);
        setPrivateField(dBField12, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj9 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj9);
        Mockingbird.setReturnValue(linkedList.add(obj9), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.insert(obj);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("jdbcBeanSession.getNow()", jdbcBeanSession.getNow());
        }
    }
    
    public void testInsertThrowsThrowableWithAggressiveMocks2() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType = new DateType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType2 = new DateType();
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", autoIncrementType2);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", null);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.TRUE);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", dateType);
        Mockingbird.enterNormalMode();
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.FALSE);
        setPrivateField(dBField10, "name", "");
        setPrivateField(dBField10, "dbName", "");
        setPrivateField(dBField10, "type", dateType2);
        dBField10.setDefaultToNow(true);
        setPrivateField(obj2, "isSysdate", Boolean.FALSE);
        setPrivateField(obj3, "isSysdate", Boolean.FALSE);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "isSysdate", Boolean.FALSE);
        setPrivateField(obj4, "value", null);
        setPrivateField(obj4, "field", dBField11);
        setPrivateField(dBField11, "type", dBType);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj5, "isSysdate", Boolean.FALSE);
        setPrivateField(obj5, "value", null);
        setPrivateField(obj5, "field", dBField12);
        setPrivateField(dBField12, "type", dBType2);
        setPrivateField(dBField12, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj9 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj9);
        Mockingbird.setReturnValue(linkedList.add(obj9), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 0);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.insert(obj);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("jdbcBeanSession.getNow()", jdbcBeanSession.getNow());
        }
    }
    
    public void testInsertThrowsThrowableWithAggressiveMocks3() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType = new DateType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType2 = new DateType();
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField13 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType3 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", autoIncrementType2);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", null);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.TRUE);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", dateType);
        Mockingbird.enterNormalMode();
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.FALSE);
        setPrivateField(dBField10, "name", "");
        setPrivateField(dBField10, "dbName", "");
        setPrivateField(dBField10, "type", dateType2);
        dBField10.setDefaultToNow(true);
        setPrivateField(obj2, "isSysdate", Boolean.FALSE);
        setPrivateField(obj3, "isSysdate", Boolean.FALSE);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "isSysdate", Boolean.FALSE);
        setPrivateField(obj4, "value", null);
        setPrivateField(obj4, "field", dBField11);
        setPrivateField(dBField11, "type", dBType);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj5, "isSysdate", Boolean.FALSE);
        setPrivateField(obj5, "value", null);
        setPrivateField(obj5, "field", dBField12);
        setPrivateField(dBField12, "type", dBType2);
        setPrivateField(dBField12, "name", "");
        setPrivateField(obj6, "isSysdate", Boolean.FALSE);
        setPrivateField(obj6, "field", dBField13);
        setPrivateField(obj6, "value", null);
        setPrivateField(dBField13, "type", dBType3);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj9 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj9);
        Mockingbird.setReturnValue(linkedList.add(obj9), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj10 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj10);
        Mockingbird.setReturnValue(linkedList.add(obj10), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj6);
        Mockingbird.setException(false, dBType3, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", sQLException, 1);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.insert(obj);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNull("jdbcBeanSession.loaded", jdbcBeanSession.loaded);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testInsertThrowsThrowableWithAggressiveMocks4() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType = new DateType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType2 = new DateType();
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", autoIncrementType2);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", null);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.TRUE);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", dateType);
        Mockingbird.enterNormalMode();
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.FALSE);
        setPrivateField(dBField10, "name", "");
        setPrivateField(dBField10, "dbName", "");
        setPrivateField(dBField10, "type", dateType2);
        dBField10.setDefaultToNow(true);
        setPrivateField(obj2, "isSysdate", Boolean.FALSE);
        setPrivateField(obj3, "isSysdate", Boolean.FALSE);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj4);
        Mockingbird.setReturnValue(linkedList.add(obj4), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setException(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", sQLException, 1);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.insert(obj);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNull("jdbcBeanSession.loaded", jdbcBeanSession.loaded);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testIsSetThrowsNullPointerException() throws Throwable {
        JdbcBeanSession mySQLBeanSession = new MySQLBeanSession();
        try {
            mySQLBeanSession.isSet("", null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
        }
    }
    
    public void testLoadJoinIdsThrowsBeanExceptionWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadJoinIds(obj, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testLoadJoinIdsThrowsBeanExceptionWithAggressiveMocks1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), null);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadJoinIds(obj, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testLoadJoinIdsThrowsBeanExceptionWithAggressiveMocks2() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadJoinIds(obj, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testLoadJoinIdsThrowsBeanExceptionWithAggressiveMocks3() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), false);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadJoinIds(obj, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testLoadJoinIdsThrowsBeanExceptionWithAggressiveMocks4() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), false);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadJoinIds(obj, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testLoadJoinIdsThrowsBeanExceptionWithAggressiveMocks5() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 2);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadJoinIds(obj, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testLoadJoinIdsThrowsBeanExceptionWithAggressiveMocks6() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj3);
        Mockingbird.setReturnValue(linkedList.add(obj3), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 2.802596928649634E-45);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj4);
        Mockingbird.setReturnValue(linkedList.add(obj4), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadJoinIds(obj, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testLoadJoinIdsThrowsNullPointerException() throws Throwable {
        JdbcBeanSession mySQLBeanSession = new MySQLBeanSession();
        try {
            mySQLBeanSession.loadJoinIds("", Integer.class);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("(MySQLBeanSession) mySQLBeanSession.appManager", ((MySQLBeanSession) mySQLBeanSession).appManager);
            assertNull("(MySQLBeanSession) mySQLBeanSession.conn", ((MySQLBeanSession) mySQLBeanSession).conn);
        }
    }
    
    public void testLoadJoinIdsThrowsThrowableWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType3 = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType4 = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType5 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException3 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj3, "field", dBField5);
        setPrivateField(obj3, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj4, "field", dBField6);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        setPrivateField(dBField7, "type", dBType3);
        setPrivateField(dBField8, "type", dBType4);
        setPrivateField(dBField9, "type", dBType5);
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 2.802596928649634E-45);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        LinkedList linkedList2 = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList2);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), dBField7);
        Mockingbird.setReturnValue(false, dBType3, "getFromResultSet", "(java.sql.ResultSet,int)java.lang.Object", new Integer(100), 1);
        Mockingbird.setReturnValue(linkedList2.add(new Integer(100)), false);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), dBField8);
        Mockingbird.setReturnValue(false, dBType4, "getFromResultSet", "(java.sql.ResultSet,int)java.lang.Object", new Integer(100), 1);
        Mockingbird.setReturnValue(linkedList2.add(new Integer(100)), false);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), dBField9);
        Mockingbird.setException(false, dBType5, "getFromResultSet", "(java.sql.ResultSet,int)java.lang.Object", sQLException, 1);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException3);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadJoinIds(obj, null);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testLoadJoinIdsThrowsThrowableWithAggressiveMocks1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType3 = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType4 = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType5 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField5);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj5, "field", dBField6);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        setPrivateField(dBField7, "type", dBType3);
        setPrivateField(dBField8, "type", dBType4);
        setPrivateField(dBField9, "type", dBType5);
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        LinkedList linkedList2 = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList2);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), dBField7);
        Mockingbird.setReturnValue(false, dBType3, "getFromResultSet", "(java.sql.ResultSet,int)java.lang.Object", new Integer(100), 1);
        Mockingbird.setReturnValue(linkedList2.add(new Integer(100)), false);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), dBField8);
        Mockingbird.setReturnValue(false, dBType4, "getFromResultSet", "(java.sql.ResultSet,int)java.lang.Object", new Integer(100), 1);
        Mockingbird.setReturnValue(linkedList2.add(new Integer(100)), false);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), dBField9);
        Mockingbird.setReturnValue(false, dBType5, "getFromResultSet", "(java.sql.ResultSet,int)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadJoinIds(obj, null);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("jdbcBeanSession.getNow()", jdbcBeanSession.getNow());
        }
    }
    
    public void testLoadJoinIdsThrowsThrowableWithAggressiveMocks2() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType3 = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType4 = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType5 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField5);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj5, "field", dBField6);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        setPrivateField(dBField7, "type", dBType3);
        setPrivateField(dBField8, "type", dBType4);
        setPrivateField(dBField9, "type", dBType5);
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        LinkedList linkedList2 = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList2);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), dBField7);
        Mockingbird.setReturnValue(false, dBType3, "getFromResultSet", "(java.sql.ResultSet,int)java.lang.Object", new Integer(100), 1);
        Mockingbird.setReturnValue(linkedList2.add(new Integer(100)), false);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), dBField8);
        Mockingbird.setReturnValue(false, dBType4, "getFromResultSet", "(java.sql.ResultSet,int)java.lang.Object", new Integer(100), 1);
        Mockingbird.setReturnValue(linkedList2.add(new Integer(100)), false);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), dBField9);
        Mockingbird.setException(false, dBType5, "getFromResultSet", "(java.sql.ResultSet,int)java.lang.Object", sQLException, 1);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadJoinIds(obj, null);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testLoadJoinIdsThrowsThrowableWithAggressiveMocks3() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType3 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField5);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj5, "field", dBField6);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        setPrivateField(obj6, "field", dBField7);
        setPrivateField(obj6, "value", null);
        setPrivateField(dBField7, "type", dBType3);
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj6);
        Mockingbird.setException(false, dBType3, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", sQLException, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadJoinIds(obj, null);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testLoadJoinIdsThrowsThrowableWithAggressiveMocks4() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType3 = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType4 = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType5 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField5);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj5, "field", dBField6);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        setPrivateField(dBField7, "type", dBType3);
        setPrivateField(dBField8, "type", dBType4);
        setPrivateField(dBField9, "type", dBType5);
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        LinkedList linkedList2 = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList2);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), dBField7);
        Mockingbird.setReturnValue(false, dBType3, "getFromResultSet", "(java.sql.ResultSet,int)java.lang.Object", new Integer(100), 1);
        Mockingbird.setReturnValue(linkedList2.add(new Integer(100)), false);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), dBField8);
        Mockingbird.setReturnValue(false, dBType4, "getFromResultSet", "(java.sql.ResultSet,int)java.lang.Object", new Integer(100), 1);
        Mockingbird.setReturnValue(linkedList2.add(new Integer(100)), false);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), dBField9);
        Mockingbird.setException(false, dBType5, "getFromResultSet", "(java.sql.ResultSet,int)java.lang.Object", sQLException, 1);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadJoinIds(obj, null);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testLoadJoinIdsThrowsThrowableWithAggressiveMocks5() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj4);
        Mockingbird.setReturnValue(linkedList.add(obj4), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setException(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", sQLException, 1);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadJoinIds(obj, null);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testLoadJoinThrowsBeanExceptionWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadJoin(obj, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testLoadJoinThrowsBeanExceptionWithAggressiveMocks1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), null);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadJoin(obj, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testLoadJoinThrowsBeanExceptionWithAggressiveMocks2() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(beanConfig2, "tableName", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "dbName", "");
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig2.fields(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), false);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadJoin(obj, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testLoadJoinThrowsBeanExceptionWithAggressiveMocks3() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(beanConfig2, "tableName", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "dbName", "");
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig2.fields(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), false);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadJoin(obj, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testLoadJoinThrowsBeanExceptionWithAggressiveMocks4() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(beanConfig2, "tableName", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "foreignName", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig2.fields(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj3);
        Mockingbird.setReturnValue(linkedList.add(obj3), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 2.802596928649634E-45);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj4);
        Mockingbird.setReturnValue(linkedList.add(obj4), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), dBField5);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), dBField6);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadJoin(obj, null);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testLoadJoinThrowsNullPointerException() throws Throwable {
        JdbcBeanSession mySQLBeanSession = new MySQLBeanSession();
        try {
            mySQLBeanSession.loadJoin("", Object.class);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("(MySQLBeanSession) mySQLBeanSession.appManager", ((MySQLBeanSession) mySQLBeanSession).appManager);
            assertNull("(MySQLBeanSession) mySQLBeanSession.conn", ((MySQLBeanSession) mySQLBeanSession).conn);
            assertEquals("(MySQLBeanSession) mySQLBeanSession.loaded.size()", 0, ((MySQLBeanSession) mySQLBeanSession).loaded.size());
        }
    }
    
    public void testLoadJoinThrowsThrowableWithAggressiveMocks2() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType3 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(beanConfig2, "tableName", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "foreignName", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField7);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField7, "type", dBType);
        setPrivateField(obj5, "field", dBField8);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField8, "type", dBType2);
        setPrivateField(obj6, "field", dBField9);
        setPrivateField(obj6, "value", null);
        setPrivateField(dBField9, "type", dBType3);
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig2.fields(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), dBField5);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), dBField6);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj6);
        Mockingbird.setException(false, dBType3, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", sQLException, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadJoin(obj, null);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNull("jdbcBeanSession.loaded", jdbcBeanSession.loaded);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testLoadJoinThrowsThrowableWithAggressiveMocks4() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(beanConfig2, "tableName", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "foreignName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "foreignName", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "foreignName", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "foreignName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.setReturnValue(beanConfig.getJoinConfig(null), joinConfig);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(beanConfig2.fields(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj4);
        Mockingbird.setReturnValue(linkedList.add(obj4), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig2.pks(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), dBField5);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), dBField6);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setException(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", sQLException, 1);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadJoin(obj, null);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNull("jdbcBeanSession.loaded", jdbcBeanSession.loaded);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testLoadListThrowsBeanExceptionWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadList(obj, "", 1);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testLoadListThrowsNullPointerException() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcBeanSession jdbcBeanSession = new JdbcBeanSession(conn);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadList("hWbk8K\n-|h//}r", "testJdbcBeanSessionOrderBy", 1);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
            assertSame("jdbcBeanSession.conn", conn, jdbcBeanSession.conn);
        }
    }
    
    public void testLoadListThrowsNullPointerException1() throws Throwable {
        JdbcBeanSession mySQLBeanSession = new MySQLBeanSession();
        try {
            mySQLBeanSession.loadList("testString", "testJdbcBeanSessionOrderBy", -1);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("(MySQLBeanSession) mySQLBeanSession.appManager", ((MySQLBeanSession) mySQLBeanSession).appManager);
            assertNull("(MySQLBeanSession) mySQLBeanSession.conn", ((MySQLBeanSession) mySQLBeanSession).conn);
        }
    }
    
    public void testLoadListThrowsNullPointerException2() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcBeanSession jdbcBeanSession = new JdbcBeanSession(conn);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadList("J", "testJdbcBeanSessionOrderBy");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
            assertSame("jdbcBeanSession.conn", conn, jdbcBeanSession.conn);
        }
    }
    
    public void testLoadListThrowsThrowableWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method = (Method) Mockingbird.getProxyObject(Method.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method2 = (Method) Mockingbird.getProxyObject(Method.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method3 = (Method) Mockingbird.getProxyObject(Method.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType3 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "name", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj2, "field", dBField6);
        setPrivateField(obj2, "value", null);
        setPrivateField(dBField6, "type", dBType);
        setPrivateField(obj3, "field", dBField7);
        setPrivateField(obj3, "value", null);
        setPrivateField(dBField7, "type", dBType2);
        setPrivateField(obj4, "field", dBField8);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField8, "type", dBType3);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method, 1);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Object.class), "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Object.class), "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method3, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Object.class), "equals", "(java.lang.Object)boolean", boolean2, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setException(false, dBType3, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", sQLException, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.loadList(obj, "", 1);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
            // dependencies on static and environment state led to removal of 1 assertion
        }
    }
    
    public void testLoadThrowsBeanExceptionWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.load(obj);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testLoadThrowsBeanExceptionWithAggressiveMocks1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "dbName", "");
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), false);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.load(obj);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testLoadThrowsBeanExceptionWithAggressiveMocks2() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj3);
        Mockingbird.setReturnValue(linkedList.add(obj3), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 2.802596928649634E-45);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj4);
        Mockingbird.setReturnValue(linkedList.add(obj4), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.load(obj);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testLoadThrowsNullPointerException() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcBeanSession jdbcBeanSession = new JdbcBeanSession(conn);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.load("\\v\n9P*\rC&pf.");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
            assertSame("jdbcBeanSession.conn", conn, jdbcBeanSession.conn);
            assertEquals("jdbcBeanSession.loaded.size()", 0, jdbcBeanSession.loaded.size());
        }
    }
    
    public void testLoadThrowsThrowableWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException3 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj3, "field", dBField5);
        setPrivateField(obj3, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj4, "field", dBField6);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 2.802596928649634E-45);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        Mockingbird.setException(resultSet.next(), sQLException);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException3);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.load(obj);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNull("jdbcBeanSession.loaded", jdbcBeanSession.loaded);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testLoadThrowsThrowableWithAggressiveMocks2() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField5);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj5, "field", dBField6);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        Mockingbird.setException(resultSet.next(), sQLException);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.load(obj);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNull("jdbcBeanSession.loaded", jdbcBeanSession.loaded);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testLoadThrowsThrowableWithAggressiveMocks3() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType3 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField5);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj5, "field", dBField6);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        setPrivateField(obj6, "field", dBField7);
        setPrivateField(obj6, "value", null);
        setPrivateField(dBField7, "type", dBType3);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj6);
        Mockingbird.setException(false, dBType3, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", sQLException, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.load(obj);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNull("jdbcBeanSession.loaded", jdbcBeanSession.loaded);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testLoadThrowsThrowableWithAggressiveMocks4() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField5);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField5, "type", dBType);
        setPrivateField(obj5, "field", dBField6);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField6, "type", dBType2);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        Mockingbird.setException(resultSet.next(), sQLException);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.load(obj);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNull("jdbcBeanSession.loaded", jdbcBeanSession.loaded);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testLoadThrowsThrowableWithAggressiveMocks5() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj4);
        Mockingbird.setReturnValue(linkedList.add(obj4), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setException(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", sQLException, 1);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.load(obj);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNull("jdbcBeanSession.loaded", jdbcBeanSession.loaded);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testPopulateBeanThrowsBeanExceptionWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.populateBean(null, obj, "");
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testPopulateBeanThrowsNullPointerException() throws Throwable {
        JdbcBeanSession jdbcBeanSession = new JdbcBeanSession((Connection) Mockingbird.getProxyObject(Connection.class));
        ResultSet rset = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.populateBean(rset, "abcdefhijklmnopqrstuvwxyz");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testPopulateBeanThrowsNullPointerException1() throws Throwable {
        JdbcBeanSession mySQLBeanSession = new MySQLBeanSession();
        ResultSet rset = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            mySQLBeanSession.populateBean(rset, "", "testJdbcBeanSessionTablePrefix");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("(MySQLBeanSession) mySQLBeanSession.appManager", ((MySQLBeanSession) mySQLBeanSession).appManager);
        }
    }
    
    public void testRemoveThrowsBeanExceptionWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.remove(obj, obj2);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testRemoveThrowsBeanExceptionWithAggressiveMocks1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.remove(obj, obj2);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testRemoveThrowsBeanExceptionWithAggressiveMocks2() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.remove(obj, obj2);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testRemoveThrowsBeanExceptionWithAggressiveMocks3() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), false);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.remove(obj, obj2);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testRemoveThrowsBeanExceptionWithAggressiveMocks4() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), false);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.remove(obj, obj2);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testRemoveThrowsBeanExceptionWithAggressiveMocks5() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.getNumberOfPKs(), 2);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.remove(obj, obj2);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testRemoveThrowsBeanExceptionWithAggressiveMocks6() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 2);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.remove(obj, obj2);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testRemoveThrowsNullPointerException() throws Throwable {
        JdbcBeanSession bean2 = new JdbcBeanSession();
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcBeanSession jdbcBeanSession = new JdbcBeanSession(conn);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.remove("b\u0001", bean2);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
            assertSame("jdbcBeanSession.conn", conn, jdbcBeanSession.conn);
        }
    }
    
    public void testRemoveThrowsThrowableWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "type", dBType);
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "type", dBType2);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig.getFirstPK(), dBField);
        Mockingbird.setReturnValue(beanConfig2.getFirstPK(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 2.802596928649634E-45);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setException(preparedStatement.executeUpdate(), sQLException);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.remove(obj, obj2);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testRemoveThrowsThrowableWithAggressiveMocks1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        Object obj4 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "type", dBType);
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "type", dBType2);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig.getFirstPK(), dBField);
        Mockingbird.setReturnValue(beanConfig2.getFirstPK(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj4, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), -2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.remove(obj, obj2);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("jdbcBeanSession.getNow()", jdbcBeanSession.getNow());
        }
    }
    
    public void testRemoveThrowsThrowableWithAggressiveMocks2() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        Object obj4 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "type", dBType);
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "type", dBType2);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig.getFirstPK(), dBField);
        Mockingbird.setReturnValue(beanConfig2.getFirstPK(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj4, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.remove(obj, obj2);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("jdbcBeanSession.getNow()", jdbcBeanSession.getNow());
        }
    }
    
    public void testRemoveThrowsThrowableWithAggressiveMocks3() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        Object obj4 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "type", dBType);
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "type", dBType2);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig.getFirstPK(), dBField);
        Mockingbird.setReturnValue(beanConfig2.getFirstPK(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj4, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setException(preparedStatement.executeUpdate(), sQLException);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.remove(obj, obj2);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testRemoveThrowsThrowableWithAggressiveMocks4() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        JoinConfig joinConfig = (JoinConfig) Mockingbird.getProxyObject(JoinConfig.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        Object obj4 = Mockingbird.getProxyObject(Object.class);
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(joinConfig, "tableName", "");
        setPrivateField(dBField, "foreignName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField2, "foreignName", "");
        setPrivateField(dBField2, "name", "");
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, beanConfig, "getJoinConfig", "(java.lang.Class)org.mentawai.bean.JoinConfig", joinConfig, 1);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig2.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig2.getNumberOfPKs(), 0);
        Mockingbird.setReturnValue(beanConfig.getFirstPK(), dBField);
        Mockingbird.setReturnValue(beanConfig2.getFirstPK(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj4, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.remove(obj, obj2);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
    
    public void testUpdateThrowsBeanExceptionWithAggressiveMocks() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        jdbcBeanSession.loaded = identityHashMap;
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, identityHashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {obj}, null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.update(obj, false);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testUpdateThrowsBeanExceptionWithAggressiveMocks1() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method = (Method) Mockingbird.getProxyObject(Method.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method2 = (Method) Mockingbird.getProxyObject(Method.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Number number2 = (Number) Mockingbird.getProxyObject(Number.class);
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        jdbcBeanSession.loaded = identityHashMap;
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, identityHashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {obj}, null, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "isPK", Boolean.TRUE);
        setPrivateField(dBField2, "isPK", Boolean.FALSE);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField3, "isPK", Boolean.FALSE);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField4, "isPK", Boolean.TRUE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField7, "name", "");
        setPrivateField(dBField7, "dbName", "");
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method, 1);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj2);
        Mockingbird.setReturnValue(linkedList.add(obj2), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method2, 1);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj3);
        Mockingbird.setReturnValue(linkedList.add(obj3), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 2.802596928649634E-45);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj4);
        Mockingbird.setReturnValue(linkedList.add(obj4), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number2, 1);
        Mockingbird.setReturnValue(number2.doubleValue(), 2.802596928649634E-45);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.update(obj, false);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testUpdateThrowsBeanExceptionWithAggressiveMocks2() throws Throwable {
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method = (Method) Mockingbird.getProxyObject(Method.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method2 = (Method) Mockingbird.getProxyObject(Method.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        jdbcBeanSession.loaded = identityHashMap;
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, identityHashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {obj}, null, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "isPK", Boolean.TRUE);
        setPrivateField(dBField2, "isPK", Boolean.FALSE);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField3, "isPK", Boolean.FALSE);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField4, "isPK", Boolean.TRUE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField7, "name", "");
        setPrivateField(dBField7, "dbName", "");
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method, 1);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj4);
        Mockingbird.setReturnValue(linkedList.add(obj4), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method2, 1);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj5);
        Mockingbird.setReturnValue(linkedList.add(obj5), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj2, 1);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj6);
        Mockingbird.setReturnValue(linkedList.add(obj6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", obj3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", number, 1);
        Mockingbird.setReturnValue(number.doubleValue(), 0.0);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(BeanException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(BeanException.class));
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.update(obj, false);
            fail("Expected BeanException to be thrown");
        } catch (BeanException ex) {
            assertNull("jdbcBeanSession.getConnection()", jdbcBeanSession.getConnection());
        }
    }
    
    public void testUpdateThrowsNullPointerException() throws Throwable {
        JdbcBeanSession mySQLBeanSession = new MySQLBeanSession();
        try {
            mySQLBeanSession.update("", true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("(MySQLBeanSession) mySQLBeanSession.appManager", ((MySQLBeanSession) mySQLBeanSession).appManager);
            assertNull("(MySQLBeanSession) mySQLBeanSession.conn", ((MySQLBeanSession) mySQLBeanSession).conn);
        }
    }
    
    public void testUpdateThrowsNullPointerException1() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcBeanSession jdbcBeanSession = new JdbcBeanSession(conn);
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.update("");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
            assertSame("jdbcBeanSession.conn", conn, jdbcBeanSession.conn);
        }
    }
    
    public void testUpdateThrowsThrowableWithAggressiveMocks() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        JdbcBeanSession jdbcBeanSession = (JdbcBeanSession) Mockingbird.getProxyObject(JdbcBeanSession.class, true);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method = (Method) Mockingbird.getProxyObject(Method.class);
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method2 = (Method) Mockingbird.getProxyObject(Method.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method3 = (Method) Mockingbird.getProxyObject(Method.class);
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Method method4 = (Method) Mockingbird.getProxyObject(Method.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType3 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        jdbcBeanSession.loaded = identityHashMap;
        setPrivateField(jdbcBeanSession, "appManager", applicationManager);
        jdbcBeanSession.setConn(connection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, identityHashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {obj}, null, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "isPK", Boolean.FALSE);
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField2, "isPK", Boolean.FALSE);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField3, "isPK", Boolean.TRUE);
        setPrivateField(dBField4, "isPK", Boolean.TRUE);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField7, "name", "");
        setPrivateField(dBField7, "dbName", "");
        setPrivateField(dBField8, "name", "");
        setPrivateField(dBField8, "dbName", "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "field", dBField9);
        setPrivateField(obj4, "value", null);
        setPrivateField(dBField9, "type", dBType);
        setPrivateField(obj5, "field", dBField10);
        setPrivateField(obj5, "value", null);
        setPrivateField(dBField10, "type", dBType2);
        setPrivateField(obj6, "field", dBField11);
        setPrivateField(obj6, "value", null);
        setPrivateField(dBField11, "type", dBType3);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, jdbcBeanSession, "isSet", "(java.lang.Object,java.lang.Class)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method2, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, jdbcBeanSession, "isSet", "(java.lang.Object,java.lang.Class)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField5);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method3, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, jdbcBeanSession, "isSet", "(java.lang.Object,java.lang.Class)boolean", boolean3, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField6);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method4, 1);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String,java.lang.reflect.Method)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, jdbcBeanSession, "isSet", "(java.lang.Object,java.lang.Class)boolean", boolean3, 1);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.hasPK(), true);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", obj2, 1);
        Object obj9 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj9);
        Mockingbird.setReturnValue(linkedList.add(obj9), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", obj3, 1);
        Object obj10 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj10);
        Mockingbird.setReturnValue(linkedList.add(obj10), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj6);
        Mockingbird.setException(false, dBType3, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", sQLException, 1);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcBeanSession.class);
        try {
            jdbcBeanSession.update(obj, true);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("jdbcBeanSession.conn", jdbcBeanSession.conn);
            assertNotNull("jdbcBeanSession.appManager", jdbcBeanSession.appManager);
        }
    }
}

