/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:42:11 PM
 * Time to generate: 00:29.225 seconds
 *
 */

package org.mentawai.bean.jdbc;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.agitar.lib.mockingbird.MockingbirdSystem;
import java.io.PrintStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.Iterator;
import java.util.LinkedList;
import org.mentawai.bean.BeanConfig;
import org.mentawai.bean.BeanException;
import org.mentawai.bean.DBField;
import org.mentawai.bean.DBType;
import org.mentawai.bean.type.AutoIncrementType;
import org.mentawai.bean.type.DateType;
import org.mentawai.bean.type.TimeType;
import org.mentawai.bean.type.TimestampType;
import org.mentawai.core.ApplicationManager;

public class MySQLBeanSessionAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MySQLBeanSession.class;
    }
    
    public void testConstructor() throws Throwable {
        MySQLBeanSession mySQLBeanSession = new MySQLBeanSession();
        assertEquals("mySQLBeanSession.loaded.size()", 0, mySQLBeanSession.loaded.size());
        assertNull("mySQLBeanSession.appManager", mySQLBeanSession.appManager);
    }
    
    public void testConstructor1() throws Throwable {
        MySQLBeanSession mySQLBeanSession = new MySQLBeanSession(null);
        assertNull("mySQLBeanSession.conn", mySQLBeanSession.conn);
        assertEquals("mySQLBeanSession.loaded.size()", 0, mySQLBeanSession.loaded.size());
        assertNull("mySQLBeanSession.appManager", mySQLBeanSession.appManager);
    }
    
    public void testGetNow() throws Throwable {
        MySQLBeanSession mySQLBeanSession = new MySQLBeanSession();
        String result = mySQLBeanSession.getNow();
        assertEquals("result", "now()", result);
    }
    
    public void testHandleLimit() throws Throwable {
        MySQLBeanSession mySQLBeanSession = new MySQLBeanSession();
        StringBuilder result = mySQLBeanSession.handleLimit(new StringBuilder(100), "testMySQLBeanSessionOrderBy", -2);
        assertEquals("result.length()", 9, result.length());
    }
    
    public void testHandleLimit1() throws Throwable {
        MySQLBeanSession mySQLBeanSession = new MySQLBeanSession();
        StringBuilder result = mySQLBeanSession.handleLimit(null, "testMySQLBeanSessionOrderBy", -1);
        assertNull("result", result);
    }
    
    public void testHandleLimit2() throws Throwable {
        MySQLBeanSession mySQLBeanSession = new MySQLBeanSession(null);
        StringBuilder result = mySQLBeanSession.handleLimit(new StringBuilder(100), "testMySQLBeanSessionOrderBy", 0);
        assertEquals("result.length()", 8, result.length());
    }
    
    public void testInsertWithAggressiveMocks() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        MySQLBeanSession mySQLBeanSession = (MySQLBeanSession) Mockingbird.getProxyObject(MySQLBeanSession.class, true);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType = new DateType();
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        TimestampType timestampType = new TimestampType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        mySQLBeanSession.conn = connection;
        mySQLBeanSession.loaded = identityHashMap;
        setPrivateField(mySQLBeanSession, "appManager", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", null);
        JdbcBeanSession.DEBUG = false;
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", autoIncrementType2);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.FALSE);
        setPrivateField(dBField8, "name", "");
        setPrivateField(dBField8, "dbName", "");
        setPrivateField(dBField8, "type", dateType);
        Mockingbird.enterNormalMode();
        dBField8.setDefaultToNow(true);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", timestampType);
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.TRUE);
        setPrivateField(obj2, "isSysdate", Boolean.TRUE);
        setPrivateField(obj3, "isSysdate", Boolean.TRUE);
        setPrivateField(obj4, "isSysdate", Boolean.FALSE);
        setPrivateField(obj4, "value", null);
        setPrivateField(obj4, "field", dBField11);
        setPrivateField(dBField11, "type", dBType);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj5, "isSysdate", Boolean.FALSE);
        setPrivateField(obj5, "value", null);
        setPrivateField(obj5, "field", dBField12);
        setPrivateField(dBField12, "type", dBType2);
        setPrivateField(dBField12, "name", "");
        setPrivateField(obj6, "isSysdate", Boolean.TRUE);
        setPrivateField(beanConfig2, "autoincrement", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj7);
        Mockingbird.setReturnValue(linkedList.add(obj7), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj9 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj9);
        Mockingbird.setReturnValue(linkedList.add(obj9), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj10 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj10);
        Mockingbird.setReturnValue(linkedList.add(obj10), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), "");
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj3);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj5);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj6);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(false, identityHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {obj, hashMap}, null, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.enterTestMode(MySQLBeanSession.class);
        mySQLBeanSession.insert(obj);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testInsertWithAggressiveMocks1() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        MySQLBeanSession mySQLBeanSession = (MySQLBeanSession) Mockingbird.getProxyObject(MySQLBeanSession.class, true);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        TimeType timeType = new TimeType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        TimeType timeType2 = new TimeType();
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        DBField dBField13 = (DBField) Mockingbird.getProxyObject(DBField.class);
        PreparedStatement preparedStatement2 = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        mySQLBeanSession.loaded = identityHashMap;
        setPrivateField(mySQLBeanSession, "appManager", applicationManager);
        mySQLBeanSession.conn = connection;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", autoIncrementType2);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", null);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.TRUE);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", timeType);
        Mockingbird.enterNormalMode();
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.FALSE);
        setPrivateField(dBField10, "name", "");
        setPrivateField(dBField10, "dbName", "");
        setPrivateField(dBField10, "type", timeType2);
        dBField10.setDefaultToNow(true);
        setPrivateField(obj2, "isSysdate", Boolean.FALSE);
        setPrivateField(obj3, "isSysdate", Boolean.FALSE);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "isSysdate", Boolean.TRUE);
        setPrivateField(obj5, "isSysdate", Boolean.TRUE);
        setPrivateField(obj6, "isSysdate", Boolean.TRUE);
        setPrivateField(obj6, "value", null);
        setPrivateField(obj6, "field", dBField11);
        setPrivateField(dBField11, "type", dBType);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj7, "isSysdate", Boolean.TRUE);
        setPrivateField(obj7, "value", null);
        setPrivateField(obj7, "field", dBField12);
        setPrivateField(dBField12, "type", dBType2);
        setPrivateField(dBField12, "name", "");
        setPrivateField(beanConfig2, "autoincrement", dBField13);
        setPrivateField(beanConfig2, "tableName", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj9 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj9);
        Mockingbird.setReturnValue(linkedList.add(obj9), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj10 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj10);
        Mockingbird.setReturnValue(linkedList.add(obj10), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj11 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj11);
        Mockingbird.setReturnValue(linkedList.add(obj11), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj5);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj6);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), null);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj7);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), null);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(false, identityHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {obj, hashMap}, null, 1);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement2, 1);
        Mockingbird.setReturnValue(preparedStatement2.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException);
        preparedStatement2.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(MySQLBeanSession.class);
        mySQLBeanSession.insert(obj);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testInsertWithAggressiveMocks2() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        MySQLBeanSession mySQLBeanSession = (MySQLBeanSession) Mockingbird.getProxyObject(MySQLBeanSession.class, true);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType = new DateType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType2 = new DateType();
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        DBField dBField13 = (DBField) Mockingbird.getProxyObject(DBField.class);
        PreparedStatement preparedStatement2 = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException3 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        mySQLBeanSession.loaded = identityHashMap;
        setPrivateField(mySQLBeanSession, "appManager", applicationManager);
        mySQLBeanSession.conn = connection;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", autoIncrementType2);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", null);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.TRUE);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", dateType);
        Mockingbird.enterNormalMode();
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.FALSE);
        setPrivateField(dBField10, "name", "");
        setPrivateField(dBField10, "dbName", "");
        setPrivateField(dBField10, "type", dateType2);
        dBField10.setDefaultToNow(true);
        setPrivateField(obj2, "isSysdate", Boolean.TRUE);
        setPrivateField(obj3, "isSysdate", Boolean.TRUE);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "isSysdate", Boolean.TRUE);
        setPrivateField(obj5, "isSysdate", Boolean.TRUE);
        setPrivateField(obj6, "isSysdate", Boolean.FALSE);
        setPrivateField(obj6, "value", null);
        setPrivateField(obj6, "field", dBField11);
        setPrivateField(dBField11, "type", dBType);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj7, "isSysdate", Boolean.FALSE);
        setPrivateField(obj7, "value", null);
        setPrivateField(obj7, "field", dBField12);
        setPrivateField(dBField12, "type", dBType2);
        setPrivateField(dBField12, "name", "");
        setPrivateField(beanConfig2, "autoincrement", dBField13);
        setPrivateField(beanConfig2, "tableName", "");
        setPrivateField(dBField13, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj9 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj9);
        Mockingbird.setReturnValue(linkedList.add(obj9), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj10 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj10);
        Mockingbird.setReturnValue(linkedList.add(obj10), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj11 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj11);
        Mockingbird.setReturnValue(linkedList.add(obj11), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), null);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), null);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj5);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj6);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj7);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(false, identityHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {obj, hashMap}, null, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement2, 1);
        Mockingbird.setReturnValue(preparedStatement2.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getInt(1), 0);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "injectValue", "(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)void", null, 1);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        preparedStatement2.close();
        Mockingbird.setExceptionForVoid(sQLException3);
        Mockingbird.enterTestMode(MySQLBeanSession.class);
        mySQLBeanSession.insert(obj);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testInsertWithAggressiveMocks3() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        MySQLBeanSession mySQLBeanSession = (MySQLBeanSession) Mockingbird.getProxyObject(MySQLBeanSession.class, true);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType = new DateType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType2 = new DateType();
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        DBField dBField13 = (DBField) Mockingbird.getProxyObject(DBField.class);
        PreparedStatement preparedStatement2 = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        mySQLBeanSession.loaded = identityHashMap;
        setPrivateField(mySQLBeanSession, "appManager", applicationManager);
        mySQLBeanSession.conn = connection;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", autoIncrementType2);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", null);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.TRUE);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", dateType);
        Mockingbird.enterNormalMode();
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.FALSE);
        setPrivateField(dBField10, "name", "");
        setPrivateField(dBField10, "dbName", "");
        setPrivateField(dBField10, "type", dateType2);
        dBField10.setDefaultToNow(true);
        setPrivateField(obj2, "isSysdate", Boolean.FALSE);
        setPrivateField(obj3, "isSysdate", Boolean.FALSE);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "isSysdate", Boolean.TRUE);
        setPrivateField(obj5, "isSysdate", Boolean.TRUE);
        setPrivateField(obj6, "isSysdate", Boolean.FALSE);
        setPrivateField(obj6, "value", null);
        setPrivateField(obj6, "field", dBField11);
        setPrivateField(dBField11, "type", dBType);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj7, "isSysdate", Boolean.FALSE);
        setPrivateField(obj7, "value", null);
        setPrivateField(obj7, "field", dBField12);
        setPrivateField(dBField12, "type", dBType2);
        setPrivateField(dBField12, "name", "");
        setPrivateField(beanConfig2, "autoincrement", dBField13);
        setPrivateField(beanConfig2, "tableName", "");
        setPrivateField(dBField13, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj9 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj9);
        Mockingbird.setReturnValue(linkedList.add(obj9), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj10 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj10);
        Mockingbird.setReturnValue(linkedList.add(obj10), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj11 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj11);
        Mockingbird.setReturnValue(linkedList.add(obj11), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj5);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj6);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj7);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(false, identityHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {obj, hashMap}, null, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement2, 1);
        Mockingbird.setReturnValue(preparedStatement2.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getInt(1), 0);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "injectValue", "(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)void", null, 1);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement2.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(MySQLBeanSession.class);
        mySQLBeanSession.insert(obj);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testInsertWithAggressiveMocks4() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        MySQLBeanSession mySQLBeanSession = (MySQLBeanSession) Mockingbird.getProxyObject(MySQLBeanSession.class, true);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType = new DateType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType2 = new DateType();
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        DBField dBField13 = (DBField) Mockingbird.getProxyObject(DBField.class);
        PreparedStatement preparedStatement2 = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        mySQLBeanSession.loaded = identityHashMap;
        setPrivateField(mySQLBeanSession, "appManager", applicationManager);
        mySQLBeanSession.conn = connection;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", autoIncrementType2);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", null);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.TRUE);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", dateType);
        Mockingbird.enterNormalMode();
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.FALSE);
        setPrivateField(dBField10, "name", "");
        setPrivateField(dBField10, "dbName", "");
        setPrivateField(dBField10, "type", dateType2);
        dBField10.setDefaultToNow(true);
        setPrivateField(obj2, "isSysdate", Boolean.FALSE);
        setPrivateField(obj3, "isSysdate", Boolean.FALSE);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "isSysdate", Boolean.TRUE);
        setPrivateField(obj5, "isSysdate", Boolean.TRUE);
        setPrivateField(obj6, "isSysdate", Boolean.FALSE);
        setPrivateField(obj6, "value", null);
        setPrivateField(obj6, "field", dBField11);
        setPrivateField(dBField11, "type", dBType);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj7, "isSysdate", Boolean.FALSE);
        setPrivateField(obj7, "value", null);
        setPrivateField(obj7, "field", dBField12);
        setPrivateField(dBField12, "type", dBType2);
        setPrivateField(dBField12, "name", "");
        setPrivateField(beanConfig2, "autoincrement", dBField13);
        setPrivateField(beanConfig2, "tableName", "");
        setPrivateField(dBField13, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj9 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj9);
        Mockingbird.setReturnValue(linkedList.add(obj9), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj10 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj10);
        Mockingbird.setReturnValue(linkedList.add(obj10), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj11 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj11);
        Mockingbird.setReturnValue(linkedList.add(obj11), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj5);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj6);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj7);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(false, identityHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {obj, hashMap}, null, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement2, 1);
        Mockingbird.setReturnValue(preparedStatement2.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getInt(1), 0);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "injectValue", "(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)void", null, 1);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        preparedStatement2.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MySQLBeanSession.class);
        mySQLBeanSession.insert(obj);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testHandleLimitThrowsNullPointerException() throws Throwable {
        MySQLBeanSession mySQLBeanSession = new MySQLBeanSession();
        try {
            mySQLBeanSession.handleLimit(null, "testMySQLBeanSessionOrderBy", 0);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MySQLBeanSession.class, ex);
        }
    }
    
    public void testInsertThrowsNullPointerException() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        MySQLBeanSession mySQLBeanSession = new MySQLBeanSession(conn);
        Mockingbird.enterTestMode(MySQLBeanSession.class);
        try {
            mySQLBeanSession.insert("");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JdbcBeanSession.class, ex);
            assertSame("mySQLBeanSession.conn", conn, mySQLBeanSession.conn);
            assertEquals("mySQLBeanSession.loaded.size()", 0, mySQLBeanSession.loaded.size());
            assertNull("mySQLBeanSession.appManager", mySQLBeanSession.appManager);
        }
    }
    
    public void testInsertThrowsThrowableWithAggressiveMocks() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        MySQLBeanSession mySQLBeanSession = (MySQLBeanSession) Mockingbird.getProxyObject(MySQLBeanSession.class, true);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType = new DateType();
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        TimestampType timestampType = new TimestampType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        DBField dBField13 = (DBField) Mockingbird.getProxyObject(DBField.class);
        PreparedStatement preparedStatement2 = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        BeanException beanException = (BeanException) Mockingbird.getProxyObject(BeanException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException3 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        mySQLBeanSession.loaded = identityHashMap;
        setPrivateField(mySQLBeanSession, "appManager", applicationManager);
        mySQLBeanSession.conn = connection;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", null);
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", autoIncrementType2);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.FALSE);
        setPrivateField(dBField8, "name", "");
        setPrivateField(dBField8, "dbName", "");
        setPrivateField(dBField8, "type", dateType);
        Mockingbird.enterNormalMode();
        dBField8.setDefaultToNow(true);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", timestampType);
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.TRUE);
        setPrivateField(obj2, "isSysdate", Boolean.FALSE);
        setPrivateField(obj3, "isSysdate", Boolean.TRUE);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "isSysdate", Boolean.TRUE);
        setPrivateField(obj5, "isSysdate", Boolean.FALSE);
        setPrivateField(obj5, "value", null);
        setPrivateField(obj5, "field", dBField11);
        setPrivateField(dBField11, "type", dBType);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj6, "isSysdate", Boolean.FALSE);
        setPrivateField(obj6, "value", null);
        setPrivateField(obj6, "field", dBField12);
        setPrivateField(dBField12, "type", dBType2);
        setPrivateField(dBField12, "name", "");
        setPrivateField(obj7, "isSysdate", Boolean.TRUE);
        setPrivateField(beanConfig2, "autoincrement", dBField13);
        setPrivateField(beanConfig2, "tableName", "");
        setPrivateField(dBField13, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj9 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj9);
        Mockingbird.setReturnValue(linkedList.add(obj9), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj10 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj10);
        Mockingbird.setReturnValue(linkedList.add(obj10), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj11 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj11);
        Mockingbird.setReturnValue(linkedList.add(obj11), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), "");
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj5);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj6);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj7);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(false, identityHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {obj, hashMap}, null, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement2, 1);
        Mockingbird.setReturnValue(preparedStatement2.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getInt(1), 0);
        Mockingbird.setException(true, JdbcBeanSession.class, "injectValue", "(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)void", beanException, 1);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        preparedStatement2.close();
        Mockingbird.setExceptionForVoid(sQLException3);
        Mockingbird.enterTestMode(MySQLBeanSession.class);
        try {
            mySQLBeanSession.insert(obj);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testInsertThrowsThrowableWithAggressiveMocks1() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        MySQLBeanSession mySQLBeanSession = (MySQLBeanSession) Mockingbird.getProxyObject(MySQLBeanSession.class, true);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType = new DateType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType2 = new DateType();
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        DBField dBField13 = (DBField) Mockingbird.getProxyObject(DBField.class);
        PreparedStatement preparedStatement2 = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        BeanException beanException = (BeanException) Mockingbird.getProxyObject(BeanException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        mySQLBeanSession.loaded = identityHashMap;
        setPrivateField(mySQLBeanSession, "appManager", applicationManager);
        mySQLBeanSession.conn = connection;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", autoIncrementType2);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", null);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.TRUE);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", dateType);
        Mockingbird.enterNormalMode();
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.FALSE);
        setPrivateField(dBField10, "name", "");
        setPrivateField(dBField10, "dbName", "");
        setPrivateField(dBField10, "type", dateType2);
        dBField10.setDefaultToNow(true);
        setPrivateField(obj2, "isSysdate", Boolean.FALSE);
        setPrivateField(obj3, "isSysdate", Boolean.FALSE);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "isSysdate", Boolean.TRUE);
        setPrivateField(obj5, "isSysdate", Boolean.TRUE);
        setPrivateField(obj6, "isSysdate", Boolean.FALSE);
        setPrivateField(obj6, "value", null);
        setPrivateField(obj6, "field", dBField11);
        setPrivateField(dBField11, "type", dBType);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj7, "isSysdate", Boolean.FALSE);
        setPrivateField(obj7, "value", null);
        setPrivateField(obj7, "field", dBField12);
        setPrivateField(dBField12, "type", dBType2);
        setPrivateField(dBField12, "name", "");
        setPrivateField(beanConfig2, "autoincrement", dBField13);
        setPrivateField(beanConfig2, "tableName", "");
        setPrivateField(dBField13, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj9 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj9);
        Mockingbird.setReturnValue(linkedList.add(obj9), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj10 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj10);
        Mockingbird.setReturnValue(linkedList.add(obj10), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj11 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj11);
        Mockingbird.setReturnValue(linkedList.add(obj11), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj5);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj6);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj7);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(false, identityHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {obj, hashMap}, null, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement2, 1);
        Mockingbird.setReturnValue(preparedStatement2.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getInt(1), 0);
        Mockingbird.setException(true, JdbcBeanSession.class, "injectValue", "(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)void", beanException, 1);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement2.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.enterTestMode(MySQLBeanSession.class);
        try {
            mySQLBeanSession.insert(obj);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testInsertThrowsThrowableWithAggressiveMocks2() throws Throwable {
        storeStaticField(JdbcBeanSession.class, "DEBUG");
        MySQLBeanSession mySQLBeanSession = (MySQLBeanSession) Mockingbird.getProxyObject(MySQLBeanSession.class, true);
        IdentityHashMap identityHashMap = (IdentityHashMap) Mockingbird.getProxyObject(IdentityHashMap.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        BeanConfig beanConfig = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType = new AutoIncrementType();
        DBField dBField2 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType2 = new AutoIncrementType();
        DBField dBField3 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField4 = (DBField) Mockingbird.getProxyObject(DBField.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DBField dBField5 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType3 = new AutoIncrementType();
        DBField dBField6 = (DBField) Mockingbird.getProxyObject(DBField.class);
        AutoIncrementType autoIncrementType4 = new AutoIncrementType();
        DBField dBField7 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField8 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBField dBField9 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType = new DateType();
        DBField dBField10 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DateType dateType2 = new DateType();
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj3 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj5 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Object obj6 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField11 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType = (DBType) Mockingbird.getProxyObject(DBType.class);
        Object obj7 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        DBField dBField12 = (DBField) Mockingbird.getProxyObject(DBField.class);
        DBType dBType2 = (DBType) Mockingbird.getProxyObject(DBType.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        BeanConfig beanConfig2 = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        DBField dBField13 = (DBField) Mockingbird.getProxyObject(DBField.class);
        PreparedStatement preparedStatement2 = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        BeanException beanException = (BeanException) Mockingbird.getProxyObject(BeanException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        mySQLBeanSession.loaded = identityHashMap;
        setPrivateField(mySQLBeanSession, "appManager", applicationManager);
        mySQLBeanSession.conn = connection;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig, 1);
        setPrivateField(beanConfig, "tableName", "");
        setPrivateField(dBField, "name", "");
        setPrivateField(dBField, "dbName", "");
        setPrivateField(dBField, "type", autoIncrementType);
        setPrivateField(dBField2, "name", "");
        setPrivateField(dBField2, "dbName", "");
        setPrivateField(dBField2, "type", autoIncrementType2);
        setPrivateField(dBField3, "name", "");
        setPrivateField(dBField3, "dbName", "");
        setPrivateField(dBField3, "type", null);
        JdbcBeanSession.DEBUG = true;
        setPrivateField(dBField4, "name", "");
        setPrivateField(dBField4, "dbName", "");
        setPrivateField(dBField4, "type", null);
        setPrivateField(dBField5, "isPK", Boolean.FALSE);
        setPrivateField(dBField5, "name", "");
        setPrivateField(dBField5, "dbName", "");
        setPrivateField(dBField5, "type", autoIncrementType3);
        setPrivateField(dBField6, "isPK", Boolean.FALSE);
        setPrivateField(dBField6, "name", "");
        setPrivateField(dBField6, "dbName", "");
        setPrivateField(dBField6, "type", autoIncrementType4);
        setPrivateField(dBField7, "isPK", Boolean.TRUE);
        setPrivateField(dBField8, "isPK", Boolean.TRUE);
        setPrivateField(dBField9, "isPK", Boolean.FALSE);
        setPrivateField(dBField9, "name", "");
        setPrivateField(dBField9, "dbName", "");
        setPrivateField(dBField9, "type", dateType);
        Mockingbird.enterNormalMode();
        dBField9.setDefaultToNow(true);
        setPrivateField(dBField10, "isPK", Boolean.FALSE);
        setPrivateField(dBField10, "name", "");
        setPrivateField(dBField10, "dbName", "");
        setPrivateField(dBField10, "type", dateType2);
        dBField10.setDefaultToNow(true);
        setPrivateField(obj2, "isSysdate", Boolean.FALSE);
        setPrivateField(obj3, "isSysdate", Boolean.FALSE);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        setPrivateField(obj4, "isSysdate", Boolean.TRUE);
        setPrivateField(obj5, "isSysdate", Boolean.TRUE);
        setPrivateField(obj6, "isSysdate", Boolean.FALSE);
        setPrivateField(obj6, "value", null);
        setPrivateField(obj6, "field", dBField11);
        setPrivateField(dBField11, "type", dBType);
        setPrivateField(dBField11, "name", "");
        setPrivateField(obj7, "isSysdate", Boolean.FALSE);
        setPrivateField(obj7, "value", null);
        setPrivateField(obj7, "field", dBField12);
        setPrivateField(dBField12, "type", dBType2);
        setPrivateField(dBField12, "name", "");
        setPrivateField(beanConfig2, "autoincrement", dBField13);
        setPrivateField(beanConfig2, "tableName", "");
        setPrivateField(dBField13, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 1);
        Mockingbird.setReturnValue(beanConfig.getNumberOfFields(), 0);
        Mockingbird.setReturnValue(beanConfig.pks(), iterator);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField3);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj8 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj8);
        Mockingbird.setReturnValue(linkedList.add(obj8), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dBField4);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Object obj9 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object)", obj9);
        Mockingbird.setReturnValue(linkedList.add(obj9), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(beanConfig.fields(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField6);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField7);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField8);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField9);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj10 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj10);
        Mockingbird.setReturnValue(linkedList.add(obj10), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dBField10);
        Mockingbird.setReturnValue(true, JdbcBeanSession.class, "getValueFromBean", "(java.lang.Object,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), null);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", Mockingbird.getProxyObject(Date.class));
        Object obj11 = Mockingbird.getProxyObject(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.bean.jdbc.JdbcBeanSession$Value"), "<init>(org.mentawai.bean.DBField,java.lang.Object,boolean)", obj11);
        Mockingbird.setReturnValue(linkedList.add(obj11), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj2);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), obj3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.isEmpty(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator4);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj4);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj5);
        Mockingbird.setReturnValue(mySQLBeanSession.getNow(), "");
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj6);
        Mockingbird.setReturnValue(false, dBType, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), obj7);
        Mockingbird.setReturnValue(false, dBType2, "bindToStmt", "(java.sql.PreparedStatement,int,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(preparedStatement.executeUpdate(), 1);
        Mockingbird.setReturnValue(false, identityHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {obj, hashMap}, null, 1);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.setReturnValue(false, applicationManager, "getBeanConfig", "(java.lang.Class)org.mentawai.bean.BeanConfig", beanConfig2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement2, 1);
        Mockingbird.setReturnValue(preparedStatement2.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getInt(1), 0);
        Mockingbird.setException(true, JdbcBeanSession.class, "injectValue", "(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)void", beanException, 1);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        preparedStatement2.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MySQLBeanSession.class);
        try {
            mySQLBeanSession.insert(obj);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
}

