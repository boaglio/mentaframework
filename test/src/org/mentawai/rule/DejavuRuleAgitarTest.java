/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 5:53:00 PM
 * Time to generate: 00:17.527 seconds
 *
 */

package org.mentawai.rule;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.Map;
import org.mentawai.core.Action;
import org.mentawai.core.Context;
import org.mentawai.core.Input;
import org.mentawai.core.PojoAction;
import org.mentawai.util.MockAction;

public class DejavuRuleAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return DejavuRule.class;
    }
    
    public void testConstructor() throws Throwable {
        DejavuRule dejavuRule = new DejavuRule();
        assertNull("dejavuRule.getTokens()", dejavuRule.getTokens());
    }
    
    public void testCheck() throws Throwable {
        boolean result = new DejavuRule().check(null, new PojoAction(""));
        assertTrue("result", result);
    }
    
    public void testCheck1() throws Throwable {
        boolean result = new DejavuRule().check("testDejavuRuleField", new MockAction());
        assertTrue("result", result);
    }
    
    public void testCheck2() throws Throwable {
        DejavuRule dejavuRule = new DejavuRule();
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        Context context2 = (Context) Mockingbird.getProxyObject(Context.class);
        Object obj4 = Mockingbird.getProxyObject(Object.class);
        Context context3 = (Context) Mockingbird.getProxyObject(Context.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", obj, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", obj2, 1);
        Mockingbird.setReturnValue(false, obj2, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(action.getSession(), context);
        Mockingbird.setReturnValue(context.getAttribute("dejavu"), obj3);
        Mockingbird.setReturnValue(action.getSession(), context2);
        Mockingbird.setReturnValue(context2.getAttribute("dejavu"), obj4);
        Mockingbird.setReturnValue(false, obj4, "equals", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(action.getSession(), context3);
        context3.setAttribute("dejavu", "");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DejavuRule.class);
        boolean result = dejavuRule.check("", action);
        assertTrue("result", result);
    }
    
    public void testCheck3() throws Throwable {
        DejavuRule dejavuRule = new DejavuRule();
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        Context context2 = (Context) Mockingbird.getProxyObject(Context.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", obj, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", obj2, 1);
        Mockingbird.setReturnValue(false, obj2, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(action.getSession(), context);
        Mockingbird.setReturnValue(context.getAttribute("dejavu"), null);
        Mockingbird.setReturnValue(action.getSession(), context2);
        Mockingbird.setReturnValue(false, context2, "setAttribute", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(DejavuRule.class);
        boolean result = dejavuRule.check("", action);
        assertTrue("result", result);
    }
    
    public void testCheck4() throws Throwable {
        DejavuRule dejavuRule = new DejavuRule();
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        Context context2 = (Context) Mockingbird.getProxyObject(Context.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", obj, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", obj2, 1);
        Mockingbird.setReturnValue(false, obj2, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(action.getSession(), context);
        Mockingbird.setReturnValue(context.getAttribute("dejavu"), obj3);
        Mockingbird.setReturnValue(action.getSession(), context2);
        Mockingbird.setReturnValue(context2.getAttribute("dejavu"), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "equals", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.enterTestMode(DejavuRule.class);
        boolean result = dejavuRule.check("", action);
        assertFalse("result", result);
    }
    
    public void testGetTokens() throws Throwable {
        Map result = new DejavuRule().getTokens();
        assertNull("result", result);
    }
    
    public void testCheckThrowsNullPointerException() throws Throwable {
        Action action = new PojoAction("");
        try {
            new DejavuRule().check("testDejavuRuleField", action);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DejavuRule.class, ex);
            assertEquals("(PojoAction) action.getPojo()", "", ((PojoAction) action).getPojo());
        }
    }
    
    public void testCheckThrowsNullPointerException1() throws Throwable {
        try {
            new DejavuRule().check("testDejavuRuleField", null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DejavuRule.class, ex);
        }
    }
}

