/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 4:48:35 PM
 * Time to generate: 00:19.442 seconds
 *
 */

package org.mentawai.util;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;

public class IOUtilsAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return IOUtils.class;
    }
    
    public void testConstructor() throws Throwable {
        new IOUtils();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCreateDir() throws Throwable {
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, file, "mkdirs", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.enterTestMode(IOUtils.class);
        IOUtils.createDir("testIOUtilsDirName");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testWriteFile() throws Throwable {
        URL uRL = (URL) Mockingbird.getProxyObject(URL.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(File.class));
        Mockingbird.setReturnValue(false, uRL, "openStream", "()java.io.InputStream", new Object[] {}, null, 1);
        BufferedInputStream bufferedInputStream = (BufferedInputStream) Mockingbird.getProxyObject(BufferedInputStream.class);
        Mockingbird.replaceObjectForRecording(BufferedInputStream.class, "<init>(java.io.InputStream)", bufferedInputStream);
        Mockingbird.replaceObjectForRecording(FileOutputStream.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileOutputStream.class));
        BufferedOutputStream bufferedOutputStream = (BufferedOutputStream) Mockingbird.getProxyObject(BufferedOutputStream.class);
        Mockingbird.replaceObjectForRecording(BufferedOutputStream.class, "<init>(java.io.OutputStream)", bufferedOutputStream);
        Mockingbird.setReturnValue(false, bufferedInputStream, "read", "(byte[],int,int)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, bufferedOutputStream, "write", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(false, bufferedInputStream, "read", "(byte[],int,int)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, bufferedOutputStream, "write", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(false, bufferedInputStream, "read", "(byte[],int,int)int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, bufferedOutputStream, "flush", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, bufferedInputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, bufferedOutputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(IOUtils.class);
        IOUtils.writeFile(uRL, "");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCreateDirThrowsIOException() throws Throwable {
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.replaceObjectForRecording(IOException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(IOException.class));
        Mockingbird.enterTestMode(IOUtils.class);
        try {
            IOUtils.createDir("");
            fail("Expected IOException to be thrown");
        } catch (IOException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testCreateDirThrowsNullPointerException() throws Throwable {
        try {
            IOUtils.createDir(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
        }
    }
    
    public void testWriteFileThrowsThrowable() throws Throwable {
        URL uRL = (URL) Mockingbird.getProxyObject(URL.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, uRL, "openStream", "()java.io.InputStream", new Object[] {}, null, 1);
        BufferedInputStream bufferedInputStream = (BufferedInputStream) Mockingbird.getProxyObject(BufferedInputStream.class);
        Mockingbird.replaceObjectForRecording(BufferedInputStream.class, "<init>(java.io.InputStream)", bufferedInputStream);
        Mockingbird.replaceObjectForRecording(FileOutputStream.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileOutputStream.class));
        BufferedOutputStream bufferedOutputStream = (BufferedOutputStream) Mockingbird.getProxyObject(BufferedOutputStream.class);
        Mockingbird.replaceObjectForRecording(BufferedOutputStream.class, "<init>(java.io.OutputStream)", bufferedOutputStream);
        Mockingbird.setReturnValue(false, bufferedInputStream, "read", "(byte[],int,int)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, bufferedOutputStream, "write", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(false, bufferedInputStream, "read", "(byte[],int,int)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, bufferedOutputStream, "write", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(false, bufferedInputStream, "read", "(byte[],int,int)int", new Integer(0), 1);
        Mockingbird.setException(false, bufferedOutputStream, "write", "(byte[],int,int)void", iOException, 1);
        Mockingbird.setReturnValue(false, bufferedInputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, bufferedOutputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(IOUtils.class);
        try {
            IOUtils.writeFile(uRL, (File) null);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
}

