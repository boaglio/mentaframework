/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:25:24 PM
 * Time to generate: 00:31.844 seconds
 *
 */

package org.mentawai.coc;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.mentawai.core.ActionConfig;

public class CoCApplicationManagerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return CoCApplicationManager.class;
    }
    
    public void testConstructor() throws Throwable {
        CoCApplicationManager coCApplicationManager = new CoCApplicationManager();
        assertEquals("coCApplicationManager.innerActions.size()", 0, ((Map) getPrivateField(coCApplicationManager, "innerActions")).size());
        assertEquals("coCApplicationManager.actions.size()", 0, ((Map) getPrivateField(coCApplicationManager, "actions")).size());
        assertEquals("coCApplicationManager.getGlobalFilters().size()", 0, coCApplicationManager.getGlobalFilters().size());
        assertNotNull("coCApplicationManager.getConsequenceProvider()", coCApplicationManager.getConsequenceProvider());
        assertEquals("coCApplicationManager.components.size()", 0, ((Map) getPrivateField(coCApplicationManager, "components")).size());
        assertEquals("coCApplicationManager.dependencies.size()", 0, ((Collection) getPrivateField(coCApplicationManager, "dependencies")).size());
        assertEquals("coCApplicationManager.globalConsequences.size()", 0, ((Map) getPrivateField(coCApplicationManager, "globalConsequences")).size());
        assertEquals("coCApplicationManager.beans.size()", 0, ((Map) getPrivateField(coCApplicationManager, "beans")).size());
    }
    
    public void testGetActionConfig() throws Throwable {
        CoCApplicationManager coCApplicationManager = new CoCApplicationManager();
        ActionConfig ac = new ActionConfig("testString", Integer.class, "testString");
        coCApplicationManager.add(ac);
        ActionConfig result = coCApplicationManager.getActionConfig("testString", "testString");
        assertSame("result", ac, result);
        assertEquals("coCApplicationManager.innerActions.size()", 1, ((Map) getPrivateField(coCApplicationManager, "innerActions")).size());
    }
    
    public void testGetActionConfig1() throws Throwable {
        CoCApplicationManager coCApplicationManager = new CoCApplicationManager();
        ActionConfig action = coCApplicationManager.action("testString", Integer.class);
        ActionConfig result = coCApplicationManager.getActionConfig("testString");
        assertSame("result", action, result);
        assertEquals("coCApplicationManager.actions.size()", 1, ((Map) getPrivateField(coCApplicationManager, "actions")).size());
    }
    
    public void testGetActionConfigWithAggressiveMocks() throws Throwable {
        CoCApplicationManager coCApplicationManager = (CoCApplicationManager) Mockingbird.getProxyObject(CoCApplicationManager.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(coCApplicationManager, "actions", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        CoCActionConfig coCActionConfig = (CoCActionConfig) Mockingbird.getProxyObject(CoCActionConfig.class);
        Mockingbird.replaceObjectForRecording(CoCActionConfig.class, "<init>(java.lang.String)", coCActionConfig);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        setPrivateField(coCActionConfig, "innerAction", null);
        setPrivateField(coCActionConfig, "name", "");
        Mockingbird.enterTestMode(CoCApplicationManager.class);
        assertNull("coCApplicationManager.innerActions", getPrivateField(coCApplicationManager, "innerActions"));
        assertNotNull("coCApplicationManager.actions", getPrivateField(coCApplicationManager, "actions"));
    }
    
    public void testGetActionConfigWithAggressiveMocks1() throws Throwable {
        CoCApplicationManager coCApplicationManager = (CoCApplicationManager) Mockingbird.getProxyObject(CoCApplicationManager.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(coCApplicationManager, "innerActions", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        CoCActionConfig coCActionConfig = (CoCActionConfig) Mockingbird.getProxyObject(CoCActionConfig.class);
        Mockingbird.replaceObjectForRecording(CoCActionConfig.class, "<init>(java.lang.String)", coCActionConfig);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        setPrivateField(coCActionConfig, "innerAction", "");
        setPrivateField(coCActionConfig, "name", "");
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(hashMap.put("", coCActionConfig), null);
        Mockingbird.enterTestMode(CoCApplicationManager.class);
        assertNotNull("coCApplicationManager.innerActions", getPrivateField(coCApplicationManager, "innerActions"));
        assertNull("coCApplicationManager.actions", getPrivateField(coCApplicationManager, "actions"));
    }
    
    public void testSetConsequenceProvider() throws Throwable {
        ConsequenceProvider consequenceProvider = new InnerActionConsequenceProvider();
        CoCApplicationManager coCApplicationManager = new CoCApplicationManager();
        coCApplicationManager.setConsequenceProvider(consequenceProvider);
        assertSame("coCApplicationManager.getConsequenceProvider()", consequenceProvider, coCApplicationManager.getConsequenceProvider());
    }
    
    public void testGetActionConfigThrowsNullPointerException() throws Throwable {
        CoCApplicationManager coCApplicationManager = new CoCApplicationManager();
        try {
            coCApplicationManager.getActionConfig("testCoCApplicationManagerName", "testCoCApplicationManagerInnerAction");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
            assertEquals("coCApplicationManager.innerActions.size()", 0, ((Map) getPrivateField(coCApplicationManager, "innerActions")).size());
            assertEquals("coCApplicationManager.actions.size()", 0, ((Map) getPrivateField(coCApplicationManager, "actions")).size());
        }
    }
    
    public void testGetActionConfigThrowsNullPointerException1() throws Throwable {
        CoCApplicationManager coCApplicationManager = new CoCApplicationManager();
        try {
            coCApplicationManager.getActionConfig("testCoCApplicationManagerName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
            assertEquals("coCApplicationManager.innerActions.size()", 0, ((Map) getPrivateField(coCApplicationManager, "innerActions")).size());
            assertEquals("coCApplicationManager.actions.size()", 0, ((Map) getPrivateField(coCApplicationManager, "actions")).size());
        }
    }
}

