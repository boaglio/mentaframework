/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 7:22:45 PM
 * Time to generate: 00:41.523 seconds
 *
 */

package org.mentawai.core;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.Iterator;
import java.util.LinkedList;
import javax.servlet.http.HttpServletResponse;
import org.agitar.mock.servlet.MockHttpServletResponse;
import org.agitar.mock.servlet.MockServletContext;
import org.mentawai.ajaxtag.AjaxtagErrorConsequence;
import org.mentawai.spring.SpringActionConfig;
import org.mentawai.util.MockAction;

public class ChainAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return Chain.class;
    }
    
    public void testConstructor() throws Throwable {
        Chain chain = new Chain(new ActionConfig("testChainName", Integer.class));
        assertEquals("chain.toString()", "Chain to testChainName", chain.toString());
    }
    
    public void testExecuteWithAggressiveMocks() throws Throwable {
        Chain chain = (Chain) Mockingbird.getProxyObject(Chain.class, true);
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Action action2 = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Consequence consequence = (Consequence) Mockingbird.getProxyObject(Consequence.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        AfterConsequenceFilter afterConsequenceFilter = (AfterConsequenceFilter) Mockingbird.getProxyObject(AfterConsequenceFilter.class);
        AfterConsequenceFilter afterConsequenceFilter2 = (AfterConsequenceFilter) Mockingbird.getProxyObject(AfterConsequenceFilter.class);
        AfterConsequenceFilter afterConsequenceFilter3 = (AfterConsequenceFilter) Mockingbird.getProxyObject(AfterConsequenceFilter.class);
        AfterConsequenceFilter afterConsequenceFilter4 = (AfterConsequenceFilter) Mockingbird.getProxyObject(AfterConsequenceFilter.class);
        setPrivateField(chain, "ac", actionConfig);
        actionConfig.setInnerAction("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(actionConfig.getAction(), action2);
        RequestInput inputRequest = (RequestInput) Mockingbird.getProxyObject(RequestInput.class);
        Mockingbird.replaceObjectForRecording(RequestInput.class, "<init>(javax.servlet.http.HttpServletRequest)", inputRequest);
        Mockingbird.setReturnValue(action.getInput(), input);
        Mockingbird.setReturnValue(input.keys(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, inputRequest, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, inputRequest, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        action2.setInput(inputRequest);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(action.getOutput(), null);
        action2.setOutput(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(action.getSession(), null);
        action2.setSession(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(action.getApplication(), null);
        action2.setApplication(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(action.getLocale(), null);
        action2.setLocale(null);
        Mockingbird.setNormalReturnForVoid();
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(true, Controller.class, "invokeAction", "(org.mentawai.core.ActionConfig,org.mentawai.core.Action,java.lang.String,java.util.List,java.lang.StringBuilder)org.mentawai.core.Consequence", consequence, 1);
        consequence.execute(action2, null, null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(linkedList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), afterConsequenceFilter);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, afterConsequenceFilter, "afterConsequence", "(org.mentawai.core.Action,org.mentawai.core.Consequence,boolean,boolean,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), afterConsequenceFilter2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, afterConsequenceFilter2, "afterConsequence", "(org.mentawai.core.Action,org.mentawai.core.Consequence,boolean,boolean,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), afterConsequenceFilter3);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Throwable.class), "printStackTrace", "()void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), afterConsequenceFilter4);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Throwable.class), "printStackTrace", "()void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.enterTestMode(Chain.class);
        chain.execute(action, null, null);
        assertEquals("chain.toString()", "Chain to null", chain.toString());
    }
    
    public void testExecuteWithAggressiveMocks1() throws Throwable {
        Chain chain = (Chain) Mockingbird.getProxyObject(Chain.class, true);
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Action action2 = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Consequence consequence = (Consequence) Mockingbird.getProxyObject(Consequence.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        AfterConsequenceFilter afterConsequenceFilter = (AfterConsequenceFilter) Mockingbird.getProxyObject(AfterConsequenceFilter.class);
        AfterConsequenceFilter afterConsequenceFilter2 = (AfterConsequenceFilter) Mockingbird.getProxyObject(AfterConsequenceFilter.class);
        AfterConsequenceFilter afterConsequenceFilter3 = (AfterConsequenceFilter) Mockingbird.getProxyObject(AfterConsequenceFilter.class);
        AfterConsequenceFilter afterConsequenceFilter4 = (AfterConsequenceFilter) Mockingbird.getProxyObject(AfterConsequenceFilter.class);
        setPrivateField(chain, "ac", actionConfig);
        actionConfig.setInnerAction("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(actionConfig.getAction(), action2);
        RequestInput inputRequest = (RequestInput) Mockingbird.getProxyObject(RequestInput.class);
        Mockingbird.replaceObjectForRecording(RequestInput.class, "<init>(javax.servlet.http.HttpServletRequest)", inputRequest);
        Mockingbird.setReturnValue(action.getInput(), input);
        Mockingbird.setReturnValue(input.keys(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, inputRequest, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, inputRequest, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        action2.setInput(inputRequest);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(action.getOutput(), null);
        action2.setOutput(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(action.getSession(), null);
        action2.setSession(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(action.getApplication(), null);
        action2.setApplication(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(action.getLocale(), null);
        action2.setLocale(null);
        Mockingbird.setNormalReturnForVoid();
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(true, Controller.class, "invokeAction", "(org.mentawai.core.ActionConfig,org.mentawai.core.Action,java.lang.String,java.util.List,java.lang.StringBuilder)org.mentawai.core.Consequence", consequence, 1);
        consequence.execute(action2, null, null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(linkedList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), afterConsequenceFilter);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "A", 1);
        Mockingbird.setReturnValue(false, afterConsequenceFilter, "afterConsequence", "(org.mentawai.core.Action,org.mentawai.core.Consequence,boolean,boolean,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), afterConsequenceFilter2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, afterConsequenceFilter2, "afterConsequence", "(org.mentawai.core.Action,org.mentawai.core.Consequence,boolean,boolean,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), afterConsequenceFilter3);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Throwable.class), "printStackTrace", "()void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), afterConsequenceFilter4);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Throwable.class), "printStackTrace", "()void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.enterTestMode(Chain.class);
        chain.execute(action, null, null);
        assertEquals("chain.toString()", "Chain to null", chain.toString());
    }
    
    public void testToString() throws Throwable {
        String result = new Chain(null).toString();
        assertEquals("result", "Chain to null", result);
    }
    
    public void testExecuteThrowsConsequenceException() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        Chain chain = new Chain(new ClassActionConfig(Integer.class));
        Action a = new MockAction();
        try {
            chain.execute(a, mockServletContext.createHttpServletRequest("testChainParam1"), res);
            fail("Expected ConsequenceException to be thrown");
        } catch (ConsequenceException ex) {
            assertEquals("(MockHttpServletResponse) res", "text/html; charset=UTF-8", ((MockHttpServletResponse) res).getContentType());
            assertEquals("(MockHttpServletResponse) res", "UTF-8", ((MockHttpServletResponse) res).getCharacterEncoding());
            assertEquals("ex.getMessage()", "Could not load action for chain: Integer", ex.getMessage());
            assertThrownBy(Chain.class, ex);
            assertEquals("chain.toString()", "Chain to Integer", chain.toString());
        }
    }
    
    public void testExecuteThrowsConsequenceException1() throws Throwable {
        Action a = new MockAction();
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        Chain chain = new Chain(new ActionConfig(Object.class));
        try {
            chain.execute(a, mockServletContext.createHttpServletRequest("testChainParam1"), res);
            fail("Expected ConsequenceException to be thrown");
        } catch (ConsequenceException ex) {
            assertEquals("(MockHttpServletResponse) res", "text/html; charset=UTF-8", ((MockHttpServletResponse) res).getContentType());
            assertEquals("(MockHttpServletResponse) res", "UTF-8", ((MockHttpServletResponse) res).getCharacterEncoding());
            assertEquals("ex.getMessage()", "java.lang.NullPointerException", ex.getMessage());
            assertThrownBy(Controller.class, ex);
            assertEquals("chain.toString()", "Chain to Object", chain.toString());
        }
    }
    
    public void testExecuteThrowsNullPointerException() throws Throwable {
        Chain chain = new Chain(new SpringActionConfig("testChainBeanName"));
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        Action a = new MockAction();
        try {
            chain.execute(a, mockServletContext.createHttpServletRequest("testChainParam1"), res);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("(MockHttpServletResponse) res", "text/html; charset=UTF-8", ((MockHttpServletResponse) res).getContentType());
            assertEquals("(MockHttpServletResponse) res", "UTF-8", ((MockHttpServletResponse) res).getCharacterEncoding());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SpringActionConfig.class, ex);
            assertEquals("chain.toString()", "Chain to Action", chain.toString());
        }
    }
    
    public void testExecuteThrowsNullPointerException1() throws Throwable {
        Chain chain = new Chain(new ClassActionConfig(String.class));
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        try {
            chain.execute(null, mockServletContext.createHttpServletRequest("testChainParam1"), res);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("(MockHttpServletResponse) res", "text/html; charset=UTF-8", ((MockHttpServletResponse) res).getContentType());
            assertEquals("(MockHttpServletResponse) res", "UTF-8", ((MockHttpServletResponse) res).getCharacterEncoding());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Chain.class, ex);
            assertEquals("chain.toString()", "Chain to String", chain.toString());
        }
    }
    
    public void testExecuteThrowsNullPointerException2() throws Throwable {
        ActionConfig ac = new ClassActionConfig(String.class);
        AjaxtagErrorConsequence pojo = new AjaxtagErrorConsequence();
        Action a = new PojoAction(pojo);
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        ac.redirError("testChainPage");
        Chain chain = new Chain(ac);
        try {
            chain.execute(a, mockServletContext.createHttpServletRequest("testChainParam1"), res);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("(MockHttpServletResponse) res", "text/html; charset=UTF-8", ((MockHttpServletResponse) res).getContentType());
            assertEquals("(MockHttpServletResponse) res", "UTF-8", ((MockHttpServletResponse) res).getCharacterEncoding());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Chain.class, ex);
            assertEquals("chain.toString()", "Chain to String", chain.toString());
            assertSame("(PojoAction) a.getPojo()", pojo, ((PojoAction) a).getPojo());
        }
    }
    
    public void testExecuteThrowsThrowableWithAggressiveMocks() throws Throwable {
        Chain chain = (Chain) Mockingbird.getProxyObject(Chain.class, true);
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Action action2 = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Consequence consequence = (Consequence) Mockingbird.getProxyObject(Consequence.class);
        ConsequenceException consequenceException = (ConsequenceException) Mockingbird.getProxyObject(ConsequenceException.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        AfterConsequenceFilter afterConsequenceFilter = (AfterConsequenceFilter) Mockingbird.getProxyObject(AfterConsequenceFilter.class);
        AfterConsequenceFilter afterConsequenceFilter2 = (AfterConsequenceFilter) Mockingbird.getProxyObject(AfterConsequenceFilter.class);
        AfterConsequenceFilter afterConsequenceFilter3 = (AfterConsequenceFilter) Mockingbird.getProxyObject(AfterConsequenceFilter.class);
        AfterConsequenceFilter afterConsequenceFilter4 = (AfterConsequenceFilter) Mockingbird.getProxyObject(AfterConsequenceFilter.class);
        setPrivateField(chain, "ac", actionConfig);
        actionConfig.setInnerAction("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(actionConfig.getAction(), action2);
        RequestInput inputRequest = (RequestInput) Mockingbird.getProxyObject(RequestInput.class);
        Mockingbird.replaceObjectForRecording(RequestInput.class, "<init>(javax.servlet.http.HttpServletRequest)", inputRequest);
        Mockingbird.setReturnValue(action.getInput(), input);
        Mockingbird.setReturnValue(input.keys(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, inputRequest, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, inputRequest, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        action2.setInput(inputRequest);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(action.getOutput(), null);
        action2.setOutput(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(action.getSession(), null);
        action2.setSession(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(action.getApplication(), null);
        action2.setApplication(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(action.getLocale(), null);
        action2.setLocale(null);
        Mockingbird.setNormalReturnForVoid();
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(true, Controller.class, "invokeAction", "(org.mentawai.core.ActionConfig,org.mentawai.core.Action,java.lang.String,java.util.List,java.lang.StringBuilder)org.mentawai.core.Consequence", consequence, 1);
        consequence.execute(action2, null, null);
        Mockingbird.setExceptionForVoid(consequenceException);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), afterConsequenceFilter);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, afterConsequenceFilter, "afterConsequence", "(org.mentawai.core.Action,org.mentawai.core.Consequence,boolean,boolean,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), afterConsequenceFilter2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, afterConsequenceFilter2, "afterConsequence", "(org.mentawai.core.Action,org.mentawai.core.Consequence,boolean,boolean,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), afterConsequenceFilter3);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Throwable.class), "printStackTrace", "()void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), afterConsequenceFilter4);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Throwable.class), "printStackTrace", "()void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.enterTestMode(Chain.class);
        try {
            chain.execute(action, null, null);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testExecuteThrowsThrowableWithAggressiveMocks1() throws Throwable {
        Chain chain = (Chain) Mockingbird.getProxyObject(Chain.class, true);
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Action action2 = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Consequence consequence = (Consequence) Mockingbird.getProxyObject(Consequence.class);
        ConsequenceException consequenceException = (ConsequenceException) Mockingbird.getProxyObject(ConsequenceException.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        AfterConsequenceFilter afterConsequenceFilter = (AfterConsequenceFilter) Mockingbird.getProxyObject(AfterConsequenceFilter.class);
        AfterConsequenceFilter afterConsequenceFilter2 = (AfterConsequenceFilter) Mockingbird.getProxyObject(AfterConsequenceFilter.class);
        AfterConsequenceFilter afterConsequenceFilter3 = (AfterConsequenceFilter) Mockingbird.getProxyObject(AfterConsequenceFilter.class);
        AfterConsequenceFilter afterConsequenceFilter4 = (AfterConsequenceFilter) Mockingbird.getProxyObject(AfterConsequenceFilter.class);
        setPrivateField(chain, "ac", actionConfig);
        actionConfig.setInnerAction("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(actionConfig.getAction(), action2);
        RequestInput inputRequest = (RequestInput) Mockingbird.getProxyObject(RequestInput.class);
        Mockingbird.replaceObjectForRecording(RequestInput.class, "<init>(javax.servlet.http.HttpServletRequest)", inputRequest);
        Mockingbird.setReturnValue(action.getInput(), input);
        Mockingbird.setReturnValue(input.keys(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, inputRequest, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, inputRequest, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        action2.setInput(inputRequest);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(action.getOutput(), null);
        action2.setOutput(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(action.getSession(), null);
        action2.setSession(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(action.getApplication(), null);
        action2.setApplication(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(action.getLocale(), null);
        action2.setLocale(null);
        Mockingbird.setNormalReturnForVoid();
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Mockingbird.setReturnValue(true, Controller.class, "invokeAction", "(org.mentawai.core.ActionConfig,org.mentawai.core.Action,java.lang.String,java.util.List,java.lang.StringBuilder)org.mentawai.core.Consequence", consequence, 1);
        consequence.execute(action2, null, null);
        Mockingbird.setExceptionForVoid(consequenceException);
        Mockingbird.setReturnValue(linkedList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), afterConsequenceFilter);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "A", 1);
        Mockingbird.setReturnValue(false, afterConsequenceFilter, "afterConsequence", "(org.mentawai.core.Action,org.mentawai.core.Consequence,boolean,boolean,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), afterConsequenceFilter2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, afterConsequenceFilter2, "afterConsequence", "(org.mentawai.core.Action,org.mentawai.core.Consequence,boolean,boolean,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), afterConsequenceFilter3);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Throwable.class), "printStackTrace", "()void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), afterConsequenceFilter4);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Throwable.class), "printStackTrace", "()void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.enterTestMode(Chain.class);
        try {
            chain.execute(action, null, null);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
}

