/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 7:26:13 PM
 * Time to generate: 02:26.262 seconds
 *
 */

package org.mentawai.core;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.servlet.GenericServlet;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpSessionBindingEvent;
import javax.servlet.http.HttpSessionBindingListener;
import org.agitar.mock.servlet.MockHttpServletRequest;
import org.agitar.mock.servlet.MockHttpServletResponse;
import org.agitar.mock.servlet.MockServletContext;
import org.mentawai.action.LogoutAction;
import org.mentawai.coc.ConsequenceProvider;
import org.mentawai.coc.InnerActionConsequenceProvider;
import org.mentawai.spring.SpringActionConfig;
import org.mentawai.util.DebugServletFilter;
import org.mentawai.util.MockAction;

public class ControllerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return Controller.class;
    }
    
    public void testConstructor() throws Throwable {
        new Controller();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testStickyActionMapConstructor() throws Throwable {
        callPrivateMethod("org.mentawai.core.Controller$StickyActionMap", "<init>", new Class[] {Map.class}, null, new Object[] {new HashMap(100, 100.0F)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCreateInvocationChain() throws Throwable {
        storeStaticField(Controller.class, "appManager");
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.replaceObjectForRecording(InvocationChain.class, "<init>(java.lang.String,org.mentawai.core.Action)", invocationChain);
        List list = (List) Mockingbird.getProxyObject(List.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(actionConfig, "name", "");
        Mockingbird.setReturnValue(actionConfig.getFirstFilters(null), list);
        setPrivateField(Controller.class, "appManager", applicationManager);
        invocationChain.addFilters(list);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(applicationManager.getGlobalFilters(false), list2);
        invocationChain.addFilters(list2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, actionConfig, "getFilters", "(java.lang.String)java.util.List", list3, 1);
        invocationChain.addFilters(list3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(applicationManager.getGlobalFilters(true), null);
        Mockingbird.enterTestMode(Controller.class);
        InvocationChain result = (InvocationChain) callPrivateMethod("org.mentawai.core.Controller", "createInvocationChain", new Class[] {ActionConfig.class, Action.class, String.class}, null, new Object[] {actionConfig, null, null});
        assertNull("result.getInnerAction()", result.getInnerAction());
    }
    
    public void testDestroy() throws Throwable {
        new Controller().destroy();
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testDestroy1() throws Throwable {
        storeStaticField(Controller.class, "appManager");
        storeStaticField(Controller.class, "appContext");
        Controller controller = new Controller();
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Filter filter = (Filter) Mockingbird.getProxyObject(Filter.class);
        Filter filter2 = (Filter) Mockingbird.getProxyObject(Filter.class);
        setPrivateField(Controller.class, "appManager", applicationManager);
        setPrivateField(Controller.class, "appContext", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(applicationManager.getAllFilters(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), filter);
        filter.destroy();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), filter2);
        filter2.destroy();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        applicationManager.destroy(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Controller.class);
        controller.destroy();
        assertNotNull("controllerController.appManager", getPrivateField(Controller.class, "appManager"));
    }
    
    public void testDestroy2() throws Throwable {
        storeStaticField(Controller.class, "appManager");
        Controller controller = new Controller();
        setPrivateField(Controller.class, "appManager", null);
        controller.destroy();
        assertNull("controllerController.appManager", getPrivateField(Controller.class, "appManager"));
    }
    
    public void testDisjoin() throws Throwable {
        StickyAction stickyAction = (StickyAction) Mockingbird.getProxyObject(StickyAction.class);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        HttpSessionBindingListener httpSessionBindingListener = (HttpSessionBindingListener) Mockingbird.getProxyObject(Class.forName("org.mentawai.core.Controller$StickyActionMap"));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(stickyAction.getSession(), context);
        Mockingbird.setReturnValue(context.getAttribute("_stickyActions"), httpSessionBindingListener);
        StickyAction remove = (StickyAction) callPrivateMethod("org.mentawai.core.Controller$StickyActionMap", "remove", new Class[] {Object.class}, httpSessionBindingListener, new Object[] {null});
        Mockingbird.setReturnValue(remove, null);
        Mockingbird.enterTestMode(Controller.class);
        Controller.disjoin(stickyAction, null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetActionName() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        mockServletContext.setContextBasePath("testControllerParam1");
        HttpServletRequest req = mockServletContext.createHttpServletRequest("http://www.npfxluch.org:8995/.mtw");
        Controller controller = new Controller();
        String result = controller.getActionName(req);
        assertEquals("result", "/", result);
    }
    
    public void testGetActionName1() throws Throwable {
        HttpServletRequest req = new MockServletContext().createHttpServletRequest("https://jgeemovx.com/Mj_M0_-Z__5--_PSiAi_2_-__O5Z_h33gn--q__39-Au--_W.mtw");
        Controller controller = new Controller();
        String result = controller.getActionName(req);
        assertEquals("result", "Mj_M0_-Z__5--_PSiAi_2_-__O5Z_h33gn--q__39-Au--_W", result);
    }
    
    public void testGetActionName2() throws Throwable {
        Controller controller = new Controller();
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(req.getContextPath(), "#");
        Mockingbird.setReturnValue(req.getRequestURI(), "testString");
        Mockingbird.enterTestMode(Controller.class);
        String result = controller.getActionName(req);
        assertEquals("result", "testString", result);
    }
    
    public void testGetActionName3() throws Throwable {
        HttpServletRequest req = new MockServletContext().createHttpServletRequest("http://www.npfxluch.org:8995/.mtw");
        Controller controller = new Controller();
        String result = controller.getActionName(req);
        assertEquals("result", ".mtw", result);
    }
    
    public void testGetActionName4() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Controller controller = new Controller();
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(req.getContextPath(), "");
        Mockingbird.setReturnValue(req.getRequestURI(), "/.;");
        Mockingbird.enterTestMode(Controller.class);
        String result = controller.getActionName(req);
        assertEquals("result", "/", result);
    }
    
    public void testGetActionName5() throws Throwable {
        Controller controller = new Controller();
        HttpServletRequest httpServletRequest = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(httpServletRequest.getContextPath(), "A");
        Mockingbird.setReturnValue(httpServletRequest.getRequestURI(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "AA", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "lastIndexOf", "(java.lang.String)int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "startsWith", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "AAA", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "lastIndexOf", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.enterTestMode(Controller.class);
        String result = controller.getActionName(httpServletRequest);
        assertEquals("result", "", result);
    }
    
    public void testGetActionName6() throws Throwable {
        Controller controller = new Controller();
        HttpServletRequest httpServletRequest = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(httpServletRequest.getContextPath(), "A");
        Mockingbird.setReturnValue(httpServletRequest.getRequestURI(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "lastIndexOf", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "AA", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "startsWith", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "lastIndexOf", "(java.lang.String)int", new Integer(2), 1);
        Mockingbird.enterTestMode(Controller.class);
        String result = controller.getActionName(httpServletRequest);
        assertEquals("result", "", result);
    }
    
    public void testGetApplication() throws Throwable {
        Controller.getApplication();
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testGetInnerActionName() throws Throwable {
        HttpServletRequest req = new MockServletContext().createHttpServletRequest("https://jgeemovx.com/Mj_M0_-Z__5--_PSiAi_2_-__O5Z_h33gn--q__39-Au--_W.mtw");
        Controller controller = new Controller();
        String result = controller.getInnerActionName(req);
        assertNull("result", result);
    }
    
    public void testGetInnerActionName1() throws Throwable {
        HttpServletRequest req = new MockServletContext().createHttpServletRequest("http://www.npfxluch.org:8995/.mtw");
        Controller controller = new Controller();
        String result = controller.getInnerActionName(req);
        assertNull("result", result);
    }
    
    public void testGetInnerActionName2() throws Throwable {
        Controller controller = new Controller();
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(req.getContextPath(), "");
        Mockingbird.setReturnValue(req.getRequestURI(), "testString");
        Mockingbird.enterTestMode(Controller.class);
        String result = controller.getInnerActionName(req);
        assertNull("result", result);
    }
    
    public void testGetInnerActionName3() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        mockServletContext.setContextBasePath("testControllerParam1");
        Controller controller = new Controller();
        String result = controller.getInnerActionName(mockServletContext.createHttpServletRequest("testControllerParam1"));
        assertNull("result", result);
    }
    
    public void testGetInnerActionName4() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        mockServletContext.setContextBasePath("testControllerParam1");
        HttpServletRequest req = mockServletContext.createHttpServletRequest("http://www.npfxluch.org:8995/.mtw");
        Controller controller = new Controller();
        String result = controller.getInnerActionName(req);
        assertNull("result", result);
    }
    
    public void testGetInnerActionName5() throws Throwable {
        Controller controller = new Controller();
        HttpServletRequest httpServletRequest = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(httpServletRequest.getContextPath(), "");
        Mockingbird.setReturnValue(httpServletRequest.getRequestURI(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toString", "()java.lang.String", "AA", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "lastIndexOf", "(java.lang.String)int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "startsWith", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "AAA", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "lastIndexOf", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.enterTestMode(Controller.class);
        String result = controller.getInnerActionName(httpServletRequest);
        assertEquals("result", "", result);
    }
    
    public void testGetInnerActionName6() throws Throwable {
        Controller controller = new Controller();
        HttpServletRequest httpServletRequest = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(httpServletRequest.getContextPath(), "A");
        Mockingbird.setReturnValue(httpServletRequest.getRequestURI(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "lastIndexOf", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "AA", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "startsWith", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "lastIndexOf", "(java.lang.String)int", new Integer(2), 1);
        Mockingbird.enterTestMode(Controller.class);
        String result = controller.getInnerActionName(httpServletRequest);
        assertNull("result", result);
    }
    
    public void testGetRootCause() throws Throwable {
        Controller controller = new Controller();
        Throwable classCastException = new ClassCastException();
        Throwable result = (Throwable) callPrivateMethod("org.mentawai.core.Controller", "getRootCause", new Class[] {Throwable.class}, controller, new Object[] {new Throwable(classCastException)});
        assertSame("result", classCastException, result);
    }
    
    public void testGetRootCause1() throws Throwable {
        Controller controller = new Controller();
        NoSuchFieldError noSuchFieldError = (NoSuchFieldError) Mockingbird.getProxyObject(NoSuchFieldError.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, noSuchFieldError, "getCause", "()java.lang.Throwable", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(Controller.class);
        NoSuchFieldError result = (NoSuchFieldError) callPrivateMethod("org.mentawai.core.Controller", "getRootCause", new Class[] {Throwable.class}, controller, new Object[] {noSuchFieldError});
        assertSame("result", noSuchFieldError, result);
    }
    
    public void testGetURI() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Controller controller = new Controller();
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(req.getContextPath(), "");
        Mockingbird.setReturnValue(req.getRequestURI(), "testString");
        Mockingbird.enterTestMode(Controller.class);
        String result = controller.getURI(req);
        assertEquals("result", "testString", result);
    }
    
    public void testGetURI1() throws Throwable {
        Controller controller = new Controller();
        HttpServletRequest req = new MockServletContext().createHttpServletRequest("http://www.npfxluch.org:8995/.mtw");
        String result = controller.getURI(req);
        assertEquals("result", ".mtw", result);
    }
    
    public void testGetURI2() throws Throwable {
        Controller controller = new Controller();
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(req.getContextPath(), "");
        Mockingbird.setReturnValue(req.getRequestURI(), "/.;");
        Mockingbird.enterTestMode(Controller.class);
        String result = controller.getURI(req);
        assertEquals("result", "/", result);
    }
    
    public void testGetURI3() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        mockServletContext.setContextBasePath("testControllerParam1");
        HttpServletRequest req = mockServletContext.createHttpServletRequest("https://jgeemovx.com/Mj_M0_-Z__5--_PSiAi_2_-__O5Z_h33gn--q__39-Au--_W.mtw");
        Controller controller = new Controller();
        String result = controller.getURI(req);
        assertEquals("result", "Mj_M0_-Z__5--_PSiAi_2_-__O5Z_h33gn--q__39-Au--_W", result);
    }
    
    public void testGetURI4() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Controller controller = new Controller();
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(req.getContextPath(), "LVcjY\rV!G\\\r<(D\rc3%R'=5XN&");
        Mockingbird.setReturnValue(req.getRequestURI(), "testString");
        Mockingbird.enterTestMode(Controller.class);
        String result = controller.getURI(req);
        assertEquals("result", "testString", result);
    }
    
    public void testGetURI5() throws Throwable {
        HttpServletRequest req = new MockServletContext().createHttpServletRequest("https://jgeemovx.com/Mj_M0_-Z__5--_PSiAi_2_-__O5Z_h33gn--q__39-Au--_W.mtw");
        Controller controller = new Controller();
        String result = controller.getURI(req);
        assertEquals("result", "Mj_M0_-Z__5--_PSiAi_2_-__O5Z_h33gn--q__39-Au--_W", result);
    }
    
    public void testGetURI6() throws Throwable {
        Controller controller = new Controller();
        MockServletContext mockServletContext = new MockServletContext();
        mockServletContext.setContextBasePath("testControllerParam1");
        HttpServletRequest req = mockServletContext.createHttpServletRequest("http://www.npfxluch.org:8995/.mtw");
        String result = controller.getURI(req);
        assertEquals("result", "/", result);
    }
    
    public void testGetURI7() throws Throwable {
        Controller controller = new Controller();
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(req.getContextPath(), "");
        Mockingbird.setReturnValue(req.getRequestURI(), "/\u541D\uB655\u9709\uDCE6.");
        Mockingbird.enterTestMode(Controller.class);
        String result = controller.getURI(req);
        assertEquals("result", "\u541D\uB655\u9709\uDCE6", result);
    }
    
    public void testInit() throws Throwable {
        storeStaticField(Controller.class, "application");
        storeStaticField(Controller.class, "config");
        Controller controller = new Controller();
        ServletConfig servletConfig = (ServletConfig) Mockingbird.getProxyObject(ServletConfig.class);
        ServletContext servletContext = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(GenericServlet.class, "init", "(javax.servlet.ServletConfig)void", null, 1);
        setPrivateField(Controller.class, "config", servletConfig);
        setPrivateField(Controller.class, "application", servletContext);
        Mockingbird.setReturnValue(servletConfig.getServletContext(), servletContext);
        Mockingbird.replaceObjectForRecording(ApplicationContext.class, "<init>(javax.servlet.ServletContext)", Mockingbird.getProxyObject(ApplicationContext.class));
        Mockingbird.setReturnValue(servletContext.getRealPath(""), "");
        Mockingbird.setReturnValue(servletConfig.getInitParameter("reloadAppManager"), "true");
        Mockingbird.setReturnValue(servletConfig.getInitParameter("debugMode"), "true");
        Mockingbird.setReturnValue(servletConfig.getInitParameter("autoView"), "true");
        Mockingbird.setReturnValue(servletConfig.getInitParameter("applicationManager"), null);
        Mockingbird.setReturnValue(true, Controller.class, "initApplicationManager", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(Controller.class);
        controller.init(servletConfig);
        assertTrue("controllerController.reloadAppManager", Controller.reloadAppManager);
        assertTrue("controllerController.autoView", Controller.autoView);
        Object object = ((ApplicationContext) getPrivateField(Controller.class, "appContext")).getServletContext();
        assertNull("controllerController.appContext.getServletContext()", object);
        assertEquals("controllerController.appMgrClassname", "ApplicationManager", getPrivateField(Controller.class, "appMgrClassname"));
        assertTrue("controllerController.debugMode", Controller.debugMode);
        assertNotNull("controllerController.config", getPrivateField(Controller.class, "config"));
        assertNotNull("controllerController.getApplication()", Controller.getApplication());
    }
    
    public void testInvokeAction() throws Throwable {
        storeStaticField(Controller.class, "debugMode");
        storeStaticField(Controller.class, "appManager");
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        StringBuilder stringBuilder = new StringBuilder();
        Mockingbird.enterRecordingMode();
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.replaceObjectForRecording(InvocationChain.class, "<init>(java.lang.String,org.mentawai.core.Action)", invocationChain);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Consequence consequence = (Consequence) Mockingbird.getProxyObject(Consequence.class);
        setPrivateField(actionConfig, "name", "");
        setPrivateField(Controller.class, "appManager", applicationManager);
        Controller.debugMode = false;
        Mockingbird.enterNormalMode();
        Controller.setConsequenceProvider((ConsequenceProvider) Mockingbird.getProxyObject(ConsequenceProvider.class));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, actionConfig, "getFirstFilters", "(java.lang.String)java.util.List", list2, 1);
        setPrivateField(invocationChain, "filters", linkedList);
        invocationChain.addFilters(list2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(applicationManager.getGlobalFilters(false), list3);
        invocationChain.addFilters(list3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, actionConfig, "getFilters", "(java.lang.String)java.util.List", list4, 1);
        invocationChain.addFilters(list4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(applicationManager.getGlobalFilters(true), list5);
        invocationChain.addFilters(list5);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(false, linkedList, "iterator", "()java.util.Iterator", iterator, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(InvocationChain.class), "invoke", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, actionConfig, "getConsequence", "(java.lang.String,java.lang.String)org.mentawai.core.Consequence", consequence, 1);
        Mockingbird.enterTestMode(Controller.class);
        Consequence result = Controller.invokeAction(actionConfig, null, "", list, stringBuilder);
        assertNotNull("result", result);
        assertNull("Controller.appManager.getInstance()", ApplicationManager.getInstance());
        assertNotNull("Controller.consequenceProvider", getPrivateField(Controller.class, "consequenceProvider"));
    }
    
    public void testInvokeActionWithAggressiveMocks() throws Throwable {
        storeStaticField(Controller.class, "debugMode");
        storeStaticField(Controller.class, "appManager");
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        StringBuilder stringBuilder = new StringBuilder();
        Mockingbird.enterRecordingMode();
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.replaceObjectForRecording(InvocationChain.class, "<init>(java.lang.String,org.mentawai.core.Action)", invocationChain);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        StringBuffer stringBuffer = new StringBuffer();
        Consequence consequence = (Consequence) Mockingbird.getProxyObject(Consequence.class);
        setPrivateField(actionConfig, "name", "");
        setPrivateField(Controller.class, "appManager", applicationManager);
        Controller.debugMode = true;
        Mockingbird.enterNormalMode();
        Controller.setConsequenceProvider((ConsequenceProvider) Mockingbird.getProxyObject(ConsequenceProvider.class));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, actionConfig, "getFirstFilters", "(java.lang.String)java.util.List", null, 1);
        setPrivateField(invocationChain, "filters", linkedList);
        Mockingbird.setReturnValue(applicationManager.getGlobalFilters(false), null);
        Mockingbird.setReturnValue(false, actionConfig, "getFilters", "(java.lang.String)java.util.List", null, 1);
        Mockingbird.setReturnValue(applicationManager.getGlobalFilters(true), list2);
        invocationChain.addFilters(list2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(false, linkedList, "iterator", "()java.util.Iterator", iterator, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(InvocationChain.class), "invoke", "()java.lang.String", "", 1);
        DebugServletFilter.debugInputOutput(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(DebugServletFilter.getDebug((Action) null), stringBuffer);
        Mockingbird.setReturnValue(true, DebugServletFilter.class, "debug", "(java.lang.StringBuffer,java.lang.String,boolean)void", null, 1);
        Mockingbird.setReturnValue(false, actionConfig, "getConsequence", "(java.lang.String,java.lang.String)org.mentawai.core.Consequence", consequence, 1);
        Mockingbird.enterTestMode(Controller.class);
        Consequence result = Controller.invokeAction(actionConfig, null, "", list, stringBuilder);
        assertNotNull("result", result);
        assertNull("Controller.appManager.getInstance()", ApplicationManager.getInstance());
        assertNotNull("Controller.consequenceProvider", getPrivateField(Controller.class, "consequenceProvider"));
    }
    
    public void testInvokeActionWithAggressiveMocks1() throws Throwable {
        storeStaticField(Controller.class, "debugMode");
        storeStaticField(Controller.class, "appManager");
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        StringBuilder stringBuilder = new StringBuilder();
        Mockingbird.enterRecordingMode();
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.replaceObjectForRecording(InvocationChain.class, "<init>(java.lang.String,org.mentawai.core.Action)", invocationChain);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        StringBuffer stringBuffer = new StringBuffer();
        Consequence consequence = (Consequence) Mockingbird.getProxyObject(Consequence.class);
        setPrivateField(actionConfig, "name", "");
        setPrivateField(Controller.class, "appManager", applicationManager);
        Controller.debugMode = true;
        Mockingbird.enterNormalMode();
        Controller.setConsequenceProvider((ConsequenceProvider) Mockingbird.getProxyObject(ConsequenceProvider.class));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, actionConfig, "getFirstFilters", "(java.lang.String)java.util.List", list2, 1);
        setPrivateField(invocationChain, "filters", linkedList);
        invocationChain.addFilters(list2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(applicationManager.getGlobalFilters(false), list3);
        invocationChain.addFilters(list3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, actionConfig, "getFilters", "(java.lang.String)java.util.List", list4, 1);
        invocationChain.addFilters(list4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(applicationManager.getGlobalFilters(true), list5);
        invocationChain.addFilters(list5);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(false, linkedList, "iterator", "()java.util.Iterator", iterator, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        DebugServletFilter.debugInputOutput(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(DebugServletFilter.getDebug((Action) null), stringBuffer);
        Mockingbird.setReturnValue(true, DebugServletFilter.class, "debug", "(java.lang.StringBuffer,java.lang.String,boolean)void", null, 1);
        Mockingbird.setReturnValue(false, actionConfig, "getConsequence", "(java.lang.String)org.mentawai.core.Consequence", consequence, 1);
        Mockingbird.enterTestMode(Controller.class);
        Consequence result = Controller.invokeAction(actionConfig, null, null, list, stringBuilder);
        assertNotNull("result", result);
        assertNull("Controller.appManager.getInstance()", ApplicationManager.getInstance());
        assertNotNull("Controller.consequenceProvider", getPrivateField(Controller.class, "consequenceProvider"));
    }
    
    public void testInvokeActionWithAggressiveMocks2() throws Throwable {
        storeStaticField(Controller.class, "debugMode");
        storeStaticField(Controller.class, "appManager");
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        StringBuilder stringBuilder = new StringBuilder();
        Mockingbird.enterRecordingMode();
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.replaceObjectForRecording(InvocationChain.class, "<init>(java.lang.String,org.mentawai.core.Action)", invocationChain);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ConsequenceProvider consequenceProvider = (ConsequenceProvider) Mockingbird.getProxyObject(ConsequenceProvider.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        StringBuffer stringBuffer = new StringBuffer();
        Consequence consequence = (Consequence) Mockingbird.getProxyObject(Consequence.class);
        setPrivateField(actionConfig, "name", "");
        actionConfig.actionClass = null;
        Controller.debugMode = true;
        setPrivateField(Controller.class, "appManager", applicationManager);
        Mockingbird.enterNormalMode();
        Controller.setConsequenceProvider(consequenceProvider);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, actionConfig, "getFirstFilters", "(java.lang.String)java.util.List", list2, 1);
        setPrivateField(invocationChain, "filters", linkedList);
        invocationChain.addFilters(list2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(applicationManager.getGlobalFilters(false), list3);
        invocationChain.addFilters(list3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, actionConfig, "getFilters", "(java.lang.String)java.util.List", list4, 1);
        invocationChain.addFilters(list4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(applicationManager.getGlobalFilters(true), list5);
        invocationChain.addFilters(list5);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(false, linkedList, "iterator", "()java.util.Iterator", iterator, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        DebugServletFilter.debugInputOutput(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(DebugServletFilter.getDebug((Action) null), stringBuffer);
        Mockingbird.setReturnValue(true, DebugServletFilter.class, "debug", "(java.lang.StringBuffer,java.lang.String,boolean)void", null, 1);
        Mockingbird.setReturnValue(false, actionConfig, "getConsequence", "(java.lang.String)org.mentawai.core.Consequence", null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getGlobalConsequence", "(java.lang.String)org.mentawai.core.Consequence", null, 1);
        Mockingbird.setReturnValue(false, consequenceProvider, "getConsequence", "(java.lang.String,java.lang.Class,java.lang.String,java.lang.String)org.mentawai.core.Consequence", consequence, 1);
        Mockingbird.setReturnValue(false, actionConfig, "addConsequence", "(java.lang.String,org.mentawai.core.Consequence)org.mentawai.core.ActionConfig", null, 1);
        Mockingbird.enterTestMode(Controller.class);
        Consequence result = Controller.invokeAction(actionConfig, null, null, list, stringBuilder);
        assertNotNull("result", result);
        assertNull("Controller.appManager.getInstance()", ApplicationManager.getInstance());
        assertNotNull("Controller.consequenceProvider", getPrivateField(Controller.class, "consequenceProvider"));
    }
    
    public void testInvokeActionWithAggressiveMocks3() throws Throwable {
        storeStaticField(Controller.class, "debugMode");
        storeStaticField(Controller.class, "appManager");
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        StringBuilder stringBuilder = new StringBuilder();
        Mockingbird.enterRecordingMode();
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.replaceObjectForRecording(InvocationChain.class, "<init>(java.lang.String,org.mentawai.core.Action)", invocationChain);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ConsequenceProvider consequenceProvider = (ConsequenceProvider) Mockingbird.getProxyObject(ConsequenceProvider.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        StringBuffer stringBuffer = new StringBuffer();
        Consequence consequence = (Consequence) Mockingbird.getProxyObject(Consequence.class);
        setPrivateField(actionConfig, "name", "");
        actionConfig.actionClass = null;
        Mockingbird.enterNormalMode();
        actionConfig.setInnerAction("");
        Controller.debugMode = true;
        setPrivateField(Controller.class, "appManager", applicationManager);
        Controller.setConsequenceProvider(consequenceProvider);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, actionConfig, "getFirstFilters", "(java.lang.String)java.util.List", list2, 1);
        setPrivateField(invocationChain, "filters", linkedList);
        invocationChain.addFilters(list2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(applicationManager.getGlobalFilters(false), list3);
        invocationChain.addFilters(list3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, actionConfig, "getFilters", "(java.lang.String)java.util.List", list4, 1);
        invocationChain.addFilters(list4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(applicationManager.getGlobalFilters(true), list5);
        invocationChain.addFilters(list5);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(false, linkedList, "iterator", "()java.util.Iterator", iterator, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(InvocationChain.class), "invoke", "()java.lang.String", "", 1);
        DebugServletFilter.debugInputOutput(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(DebugServletFilter.getDebug((Action) null), stringBuffer);
        Mockingbird.setReturnValue(true, DebugServletFilter.class, "debug", "(java.lang.StringBuffer,java.lang.String,boolean)void", null, 1);
        Mockingbird.setReturnValue(false, actionConfig, "getConsequence", "(java.lang.String,java.lang.String)org.mentawai.core.Consequence", null, 1);
        Mockingbird.setReturnValue(false, actionConfig, "getConsequence", "(java.lang.String)org.mentawai.core.Consequence", null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getGlobalConsequence", "(java.lang.String)org.mentawai.core.Consequence", null, 1);
        Mockingbird.setReturnValue(false, consequenceProvider, "getConsequence", "(java.lang.String,java.lang.Class,java.lang.String,java.lang.String)org.mentawai.core.Consequence", consequence, 1);
        Mockingbird.setReturnValue(false, actionConfig, "addConsequence", "(java.lang.String,org.mentawai.core.Consequence)org.mentawai.core.ActionConfig", null, 1);
        Mockingbird.enterTestMode(Controller.class);
        Consequence result = Controller.invokeAction(actionConfig, null, "", list, stringBuilder);
        assertNotNull("result", result);
        assertNull("Controller.appManager.getInstance()", ApplicationManager.getInstance());
        assertNotNull("Controller.consequenceProvider", getPrivateField(Controller.class, "consequenceProvider"));
    }
    
    public void testInvokeActionWithAggressiveMocks4() throws Throwable {
        storeStaticField(Controller.class, "autoView");
        storeStaticField(Controller.class, "debugMode");
        storeStaticField(Controller.class, "appManager");
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        StringBuilder stringBuilder = new StringBuilder();
        Mockingbird.enterRecordingMode();
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.replaceObjectForRecording(InvocationChain.class, "<init>(java.lang.String,org.mentawai.core.Action)", invocationChain);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        StringBuffer stringBuffer = new StringBuffer();
        Consequence consequence = (Consequence) Mockingbird.getProxyObject(Consequence.class);
        setPrivateField(actionConfig, "name", "");
        Controller.debugMode = true;
        setPrivateField(Controller.class, "appManager", applicationManager);
        Mockingbird.enterNormalMode();
        Controller.setConsequenceProvider(null);
        Controller.autoView = true;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, actionConfig, "getFirstFilters", "(java.lang.String)java.util.List", list2, 1);
        setPrivateField(invocationChain, "filters", linkedList);
        invocationChain.addFilters(list2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(applicationManager.getGlobalFilters(false), list3);
        invocationChain.addFilters(list3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, actionConfig, "getFilters", "(java.lang.String)java.util.List", list4, 1);
        invocationChain.addFilters(list4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(applicationManager.getGlobalFilters(true), list5);
        invocationChain.addFilters(list5);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(false, linkedList, "iterator", "()java.util.Iterator", iterator, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(InvocationChain.class), "invoke", "()java.lang.String", "", 1);
        DebugServletFilter.debugInputOutput(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(DebugServletFilter.getDebug((Action) null), stringBuffer);
        Mockingbird.setReturnValue(true, DebugServletFilter.class, "debug", "(java.lang.StringBuffer,java.lang.String,boolean)void", null, 1);
        Mockingbird.setReturnValue(false, actionConfig, "getConsequence", "(java.lang.String,java.lang.String)org.mentawai.core.Consequence", null, 1);
        Mockingbird.setReturnValue(false, actionConfig, "getConsequence", "(java.lang.String)org.mentawai.core.Consequence", null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getGlobalConsequence", "(java.lang.String)org.mentawai.core.Consequence", null, 1);
        Mockingbird.setReturnValue(false, actionConfig, "getAutoConsequence", "(java.lang.String,java.lang.String)org.mentawai.core.Consequence", consequence, 1);
        Mockingbird.enterTestMode(Controller.class);
        Consequence result = Controller.invokeAction(actionConfig, null, "", list, stringBuilder);
        assertNotNull("result", result);
        assertNull("Controller.appManager.getInstance()", ApplicationManager.getInstance());
        assertNull("Controller.consequenceProvider", getPrivateField(Controller.class, "consequenceProvider"));
    }
    
    public void testInvokeActionWithAggressiveMocks5() throws Throwable {
        storeStaticField(Controller.class, "debugMode");
        storeStaticField(Controller.class, "appManager");
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        StringBuilder stringBuilder = new StringBuilder();
        Mockingbird.enterRecordingMode();
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.replaceObjectForRecording(InvocationChain.class, "<init>(java.lang.String,org.mentawai.core.Action)", invocationChain);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ConsequenceProvider consequenceProvider = (ConsequenceProvider) Mockingbird.getProxyObject(ConsequenceProvider.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        StringBuffer stringBuffer = new StringBuffer();
        Consequence consequence = (Consequence) Mockingbird.getProxyObject(Consequence.class);
        setPrivateField(actionConfig, "name", "");
        actionConfig.actionClass = null;
        Mockingbird.enterNormalMode();
        actionConfig.setInnerAction(null);
        Controller.debugMode = true;
        setPrivateField(Controller.class, "appManager", applicationManager);
        Controller.setConsequenceProvider(consequenceProvider);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, actionConfig, "getFirstFilters", "(java.lang.String)java.util.List", list2, 1);
        setPrivateField(invocationChain, "filters", linkedList);
        invocationChain.addFilters(list2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(applicationManager.getGlobalFilters(false), list3);
        invocationChain.addFilters(list3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, actionConfig, "getFilters", "(java.lang.String)java.util.List", list4, 1);
        invocationChain.addFilters(list4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(applicationManager.getGlobalFilters(true), list5);
        invocationChain.addFilters(list5);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(false, linkedList, "iterator", "()java.util.Iterator", iterator, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(InvocationChain.class), "invoke", "()java.lang.String", "", 1);
        DebugServletFilter.debugInputOutput(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(DebugServletFilter.getDebug((Action) null), stringBuffer);
        Mockingbird.setReturnValue(true, DebugServletFilter.class, "debug", "(java.lang.StringBuffer,java.lang.String,boolean)void", null, 1);
        Mockingbird.setReturnValue(false, actionConfig, "getConsequence", "(java.lang.String,java.lang.String)org.mentawai.core.Consequence", null, 1);
        Mockingbird.setReturnValue(false, actionConfig, "getConsequence", "(java.lang.String)org.mentawai.core.Consequence", null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getGlobalConsequence", "(java.lang.String)org.mentawai.core.Consequence", null, 1);
        Mockingbird.setReturnValue(false, consequenceProvider, "getConsequence", "(java.lang.String,java.lang.Class,java.lang.String,java.lang.String)org.mentawai.core.Consequence", consequence, 1);
        Mockingbird.setReturnValue(false, actionConfig, "addConsequence", "(java.lang.String,java.lang.String,org.mentawai.core.Consequence)org.mentawai.core.ActionConfig", null, 1);
        Mockingbird.enterTestMode(Controller.class);
        Consequence result = Controller.invokeAction(actionConfig, null, "", list, stringBuilder);
        assertNotNull("result", result);
        assertNull("Controller.appManager.getInstance()", ApplicationManager.getInstance());
        assertNotNull("Controller.consequenceProvider", getPrivateField(Controller.class, "consequenceProvider"));
    }
    
    public void testInvokeActionWithAggressiveMocks6() throws Throwable {
        storeStaticField(Controller.class, "debugMode");
        storeStaticField(Controller.class, "appManager");
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        StringBuilder stringBuilder = new StringBuilder();
        Mockingbird.enterRecordingMode();
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.replaceObjectForRecording(InvocationChain.class, "<init>(java.lang.String,org.mentawai.core.Action)", invocationChain);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        StringBuffer stringBuffer = new StringBuffer();
        Consequence consequence = (Consequence) Mockingbird.getProxyObject(Consequence.class);
        setPrivateField(actionConfig, "name", "");
        Controller.debugMode = true;
        setPrivateField(Controller.class, "appManager", applicationManager);
        Mockingbird.enterNormalMode();
        Controller.setConsequenceProvider(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, actionConfig, "getFirstFilters", "(java.lang.String)java.util.List", list2, 1);
        setPrivateField(invocationChain, "filters", linkedList);
        invocationChain.addFilters(list2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(applicationManager.getGlobalFilters(false), list3);
        invocationChain.addFilters(list3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, actionConfig, "getFilters", "(java.lang.String)java.util.List", list4, 1);
        invocationChain.addFilters(list4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(applicationManager.getGlobalFilters(true), list5);
        invocationChain.addFilters(list5);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(false, linkedList, "iterator", "()java.util.Iterator", iterator, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(InvocationChain.class), "invoke", "()java.lang.String", "", 1);
        DebugServletFilter.debugInputOutput(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(DebugServletFilter.getDebug((Action) null), stringBuffer);
        Mockingbird.setReturnValue(true, DebugServletFilter.class, "debug", "(java.lang.StringBuffer,java.lang.String,boolean)void", null, 1);
        Mockingbird.setReturnValue(false, actionConfig, "getConsequence", "(java.lang.String,java.lang.String)org.mentawai.core.Consequence", null, 1);
        Mockingbird.setReturnValue(false, actionConfig, "getConsequence", "(java.lang.String)org.mentawai.core.Consequence", null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getGlobalConsequence", "(java.lang.String)org.mentawai.core.Consequence", consequence, 1);
        Mockingbird.enterTestMode(Controller.class);
        Consequence result = Controller.invokeAction(actionConfig, null, "", list, stringBuilder);
        assertNotNull("result", result);
        assertNull("Controller.appManager.getInstance()", ApplicationManager.getInstance());
        assertNull("Controller.consequenceProvider", getPrivateField(Controller.class, "consequenceProvider"));
    }
    
    public void testPrepareAction() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest req = mockServletContext.createHttpServletRequest("testControllerParam1");
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        Controller controller = new Controller();
        controller.prepareAction(new LogoutAction(), req, res);
        assertEquals("(MockHttpServletRequest) req.session.getId()", "0", ((HttpSession) getPrivateField(req, "session")).getId());
        assertEquals("(MockHttpServletRequest) req.context.mimeMap.get(\"txt\")", "text/plain", ((Map) getPrivateField(getPrivateField(req, "context"), "mimeMap")).get("txt"));
        assertEquals("(MockHttpServletResponse) res", "text/html; charset=UTF-8", ((MockHttpServletResponse) res).getContentType());
        assertEquals("(MockHttpServletResponse) res", "UTF-8", ((MockHttpServletResponse) res).getCharacterEncoding());
    }
    
    public void testSetAppManager() throws Throwable {
        ApplicationManager applicationManager = new BshApplicationManager();
        Controller.setAppManager(applicationManager);
        assertSame("Controller.appManager", applicationManager, getPrivateField(Controller.class, "appManager"));
    }
    
    public void testSetAppManager1() throws Throwable {
        Controller.setAppManager((ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class));
        assertNull("Controller.appManager.getInstance()", ApplicationManager.getInstance());
    }
    
    public void testSetConsequenceProvider() throws Throwable {
        ConsequenceProvider provider = new InnerActionConsequenceProvider();
        Controller.setConsequenceProvider(provider);
        assertSame("Controller.consequenceProvider", provider, getPrivateField(Controller.class, "consequenceProvider"));
    }
    
    public void testStickyActionMapGetWithAggressiveMocks() throws Throwable {
        HttpSessionBindingListener httpSessionBindingListener = (HttpSessionBindingListener) Mockingbird.getProxyObject(Class.forName("org.mentawai.core.Controller$StickyActionMap"), true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(httpSessionBindingListener, "map", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(null), null);
        Mockingbird.enterTestMode(Class.forName("org.mentawai.core.Controller$StickyActionMap"));
        StickyAction result = (StickyAction) callPrivateMethod("org.mentawai.core.Controller$StickyActionMap", "get", new Class[] {Object.class}, httpSessionBindingListener, new Object[] {null});
        assertNull("result", result);
    }
    
    public void testStickyActionMapPutWithAggressiveMocks() throws Throwable {
        HttpSessionBindingListener httpSessionBindingListener = (HttpSessionBindingListener) Mockingbird.getProxyObject(Class.forName("org.mentawai.core.Controller$StickyActionMap"), true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(httpSessionBindingListener, "map", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.put(null, null), null);
        Mockingbird.enterTestMode(Class.forName("org.mentawai.core.Controller$StickyActionMap"));
        callPrivateMethod("org.mentawai.core.Controller$StickyActionMap", "put", new Class[] {Object.class, StickyAction.class}, httpSessionBindingListener, new Object[] {null, null});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testStickyActionMapRemoveWithAggressiveMocks() throws Throwable {
        HttpSessionBindingListener httpSessionBindingListener = (HttpSessionBindingListener) Mockingbird.getProxyObject(Class.forName("org.mentawai.core.Controller$StickyActionMap"), true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(httpSessionBindingListener, "map", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.remove(null), null);
        Mockingbird.enterTestMode(Class.forName("org.mentawai.core.Controller$StickyActionMap"));
        StickyAction result = (StickyAction) callPrivateMethod("org.mentawai.core.Controller$StickyActionMap", "remove", new Class[] {Object.class}, httpSessionBindingListener, new Object[] {null});
        assertNull("result", result);
    }
    
    public void testStickyActionMapValueBoundWithAggressiveMocks() throws Throwable {
        HttpSessionBindingListener httpSessionBindingListener = (HttpSessionBindingListener) Mockingbird.getProxyObject(Class.forName("org.mentawai.core.Controller$StickyActionMap"), true);
        Mockingbird.enterTestMode(Class.forName("org.mentawai.core.Controller$StickyActionMap"));
        callPrivateMethod("org.mentawai.core.Controller$StickyActionMap", "valueBound", new Class[] {HttpSessionBindingEvent.class}, httpSessionBindingListener, new Object[] {null});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testStickyActionMapValueUnboundWithAggressiveMocks() throws Throwable {
        HttpSessionBindingListener httpSessionBindingListener = (HttpSessionBindingListener) Mockingbird.getProxyObject(Class.forName("org.mentawai.core.Controller$StickyActionMap"), true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        StickyAction stickyAction = (StickyAction) Mockingbird.getProxyObject(StickyAction.class);
        StickyAction stickyAction2 = (StickyAction) Mockingbird.getProxyObject(StickyAction.class);
        setPrivateField(httpSessionBindingListener, "map", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.values(), collection);
        Mockingbird.setReturnValue(collection.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), stickyAction);
        stickyAction.onRemoved();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), stickyAction2);
        stickyAction2.onRemoved();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(Class.forName("org.mentawai.core.Controller$StickyActionMap"));
        callPrivateMethod("org.mentawai.core.Controller$StickyActionMap", "valueUnbound", new Class[] {HttpSessionBindingEvent.class}, httpSessionBindingListener, new Object[] {null});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAdhereThrowsNullPointerException() throws Throwable {
        try {
            Controller.adhere(null, BaseAction.class);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Controller.class, ex);
        }
    }
    
    public void testCreateInvocationChainThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("org.mentawai.core.Controller", "createInvocationChain", new Class[] {ActionConfig.class, Action.class, String.class}, null, new Object[] {null, new LogoutAction(), "testControllerInnerAction"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Controller.class, ex);
        }
    }
    
    public void testDisjoinThrowsNullPointerException() throws Throwable {
        try {
            Controller.disjoin(null, BaseAction.class);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Controller.class, ex);
        }
    }
    
    public void testGetRootCauseThrowsNullPointerException() throws Throwable {
        Controller controller = new Controller();
        try {
            callPrivateMethod("org.mentawai.core.Controller", "getRootCause", new Class[] {Throwable.class}, controller, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Controller.class, ex);
        }
    }
    
    public void testGetURIThrowsNullPointerException() throws Throwable {
        Controller controller = new Controller();
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(req.getContextPath(), "testString");
        Mockingbird.setReturnValue(req.getRequestURI(), null);
        Mockingbird.enterTestMode(Controller.class);
        try {
            controller.getURI(req);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Controller.class, ex);
        }
    }
    
    public void testInitApplicationManagerThrowsServletException() throws Throwable {
        try {
            callPrivateMethod("org.mentawai.core.Controller", "initApplicationManager", new Class[] {}, null, new Object[] {});
            fail("Expected ServletException to be thrown");
        } catch (ServletException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 3 assertions
        }
    }
    
    public void testInitApplicationManagerThrowsServletException1() throws Throwable {
        storeStaticField(Controller.class, "appMgrClassname");
        storeStaticField(Controller.class, "reloadAppManager");
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(AMClassLoader.class, "<init>()", Mockingbird.getProxyObject(AMClassLoader.class));
        Controller.reloadAppManager = true;
        setPrivateField(Controller.class, "appMgrClassname", "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(ServletException.class, "<init>(java.lang.String,java.lang.Throwable)", Mockingbird.getProxyObject(ServletException.class));
        Mockingbird.enterTestMode(Controller.class);
        try {
            callPrivateMethod("org.mentawai.core.Controller", "initApplicationManager", new Class[] {}, null, new Object[] {});
            fail("Expected ServletException to be thrown");
        } catch (ServletException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testInitApplicationManagerThrowsServletException2() throws Throwable {
        storeStaticField(Controller.class, "appMgrClassname");
        storeStaticField(Controller.class, "reloadAppManager");
        Controller.reloadAppManager = false;
        setPrivateField(Controller.class, "appMgrClassname", "com.sun.corba.se.spi.activation.LocatorPackage.ServerLocationHelper");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Throwable.class), "getMessage", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(ServletException.class, "<init>(java.lang.String,java.lang.Throwable)", Mockingbird.getProxyObject(ServletException.class));
        Mockingbird.enterTestMode(Controller.class);
        try {
            callPrivateMethod("org.mentawai.core.Controller", "initApplicationManager", new Class[] {}, null, new Object[] {});
            fail("Expected ServletException to be thrown");
        } catch (ServletException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testInitThrowsClassCastException() throws Throwable {
        Controller controller = new Controller();
        ServletConfig conf = (ServletConfig) Mockingbird.getProxyObject(ServletConfig.class);
        Mockingbird.enterRecordingMode();
        ServletContext servletContext = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        Mockingbird.setReturnValue(conf.getServletContext(), servletContext);
        Mockingbird.replaceObjectForRecording(ApplicationContext.class, "<init>(javax.servlet.ServletContext)", Mockingbird.getProxyObject(ApplicationContext.class));
        Mockingbird.setReturnValue(servletContext.getRealPath(""), "testString");
        ApplicationManager.setRealPath("testString");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setException(conf.getInitParameter("reloadAppManager"), (Throwable) Mockingbird.getProxyObject(ClassCastException.class));
        Mockingbird.enterTestMode(Controller.class);
        try {
            controller.init(conf);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 9 assertions
        }
    }
    
    public void testInitThrowsServletException() throws Throwable {
        Controller controller = new Controller();
        ServletConfig conf = (ServletConfig) Mockingbird.getProxyObject(ServletConfig.class);
        Mockingbird.enterTestMode(Controller.class);
        try {
            controller.init(conf);
            fail("Expected ServletException to be thrown");
        } catch (ServletException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 11 assertions
        }
    }
    
    public void testInitThrowsServletException1() throws Throwable {
        Controller controller = new Controller();
        ServletConfig conf = (ServletConfig) Mockingbird.getProxyObject(ServletConfig.class);
        Mockingbird.enterRecordingMode();
        ServletContext servletContext = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        Mockingbird.setReturnValue(conf.getServletContext(), servletContext);
        Mockingbird.replaceObjectForRecording(ApplicationContext.class, "<init>(javax.servlet.ServletContext)", Mockingbird.getProxyObject(ApplicationContext.class));
        Mockingbird.setReturnValue(servletContext.getRealPath(""), "testString");
        ApplicationManager.setRealPath("testString");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(conf.getInitParameter("testControllerParam1"), " t/ ");
        Mockingbird.setReturnValue(conf.getInitParameter("testControllerParam11"), "testString");
        Mockingbird.setReturnValue(conf.getInitParameter("testControllerParam12"), "testString");
        Mockingbird.setReturnValue(conf.getInitParameter("applicationManager"), "testString");
        callPrivateMethod("org.mentawai.core.Controller", "initApplicationManager", new Class[] {}, null, new Object[] {});
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(ServletException.class));
        Mockingbird.enterTestMode(Controller.class);
        try {
            controller.init(conf);
            fail("Expected ServletException to be thrown");
        } catch (ServletException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testInitThrowsServletException2() throws Throwable {
        ServletConfig conf = new MockServletContext().createServletConfig();
        Controller controller = new Controller();
        Mockingbird.enterRecordingMode();
        callPrivateMethod("org.mentawai.core.Controller", "initApplicationManager", new Class[] {}, null, new Object[] {});
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(ServletException.class));
        Mockingbird.enterTestMode(Controller.class);
        try {
            controller.init(conf);
            fail("Expected ServletException to be thrown");
        } catch (ServletException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testInitThrowsStackOverflowError() throws Throwable {
        Controller conf = new Controller();
        try {
            conf.init(conf);
            fail("Expected StackOverflowError to be thrown");
        } catch (StackOverflowError ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 10 assertions
        }
    }
    
    public void testInvokeActionThrowsActionExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(Controller.class, "autoView");
        storeStaticField(Controller.class, "debugMode");
        storeStaticField(Controller.class, "appManager");
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        StringBuilder stringBuilder = new StringBuilder();
        Mockingbird.enterRecordingMode();
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.replaceObjectForRecording(InvocationChain.class, "<init>(java.lang.String,org.mentawai.core.Action)", invocationChain);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        StringBuffer stringBuffer = new StringBuffer();
        setPrivateField(actionConfig, "name", "");
        Controller.debugMode = true;
        setPrivateField(Controller.class, "appManager", applicationManager);
        Mockingbird.enterNormalMode();
        Controller.setConsequenceProvider(null);
        Controller.autoView = false;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, actionConfig, "getFirstFilters", "(java.lang.String)java.util.List", list2, 1);
        setPrivateField(invocationChain, "filters", linkedList);
        invocationChain.addFilters(list2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(applicationManager.getGlobalFilters(false), list3);
        invocationChain.addFilters(list3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, actionConfig, "getFilters", "(java.lang.String)java.util.List", list4, 1);
        invocationChain.addFilters(list4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(applicationManager.getGlobalFilters(true), list5);
        invocationChain.addFilters(list5);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(false, linkedList, "iterator", "()java.util.Iterator", iterator, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(InvocationChain.class), "invoke", "()java.lang.String", "", 1);
        DebugServletFilter.debugInputOutput(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(DebugServletFilter.getDebug((Action) null), stringBuffer);
        Mockingbird.setReturnValue(true, DebugServletFilter.class, "debug", "(java.lang.StringBuffer,java.lang.String,boolean)void", null, 1);
        Mockingbird.setReturnValue(false, actionConfig, "getConsequence", "(java.lang.String,java.lang.String)org.mentawai.core.Consequence", null, 1);
        Mockingbird.setReturnValue(false, actionConfig, "getConsequence", "(java.lang.String)org.mentawai.core.Consequence", null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getGlobalConsequence", "(java.lang.String)org.mentawai.core.Consequence", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(ActionException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(ActionException.class));
        Mockingbird.enterTestMode(Controller.class);
        try {
            Controller.invokeAction(actionConfig, null, "", list, stringBuilder);
            fail("Expected ActionException to be thrown");
        } catch (ActionException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testInvokeActionThrowsIllegalArgumentException() throws Throwable {
        ActionConfig ac = new ActionConfig(Integer.class, "testControllerInnerAction");
        Action action = new MockAction(new PojoAction(ApplicationManager.chain(new ActionConfig(Integer.class))));
        try {
            Controller.invokeAction(ac, action, "testControllerInnerAction", null, new StringBuilder(100));
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 6 assertions
        }
    }
    
    public void testInvokeActionThrowsIllegalArgumentException1() throws Throwable {
        SpringActionConfig ac = (SpringActionConfig) Mockingbird.getProxyObject(SpringActionConfig.class);
        PojoAction action = (PojoAction) Mockingbird.getProxyObject(PojoAction.class);
        StringBuilder returnedResult = (StringBuilder) Mockingbird.getProxyObject(StringBuilder.class);
        ArrayList filters = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Object invocationChain = callPrivateMethod("org.mentawai.core.Controller", "createInvocationChain", new Class[] {ActionConfig.class, Action.class, String.class}, null, new Object[] {ac, action, "testString"});
        Mockingbird.setReturnValue(invocationChain, Mockingbird.getProxyObject(InvocationChain.class));
        Mockingbird.setReturnValue(false, filters, "size", "()int", new Object[] {}, new Integer(21), 1);
        Mockingbird.enterTestMode(Controller.class);
        try {
            Controller.invokeAction(ac, action, "testString", filters, returnedResult);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 7 assertions
        }
    }
    
    public void testInvokeActionThrowsNullPointerException() throws Throwable {
        ActionConfig ac = new SpringActionConfig("testControllerBeanName");
        ac.filterFirst((Filter) null);
        ac.redirError("testControllerPage");
        try {
            Controller.invokeAction(ac, new PojoAction(ApplicationManager.chain(new ActionConfig(Integer.class))), "testControllerInnerAction", new ArrayList(100), new StringBuilder());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 7 assertions
        }
    }
    
    public void testInvokeActionThrowsNullPointerException1() throws Throwable {
        ActionConfig ac = new SpringActionConfig("testControllerBeanName");
        ac.on("testControllerResult", "testControllerJsp");
        try {
            Controller.invokeAction(ac, new PojoAction(""), null, new ArrayList(100), new StringBuilder());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 7 assertions
        }
    }
    
    public void testInvokeActionThrowsNullPointerException2() throws Throwable {
        ArrayList filters = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        StringBuilder returnedResult = (StringBuilder) Mockingbird.getProxyObject(StringBuilder.class);
        ActionConfig ac = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Object invocationChain2 = callPrivateMethod("org.mentawai.core.Controller", "createInvocationChain", new Class[] {ActionConfig.class, Action.class, String.class}, null, new Object[] {ac, null, " X "});
        Mockingbird.setReturnValue(invocationChain2, invocationChain);
        Mockingbird.setReturnValue(false, filters, "size", "()int", new Object[] {}, new Integer(0), 1);
        List linkedList = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.setReturnValue(invocationChain.getFilters(), linkedList);
        Iterator listIterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, linkedList, "iterator", "()java.util.Iterator", new Object[] {}, listIterator, 1);
        Mockingbird.setReturnValue(false, listIterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setException(invocationChain.invoke(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(Controller.class);
        try {
            Controller.invokeAction(ac, null, " X ", filters, returnedResult);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 5 assertions
        }
    }
    
    public void testInvokeActionThrowsNullPointerException3() throws Throwable {
        List filters = new ArrayList(100);
        Action action = new PojoAction(ApplicationManager.chain(new ActionConfig(Integer.class)));
        StringBuilder returnedResult = new StringBuilder();
        Mockingbird.enterRecordingMode();
        Object invocationChain = callPrivateMethod("org.mentawai.core.Controller", "createInvocationChain", new Class[] {ActionConfig.class, Action.class, String.class}, null, new Object[] {null, action, "testString"});
        Mockingbird.setException(invocationChain, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(Controller.class);
        try {
            Controller.invokeAction(null, action, "testString", filters, returnedResult);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 4 assertions
        }
    }
    
    public void testInvokeActionThrowsNullPointerException4() throws Throwable {
        PojoAction action = (PojoAction) Mockingbird.getProxyObject(PojoAction.class);
        ArrayList filters = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        StringBuilder returnedResult = (StringBuilder) Mockingbird.getProxyObject(StringBuilder.class);
        Mockingbird.enterRecordingMode();
        Object invocationChain = callPrivateMethod("org.mentawai.core.Controller", "createInvocationChain", new Class[] {ActionConfig.class, Action.class, String.class}, null, new Object[] {null, action, "testString"});
        Mockingbird.setException(invocationChain, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(Controller.class);
        try {
            Controller.invokeAction(null, action, "testString", filters, returnedResult);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 4 assertions
        }
    }
    
    public void testPrepareActionThrowsNullPointerException() throws Throwable {
        Controller controller = new Controller();
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest req = mockServletContext.createHttpServletRequest("testControllerParam1");
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        try {
            controller.prepareAction(null, req, res);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("(MockHttpServletResponse) res", "text/html; charset=UTF-8", ((MockHttpServletResponse) res).getContentType());
            assertEquals("(MockHttpServletResponse) res", "UTF-8", ((MockHttpServletResponse) res).getCharacterEncoding());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Controller.class, ex);
        }
    }
    
    public void testServiceThrowsServletException() throws Throwable {
        storeStaticField(Controller.class, "appManager");
        Controller controller = new Controller();
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(ServletException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(ServletException.class));
        setPrivateField(Controller.class, "appManager", null);
        Mockingbird.enterTestMode(Controller.class);
        try {
            controller.service((HttpServletRequest) null, (HttpServletResponse) null);
            fail("Expected ServletException to be thrown");
        } catch (ServletException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testSetAppManagerThrowsNullPointerException() throws Throwable {
        try {
            Controller.setAppManager(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 3 assertions
        }
    }
}

