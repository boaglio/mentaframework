/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 7:22:59 PM
 * Time to generate: 02:14.634 seconds
 *
 */

package org.mentawai.core;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import javax.servlet.http.HttpServletRequest;
import org.mentawai.i18n.LocaleManager;
import org.mentawai.util.StringUtils;

public class AbstractInputAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return AbstractInput.class;
    }
    
    public void testGetBooleanValue() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "");
        boolean result = new MapInput(values).getBooleanValue("testString");
        assertFalse("result", result);
    }
    
    public void testGetBooleanValue1() throws Throwable {
        boolean result = new MapInput().getBooleanValue("testAbstractInputName");
        assertFalse("result", result);
    }
    
    public void testGetBooleanValue2() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        RequestInput inputRequest = new RequestInput(req);
        inputRequest.put("testString", "");
        boolean result = inputRequest.getBooleanValue("testString", true);
        assertTrue("result", result);
    }
    
    public void testGetBooleanValue3() throws Throwable {
        boolean result = new MapInput().getBooleanValue("testAbstractInputName", false);
        assertFalse("result", result);
    }
    
    public void testGetBooleanValueWithAggressiveMocks() throws Throwable {
        AbstractInput abstractInput = (AbstractInput) Mockingbird.getProxyObject(AbstractInput.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(abstractInput.getStringValue(""), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, abstractInput, "getStringValue", "(java.lang.String)java.lang.String", "false", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        boolean result = abstractInput.getBooleanValue("", false);
        assertFalse("result", result);
    }
    
    public void testGetBooleanValueWithAggressiveMocks1() throws Throwable {
        AbstractInput abstractInput = (AbstractInput) Mockingbird.getProxyObject(AbstractInput.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(abstractInput.getStringValue(""), "true");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        boolean result = abstractInput.getBooleanValue("");
        assertTrue("result", result);
    }
    
    public void testGetBooleanValueWithAggressiveMocks2() throws Throwable {
        AbstractInput abstractInput = (AbstractInput) Mockingbird.getProxyObject(AbstractInput.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(abstractInput.getStringValue(""), "on");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        boolean result = abstractInput.getBooleanValue("");
        assertTrue("result", result);
    }
    
    public void testGetBooleanValueWithAggressiveMocks3() throws Throwable {
        AbstractInput abstractInput = (AbstractInput) Mockingbird.getProxyObject(AbstractInput.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(abstractInput.getStringValue(""), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        boolean result = abstractInput.getBooleanValue("");
        assertFalse("result", result);
    }
    
    public void testGetBooleanValueWithAggressiveMocks4() throws Throwable {
        AbstractInput abstractInput = (AbstractInput) Mockingbird.getProxyObject(AbstractInput.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(abstractInput.getStringValue(""), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        boolean result = abstractInput.getBooleanValue("");
        assertTrue("result", result);
    }
    
    public void testGetDate() throws Throwable {
        Date result = new MapInput().getDate("testAbstractInputName", 100);
        assertNull("result", result);
    }
    
    public void testGetDate1() throws Throwable {
        Date result = new MapInput().getDate("testAbstractInputName", "testAbstractInputPattern");
        assertNull("result", result);
    }
    
    public void testGetDate2() throws Throwable {
        AbstractInput inputMap = new MapInput();
        Object result = callPrivateMethod("org.mentawai.core.AbstractInput", "getDate", new Class[] {String.class, String.class, int.class}, inputMap, new Object[] {"testAbstractInputName", "testAbstractInputPattern", new Integer(100)});
        assertNull("result", result);
    }
    
    public void testGetDate3() throws Throwable {
        Date result = new MapInput().getDate("testAbstractInputName");
        assertNull("result", result);
    }
    
    public void testGetDateWithAggressiveMocks() throws Throwable {
        AbstractInput abstractInput = (AbstractInput) Mockingbird.getProxyObject(AbstractInput.class, true);
        Date date = (Date) Mockingbird.getProxyObject(Date.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, abstractInput, "getValue", "(java.lang.String)java.lang.Object", date, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        Date result = abstractInput.getDate("");
        assertNotNull("result", result);
    }
    
    public void testGetDateWithAggressiveMocks1() throws Throwable {
        AbstractInput abstractInput = (AbstractInput) Mockingbird.getProxyObject(AbstractInput.class, true);
        DateFormat dateFormat = (DateFormat) Mockingbird.getProxyObject(DateFormat.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, abstractInput, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, abstractInput, "getStringValue", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(abstractInput.getLocale(), null);
        Mockingbird.setReturnValue(true, DateFormat.class, "getDateInstance", "(int,java.util.Locale)java.text.DateFormat", new Object[] {new Integer(0), null}, dateFormat, 1);
        Mockingbird.setReturnValue(false, dateFormat, "parse", "(java.lang.String)java.util.Date", null, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        Date result = abstractInput.getDate("", 0);
        assertNull("result", result);
    }
    
    public void testGetDoubleValue() throws Throwable {
        double result = new MapInput(new HashMap(100, 100.0F)).getDoubleValue("testAbstractInputName");
        assertEquals("result", -1.0, result, 1.0E-6);
    }
    
    public void testGetDoubleValue1() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "");
        double result = new MapInput(values).getDoubleValue("testString");
        assertEquals("result", -1.0, result, 1.0E-6);
    }
    
    public void testGetDoubleValue2() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "1");
        double result = new MapInput(values).getDoubleValue("testString", 100.0);
        assertEquals("result", 1.0, result, 1.0E-6);
    }
    
    public void testGetDoubleValue3() throws Throwable {
        double result = new MapInput(new HashMap(100, 100.0F)).getDoubleValue("testAbstractInputName", 100.0);
        assertEquals("result", 100.0, result, 1.0E-6);
    }
    
    public void testGetDoubleValue4() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        RequestInput inputRequest = new RequestInput(req);
        inputRequest.put("testString", "");
        double result = inputRequest.getDoubleValue("testString", 100.0);
        assertEquals("result", 100.0, result, 1.0E-6);
    }
    
    public void testGetDoubleValue5() throws Throwable {
        double result = new MapInput().getDoubleValue("testAbstractInputName", 0.0);
        assertEquals("result", 0.0, result, 1.0E-6);
    }
    
    public void testGetEnumWithAggressiveMocks() throws Throwable {
        AbstractInput abstractInput = (AbstractInput) Mockingbird.getProxyObject(AbstractInput.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(abstractInput.getStringValue(""), "");
        Mockingbird.setReturnValue(true, Enum.class, "valueOf", "(java.lang.Class,java.lang.String)java.lang.Enum", null, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        Enum result = abstractInput.getEnum("", null);
        assertNull("result", result);
    }
    
    public void testGetFloatValue() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        RequestInput inputRequest = new RequestInput(req);
        inputRequest.setValue("testString", new Integer(-32));
        float result = inputRequest.getFloatValue("testString");
        assertEquals("result", -32.0F, result, 1.0E-6F);
    }
    
    public void testGetFloatValue1() throws Throwable {
        float result = new MapInput().getFloatValue("testAbstractInputName");
        assertEquals("result", -1.0F, result, 1.0E-6F);
    }
    
    public void testGetFloatValue2() throws Throwable {
        MapInput inputMap = new MapInput();
        inputMap.setValue("testString", "");
        float result = inputMap.getFloatValue("testString");
        assertEquals("result", -1.0F, result, 1.0E-6F);
    }
    
    public void testGetFloatValue3() throws Throwable {
        MapInput inputMap = new MapInput();
        inputMap.setValue("testString", "");
        float result = inputMap.getFloatValue("testString", 100.0F);
        assertEquals("result", 100.0F, result, 1.0E-6F);
    }
    
    public void testGetFloatValue4() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        RequestInput inputRequest = new RequestInput(req);
        inputRequest.setValue("testString", new Integer(-32));
        float result = inputRequest.getFloatValue("testString", 100.0F);
        assertEquals("result", -32.0F, result, 1.0E-6F);
    }
    
    public void testGetFloatValue5() throws Throwable {
        float result = new MapInput(new HashMap(100, 100.0F)).getFloatValue("testAbstractInputName", 0.0F);
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testGetInstance() throws Throwable {
        AbstractInput inputMap = new MapInput();
        Object result = callPrivateMethod("org.mentawai.core.AbstractInput", "getInstance", new Class[] {Class.class}, inputMap, new Object[] {Object.class});
        assertNotNull("result", result);
    }
    
    public void testGetIntValue() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "1");
        int result = new MapInput(values).getIntValue("testString");
        assertEquals("result", 1, result);
    }
    
    public void testGetIntValue1() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        RequestInput inputRequest = new RequestInput(req);
        inputRequest.put("testString", "");
        int result = inputRequest.getIntValue("testString");
        assertEquals("result", -1, result);
    }
    
    public void testGetIntValue2() throws Throwable {
        int result = new MapInput(new HashMap(100, 100.0F)).getIntValue("testAbstractInputName");
        assertEquals("result", -1, result);
    }
    
    public void testGetIntValue3() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        RequestInput inputRequest = new RequestInput(req);
        inputRequest.setValue("9", new Integer(0));
        int result = inputRequest.getIntValue("9");
        assertEquals("result", 0, result);
    }
    
    public void testGetIntValue4() throws Throwable {
        int result = new MapInput(new HashMap(100, 100.0F)).getIntValue("testAbstractInputName", 0);
        assertEquals("result", 0, result);
    }
    
    public void testGetIntValue5() throws Throwable {
        MapInput inputMap = new MapInput();
        inputMap.setValue("testString", "");
        int result = inputMap.getIntValue("testString", 100);
        assertEquals("result", 100, result);
    }
    
    public void testGetIntValues() throws Throwable {
        int[] result = new MapInput(new HashMap(100, 100.0F)).getIntValues("testAbstractInputName");
        assertNull("result", result);
    }
    
    public void testGetIntValuesWithAggressiveMocks() throws Throwable {
        AbstractInput abstractInput = (AbstractInput) Mockingbird.getProxyObject(AbstractInput.class, true);
        String[] strings = new String[2];
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(abstractInput.getStringValues(""), strings);
        strings[0] = "";
        strings[1] = "";
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        int[] result = abstractInput.getIntValues("");
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0, result[0]);
    }
    
    public void testGetIntValuesWithAggressiveMocks1() throws Throwable {
        AbstractInput abstractInput = (AbstractInput) Mockingbird.getProxyObject(AbstractInput.class, true);
        String[] strings = new String[0];
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(abstractInput.getStringValues(""), strings);
        Mockingbird.enterTestMode(AbstractInput.class);
        int[] result = abstractInput.getIntValues("");
        assertNull("result", result);
    }
    
    public void testGetLongValue() throws Throwable {
        MapInput inputMap = new MapInput();
        inputMap.setValue("testString", "");
        long result = inputMap.getLongValue("testString", 0L);
        assertEquals("result", 0L, result);
    }
    
    public void testGetLongValue1() throws Throwable {
        long result = new MapInput().getLongValue("testAbstractInputName", 0L);
        assertEquals("result", 0L, result);
    }
    
    public void testGetLongValue2() throws Throwable {
        long result = new MapInput().getLongValue("testAbstractInputName", 100L);
        assertEquals("result", 100L, result);
    }
    
    public void testGetLongValue3() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "1");
        long result = new MapInput(values).getLongValue("testString", 100L);
        assertEquals("result", 1L, result);
    }
    
    public void testGetLongValue4() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        RequestInput inputRequest = new RequestInput(req);
        inputRequest.setValue("testString", new Integer(-32));
        long result = inputRequest.getLongValue("testString");
        assertEquals("result", -32L, result);
    }
    
    public void testGetLongValue5() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        RequestInput inputRequest = new RequestInput(req);
        inputRequest.put("testString", "");
        long result = inputRequest.getLongValue("testString");
        assertEquals("result", -1L, result);
    }
    
    public void testGetLongValue6() throws Throwable {
        long result = new MapInput(new HashMap(100, 100.0F)).getLongValue("testAbstractInputName");
        assertEquals("result", -1L, result);
    }
    
    public void testGetObject() throws Throwable {
        Object result = new MapInput().getObject(Object.class, "testAbstractInputPrefix");
        assertNotNull("result", result);
    }
    
    public void testGetObject1() throws Throwable {
        Integer bean = new Integer(0);
        Integer result = (Integer) new MapInput().getObject(bean);
        assertSame("result", bean, result);
    }
    
    public void testGetObject2() throws Throwable {
        String result = (String) new MapInput().getObject("testString", "testAbstractInputPrefix");
        assertEquals("result", "testString", result);
    }
    
    public void testGetObject3() throws Throwable {
        Integer bean = new Integer(31);
        Integer result = (Integer) new MapInput(new HashMap(100, 100.0F)).getObject(bean, "testAbstractInputPrefix");
        assertSame("result", bean, result);
    }
    
    public void testGetObject4() throws Throwable {
        Integer bean = new Integer(58);
        Integer result = (Integer) new MapInput().getObject(bean);
        assertSame("result", bean, result);
    }
    
    public void testGetObject5() throws Throwable {
        String result = (String) new MapInput(new HashMap(100, 100.0F)).getObject("");
        assertEquals("result", "", result);
    }
    
    public void testGetObject6() throws Throwable {
        Integer target = new Integer(100);
        Integer result = (Integer) new MapInput().getObject(target, "testAbstractInputPrefix", true, false, false);
        assertSame("result", target, result);
    }
    
    public void testGetObject7() throws Throwable {
        Boolean target = Boolean.TRUE;
        Boolean result = (Boolean) new MapInput().getObject(target, "testAbstractInputPrefix", true, false, false);
        assertSame("result", target, result);
    }
    
    public void testGetObject8() throws Throwable {
        String result = (String) new MapInput(new HashMap(100, 100.0F)).getObject("testString", "testAbstractInputPrefix", true, false, false);
        assertEquals("result", "testString", result);
    }
    
    public void testGetObject9() throws Throwable {
        Integer target = new Integer(0);
        Integer result = (Integer) new MapInput().getObject(target, "testAbstractInputPrefix", true, false, true);
        assertSame("result", target, result);
    }
    
    public void testGetObject10() throws Throwable {
        Object result = new MapInput().getObject(Object.class);
        assertNotNull("result", result);
    }
    
    public void testGetObject11() throws Throwable {
        Integer bean = new Integer(0);
        Integer result = (Integer) new MapInput().getObject(bean, "testAbstractInputPrefix");
        assertSame("result", bean, result);
    }
    
    public void testGetBooleanValueThrowsInputException() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        Map inputRequest = new RequestInput(req);
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"bA#@=<u:}~|nI;H'*jQFU1LzLrY-a~%k8F", new Integer(59)});
        try {
            ((AbstractInput) inputRequest).getBooleanValue("bA#@=<u:}~|nI;H'*jQFU1LzLrY-a~%k8F");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to boolean: bA#@=<u:}~|nI;H'*jQFU1LzLrY-a~%k8F (59)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetBooleanValueThrowsInputException1() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        try {
            new MapInput(values).getBooleanValue("testString");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to boolean: testString (testString)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetBooleanValueThrowsInputException2() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", new Integer(-2));
        try {
            new MapInput(values).getBooleanValue("testString", true);
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to boolean: testString (-2)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetDateThrowsIllegalArgumentException() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        try {
            new MapInput(values).getDate("testString", 100);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Illegal date style 100", ex.getMessage());
            assertThrownBy(DateFormat.class, ex);
        }
    }
    
    public void testGetDateThrowsIllegalArgumentException1() throws Throwable {
        MapInput inputMap = new MapInput();
        inputMap.setValue("testString", new Object());
        try {
            inputMap.getDate("testString", "testAbstractInputPattern");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Illegal pattern character 't'", ex.getMessage());
            assertThrownBy(SimpleDateFormat.class, ex);
        }
    }
    
    public void testGetDateThrowsIllegalArgumentException2() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        RequestInput inputRequest = new RequestInput(req);
        inputRequest.setValue("testString", new Object());
        Mockingbird.enterRecordingMode();
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.setReturnValue(LocaleManager.getLocale(req), locale);
        Mockingbird.setException(true, DateFormat.class, "getDateInstance", "(int,java.util.Locale)java.text.DateFormat", new Object[] {new Integer(-100), locale}, (Throwable) Mockingbird.getProxyObject(IllegalArgumentException.class), 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        try {
            callPrivateMethod("org.mentawai.core.AbstractInput", "getDate", new Class[] {String.class, String.class, int.class}, inputRequest, new Object[] {"testString", null, new Integer(-100)});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("inputRequest.size()", 1, inputRequest.size());
        }
    }
    
    public void testGetDateThrowsIllegalArgumentException3() throws Throwable {
        MapInput inputMap = new MapInput();
        inputMap.setValue("testString", new Object());
        try {
            callPrivateMethod("org.mentawai.core.AbstractInput", "getDate", new Class[] {String.class, String.class, int.class}, inputMap, new Object[] {"testString", "testAbstractInputPattern", new Integer(100)});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Illegal pattern character 't'", ex.getMessage());
            assertThrownBy(SimpleDateFormat.class, ex);
        }
    }
    
    public void testGetDateThrowsIllegalStateException() throws Throwable {
        Map inputRequest = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"testString", Mockingbird.getProxyObject(HashMap.class)});
        Mockingbird.enterTestMode(AbstractInput.class);
        try {
            ((AbstractInput) inputRequest).getDate("testString", -1);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Should never be here!", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetDateThrowsIllegalStateException1() throws Throwable {
        HttpServletRequest httpServletRequest = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Map values = new HashMap(100, 100.0F);
        values.put("testString", httpServletRequest);
        AbstractInput inputMap = new MapInput(values);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(httpServletRequest.toString(), "AutoMock of javax.servlet.http.HttpServletRequest");
        Mockingbird.setReturnValue(StringUtils.isEmpty("testAbstractInputParam1"), false);
        Mockingbird.enterTestMode(AbstractInput.class);
        try {
            inputMap.getDate("testString", null);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Should never be here!", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetDateThrowsIllegalStateException2() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        RequestInput inputRequest = new RequestInput(req);
        inputRequest.put("testString", "testString");
        try {
            callPrivateMethod("org.mentawai.core.AbstractInput", "getDate", new Class[] {String.class, String.class, int.class}, inputRequest, new Object[] {"testString", null, new Integer(-1)});
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Should never be here!", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetDateThrowsInputException() throws Throwable {
        Map inputRequest = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"testString", Mockingbird.getProxyObject(HashMap.class)});
        Mockingbird.enterTestMode(AbstractInput.class);
        try {
            ((AbstractInput) inputRequest).getDate("testString", 0);
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetDateThrowsInputException1() throws Throwable {
        MapInput inputMap = new MapInput();
        Object value = Mockingbird.getProxyObject(Object.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        inputMap.setValue("testAbstractInputName", value);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", value, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", value, 1);
        Mockingbird.setReturnValue(false, value, "toString", "()java.lang.String", new Object[] {}, "java.lang.Object@b82491", 1);
        Mockingbird.setReturnValue(StringUtils.isEmpty("testAbstractInputParam1"), false);
        Mockingbird.setException(false, Mockingbird.getProxyObject(SimpleDateFormat.class), "parse", "(java.lang.String)java.util.Date", (Throwable) Mockingbird.getProxyObject(ParseException.class), 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        try {
            inputMap.getDate("testAbstractInputName", "");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to date: testAbstractInputName (java.lang.Object@b82491)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetDateThrowsInputException2() throws Throwable {
        RequestInput inputRequest = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        inputRequest.put("testString", "testString");
        Mockingbird.enterTestMode(AbstractInput.class);
        try {
            callPrivateMethod("org.mentawai.core.AbstractInput", "getDate", new Class[] {String.class, String.class, int.class}, inputRequest, new Object[] {"testString", null, new Integer(0)});
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to date: testString (testString)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetDateThrowsInputException3() throws Throwable {
        RequestInput inputRequest = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        inputRequest.put("testString", "testString");
        Mockingbird.enterTestMode(AbstractInput.class);
        try {
            callPrivateMethod("org.mentawai.core.AbstractInput", "getDate", new Class[] {String.class, String.class, int.class}, inputRequest, new Object[] {"testString", "", new Integer(100)});
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to date: testString (testString)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetDateThrowsInputException4() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        try {
            new MapInput(values).getDate("testString");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to date: testString (testString)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetDateThrowsNullPointerException() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        Map inputRequest = new RequestInput(req);
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"testString", Integer.class});
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(LocaleManager.getLocale(req), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(AbstractInput.class);
        try {
            ((AbstractInput) inputRequest).getDate("testString", 0);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("(InputRequest) inputRequest.size()", 1, ((RequestInput) inputRequest).size());
        }
    }
    
    public void testGetDateThrowsNullPointerException1() throws Throwable {
        MapInput inputMap = new MapInput();
        inputMap.setValue("testString", new Object());
        Mockingbird.enterRecordingMode();
        SimpleDateFormat simpleDateFormat = (SimpleDateFormat) Mockingbird.getProxyObject(SimpleDateFormat.class);
        Mockingbird.replaceObjectForRecording(SimpleDateFormat.class, "<init>(java.lang.String)", simpleDateFormat);
        Mockingbird.setException(false, simpleDateFormat, "parse", "(java.lang.String)java.util.Date", new Object[] {"java.lang.Object@b82491"}, (Throwable) Mockingbird.getProxyObject(ParseException.class), 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        try {
            inputMap.getDate("testString", "testAbstractInputPattern");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SimpleDateFormat.class, ex);
        }
    }
    
    public void testGetDateThrowsNullPointerException2() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        RequestInput inputRequest = new RequestInput(req);
        Object value = Mockingbird.getProxyObject(Object.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        inputRequest.setValue("testAbstractInputName", value);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, hashMap2, "get", "(java.lang.Object)java.lang.Object", "testString", 1);
        Mockingbird.setReturnValue(false, hashMap2, "get", "(java.lang.Object)java.lang.Object", "testString", 1);
        Mockingbird.setReturnValue(false, "testString", "toString", "()java.lang.String", new Object[] {}, "testString", 1);
        Mockingbird.setReturnValue(StringUtils.isEmpty("testAbstractInputParam1"), false);
        Mockingbird.setException(LocaleManager.getLocale(req), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(AbstractInput.class);
        try {
            inputRequest.getDate("testAbstractInputName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("inputRequest.size()", 0, inputRequest.size());
        }
    }
    
    public void testGetDoubleValueThrowsInputException() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        Map inputRequest = new RequestInput(req);
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"testString", Integer.class});
        try {
            ((AbstractInput) inputRequest).getDoubleValue("testString");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to double: testString (class java.lang.Integer)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetDoubleValueThrowsInputException1() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        try {
            new MapInput(values).getDoubleValue("testString", 100.0);
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to double: testString (testString)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetFloatValueThrowsInputException() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        try {
            new MapInput(values).getFloatValue("testString");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to float: testString (testString)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetFloatValueThrowsInputException1() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        try {
            new MapInput(values).getFloatValue("testString", 100.0F);
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to float: testString (testString)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetInstanceThrowsInputException() throws Throwable {
        AbstractInput inputMap = new MapInput();
        try {
            callPrivateMethod("org.mentawai.core.AbstractInput", "getInstance", new Class[] {Class.class}, inputMap, new Object[] {Integer.class});
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "java.lang.InstantiationException: java.lang.Integer", ex.getMessage());
            assertThrownBy(Class.class, ex);
        }
    }
    
    public void testGetIntValueThrowsInputException() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        try {
            new MapInput(values).getIntValue("testString");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to number: testString (testString)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetIntValueThrowsInputException1() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        try {
            new MapInput(values).getIntValue("testString", 100);
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to number: testString (testString)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetIntValuesThrowsInputException() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        RequestInput inputRequest = new RequestInput(req);
        inputRequest.put(" =7", "testString");
        try {
            inputRequest.getIntValues(" =7");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to numbers:  =7", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetIntValuesThrowsInputException1() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("F", "testString");
        try {
            new MapInput(values).getIntValues("F");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to numbers: F", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetLongValueThrowsInputException() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        RequestInput inputRequest = new RequestInput(req);
        inputRequest.put("testString", "testString");
        try {
            inputRequest.getLongValue("testString", 100L);
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to long: testString (testString)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetLongValueThrowsInputException1() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        Map inputRequest = new RequestInput(req);
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"testString", Integer.class});
        try {
            ((AbstractInput) inputRequest).getLongValue("testString");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to long: testString (class java.lang.Integer)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetObjectThrowsInputException() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        try {
            new RequestInput(req).getObject(Integer.class, "testAbstractInputPrefix");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "java.lang.InstantiationException: java.lang.Integer", ex.getMessage());
            assertThrownBy(Class.class, ex);
        }
    }
    
    public void testGetObjectThrowsInputException1() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        AbstractInput inputRequest = new RequestInput(req);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(LocaleManager.getLocale(req), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.replaceObjectForRecording(InputException.class, "<init>(java.lang.Exception)", Mockingbird.getProxyObject(InputException.class));
        Mockingbird.enterTestMode(AbstractInput.class);
        try {
            inputRequest.getObject("");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("(InputRequest) inputRequest.size()", 0, ((RequestInput) inputRequest).size());
        }
    }
    
    public void testGetObjectThrowsInputException2() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        AbstractInput inputRequest = new RequestInput(req);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(LocaleManager.getLocale(req), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.replaceObjectForRecording(InputException.class, "<init>(java.lang.Exception)", Mockingbird.getProxyObject(InputException.class));
        Mockingbird.enterTestMode(AbstractInput.class);
        try {
            inputRequest.getObject(new Float(100.0F), "testAbstractInputPrefix", true, false, true);
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("(InputRequest) inputRequest.size()", 0, ((RequestInput) inputRequest).size());
        }
    }
    
    public void testGetObjectThrowsInputException3() throws Throwable {
        try {
            new MapInput().getObject(Integer.class);
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "java.lang.InstantiationException: java.lang.Integer", ex.getMessage());
            assertThrownBy(Class.class, ex);
        }
    }
    
    public void testGetObjectThrowsInputException4() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractInput.class);
        AbstractInput inputRequest = new RequestInput(req);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(LocaleManager.getLocale(req), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.replaceObjectForRecording(InputException.class, "<init>(java.lang.Exception)", Mockingbird.getProxyObject(InputException.class));
        Mockingbird.enterTestMode(AbstractInput.class);
        try {
            inputRequest.getObject("testString", "testAbstractInputPrefix");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("(InputRequest) inputRequest.size()", 0, ((RequestInput) inputRequest).size());
        }
    }
}

