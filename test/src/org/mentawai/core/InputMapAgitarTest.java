/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 7:28:47 PM
 * Time to generate: 00:43.763 seconds
 *
 */

package org.mentawai.core;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;

import com.agitar.lib.junit.AgitarTestCase;

public class InputMapAgitarTest extends AgitarTestCase {
    
    @SuppressWarnings("unchecked")
	public Class getTargetClass()  {
        return MapInput.class;
    }
    
    @SuppressWarnings("unchecked")
	public void testConstructor() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        MapInput inputMap = new MapInput(values);
        assertSame("inputMap.values", values, getPrivateField(inputMap, "values"));
        assertNull("inputMap.properties", getPrivateField(inputMap, "properties"));
        assertNull("inputMap.headers", getPrivateField(inputMap, "headers"));
    }
    
    public void testConstructor1() throws Throwable {
        MapInput inputMap = new MapInput();
        assertEquals("inputMap.values.size()", 0, ((Map) getPrivateField(inputMap, "values")).size());
        assertNull("inputMap.properties", getPrivateField(inputMap, "properties"));
        assertNull("inputMap.headers", getPrivateField(inputMap, "headers"));
    }
    
    public void testGetHeader() throws Throwable {
        MapInput inputMap = new MapInput();
        inputMap.setHeader("testInputMapName", "testInputMapValue");
        String result = inputMap.getHeader("testInputMapName1");
        assertNull("result", result);
        assertEquals("inputMap.headers.size()", 1, ((Map) getPrivateField(inputMap, "headers")).size());
    }
    
    public void testGetHeader1() throws Throwable {
        MapInput inputMap = new MapInput(new HashMap(100, 100.0F));
        inputMap.setHeader("testString", "testInputMapValue");
        String result = inputMap.getHeader("testString");
        assertEquals("result", "testInputMapValue", result);
        assertEquals("inputMap.headers.size()", 1, ((Map) getPrivateField(inputMap, "headers")).size());
    }
    
    public void testGetHeader2() throws Throwable {
        String result = new MapInput().getHeader("testInputMapName");
        assertNull("result", result);
    }
    
    public void testGetHeaderKeys() throws Throwable {
        MapInput inputMap = new MapInput(new HashMap(100, 100.0F));
        Iterator result = inputMap.getHeaderKeys();
        assertEquals("inputMap.headers.size()", 0, ((Map) getPrivateField(inputMap, "headers")).size());
        assertFalse("result.hasNext()", result.hasNext());
    }
    
    public void testGetHeaderKeys1() throws Throwable {
        MapInput inputMap = new MapInput(new HashMap(100, 100.0F));
        inputMap.setHeader("testInputMapName", "testInputMapValue");
        Iterator result = inputMap.getHeaderKeys();
        assertTrue("result.hasNext()", result.hasNext());
        assertEquals("inputMap.headers.size()", 1, ((Map) getPrivateField(inputMap, "headers")).size());
    }
    
    public void testGetProperty() throws Throwable {
        MapInput inputMap = new MapInput(new HashMap(100, 100.0F));
        inputMap.setProperty("Error trying to gt a String []: ", "testInputMapValue");
        String result = inputMap.getProperty("Error trying to gt a String []: ");
        assertEquals("result", "testInputMapValue", result);
        assertEquals("inputMap.properties.size()", 1, ((Map) getPrivateField(inputMap, "properties")).size());
    }
    
    public void testGetProperty1() throws Throwable {
        MapInput inputMap = new MapInput();
        inputMap.setProperty("testInputMapName", "testInputMapValue");
        String result = inputMap.getProperty("testInputMapName1");
        assertNull("result", result);
        assertEquals("inputMap.properties.size()", 1, ((Map) getPrivateField(inputMap, "properties")).size());
    }
    
    public void testGetProperty2() throws Throwable {
        String result = new MapInput(new HashMap(100, 100.0F)).getProperty("testInputMapName");
        assertNull("result", result);
    }
    
    public void testGetStringValue() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        MapInput inputMap = new MapInput(values);
        String result = inputMap.getStringValue("testString");
        assertEquals("result", "testString", result);
        assertSame("inputMap.values", values, getPrivateField(inputMap, "values"));
    }
    
    public void testGetStringValue1() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        MapInput inputMap = new MapInput(values);
        String result = inputMap.getStringValue("testInputMapName");
        assertNull("result", result);
        assertSame("inputMap.values", values, getPrivateField(inputMap, "values"));
    }
    
    public void testGetStringValues() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        String[] strings = new String[1];
        values.put("", strings);
        MapInput inputMap = new MapInput(values);
        String[] result = inputMap.getStringValues("");
        assertSame("result", strings, result);
        assertNull("strings[0]", strings[0]);
        assertSame("inputMap.values", values, getPrivateField(inputMap, "values"));
    }
    
    public void testGetStringValues1() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        String[] strings = new String[0];
        values.put("dqFb6/D\t-r(f[P(RV%DG[u]!%", strings);
        MapInput inputMap = new MapInput(values);
        String[] result = inputMap.getStringValues("dqFb6/D\t-r(f[P(RV%DG[u]!%");
        assertSame("result", strings, result);
        assertSame("inputMap.values", values, getPrivateField(inputMap, "values"));
    }
    
    public void testGetStringValues2() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        MapInput inputMap = new MapInput(values);
        String[] result = inputMap.getStringValues("testString");
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", "testString", result[0]);
        assertSame("inputMap.values", values, getPrivateField(inputMap, "values"));
    }
    
    public void testGetStringValues3() throws Throwable {
        MapInput inputMap = new MapInput();
        String[] result = inputMap.getStringValues("testInputMapName");
        assertNull("result", result);
        assertEquals("inputMap.values.size()", 0, ((Map) getPrivateField(inputMap, "values")).size());
    }
    
    public void testGetValue() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        Integer integer = new Integer(0);
        values.put("testString", integer);
        MapInput inputMap = new MapInput(values);
        Integer result = (Integer) inputMap.getValue("testString");
        assertSame("result", integer, result);
        assertSame("inputMap.values", values, getPrivateField(inputMap, "values"));
    }
    
    public void testGetValue1() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        MapInput inputMap = new MapInput(values);
        String result = (String) inputMap.getValue("testString");
        assertEquals("result", "testString", result);
        assertSame("inputMap.values", values, getPrivateField(inputMap, "values"));
    }
    
    public void testGetValue2() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "p");
        String[] stringValues = new MapInput(values).getStringValues("testString");
        Map values2 = new HashMap(1000, 1000.0F);
        values2.put("testString", stringValues);
        MapInput inputMap = new MapInput(values2);
        String[] result = (String[]) inputMap.getValue("testString");
        assertSame("result", stringValues, result);
        assertSame("inputMap.values", values2, getPrivateField(inputMap, "values"));
    }
    
    public void testGetValue3() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        Boolean boolean2 = Boolean.FALSE;
        values.put("testString", boolean2);
        MapInput inputMap = new MapInput(values);
        Boolean result = (Boolean) inputMap.getValue("testString");
        assertSame("result", boolean2, result);
        assertSame("inputMap.values", values, getPrivateField(inputMap, "values"));
    }
    
    public void testGetValue4() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        MapInput inputMap = new MapInput(values);
        Object result = inputMap.getValue("testInputMapName");
        assertNull("result", result);
        assertSame("inputMap.values", values, getPrivateField(inputMap, "values"));
    }
    
    public void testHasValue() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        MapInput inputMap = new MapInput(values);
        boolean result = inputMap.hasValue("testString");
        assertTrue("result", result);
        assertSame("inputMap.values", values, getPrivateField(inputMap, "values"));
    }
    
    public void testHasValue1() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        MapInput inputMap = new MapInput(values);
        boolean result = inputMap.hasValue("testInputMapName");
        assertFalse("result", result);
        assertSame("inputMap.values", values, getPrivateField(inputMap, "values"));
    }
    
    public void testKeys() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        MapInput inputMap = new MapInput(values);
        Iterator result = inputMap.keys();
        assertFalse("result.hasNext()", result.hasNext());
        assertSame("inputMap.values", values, getPrivateField(inputMap, "values"));
    }
    
    public void testKeys1() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("4yRk)!)\\=OtP=Bxot>O_z5-PCA=pbq@dw$v", "testString");
        MapInput inputMap = new MapInput(values);
        Iterator result = inputMap.keys();
        assertTrue("result.hasNext()", result.hasNext());
        assertSame("inputMap.values", values, getPrivateField(inputMap, "values"));
    }
    
    public void testRemoveValue() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        MapInput inputMap = new MapInput(values);
        inputMap.removeValue("testInputMapName");
        assertSame("inputMap.values", values, getPrivateField(inputMap, "values"));
    }
    
    public void testSetHeader() throws Throwable {
        MapInput inputMap = new MapInput(new HashMap(100, 100.0F));
        inputMap.setHeader("testInputMapName", "testInputMapValue");
        inputMap.setHeader("testInputMapName", "testInputMapValue");
        assertEquals("inputMap.headers.size()", 1, ((Map) getPrivateField(inputMap, "headers")).size());
    }
    
    public void testSetHeader1() throws Throwable {
        MapInput inputMap = new MapInput();
        inputMap.setHeader("testInputMapName", "testInputMapValue");
        assertEquals("inputMap.headers.size()", 1, ((Map) getPrivateField(inputMap, "headers")).size());
    }
    
    public void testSetLocale() throws Throwable {
        Locale loc = Locale.SIMPLIFIED_CHINESE;
        MapInput inputMap = new MapInput(new HashMap(100, 100.0F));
        inputMap.setLocale(loc);
        assertSame("inputMap.loc", loc, getPrivateField(inputMap, "loc"));
    }
    
    public void testSetProperty() throws Throwable {
        MapInput inputMap = new MapInput(new HashMap(100, 100.0F));
        inputMap.setProperty("testInputMapName", "testInputMapValue");
        inputMap.setProperty("testInputMapName1", "testInputMapValue");
        assertEquals("inputMap.properties.size()", 2, ((Map) getPrivateField(inputMap, "properties")).size());
        assertEquals("inputMap.properties.get(\"testInputMapName1\")", "testInputMapValue", ((Map) getPrivateField(inputMap, "properties")).get("testInputMapName1"));
    }
    
    public void testSetProperty1() throws Throwable {
        MapInput inputMap = new MapInput(new HashMap(100, 100.0F));
        inputMap.setProperty("testInputMapName", "testInputMapValue");
        assertEquals("inputMap.properties.size()", 1, ((Map) getPrivateField(inputMap, "properties")).size());
    }
    
    public void testSetValue() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        MapInput inputMap = new MapInput(values);
        inputMap.setValue("testInputMapName", "testString");
        assertSame("inputMap.values", values, getPrivateField(inputMap, "values"));
        assertEquals("inputMap.values.get(\"testInputMapName\")", "testString", ((Map) getPrivateField(inputMap, "values")).get("testInputMapName"));
    }
    
    public void testGetStringValueThrowsNullPointerException() throws Throwable {
        MapInput inputMap = new MapInput(null);
        try {
            inputMap.getStringValue("testInputMapName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MapInput.class, ex);
            assertNull("inputMap.values", getPrivateField(inputMap, "values"));
        }
    }
    
    public void testGetStringValuesThrowsInputException() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", new Integer(0));
        MapInput inputMap = new MapInput(values);
        try {
            inputMap.getStringValues("testString");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Error trying to get a String []: testString", ex.getMessage());
            assertThrownBy(MapInput.class, ex);
            assertSame("inputMap.values", values, getPrivateField(inputMap, "values"));
        }
    }
    
    public void testGetStringValuesThrowsNullPointerException() throws Throwable {
        MapInput inputMap = new MapInput(null);
        try {
            inputMap.getStringValues("testInputMapName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MapInput.class, ex);
            assertNull("inputMap.values", getPrivateField(inputMap, "values"));
        }
    }
    
    public void testGetValueThrowsNullPointerException() throws Throwable {
        MapInput inputMap = new MapInput(null);
        try {
            inputMap.getValue("testInputMapName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MapInput.class, ex);
            assertNull("inputMap.values", getPrivateField(inputMap, "values"));
        }
    }
    
    public void testHasValueThrowsNullPointerException() throws Throwable {
        MapInput inputMap = new MapInput(null);
        try {
            inputMap.hasValue("testInputMapName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MapInput.class, ex);
            assertNull("inputMap.values", getPrivateField(inputMap, "values"));
        }
    }
    
    public void testKeysThrowsNullPointerException() throws Throwable {
        MapInput inputMap = new MapInput(null);
        try {
            inputMap.keys();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MapInput.class, ex);
            assertNull("inputMap.values", getPrivateField(inputMap, "values"));
        }
    }
    
    public void testRemoveValueThrowsNullPointerException() throws Throwable {
        MapInput inputMap = new MapInput(null);
        try {
            inputMap.removeValue("testInputMapName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MapInput.class, ex);
            assertNull("inputMap.values", getPrivateField(inputMap, "values"));
        }
    }
    
    public void testSetValueThrowsNullPointerException() throws Throwable {
        MapInput inputMap = new MapInput(null);
        try {
            inputMap.setValue("testInputMapName", "");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MapInput.class, ex);
            assertNull("inputMap.values", getPrivateField(inputMap, "values"));
        }
    }
}

