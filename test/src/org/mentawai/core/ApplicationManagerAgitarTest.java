/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 7:25:03 PM
 * Time to generate: 04:07.644 seconds
 *
 */

package org.mentawai.core;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.agitar.lib.mockingbird.MockingbirdSystem;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.URL;
import java.net.URLDecoder;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;
import org.agitar.mock.servlet.MockHttpServletResponse;
import org.agitar.mock.servlet.MockServletContext;
import org.mentawai.ajaxtag.AjaxtagErrorConsequence;
import org.mentawai.bean.BeanConfig;
import org.mentawai.coc.CoCApplicationManager;
import org.mentawai.coc.ForwardConsequenceProvider;
import org.mentawai.db.ConnectionHandler;
import org.mentawai.db.DataSourceConnectionHandler;
import org.mentawai.filter.DIFilter;
import org.mentawai.filter.DateConverterFilter;
import org.mentawai.filter.InjectionFilter;
import org.mentawai.filter.OutputFilter;
import org.mentawai.filter.PushInjectionFilter;
import org.mentawai.filter.ValidatorFilter;
import org.mentawai.ioc.ApplicationComponent;
import org.mentawai.ioc.Component;
import org.mentawai.ioc.DefaultComponent;
import org.mentawai.ioc.Dependency;
import org.mentawai.ioc.LocaleComponent;
import org.mentawai.ioc.ScopeComponent;
import org.mentawai.list.DBListData;
import org.mentawai.list.ListData;
import org.mentawai.list.ListManager;

public class ApplicationManagerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ApplicationManager.class;
    }
    
    public void testAction() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        ActionConfig result = bshApplicationManager.action(Integer.class);
        assertNull("result.getInnerAction()", result.getInnerAction());
        assertEquals("(BshApplicationManager) bshApplicationManager.actions.size()", 1, ((Map) getPrivateField(bshApplicationManager, "actions")).size());
    }
    
    public void testAction1() throws Throwable {
        ApplicationManager coCApplicationManager = new CoCApplicationManager();
        ActionConfig result = coCApplicationManager.action("testApplicationManagerName", Integer.class, "testApplicationManagerInnerAction");
        assertEquals("result.getInnerAction()", "testApplicationManagerInnerAction", result.getInnerAction());
        assertEquals("(CoCApplicationManager) coCApplicationManager.innerActions.size()", 1, ((Map) getPrivateField(coCApplicationManager, "innerActions")).size());
    }
    
    public void testAction2() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        ActionConfig result = bshApplicationManager.action("testApplicationManagerName", Object.class);
        assertNull("result.getInnerAction()", result.getInnerAction());
        assertEquals("(BshApplicationManager) bshApplicationManager.actions.size()", 1, ((Map) getPrivateField(bshApplicationManager, "actions")).size());
    }
    
    public void testAction3() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        ActionConfig result = bshApplicationManager.action(Integer.class, "testApplicationManagerInnerAction");
        assertEquals("result.getInnerAction()", "testApplicationManagerInnerAction", result.getInnerAction());
        assertEquals("(BshApplicationManager) bshApplicationManager.innerActions.size()", 1, ((Map) getPrivateField(bshApplicationManager, "innerActions")).size());
    }
    
    public void testAdd() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        ActionConfig ac = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(bshApplicationManager.addActionConfig(ac), ac);
        Mockingbird.enterTestMode(ApplicationManager.class);
        ActionConfig result = bshApplicationManager.add(ac);
        assertSame("result", ac, result);
    }
    
    public void testAdd1() throws Throwable {
        ApplicationManager parent = new BshApplicationManager();
        parent.setParent(parent);
        ApplicationComponent comp = (ApplicationComponent) Mockingbird.getProxyObject(ApplicationComponent.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(parent.addComponent("testApplicationManagerParam1", comp), comp);
        Mockingbird.enterTestMode(ApplicationManager.class);
        ApplicationComponent result = (ApplicationComponent) parent.add("testApplicationManagerName", comp);
        assertSame("result", comp, result);
    }
    
    public void testAdd2() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        Component result = bshApplicationManager.add("testApplicationManagerName", null);
        assertNull("result", result);
        assertEquals("(BshApplicationManager) bshApplicationManager.components.size()", 1, ((Map) getPrivateField(bshApplicationManager, "components")).size());
    }
    
    public void testAddActionConfig() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        ActionConfig ac = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(ac.getName(), "");
        Mockingbird.setReturnValue(ac.getInnerAction(), "testString");
        Mockingbird.setReturnValue(ac.getName(), "");
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(HashMap.class), "get", "(java.lang.Object)java.lang.Object", hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"testString", ac}, Mockingbird.getProxyObject(ActionConfig.class), 1);
        Mockingbird.enterTestMode(ApplicationManager.class);
        ActionConfig result = bshApplicationManager.addActionConfig(ac);
        assertSame("result", ac, result);
        assertEquals("(BshApplicationManager) bshApplicationManager.innerActions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "innerActions")).size());
    }
    
    public void testAddActionConfig1() throws Throwable {
        ApplicationManager parent = new BshApplicationManager();
        parent.setParent(parent);
        ActionConfig ac = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(ac.getName(), "Integer");
        Mockingbird.setReturnValue(ac.getInnerAction(), null);
        Mockingbird.setReturnValue(ac.getName(), "Integer");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(HashMap.class), "put", "(java.lang.Object,java.lang.Object)java.lang.Object", Mockingbird.getProxyObject(ActionConfig.class), 1);
        Mockingbird.enterTestMode(ApplicationManager.class);
        ActionConfig result = parent.addActionConfig(ac);
        assertSame("result", ac, result);
        assertEquals("(BshApplicationManager) parent.actions.size()", 0, ((Map) getPrivateField(parent, "actions")).size());
    }
    
    public void testAddActionConfig2() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        ActionConfig ac = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(ac.getName(), "testString");
        Mockingbird.setReturnValue(ac.getInnerAction(), "testString");
        Mockingbird.setReturnValue(ac.getName(), "testString");
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(ac.getName(), "testString");
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(HashMap.class), "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(ApplicationManager.class);
        ActionConfig result = bshApplicationManager.addActionConfig(ac);
        assertSame("result", ac, result);
        assertEquals("(BshApplicationManager) bshApplicationManager.innerActions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "innerActions")).size());
    }
    
    public void testAddBeanConfig() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        BeanConfig bc = (BeanConfig) Mockingbird.getProxyObject(BeanConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(bc.getBeanClass(), String.class);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(HashMap.class), "put", "(java.lang.Object,java.lang.Object)java.lang.Object", Mockingbird.getProxyObject(BeanConfig.class), 1);
        Mockingbird.enterTestMode(ApplicationManager.class);
        BeanConfig result = bshApplicationManager.addBeanConfig(bc);
        assertSame("result", bc, result);
        assertEquals("(BshApplicationManager) bshApplicationManager.beans.size()", 0, ((Map) getPrivateField(bshApplicationManager, "beans")).size());
    }
    
    public void testAddComponent() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.setParent(new BshApplicationManager());
        ApplicationComponent comp = (ApplicationComponent) Mockingbird.getProxyObject(ApplicationComponent.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(HashMap.class), "put", "(java.lang.Object,java.lang.Object)java.lang.Object", Mockingbird.getProxyObject(ApplicationComponent.class), 1);
        Mockingbird.enterTestMode(ApplicationManager.class);
        ApplicationComponent result = (ApplicationComponent) bshApplicationManager.addComponent("testApplicationManagerName", comp);
        assertSame("result", comp, result);
        assertEquals("(BshApplicationManager) bshApplicationManager.components.size()", 0, ((Map) getPrivateField(bshApplicationManager, "components")).size());
    }
    
    public void testAddComponent1() throws Throwable {
        ApplicationManager coCApplicationManager = new CoCApplicationManager();
        Component result = coCApplicationManager.addComponent("testApplicationManagerName", null);
        assertNull("result", result);
        assertEquals("(CoCApplicationManager) coCApplicationManager.components.size()", 1, ((Map) getPrivateField(coCApplicationManager, "components")).size());
    }
    
    public void testAddDependency() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        Dependency result = bshApplicationManager.addDependency(String.class, "testApplicationManagerTarget", "testApplicationManagerSource");
        assertEquals("result.getSource()", "testApplicationManagerSource", result.getSource());
        assertEquals("(BshApplicationManager) bshApplicationManager.dependencies.size()", 1, ((Collection) getPrivateField(bshApplicationManager, "dependencies")).size());
    }
    
    public void testAddDependency1() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        Dependency result = bshApplicationManager.addDependency(Integer.class, "testApplicationManagerTarget");
        assertEquals("result.getSource()", "testApplicationManagerTarget", result.getSource());
        assertEquals("(BshApplicationManager) bshApplicationManager.dependencies.size()", 1, ((Collection) getPrivateField(bshApplicationManager, "dependencies")).size());
    }
    
    public void testAddGlobalConsequence() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        Consequence c = new StreamConsequence("testApplicationManagerContentType", "testApplicationManagerStream_key", "testApplicationManagerContent_disposition_key", "testApplicationManagerContent_length_key");
        bshApplicationManager.addGlobalConsequence("testApplicationManagerResult", c);
        assertEquals("(BshApplicationManager) bshApplicationManager.globalConsequences.size()", 1, ((Map) getPrivateField(bshApplicationManager, "globalConsequences")).size());
    }
    
    public void testAddGlobalFilter() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        List filters = new ArrayList(100);
        filters.add(new ValidatorFilter("testApplicationManagerResultForError"));
        bshApplicationManager.addGlobalFilter(filters);
        assertEquals("(BshApplicationManager) bshApplicationManager.getGlobalFilters().size()", 1, bshApplicationManager.getGlobalFilters().size());
    }
    
    public void testAddGlobalFilter1() throws Throwable {
        ApplicationManager parent = new BshApplicationManager();
        parent.setParent(parent);
        parent.addGlobalFilter(new ValidatorFilter());
        assertEquals("(BshApplicationManager) parent.getGlobalFilters().size()", 1, parent.getGlobalFilters().size());
    }
    
    public void testAddGlobalFilter2() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.addGlobalFilter(new InjectionFilter(true), false);
        assertEquals("(BshApplicationManager) bshApplicationManager.getGlobalFilters().size()", 1, bshApplicationManager.getGlobalFilters().size());
    }
    
    public void testAddGlobalFilter3() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.addGlobalFilter(new DateConverterFilter(100, "testApplicationManagerS1"), true);
        assertEquals("(BshApplicationManager) bshApplicationManager.getGlobalFilters().size()", 1, bshApplicationManager.getGlobalFilters().size());
    }
    
    public void testAddGlobalFilter4() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.addGlobalFilter(new OutputFilter(), false);
        assertEquals("(BshApplicationManager) bshApplicationManager.getGlobalFilters().size()", 1, bshApplicationManager.getGlobalFilters().size());
    }
    
    public void testAddGlobalFilter6() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        List filters = new ArrayList(100);
        filters.add(new PushInjectionFilter(true));
        bshApplicationManager.addGlobalFilter(filters, false);
        assertEquals("(BshApplicationManager) bshApplicationManager.getGlobalFilters().size()", 1, bshApplicationManager.getGlobalFilters().size());
    }
    
    public void testAddGlobalFilter7() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        List filters = new ArrayList(100);
        bshApplicationManager.addGlobalFilter(filters, filters.add(new DateConverterFilter("testApplicationManagerS1")));
        assertEquals("(BshApplicationManager) bshApplicationManager.getGlobalFilters().size()", 1, bshApplicationManager.getGlobalFilters().size());
    }
    
    public void testAddGlobalFilter8() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        List filters = new ArrayList(100);
        bshApplicationManager.addGlobalFilter(filters, true);
        assertEquals("(BshApplicationManager) bshApplicationManager.getGlobalFilters().size()", 0, bshApplicationManager.getGlobalFilters().size());
        assertEquals("(ArrayList) filters.size()", 0, filters.size());
    }
    
    public void testAddList() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        ListData listData = new DBListData("testApplicationManagerName", "testApplicationManagerKeyColumn", "testApplicationManagerValueColumn", "testApplicationManagerTableName", "testApplicationManagerOrderByColumn");
        bshApplicationManager.addList(listData);
        assertEquals("(BshApplicationManager) bshApplicationManager.getScriptName()", "ApplicationManager.bsh", ((BshApplicationManager) bshApplicationManager).getScriptName());
    }
    
    public void testBean() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        BeanConfig result = bshApplicationManager.bean(Object.class, "testApplicationManagerTableName");
        assertEquals("result.getTableName()", "testApplicationManagerTableName", result.getTableName());
        assertEquals("(BshApplicationManager) bshApplicationManager.beans.size()", 1, ((Map) getPrivateField(bshApplicationManager, "beans")).size());
    }
    
    public void testChain() throws Throwable {
        ActionConfig ac = new ActionConfig(Integer.class);
        ac.redirOk("testApplicationManagerPage");
        Chain result = (Chain) ApplicationManager.chain(ac);
        assertNotNull("result", result);
    }
    
    public void testChain1() throws Throwable {
        Chain result = (Chain) ApplicationManager.chain(Integer.class);
        assertNotNull("result", result);
    }
    
    public void testChain2() throws Throwable {
        Chain result = (Chain) ApplicationManager.chain(Integer.class, "testApplicationManagerInnerAction");
        assertNotNull("result", result);
    }
    
    public void testConfigureActions() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.configureActions("testApplicationManagerPackageName");
        assertEquals("(BshApplicationManager) bshApplicationManager.getScriptName()", "ApplicationManager.bsh", ((BshApplicationManager) bshApplicationManager).getScriptName());
    }
    
    public void testConfigureActions1() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        Mockingbird.enterRecordingMode();
        ClassNotFoundException classNotFoundException = (ClassNotFoundException) Mockingbird.getProxyObject(ClassNotFoundException.class);
        Object actionClasses = callPrivateMethod("org.mentawai.core.ApplicationManager", "getActionClasses", new Class[] {String.class}, null, new Object[] {"testString"});
        Mockingbird.setException(actionClasses, classNotFoundException);
        ((PrintStream) Mockingbird.getProxyObject(PrintStream.class)).println("testApplicationManagerParam1");
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(false, classNotFoundException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(ApplicationManager.class);
        bshApplicationManager.configureActions("testString");
        assertEquals("(BshApplicationManager) bshApplicationManager.getScriptName()", "ApplicationManager.bsh", ((BshApplicationManager) bshApplicationManager).getScriptName());
    }
    
    public void testConfigureActions2() throws Throwable {
        ApplicationManager coCApplicationManager = new CoCApplicationManager();
        coCApplicationManager.configureActions("");
        assertNotNull("(CoCApplicationManager) coCApplicationManager.getConsequenceProvider()", ((CoCApplicationManager) coCApplicationManager).getConsequenceProvider());
    }
    
    public void testDestroy() throws Throwable {
        ApplicationManager coCApplicationManager = new CoCApplicationManager();
        coCApplicationManager.destroy(new MapContext());
        assertNotNull("(CoCApplicationManager) coCApplicationManager.getConsequenceProvider()", ((CoCApplicationManager) coCApplicationManager).getConsequenceProvider());
    }
    
    public void testDi() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        Dependency result = bshApplicationManager.di("testApplicationManagerTarget", Integer.class);
        assertEquals("result.getSource()", "testApplicationManagerTarget", result.getSource());
        assertEquals("(BshApplicationManager) bshApplicationManager.dependencies.size()", 1, ((Collection) getPrivateField(bshApplicationManager, "dependencies")).size());
    }
    
    public void testDi1() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        Dependency result = bshApplicationManager.di("testApplicationManagerTarget", Object.class, "testApplicationManagerSource");
        assertEquals("result.getSource()", "testApplicationManagerSource", result.getSource());
        assertEquals("(BshApplicationManager) bshApplicationManager.dependencies.size()", 1, ((Collection) getPrivateField(bshApplicationManager, "dependencies")).size());
    }
    
    public void testFilter() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.filter(new InjectionFilter(true, false));
        assertEquals("(BshApplicationManager) bshApplicationManager.getGlobalFilters().size()", 1, bshApplicationManager.getGlobalFilters().size());
    }
    
    public void testFilter1() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.filter(new DIFilter(true), false);
        assertEquals("(BshApplicationManager) bshApplicationManager.getGlobalFilters().size()", 1, bshApplicationManager.getGlobalFilters().size());
    }
    
    public void testFilter2() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.filter(new PushInjectionFilter(true), true);
        assertEquals("(BshApplicationManager) bshApplicationManager.getGlobalFilters().size()", 1, bshApplicationManager.getGlobalFilters().size());
    }
    
    public void testFilter3() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        List filters = new ArrayList(100);
        String[] s = new String[2];
        filters.add(new DateConverterFilter(s));
        bshApplicationManager.filter(filters);
        assertEquals("(BshApplicationManager) bshApplicationManager.getGlobalFilters().size()", 1, bshApplicationManager.getGlobalFilters().size());
    }
    
    public void testFilter4() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        List filters = new ArrayList(100);
        filters.add(new PushInjectionFilter());
        bshApplicationManager.filter(filters, false);
        assertEquals("(BshApplicationManager) bshApplicationManager.getGlobalFilters().size()", 1, bshApplicationManager.getGlobalFilters().size());
    }
    
    public void testFilter5() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        List filters = new ArrayList(100);
        boolean last = filters.add(new DateConverterFilter("testApplicationManagerS1", "testApplicationManagerS2"));
        bshApplicationManager.filter(filters, last);
        assertEquals("(BshApplicationManager) bshApplicationManager.getGlobalFilters().size()", 1, bshApplicationManager.getGlobalFilters().size());
    }
    
    public void testFilterLast() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.filterLast(new InjectionFilter(true, false));
        assertEquals("(BshApplicationManager) bshApplicationManager.getGlobalFilters().size()", 1, bshApplicationManager.getGlobalFilters().size());
    }
    
    public void testFilterLast1() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        List filters = new ArrayList(100);
        filters.add(new DateConverterFilter("testApplicationManagerS1"));
        bshApplicationManager.filterLast(filters);
        assertEquals("(BshApplicationManager) bshApplicationManager.getGlobalFilters().size()", 1, bshApplicationManager.getGlobalFilters().size());
    }
    
    public void testFwd() throws Throwable {
        ApplicationManager.fwd("testApplicationManagerPage");
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testGetActionClasses() throws Throwable {
        LinkedList result = (LinkedList) callPrivateMethod("org.mentawai.core.ApplicationManager", "getActionClasses", new Class[] {String.class}, null, new Object[] {""});
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetActionClasses1() throws Throwable {
        Mockingbird.enterRecordingMode();
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Thread thread = (Thread) Mockingbird.getProxyObject(Thread.class);
        String[] strings = new String[2];
        Mockingbird.setReturnValue(true, Thread.class, "currentThread", "()java.lang.Thread", new Object[] {}, thread, 1);
        strings[0] = "";
        strings[1] = "";
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.setReturnValue(false, thread, "getContextClassLoader", "()java.lang.ClassLoader", new Object[] {}, ApplicationManager.class.getClassLoader(), 1);
        Mockingbird.setReturnValue(false, "", "replace", "(char,char)java.lang.String", new Object[] {new Integer(46), new Integer(47)}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(URL.class), "getFile", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, URLDecoder.class, "decode", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "startsWith", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file, "list", "()java.lang.String[]", new Object[] {}, strings, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "endsWith", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replaceAll", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "com.sun.corba.se.spi.activation.LocatorHolder", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Object.class), "equals", "(java.lang.Object)boolean", boolean2, 1);
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, linkedList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "endsWith", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replaceAll", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "com.sun.corba.se.spi.activation.LocatorHolder", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Object.class), "equals", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.enterTestMode(ApplicationManager.class);
        List result = (List) callPrivateMethod("org.mentawai.core.ApplicationManager", "getActionClasses", new Class[] {String.class}, null, new Object[] {""});
        assertNotNull("result", result);
    }
    
    public void testGetActionConfig() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        ActionConfig action = bshApplicationManager.action(Object.class, "testString");
        ActionConfig result = bshApplicationManager.getActionConfig("Object", "testString");
        assertSame("result", action, result);
        assertEquals("(BshApplicationManager) bshApplicationManager.innerActions.size()", 1, ((Map) getPrivateField(bshApplicationManager, "innerActions")).size());
    }
    
    public void testGetActionConfig1() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        ActionConfig result = bshApplicationManager.getActionConfig("testApplicationManagerName", "testApplicationManagerInnerAction");
        assertNull("result", result);
        assertEquals("(BshApplicationManager) bshApplicationManager.innerActions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "innerActions")).size());
    }
    
    public void testGetActionConfig2() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        ActionConfig result = bshApplicationManager.getActionConfig("testApplicationManagerName");
        assertNull("result", result);
        assertEquals("(BshApplicationManager) bshApplicationManager.actions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "actions")).size());
    }
    
    public void testGetActionConfig3() throws Throwable {
        ApplicationManager parent = new BshApplicationManager();
        parent.setParent(parent);
        ActionConfig action = parent.action("2C", Integer.class);
        ActionConfig result = parent.getActionConfig("2C");
        assertSame("result", action, result);
        assertEquals("(BshApplicationManager) parent.actions.size()", 1, ((Map) getPrivateField(parent, "actions")).size());
    }
    
    public void testGetAllFilters() throws Throwable {
        ApplicationManager coCApplicationManager = new CoCApplicationManager();
        coCApplicationManager.action(Integer.class, "testApplicationManagerInnerAction");
        HashSet result = (HashSet) coCApplicationManager.getAllFilters();
        assertEquals("result.size()", 0, result.size());
        assertEquals("(CoCApplicationManager) coCApplicationManager.innerActions.size()", 1, ((Map) getPrivateField(coCApplicationManager, "innerActions")).size());
        assertEquals("(CoCApplicationManager) coCApplicationManager.actions.size()", 0, ((Map) getPrivateField(coCApplicationManager, "actions")).size());
    }
    
    public void testGetAllFilters1() throws Throwable {
        ApplicationManager coCApplicationManager = new CoCApplicationManager();
        coCApplicationManager.addActionConfig(new ActionConfig("testApplicationManagerName", Integer.class, null));
        HashSet result = (HashSet) coCApplicationManager.getAllFilters();
        assertEquals("result.size()", 0, result.size());
        assertEquals("(CoCApplicationManager) coCApplicationManager.innerActions.size()", 0, ((Map) getPrivateField(coCApplicationManager, "innerActions")).size());
        assertEquals("(CoCApplicationManager) coCApplicationManager.actions.size()", 1, ((Map) getPrivateField(coCApplicationManager, "actions")).size());
    }
    
    public void testGetAllFilters2() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        List filters = new ArrayList(100);
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        filters.add(pushInjectionFilter);
        bshApplicationManager.addGlobalFilter(filters, true);
        ActionConfig ac = new ActionConfig("testApplicationManagerName", Object.class, "testApplicationManagerInnerAction");
        bshApplicationManager.addActionConfig(ac);
        bshApplicationManager.action(Integer.class);
        HashSet result = (HashSet) bshApplicationManager.getAllFilters();
        assertEquals("result.size()", 1, result.size());
        assertTrue("(HashSet) result.contains(pushInjectionFilter)", result.contains(pushInjectionFilter));
        assertEquals("(BshApplicationManager) bshApplicationManager.innerActions.size()", 1, ((Map) getPrivateField(bshApplicationManager, "innerActions")).size());
        assertEquals("(BshApplicationManager) bshApplicationManager.actions.size()", 1, ((Map) getPrivateField(bshApplicationManager, "actions")).size());
    }
    
    public void testGetAllFilters3() throws Throwable {
        ApplicationManager coCApplicationManager = new CoCApplicationManager();
        Filter filter = new InjectionFilter(true, false);
        coCApplicationManager.addGlobalFilter(filter, true);
        HashSet result = (HashSet) coCApplicationManager.getAllFilters();
        assertEquals("result.size()", 1, result.size());
        assertTrue("(HashSet) result.contains(filter)", result.contains(filter));
        assertEquals("(CoCApplicationManager) coCApplicationManager.innerActions.size()", 0, ((Map) getPrivateField(coCApplicationManager, "innerActions")).size());
        assertEquals("(CoCApplicationManager) coCApplicationManager.actions.size()", 0, ((Map) getPrivateField(coCApplicationManager, "actions")).size());
    }
    
    public void testGetApplication() throws Throwable {
        ApplicationManager.setApplication(null);
        Context result = ApplicationManager.getApplication();
        assertNull("result", result);
    }
    
    public void testGetBeanConfig() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        BeanConfig bean = bshApplicationManager.bean(Integer.class, "testApplicationManagerTableName");
        BeanConfig result = bshApplicationManager.getBeanConfig(Integer.class);
        assertSame("result", bean, result);
        assertEquals("(BshApplicationManager) bshApplicationManager.beans.size()", 1, ((Map) getPrivateField(bshApplicationManager, "beans")).size());
    }
    
    public void testGetBeanConfig1() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        BeanConfig result = bshApplicationManager.getBeanConfig(Integer.class);
        assertNull("result", result);
        assertEquals("(BshApplicationManager) bshApplicationManager.beans.size()", 0, ((Map) getPrivateField(bshApplicationManager, "beans")).size());
    }
    
    public void testGetComponent() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        ScopeComponent ioc = bshApplicationManager.ioc("lst", short.class, 100);
        ScopeComponent result = (ScopeComponent) bshApplicationManager.getComponent("lst");
        assertSame("result", ioc, result);
        assertEquals("(BshApplicationManager) bshApplicationManager.components.size()", 1, ((Map) getPrivateField(bshApplicationManager, "components")).size());
    }
    
    public void testGetComponent1() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        Component result = bshApplicationManager.getComponent("testApplicationManagerName");
        assertNull("result", result);
        assertEquals("(BshApplicationManager) bshApplicationManager.components.size()", 0, ((Map) getPrivateField(bshApplicationManager, "components")).size());
    }
    
    public void testGetDefaultAction() throws Throwable {
        ActionConfig result = ApplicationManager.getDefaultAction();
        assertNull("result", result);
    }
    
    public void testGetDependencies() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        Iterator result = bshApplicationManager.getDependencies();
        assertFalse("result.hasNext()", result.hasNext());
        assertEquals("(BshApplicationManager) bshApplicationManager.dependencies.size()", 0, ((Collection) getPrivateField(bshApplicationManager, "dependencies")).size());
    }
    
    public void testGetGlobalConsequence() throws Throwable {
        ApplicationManager parent = new CoCApplicationManager();
        parent.setParent(parent);
        Consequence result = parent.getGlobalConsequence("testApplicationManagerResult");
        assertNull("result", result);
        assertEquals("(CoCApplicationManager) parent.globalConsequences.size()", 0, ((Map) getPrivateField(parent, "globalConsequences")).size());
    }
    
    public void testGetGlobalConsequence1() throws Throwable {
        ApplicationManager parent = new CoCApplicationManager();
        parent.on("testString", "testApplicationManagerJsp");
        parent.setParent(parent);
        parent.getGlobalConsequence("testString");
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 2 assertions
    }
    
    public void testGetGlobalFilters() throws Throwable {
        ApplicationManager coCApplicationManager = new CoCApplicationManager();
        Filter filter = new OutputFilter();
        coCApplicationManager.addGlobalFilter(filter, true);
        LinkedList result = (LinkedList) coCApplicationManager.getGlobalFilters(true);
        assertEquals("result.size()", 1, result.size());
        assertSame("(LinkedList) result.get(0)", filter, result.get(0));
    }
    
    public void testGetGlobalFilters1() throws Throwable {
        LinkedList result = (LinkedList) new CoCApplicationManager().getGlobalFilters(false);
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetGlobalFilters2() throws Throwable {
        LinkedList result = (LinkedList) new BshApplicationManager().getGlobalFilters();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetGlobalFilters3() throws Throwable {
        ApplicationManager parent = new BshApplicationManager();
        Filter filter = new InjectionFilter(true, false);
        parent.filterLast(filter);
        parent.setParent(parent);
        LinkedList result = (LinkedList) parent.getGlobalFilters();
        assertEquals("result.size()", 1, result.size());
        assertSame("(LinkedList) result.get(0)", filter, result.get(0));
    }
    
    public void testGetInstance() throws Throwable {
        ApplicationManager result = ApplicationManager.getInstance();
        assertNull("result", result);
    }
    
    public void testGetPropertiesWithAggressiveMocks() throws Throwable {
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class, true);
        InetAddress inetAddress = (InetAddress) Mockingbird.getProxyObject(InetAddress.class);
        ApplicationManager.setRealPath("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, InetAddress.class, "getLocalHost", "()java.net.InetAddress", new Object[] {}, inetAddress, 1);
        Mockingbird.setReturnValue(false, inetAddress, "getHostName", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(File.class));
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", properties);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        Mockingbird.setReturnValue(false, properties, "load", "(java.io.InputStream)void", new Object[] {fileInputStream}, null, 1);
        Mockingbird.enterTestMode(ApplicationManager.class);
        Properties result = applicationManager.getProperties();
        assertNotNull("result", result);
    }
    
    public void testGetPropertiesWithAggressiveMocks1() throws Throwable {
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class, true);
        UnknownHostException unknownHostException = (UnknownHostException) Mockingbird.getProxyObject(UnknownHostException.class);
        ApplicationManager.setRealPath("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, InetAddress.class, "getLocalHost", "()java.net.InetAddress", new Object[] {}, unknownHostException, 1);
        Mockingbird.setReturnValue(false, unknownHostException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", properties);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        Mockingbird.setReturnValue(false, properties, "load", "(java.io.InputStream)void", new Object[] {fileInputStream}, null, 1);
        Mockingbird.enterTestMode(ApplicationManager.class);
        Properties result = applicationManager.getProperties();
        assertNotNull("result", result);
    }
    
    public void testGetRealPath() throws Throwable {
        ApplicationManager.getRealPath();
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testGetViewDir() throws Throwable {
        ApplicationManager.getViewDir();
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testInit() throws Throwable {
        ApplicationManager parent = new CoCApplicationManager();
        parent.setParent(parent);
        parent.init(null);
        assertNotNull("(CoCApplicationManager) parent.getConsequenceProvider()", ((CoCApplicationManager) parent).getConsequenceProvider());
    }
    
    public void testInit1() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.init();
        assertEquals("(BshApplicationManager) bshApplicationManager.getScriptName()", "ApplicationManager.bsh", ((BshApplicationManager) bshApplicationManager).getScriptName());
    }
    
    public void testIoc() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        ScopeComponent result = bshApplicationManager.ioc("testApplicationManagerName", char.class, 100);
        assertEquals("result.getScope()", 100, result.getScope());
        assertEquals("(BshApplicationManager) bshApplicationManager.components.size()", 1, ((Map) getPrivateField(bshApplicationManager, "components")).size());
    }
    
    public void testIoc1() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        DefaultComponent result = bshApplicationManager.ioc("testApplicationManagerName", Integer.class);
        assertNotNull("result", result);
        assertEquals("(BshApplicationManager) bshApplicationManager.components.size()", 1, ((Map) getPrivateField(bshApplicationManager, "components")).size());
    }
    
    public void testIoc2() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        LocaleComponent comp = (LocaleComponent) Mockingbird.getProxyObject(LocaleComponent.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(bshApplicationManager.addComponent("testApplicationManagerParam1", comp), comp);
        Mockingbird.enterTestMode(ApplicationManager.class);
        LocaleComponent result = (LocaleComponent) bshApplicationManager.ioc("testApplicationManagerName", comp);
        assertSame("result", comp, result);
    }
    
    public void testIoc3() throws Throwable {
        ApplicationManager coCApplicationManager = new CoCApplicationManager();
        Component result = coCApplicationManager.ioc("testApplicationManagerName", (Component) null);
        assertNull("result", result);
        assertEquals("(CoCApplicationManager) coCApplicationManager.components.size()", 1, ((Map) getPrivateField(coCApplicationManager, "components")).size());
    }
    
    public void testLoadActions() throws Throwable {
        ApplicationManager parent = new CoCApplicationManager();
        parent.setParent(parent);
        parent.loadActions();
        assertNotNull("(CoCApplicationManager) parent.getConsequenceProvider()", ((CoCApplicationManager) parent).getConsequenceProvider());
    }
    
    public void testLoadBeans() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.loadBeans();
        assertEquals("(BshApplicationManager) bshApplicationManager.getScriptName()", "ApplicationManager.bsh", ((BshApplicationManager) bshApplicationManager).getScriptName());
    }
    
    public void testLoadFormatters() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.loadFormatters();
        assertEquals("(BshApplicationManager) bshApplicationManager.getScriptName()", "ApplicationManager.bsh", ((BshApplicationManager) bshApplicationManager).getScriptName());
    }
    
    public void testLoadLists() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.loadLists();
        assertEquals("(BshApplicationManager) bshApplicationManager.getScriptName()", "ApplicationManager.bsh", ((BshApplicationManager) bshApplicationManager).getScriptName());
    }
    
    public void testLoadLocales() throws Throwable {
        ApplicationManager coCApplicationManager = new CoCApplicationManager();
        coCApplicationManager.loadLocales();
        assertNotNull("(CoCApplicationManager) coCApplicationManager.getConsequenceProvider()", ((CoCApplicationManager) coCApplicationManager).getConsequenceProvider());
    }
    
    public void testOn() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.on("testApplicationManagerResult", new AjaxtagErrorConsequence());
        assertEquals("(BshApplicationManager) bshApplicationManager.globalConsequences.size()", 1, ((Map) getPrivateField(bshApplicationManager, "globalConsequences")).size());
    }
    
    public void testOn1() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.on("testApplicationManagerResult", "testApplicationManagerJsp");
        assertEquals("(BshApplicationManager) bshApplicationManager.globalConsequences.size()", 1, ((Map) getPrivateField(bshApplicationManager, "globalConsequences")).size());
    }
    
    public void testRedir() throws Throwable {
        Redirect result = (Redirect) ApplicationManager.redir(true);
        assertNotNull("result", result);
    }
    
    public void testRedir1() throws Throwable {
        Redirect result = (Redirect) ApplicationManager.redir();
        assertNotNull("result", result);
    }
    
    public void testRedir2() throws Throwable {
        Redirect result = (Redirect) ApplicationManager.redir("testApplicationManagerPage");
        assertNotNull("result", result);
    }
    
    public void testRedir3() throws Throwable {
        Redirect result = (Redirect) ApplicationManager.redir("testApplicationManagerPage", true);
        assertNotNull("result", result);
    }
    
    public void testRemoveActionConfig() throws Throwable {
        ActionConfig ac = new ActionConfig("testApplicationManagerName", Integer.class, "testApplicationManagerInnerAction");
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        boolean result = bshApplicationManager.removeActionConfig(ac);
        assertFalse("result", result);
        assertEquals("(BshApplicationManager) bshApplicationManager.innerActions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "innerActions")).size());
    }
    
    public void testRemoveActionConfig1() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.setParent(new BshApplicationManager());
        boolean result = bshApplicationManager.removeActionConfig(new ActionConfig("testApplicationManagerName", Integer.class, null));
        assertFalse("result", result);
        assertEquals("(BshApplicationManager) bshApplicationManager.actions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "actions")).size());
    }
    
    public void testRemoveActionConfigWithAggressiveMocks() throws Throwable {
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        setPrivateField(applicationManager, "innerActions", map);
        setPrivateField(actionConfig, "name", "");
        actionConfig.setInnerAction("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", map2, 1);
        Mockingbird.setReturnValue(false, map2, "remove", "(java.lang.Object)java.lang.Object", obj, 1);
        Mockingbird.enterTestMode(ApplicationManager.class);
        boolean result = applicationManager.removeActionConfig(actionConfig);
        assertTrue("result", result);
    }
    
    public void testRemoveActionConfigWithAggressiveMocks1() throws Throwable {
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        setPrivateField(applicationManager, "actions", map);
        setPrivateField(actionConfig, "name", "");
        actionConfig.setInnerAction(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "remove", "(java.lang.Object)java.lang.Object", obj, 1);
        Mockingbird.enterTestMode(ApplicationManager.class);
        boolean result = applicationManager.removeActionConfig(actionConfig);
        assertTrue("result", result);
    }
    
    public void testRemoveActionConfigWithAggressiveMocks2() throws Throwable {
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(applicationManager, "innerActions", map);
        setPrivateField(actionConfig, "name", "");
        actionConfig.setInnerAction("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", map2, 1);
        Mockingbird.setReturnValue(false, map2, "remove", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(ApplicationManager.class);
        boolean result = applicationManager.removeActionConfig(actionConfig);
        assertFalse("result", result);
    }
    
    public void testReset() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.reset();
        assertEquals("(BshApplicationManager) bshApplicationManager.innerActions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "innerActions")).size());
        assertEquals("(BshApplicationManager) bshApplicationManager.getGlobalFilters().size()", 0, bshApplicationManager.getGlobalFilters().size());
        assertEquals("(BshApplicationManager) bshApplicationManager.actions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "actions")).size());
        assertEquals("(BshApplicationManager) bshApplicationManager.globalConsequences.size()", 0, ((Map) getPrivateField(bshApplicationManager, "globalConsequences")).size());
    }
    
    public void testService() throws Throwable {
        ApplicationManager coCApplicationManager = new CoCApplicationManager();
        coCApplicationManager.setParent(new BshApplicationManager());
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        coCApplicationManager.service(new MapContext(new HashMap(100, 100.0F)), mockServletContext.createHttpServletRequest("testApplicationManagerParam1"), res);
        assertEquals("(MockHttpServletResponse) res", "text/html; charset=UTF-8", ((MockHttpServletResponse) res).getContentType());
        assertEquals("(MockHttpServletResponse) res", "UTF-8", ((MockHttpServletResponse) res).getCharacterEncoding());
    }
    
    public void testSetApplication() throws Throwable {
        Context appContext = new MapContext(new HashMap(100, 100.0F));
        ApplicationManager.setApplication(appContext);
        assertSame("ApplicationManager.getApplication()", appContext, ApplicationManager.getApplication());
    }
    
    public void testSetAutoView() throws Throwable {
        ApplicationManager parent = new CoCApplicationManager();
        parent.setParent(parent);
        parent.setAutoView(true);
        assertNotNull("(CoCApplicationManager) parent.getConsequenceProvider()", ((CoCApplicationManager) parent).getConsequenceProvider());
    }
    
    public void testSetConsequenceProvider() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.setConsequenceProvider(new ForwardConsequenceProvider());
        assertEquals("(BshApplicationManager) bshApplicationManager.getScriptName()", "ApplicationManager.bsh", ((BshApplicationManager) bshApplicationManager).getScriptName());
    }
    
    public void testSetDebugMode() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.setDebugMode(true, false);
        assertEquals("(BshApplicationManager) bshApplicationManager.getScriptName()", "ApplicationManager.bsh", ((BshApplicationManager) bshApplicationManager).getScriptName());
    }
    
    public void testSetDebugMode1() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.setDebugMode(true);
        assertEquals("(BshApplicationManager) bshApplicationManager.getScriptName()", "ApplicationManager.bsh", ((BshApplicationManager) bshApplicationManager).getScriptName());
    }
    
    public void testSetDefaultAction() throws Throwable {
        ActionConfig ac = new ActionConfig(Integer.class);
        ApplicationManager.setDefaultAction(ac);
        assertSame("ApplicationManager.getDefaultAction()", ac, ApplicationManager.getDefaultAction());
    }
    
    public void testSetParent() throws Throwable {
        ApplicationManager parent = new BshApplicationManager();
        ApplicationManager result = parent.setParent(parent);
        assertSame("result", parent, result);
        assertEquals("(BshApplicationManager) parent.innerActions.size()", 0, ((Map) getPrivateField(parent, "innerActions")).size());
        assertEquals("(BshApplicationManager) parent.getGlobalFilters().size()", 0, parent.getGlobalFilters().size());
        assertEquals("(BshApplicationManager) parent.actions.size()", 0, ((Map) getPrivateField(parent, "actions")).size());
        assertEquals("(BshApplicationManager) parent.components.size()", 0, ((Map) getPrivateField(parent, "components")).size());
        assertEquals("(BshApplicationManager) parent.globalConsequences.size()", 0, ((Map) getPrivateField(parent, "globalConsequences")).size());
    }
    
    public void testSetRealPath() throws Throwable {
        ApplicationManager.setRealPath("testApplicationManagerRealpath");
        assertEquals("ApplicationManager.getRealPath()", "testApplicationManagerRealpath", ApplicationManager.getRealPath());
    }
    
    public void testSetReloadMode() throws Throwable {
        ApplicationManager coCApplicationManager = new CoCApplicationManager();
        coCApplicationManager.setReloadMode(true);
        assertNotNull("(CoCApplicationManager) coCApplicationManager.getConsequenceProvider()", ((CoCApplicationManager) coCApplicationManager).getConsequenceProvider());
    }
    
    public void testSetViewDir() throws Throwable {
        ApplicationManager.setViewDir("testApplicationManagerViewDir");
        assertEquals("ApplicationManager.getViewDir()", "testApplicationManagerViewDir", ApplicationManager.getViewDir());
    }
    
    public void testActionThrowsNullPointerException() throws Throwable {
        ApplicationManager coCApplicationManager = new CoCApplicationManager();
        try {
            coCApplicationManager.action(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
            assertEquals("(CoCApplicationManager) coCApplicationManager.innerActions.size()", 0, ((Map) getPrivateField(coCApplicationManager, "innerActions")).size());
            assertEquals("(CoCApplicationManager) coCApplicationManager.actions.size()", 0, ((Map) getPrivateField(coCApplicationManager, "actions")).size());
        }
    }
    
    public void testActionThrowsNullPointerException1() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        try {
            bshApplicationManager.action(null, Integer.class, "testApplicationManagerInnerAction");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
            assertEquals("(BshApplicationManager) bshApplicationManager.innerActions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "innerActions")).size());
            assertEquals("(BshApplicationManager) bshApplicationManager.actions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "actions")).size());
        }
    }
    
    public void testActionThrowsNullPointerException2() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        try {
            bshApplicationManager.action((String) null, Object.class);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
            assertEquals("(BshApplicationManager) bshApplicationManager.innerActions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "innerActions")).size());
            assertEquals("(BshApplicationManager) bshApplicationManager.actions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "actions")).size());
        }
    }
    
    public void testActionThrowsNullPointerException3() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        try {
            bshApplicationManager.action((Class) null, "testApplicationManagerInnerAction");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
            assertEquals("(BshApplicationManager) bshApplicationManager.innerActions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "innerActions")).size());
            assertEquals("(BshApplicationManager) bshApplicationManager.actions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "actions")).size());
        }
    }
    
    public void testAddActionConfigThrowsIllegalStateExceptionWithAggressiveMocks() throws Throwable {
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class, true);
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(IllegalStateException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(IllegalStateException.class));
        setPrivateField(actionConfig, "name", null);
        Mockingbird.enterTestMode(ApplicationManager.class);
        try {
            applicationManager.addActionConfig(actionConfig);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddActionConfigThrowsNullPointerException() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        try {
            bshApplicationManager.addActionConfig(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ApplicationManager.class, ex);
            assertEquals("(BshApplicationManager) bshApplicationManager.innerActions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "innerActions")).size());
            assertEquals("(BshApplicationManager) bshApplicationManager.actions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "actions")).size());
        }
    }
    
    public void testAddBeanConfigThrowsNullPointerException() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        try {
            bshApplicationManager.addBeanConfig(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ApplicationManager.class, ex);
            assertEquals("(BshApplicationManager) bshApplicationManager.beans.size()", 0, ((Map) getPrivateField(bshApplicationManager, "beans")).size());
        }
    }
    
    public void testAddDependencyThrowsNullPointerException() throws Throwable {
        ApplicationManager parent = new CoCApplicationManager();
        parent.setParent(parent);
        try {
            parent.addDependency(Object.class, null, "testApplicationManagerSource");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Dependency.class, ex);
            assertEquals("(CoCApplicationManager) parent.dependencies.size()", 0, ((Collection) getPrivateField(parent, "dependencies")).size());
        }
    }
    
    public void testAddDependencyThrowsNullPointerException1() throws Throwable {
        ApplicationManager coCApplicationManager = new CoCApplicationManager();
        try {
            coCApplicationManager.addDependency(null, "testApplicationManagerTarget");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Dependency.class, ex);
            assertEquals("(CoCApplicationManager) coCApplicationManager.dependencies.size()", 0, ((Collection) getPrivateField(coCApplicationManager, "dependencies")).size());
        }
    }
    
    public void testAddGlobalFilterThrowsNullPointerException() throws Throwable {
        ApplicationManager coCApplicationManager = new CoCApplicationManager();
        try {
            coCApplicationManager.addGlobalFilter((Filter) null, false);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ApplicationManager.class, ex);
            assertEquals("(CoCApplicationManager) coCApplicationManager.getGlobalFilters().size()", 0, coCApplicationManager.getGlobalFilters().size());
        }
    }
    
    public void testAddGlobalFilterThrowsNullPointerException1() throws Throwable {
        ApplicationManager coCApplicationManager = new CoCApplicationManager();
        try {
            coCApplicationManager.addGlobalFilter((List) null, true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ApplicationManager.class, ex);
            assertEquals("(CoCApplicationManager) coCApplicationManager.getGlobalFilters().size()", 0, coCApplicationManager.getGlobalFilters().size());
        }
    }
    
    public void testAddListThrowsIllegalArgumentException() throws Throwable {
        BshApplicationManager bshApplicationManager = (BshApplicationManager) Mockingbird.getProxyObject(BshApplicationManager.class);
        bshApplicationManager.setParent((ApplicationManager) Mockingbird.getProxyObject(CoCApplicationManager.class));
        DBListData list = (DBListData) Mockingbird.getProxyObject(DBListData.class);
        DataSourceConnectionHandler connHandler = (DataSourceConnectionHandler) Mockingbird.getProxyObject(DataSourceConnectionHandler.class);
        Mockingbird.enterRecordingMode();
        ListManager.addList(list, connHandler);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(IllegalArgumentException.class));
        Mockingbird.enterTestMode(ApplicationManager.class);
        try {
            bshApplicationManager.addList(list, connHandler);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddListThrowsNullPointerException() throws Throwable {
        try {
            new BshApplicationManager().addList(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ListManager.class, ex);
        }
    }
    
    public void testAddListThrowsNullPointerException1() throws Throwable {
        ApplicationManager parent = new BshApplicationManager();
        parent.setParent(parent);
        DBListData list = new DBListData("testApplicationManagerName", "testApplicationManagerKeyColumn", "testApplicationManagerValueColumn", "testApplicationManagerLocaleColumn", "testApplicationManagerTableName", "testApplicationManagerOrderByColumn");
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        Mockingbird.enterRecordingMode();
        ListManager.addList(list, connHandler);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(ApplicationManager.class);
        try {
            parent.addList(list, connHandler);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("(BshApplicationManager) parent.getScriptName()", "ApplicationManager.bsh", ((BshApplicationManager) parent).getScriptName());
        }
    }
    
    public void testAddThrowsNullPointerException() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        try {
            bshApplicationManager.add(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ApplicationManager.class, ex);
            assertEquals("(BshApplicationManager) bshApplicationManager.innerActions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "innerActions")).size());
            assertEquals("(BshApplicationManager) bshApplicationManager.actions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "actions")).size());
        }
    }
    
    public void testChainThrowsNullPointerException() throws Throwable {
        try {
            ApplicationManager.chain((Class) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
        }
    }
    
    public void testChainThrowsNullPointerException1() throws Throwable {
        try {
            ApplicationManager.chain((Class) null, "testApplicationManagerInnerAction");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
        }
    }
    
    public void testConfigureActionsThrowsNullPointerException() throws Throwable {
        try {
            new CoCApplicationManager().configureActions(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ApplicationManager.class, ex);
        }
    }
    
    public void testConfigureActionsThrowsNullPointerException1() throws Throwable {
        ApplicationManager coCApplicationManager = new CoCApplicationManager();
        Mockingbird.enterRecordingMode();
        Object actionClasses = callPrivateMethod("org.mentawai.core.ApplicationManager", "getActionClasses", new Class[] {String.class}, null, new Object[] {""});
        Mockingbird.setException(actionClasses, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(ApplicationManager.class);
        try {
            coCApplicationManager.configureActions("");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNotNull("(CoCApplicationManager) coCApplicationManager.getConsequenceProvider()", ((CoCApplicationManager) coCApplicationManager).getConsequenceProvider());
        }
    }
    
    public void testDiThrowsNullPointerException() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        try {
            bshApplicationManager.di(null, Object.class);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Dependency.class, ex);
            assertEquals("(BshApplicationManager) bshApplicationManager.dependencies.size()", 0, ((Collection) getPrivateField(bshApplicationManager, "dependencies")).size());
        }
    }
    
    public void testDiThrowsNullPointerException1() throws Throwable {
        ApplicationManager coCApplicationManager = new CoCApplicationManager();
        try {
            coCApplicationManager.di(null, Integer.class, "testApplicationManagerSource");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Dependency.class, ex);
            assertEquals("(CoCApplicationManager) coCApplicationManager.dependencies.size()", 0, ((Collection) getPrivateField(coCApplicationManager, "dependencies")).size());
        }
    }
    
    public void testFilterLastThrowsNullPointerException() throws Throwable {
        ApplicationManager coCApplicationManager = new CoCApplicationManager();
        try {
            coCApplicationManager.filterLast((List) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ApplicationManager.class, ex);
            assertEquals("(CoCApplicationManager) coCApplicationManager.getGlobalFilters().size()", 0, coCApplicationManager.getGlobalFilters().size());
        }
    }
    
    public void testGetActionClassesThrowsClassNotFoundException() throws Throwable {
        try {
            callPrivateMethod("org.mentawai.core.ApplicationManager", "getActionClasses", new Class[] {String.class}, null, new Object[] {"testApplicationManagerPackageName"});
            fail("Expected ClassNotFoundException to be thrown");
        } catch (ClassNotFoundException ex) {
            assertEquals("ex.getMessage()", "No resource for testApplicationManagerPackageName", ex.getMessage());
            assertThrownBy(ApplicationManager.class, ex);
        }
    }
    
    public void testGetActionClassesThrowsClassNotFoundException1() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", Mockingbird.getProxyObject(LinkedList.class));
        Thread thread = (Thread) Mockingbird.getProxyObject(Thread.class);
        Mockingbird.setReturnValue(true, Thread.class, "currentThread", "()java.lang.Thread", new Object[] {}, thread, 1);
        Mockingbird.setReturnValue(false, thread, "getContextClassLoader", "()java.lang.ClassLoader", new Object[] {}, ApplicationManager.class.getClassLoader(), 1);
        Mockingbird.setReturnValue(false, "", "replace", "(char,char)java.lang.String", new Object[] {new Integer(46), new Integer(47)}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(URL.class), "getFile", "()java.lang.String", "", 1);
        Mockingbird.setException(true, URLDecoder.class, "decode", "(java.lang.String,java.lang.String)java.lang.String", (Throwable) Mockingbird.getProxyObject(UnsupportedEncodingException.class), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(URL.class), "getFile", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(ClassNotFoundException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(ClassNotFoundException.class));
        Mockingbird.enterTestMode(ApplicationManager.class);
        try {
            callPrivateMethod("org.mentawai.core.ApplicationManager", "getActionClasses", new Class[] {String.class}, null, new Object[] {""});
            fail("Expected ClassNotFoundException to be thrown");
        } catch (ClassNotFoundException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 1 assertion
        }
    }
    
    public void testGetActionClassesThrowsClassNotFoundException2() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", Mockingbird.getProxyObject(LinkedList.class));
        Thread thread = (Thread) Mockingbird.getProxyObject(Thread.class);
        Mockingbird.setReturnValue(true, Thread.class, "currentThread", "()java.lang.Thread", new Object[] {}, thread, 1);
        Mockingbird.setReturnValue(false, thread, "getContextClassLoader", "()java.lang.ClassLoader", new Object[] {}, ApplicationManager.class.getClassLoader(), 1);
        Mockingbird.setReturnValue(false, "", "replace", "(char,char)java.lang.String", new Object[] {new Integer(46), new Integer(47)}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(URL.class), "getFile", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, URLDecoder.class, "decode", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "startsWith", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(ClassNotFoundException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(ClassNotFoundException.class));
        Mockingbird.enterTestMode(ApplicationManager.class);
        try {
            callPrivateMethod("org.mentawai.core.ApplicationManager", "getActionClasses", new Class[] {String.class}, null, new Object[] {""});
            fail("Expected ClassNotFoundException to be thrown");
        } catch (ClassNotFoundException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 1 assertion
        }
    }
    
    public void testGetActionClassesThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("org.mentawai.core.ApplicationManager", "getActionClasses", new Class[] {String.class}, null, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ApplicationManager.class, ex);
        }
    }
    
    public void testGetAllFiltersThrowsClassCastException() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        ActionConfig ac = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(ac.getName(), "testString");
        Mockingbird.setReturnValue(ac.getInnerAction(), "testString");
        Mockingbird.setReturnValue(ac.getName(), "testString");
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(ac.getName(), "testString");
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(ApplicationManager.class);
        bshApplicationManager.addActionConfig(ac);
        Mockingbird.enterRecordingMode();
        Collection abstractCollection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Mockingbird.setReturnValue(false, hashMap, "values", "()java.util.Collection", abstractCollection, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractCollection, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, hashMap2, 1);
        Collection abstractCollection2 = (Collection) Mockingbird.getProxyObject(Collection.class);
        Mockingbird.setReturnValue(false, hashMap2, "values", "()java.util.Collection", abstractCollection2, 1);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractCollection2, "iterator", "()java.util.Iterator", new Object[] {}, iterator2, 1);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, ac, 1);
        Mockingbird.setReturnValue(ac.getFilters(), Mockingbird.getProxyObject(List.class));
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(HashSet.class), "addAll", "(java.util.Collection)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(ApplicationManager.class);
        try {
            bshApplicationManager.getAllFilters();
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(ApplicationManager.class, ex);
            assertEquals("(BshApplicationManager) bshApplicationManager.actions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "actions")).size());
            assertEquals("(BshApplicationManager) bshApplicationManager.innerActions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "innerActions")).size());
        }
    }
    
    public void testGetPropertiesThrowsIllegalStateExceptionWithAggressiveMocks() throws Throwable {
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(IllegalStateException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(IllegalStateException.class));
        Mockingbird.enterNormalMode();
        ApplicationManager.setRealPath(null);
        Mockingbird.enterTestMode(ApplicationManager.class);
        try {
            applicationManager.getProperties();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetPropertiesThrowsRuntimeException() throws Throwable {
        try {
            new BshApplicationManager().getProperties();
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 2 assertions
        }
    }
    
    public void testGetPropertiesThrowsRuntimeExceptionWithAggressiveMocks() throws Throwable {
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class, true);
        InetAddress inetAddress = (InetAddress) Mockingbird.getProxyObject(InetAddress.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        ApplicationManager.setRealPath("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, InetAddress.class, "getLocalHost", "()java.net.InetAddress", new Object[] {}, inetAddress, 1);
        Mockingbird.setReturnValue(false, inetAddress, "getHostName", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(File.class));
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", properties);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        Mockingbird.setException(false, properties, "load", "(java.io.InputStream)void", new Object[] {fileInputStream}, iOException, 1);
        Mockingbird.replaceObjectForRecording(RuntimeException.class, "<init>(java.lang.Throwable)", Mockingbird.getProxyObject(RuntimeException.class));
        Mockingbird.enterTestMode(ApplicationManager.class);
        try {
            applicationManager.getProperties();
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetPropertiesThrowsRuntimeExceptionWithAggressiveMocks1() throws Throwable {
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class, true);
        InetAddress inetAddress = (InetAddress) Mockingbird.getProxyObject(InetAddress.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        ApplicationManager.setRealPath("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, InetAddress.class, "getLocalHost", "()java.net.InetAddress", new Object[] {}, inetAddress, 1);
        Mockingbird.setReturnValue(false, inetAddress, "getHostName", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file2);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, file2, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", properties);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        Mockingbird.setException(false, properties, "load", "(java.io.InputStream)void", new Object[] {fileInputStream}, iOException, 1);
        Mockingbird.replaceObjectForRecording(RuntimeException.class, "<init>(java.lang.Throwable)", Mockingbird.getProxyObject(RuntimeException.class));
        Mockingbird.enterTestMode(ApplicationManager.class);
        try {
            applicationManager.getProperties();
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testRemoveActionConfigThrowsIllegalStateExceptionWithAggressiveMocks() throws Throwable {
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class, true);
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(IllegalStateException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(IllegalStateException.class));
        setPrivateField(actionConfig, "name", null);
        Mockingbird.enterTestMode(ApplicationManager.class);
        try {
            applicationManager.removeActionConfig(actionConfig);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testRemoveActionConfigThrowsNullPointerException() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.setParent(new BshApplicationManager());
        try {
            bshApplicationManager.removeActionConfig(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ApplicationManager.class, ex);
            assertEquals("(BshApplicationManager) bshApplicationManager.innerActions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "innerActions")).size());
            assertEquals("(BshApplicationManager) bshApplicationManager.actions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "actions")).size());
        }
    }
    
    public void testSetParentThrowsNullPointerException() throws Throwable {
        ApplicationManager parent = new CoCApplicationManager();
        parent.setParent(parent);
        try {
            parent.setParent(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ApplicationManager.class, ex);
            assertEquals("(CoCApplicationManager) parent.innerActions.size()", 0, ((Map) getPrivateField(parent, "innerActions")).size());
            assertEquals("(CoCApplicationManager) parent.getGlobalFilters().size()", 0, parent.getGlobalFilters().size());
            assertEquals("(CoCApplicationManager) parent.actions.size()", 0, ((Map) getPrivateField(parent, "actions")).size());
            assertEquals("(CoCApplicationManager) parent.components.size()", 0, ((Map) getPrivateField(parent, "components")).size());
            assertEquals("(CoCApplicationManager) parent.globalConsequences.size()", 0, ((Map) getPrivateField(parent, "globalConsequences")).size());
        }
    }
    
    public void testSpringThrowsNullPointerException() throws Throwable {
        ApplicationManager bshApplicationManager = new BshApplicationManager();
        try {
            bshApplicationManager.spring("testApplicationManagerPath", "testApplicationManagerAction");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
            assertEquals("(BshApplicationManager) bshApplicationManager.innerActions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "innerActions")).size());
            assertEquals("(BshApplicationManager) bshApplicationManager.actions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "actions")).size());
        }
    }
}

