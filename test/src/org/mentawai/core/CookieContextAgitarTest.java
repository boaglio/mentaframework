/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 7:25:58 PM
 * Time to generate: 00:22.645 seconds
 *
 */

package org.mentawai.core;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.Iterator;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.agitar.mock.servlet.MockHttpServletResponse;
import org.agitar.mock.servlet.MockServletContext;

public class CookieContextAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return CookieContext.class;
    }
    
    public void testConstructor() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest req = mockServletContext.createHttpServletRequest("testCookieContextParam1");
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        CookieContext cookieContext = new CookieContext(req, res);
        assertEquals("(MockHttpServletResponse) res", "text/html; charset=UTF-8", ((MockHttpServletResponse) res).getContentType());
        assertEquals("(MockHttpServletResponse) res", "UTF-8", ((MockHttpServletResponse) res).getCharacterEncoding());
        assertSame("cookieContext.req", req, getPrivateField(cookieContext, "req"));
        assertSame("cookieContext.res", res, getPrivateField(cookieContext, "res"));
    }
    
    public void testGetAttribute() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        CookieContext cookieContext = new CookieContext(req, new MockServletContext().createHttpServletResponse());
        Mockingbird.enterRecordingMode();
        Cookie[] cookies = new Cookie[2];
        Cookie cookie = (Cookie) Mockingbird.getProxyObject(Cookie.class);
        cookies[0] = cookie;
        Cookie cookie2 = (Cookie) Mockingbird.getProxyObject(Cookie.class);
        cookies[1] = cookie2;
        Mockingbird.setReturnValue(req.getCookies(), cookies);
        Mockingbird.setReturnValue(cookie.getName(), "testString");
        Mockingbird.setReturnValue(cookie2.getName(), "testString");
        Mockingbird.enterTestMode(CookieContext.class);
        Object result = cookieContext.getAttribute("testCookieContextName");
        Object actual = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getContentType();
        assertEquals("cookieContext.res", "text/html; charset=UTF-8", actual);
        Object actual2 = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getCharacterEncoding();
        assertEquals("cookieContext.res", "UTF-8", actual2);
        assertNull("result", result);
        assertSame("cookieContext.req", req, getPrivateField(cookieContext, "req"));
    }
    
    public void testGetAttribute1() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest req = mockServletContext.createHttpServletRequest("testCookieContextParam1");
        CookieContext cookieContext = new CookieContext(req, mockServletContext.createHttpServletResponse());
        Object result = cookieContext.getAttribute("testCookieContextName");
        Object actual = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getContentType();
        assertEquals("cookieContext.res", "text/html; charset=UTF-8", actual);
        Object actual2 = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getCharacterEncoding();
        assertEquals("cookieContext.res", "UTF-8", actual2);
        assertNull("result", result);
        assertSame("cookieContext.req", req, getPrivateField(cookieContext, "req"));
    }
    
    public void testHasAttribute() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest req = mockServletContext.createHttpServletRequest("testCookieContextParam1");
        CookieContext cookieContext = new CookieContext(req, mockServletContext.createHttpServletResponse());
        boolean result = cookieContext.hasAttribute("testCookieContextName");
        Object actual = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getContentType();
        assertEquals("cookieContext.res", "text/html; charset=UTF-8", actual);
        Object actual2 = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getCharacterEncoding();
        assertEquals("cookieContext.res", "UTF-8", actual2);
        assertFalse("result", result);
        assertSame("cookieContext.req", req, getPrivateField(cookieContext, "req"));
    }
    
    public void testHasAttribute1() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        CookieContext cookieContext = new CookieContext(req, new MockServletContext().createHttpServletResponse());
        Mockingbird.enterRecordingMode();
        Cookie[] cookies = new Cookie[1];
        Cookie cookie = (Cookie) Mockingbird.getProxyObject(Cookie.class);
        cookies[0] = cookie;
        Mockingbird.setReturnValue(req.getCookies(), cookies);
        Mockingbird.setReturnValue(cookie.getName(), "testString");
        Mockingbird.setReturnValue(cookie.getValue(), "testString");
        Mockingbird.enterTestMode(CookieContext.class);
        boolean result = cookieContext.hasAttribute("testString");
        Object actual = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getContentType();
        assertEquals("cookieContext.res", "text/html; charset=UTF-8", actual);
        Object actual2 = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getCharacterEncoding();
        assertEquals("cookieContext.res", "UTF-8", actual2);
        assertTrue("result", result);
        assertSame("cookieContext.req", req, getPrivateField(cookieContext, "req"));
    }
    
    public void testKeys() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest req = mockServletContext.createHttpServletRequest("testCookieContextParam1");
        CookieContext cookieContext = new CookieContext(req, mockServletContext.createHttpServletResponse());
        Iterator result = cookieContext.keys();
        Object actual = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getContentType();
        assertEquals("cookieContext.res", "text/html; charset=UTF-8", actual);
        Object actual2 = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getCharacterEncoding();
        assertEquals("cookieContext.res", "UTF-8", actual2);
        assertFalse("result.hasNext()", result.hasNext());
        assertSame("cookieContext.req", req, getPrivateField(cookieContext, "req"));
    }
    
    public void testKeys1() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        CookieContext cookieContext = new CookieContext(req, new MockServletContext().createHttpServletResponse());
        Mockingbird.enterRecordingMode();
        Cookie[] cookies = new Cookie[0];
        Mockingbird.setReturnValue(req.getCookies(), cookies);
        Mockingbird.enterTestMode(CookieContext.class);
        Iterator result = cookieContext.keys();
        Object actual = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getContentType();
        assertEquals("cookieContext.res", "text/html; charset=UTF-8", actual);
        Object actual2 = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getCharacterEncoding();
        assertEquals("cookieContext.res", "UTF-8", actual2);
        assertFalse("result.hasNext()", result.hasNext());
        assertSame("cookieContext.req", req, getPrivateField(cookieContext, "req"));
    }
    
    public void testKeys2() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        CookieContext cookieContext = new CookieContext(req, new MockServletContext().createHttpServletResponse());
        Mockingbird.enterRecordingMode();
        Cookie[] cookies = new Cookie[1];
        Cookie cookie = (Cookie) Mockingbird.getProxyObject(Cookie.class);
        cookies[0] = cookie;
        Mockingbird.setReturnValue(req.getCookies(), cookies);
        Mockingbird.setReturnValue(cookie.getName(), "testString");
        Mockingbird.enterTestMode(CookieContext.class);
        Iterator result = cookieContext.keys();
        Object actual = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getContentType();
        assertEquals("cookieContext.res", "text/html; charset=UTF-8", actual);
        Object actual2 = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getCharacterEncoding();
        assertEquals("cookieContext.res", "UTF-8", actual2);
        assertTrue("result.hasNext()", result.hasNext());
        assertSame("cookieContext.req", req, getPrivateField(cookieContext, "req"));
    }
    
    public void testRemoveAttribute() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest req = mockServletContext.createHttpServletRequest("testCookieContextParam1");
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        CookieContext cookieContext = new CookieContext(req, res);
        cookieContext.removeAttribute("testCookieContextName");
        Object actual = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getContentType();
        assertEquals("cookieContext.res", "text/html; charset=UTF-8", actual);
        Object actual2 = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getCharacterEncoding();
        assertEquals("cookieContext.res", "UTF-8", actual2);
        assertSame("cookieContext.res", res, getPrivateField(cookieContext, "res"));
    }
    
    public void testSetAttribute() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest req = mockServletContext.createHttpServletRequest("testCookieContextParam1");
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        CookieContext cookieContext = new CookieContext(req, res);
        cookieContext.setAttribute("testCookieContextName", new Cookie("testCookieContextName", "testCookieContextValue"));
        Object actual = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getContentType();
        assertEquals("cookieContext.res", "text/html; charset=UTF-8", actual);
        Object actual2 = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getCharacterEncoding();
        assertEquals("cookieContext.res", "UTF-8", actual2);
        assertSame("cookieContext.res", res, getPrivateField(cookieContext, "res"));
    }
    
    public void testSetAttribute1() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest req = mockServletContext.createHttpServletRequest("testCookieContextParam1");
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        CookieContext cookieContext = new CookieContext(req, res);
        cookieContext.setAttribute("testCookieContextName", "2u\u0016C^");
        Object actual = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getContentType();
        assertEquals("cookieContext.res", "text/html; charset=UTF-8", actual);
        Object actual2 = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getCharacterEncoding();
        assertEquals("cookieContext.res", "UTF-8", actual2);
        assertSame("cookieContext.res", res, getPrivateField(cookieContext, "res"));
    }
    
    public void testHasAttributeThrowsNullPointerException() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        CookieContext cookieContext = new CookieContext(req, new MockServletContext().createHttpServletResponse());
        Mockingbird.enterRecordingMode();
        Cookie[] cookies = new Cookie[2];
        cookies[1] = (Cookie) Mockingbird.getProxyObject(Cookie.class);
        Mockingbird.setReturnValue(req.getCookies(), cookies);
        Mockingbird.enterTestMode(CookieContext.class);
        try {
            cookieContext.hasAttribute("testCookieContextName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            Object actual = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getContentType();
            assertEquals("cookieContext.res", "text/html; charset=UTF-8", actual);
            Object actual2 = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getCharacterEncoding();
            assertEquals("cookieContext.res", "UTF-8", actual2);
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CookieContext.class, ex);
            assertSame("cookieContext.req", req, getPrivateField(cookieContext, "req"));
        }
    }
    
    public void testKeysThrowsNullPointerException() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        CookieContext cookieContext = new CookieContext(req, new MockServletContext().createHttpServletResponse());
        Mockingbird.enterRecordingMode();
        Cookie[] cookies = new Cookie[1];
        Mockingbird.setReturnValue(req.getCookies(), cookies);
        Mockingbird.enterTestMode(CookieContext.class);
        try {
            cookieContext.keys();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            Object actual = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getContentType();
            assertEquals("cookieContext.res", "text/html; charset=UTF-8", actual);
            Object actual2 = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getCharacterEncoding();
            assertEquals("cookieContext.res", "UTF-8", actual2);
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CookieContext.class, ex);
            assertSame("cookieContext.req", req, getPrivateField(cookieContext, "req"));
        }
    }
    
    public void testRemoveAttributeThrowsIllegalArgumentException() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest req = mockServletContext.createHttpServletRequest("testCookieContextParam1");
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        CookieContext cookieContext = new CookieContext(req, res);
        try {
            cookieContext.removeAttribute("testCookieContext\rName");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            Object actual = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getContentType();
            assertEquals("cookieContext.res", "text/html; charset=UTF-8", actual);
            Object actual2 = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getCharacterEncoding();
            assertEquals("cookieContext.res", "UTF-8", actual2);
            assertEquals("ex.getMessage()", "Cookie name \"testCookieContext\rName\" is a reserved token", ex.getMessage());
            assertThrownBy(Cookie.class, ex);
            assertSame("cookieContext.res", res, getPrivateField(cookieContext, "res"));
        }
    }
    
    public void testRemoveAttributeThrowsNullPointerException() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest req = mockServletContext.createHttpServletRequest("testCookieContextParam1");
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        CookieContext cookieContext = new CookieContext(req, res);
        try {
            cookieContext.removeAttribute(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            Object actual = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getContentType();
            assertEquals("cookieContext.res", "text/html; charset=UTF-8", actual);
            Object actual2 = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getCharacterEncoding();
            assertEquals("cookieContext.res", "UTF-8", actual2);
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Cookie.class, ex);
            assertSame("cookieContext.res", res, getPrivateField(cookieContext, "res"));
        }
    }
    
    public void testResetThrowsUnsupportedOperationException() throws Throwable {
        CookieContext cookieContext = new CookieContext((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class), new MockServletContext().createHttpServletResponse());
        Mockingbird.enterTestMode(CookieContext.class);
        try {
            cookieContext.reset();
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException ex) {
            Object actual = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getContentType();
            assertEquals("cookieContext.res", "text/html; charset=UTF-8", actual);
            Object actual2 = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getCharacterEncoding();
            assertEquals("cookieContext.res", "UTF-8", actual2);
            assertEquals("ex.getMessage()", "reset() is not supported by CookieContext !", ex.getMessage());
            assertThrownBy(CookieContext.class, ex);
        }
    }
    
    public void testSetAttributeThrowsIllegalArgumentException() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest req = mockServletContext.createHttpServletRequest("testCookieContextParam1");
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        CookieContext cookieContext = new CookieContext(req, res);
        try {
            cookieContext.setAttribute("testCookieContext\rName", "");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            Object actual = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getContentType();
            assertEquals("cookieContext.res", "text/html; charset=UTF-8", actual);
            Object actual2 = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getCharacterEncoding();
            assertEquals("cookieContext.res", "UTF-8", actual2);
            assertEquals("ex.getMessage()", "Cookie name \"testCookieContext\rName\" is a reserved token", ex.getMessage());
            assertThrownBy(Cookie.class, ex);
            assertSame("cookieContext.res", res, getPrivateField(cookieContext, "res"));
        }
    }
    
    public void testSetAttributeThrowsNullPointerException() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest req = mockServletContext.createHttpServletRequest("testCookieContextParam1");
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        CookieContext cookieContext = new CookieContext(req, res);
        try {
            cookieContext.setAttribute("testCookieContextName", null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            Object actual = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getContentType();
            assertEquals("cookieContext.res", "text/html; charset=UTF-8", actual);
            Object actual2 = ((MockHttpServletResponse) getPrivateField(cookieContext, "res")).getCharacterEncoding();
            assertEquals("cookieContext.res", "UTF-8", actual2);
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CookieContext.class, ex);
            assertSame("cookieContext.res", res, getPrivateField(cookieContext, "res"));
        }
    }
}

