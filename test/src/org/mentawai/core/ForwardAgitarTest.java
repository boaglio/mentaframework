/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 7:28:04 PM
 * Time to generate: 00:24.135 seconds
 *
 */

package org.mentawai.core;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.Iterator;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletContext;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.agitar.mock.servlet.MockHttpServletRequest;
import org.agitar.mock.servlet.MockHttpServletResponse;
import org.agitar.mock.servlet.MockServletContext;
import org.mentawai.action.SuccessAction;
import org.mentawai.util.MockAction;

public class ForwardAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return Forward.class;
    }
    
    public void testConstructor() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(ApplicationManager.getViewDir(), "/");
        Mockingbird.enterTestMode(Forward.class);
        Forward forward = new Forward("testForwardUrl");
        assertEquals("forward.getUrl()", "//testForwardUrl", forward.getUrl());
    }
    
    public void testConstructor1() throws Throwable {
        new Forward(null);
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testConstructor2() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(ApplicationManager.getViewDir(), null);
        Mockingbird.enterTestMode(Forward.class);
        Forward forward = new Forward("testForwardUrl");
        assertEquals("forward.getUrl()", "/testForwardUrl", forward.getUrl());
    }
    
    public void testConstructor3() throws Throwable {
        new Forward("testForwardUrl");
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testConstructor4() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(ApplicationManager.getViewDir(), "/");
        Mockingbird.enterTestMode(Forward.class);
        Forward forward = new Forward("testForwardUrl");
        assertEquals("forward.getUrl()", "//testForwardUrl", forward.getUrl());
    }
    
    public void testConstructor5() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(ApplicationManager.getViewDir(), "/");
        Mockingbird.enterTestMode(Forward.class);
        Forward forward = new Forward("testForwardUrl");
        assertEquals("forward.getUrl()", "//testForwardUrl", forward.getUrl());
    }
    
    public void testConstructor6() throws Throwable {
        new Forward("/*__1Mkx,");
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testConstructor7() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(ApplicationManager.getViewDir(), null);
        Mockingbird.enterTestMode(Forward.class);
        Forward forward = new Forward("testForwardUrl");
        assertEquals("forward.getUrl()", "/testForwardUrl", forward.getUrl());
    }
    
    public void testConstructor8() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(ApplicationManager.getViewDir(), "39YJz3~lgyM87^/\t+L-V");
        Mockingbird.enterTestMode(Forward.class);
        Forward forward = new Forward("testForwardUrl");
        assertEquals("forward.getUrl()", "/39YJz3~lgyM87^/\t+L-V/testForwardUrl", forward.getUrl());
    }
    
    public void testConstructor9() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(ApplicationManager.getViewDir(), "");
        Mockingbird.enterTestMode(Forward.class);
        Forward forward = new Forward("testForwardUrl");
        assertEquals("forward.getUrl()", "//testForwardUrl", forward.getUrl());
    }
    
    public void testConstructor10() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(ApplicationManager.getViewDir(), "testString");
        Mockingbird.enterTestMode(Forward.class);
        Forward forward = new Forward("testForwardUrl");
        assertEquals("forward.getUrl()", "/testString/testForwardUrl", forward.getUrl());
    }
    
    public void testExecute() throws Throwable {
        Forward forward = new Forward("testForwardUrl");
        forward.setUrl("");
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        HttpServletRequest req = mockServletContext.createHttpServletRequest("testForwardParam1");
        Mockingbird.enterRecordingMode();
        Forward.forward("/", req, res);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Forward.class);
        forward.execute(null, req, res);
        assertEquals("(MockHttpServletResponse) res", "text/html; charset=UTF-8", ((MockHttpServletResponse) res).getContentType());
        assertEquals("(MockHttpServletResponse) res", "UTF-8", ((MockHttpServletResponse) res).getCharacterEncoding());
    }
    
    public void testExecute1() throws Throwable {
        Forward forward = new Forward("testForwardUrl");
        forward.setUrl("testString");
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        HttpServletRequest req = mockServletContext.createHttpServletRequest("testForwardParam1");
        Action a = new MockAction();
        Mockingbird.enterRecordingMode();
        Forward.forward("/testString", req, res);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Forward.class);
        forward.execute(a, req, res);
        assertNotNull("(MockHttpServletRequest) req", ((MockHttpServletRequest) req).getAttribute("input"));
        assertSame("(MockHttpServletRequest) req", a, ((MockHttpServletRequest) req).getAttribute("action"));
        assertNotNull("(MockHttpServletRequest) req", ((MockHttpServletRequest) req).getAttribute("session"));
        assertNotNull("(MockHttpServletRequest) req", ((MockHttpServletRequest) req).getAttribute("application"));
        assertEquals("(MockHttpServletResponse) res", "text/html; charset=UTF-8", ((MockHttpServletResponse) res).getContentType());
        assertEquals("(MockHttpServletResponse) res", "UTF-8", ((MockHttpServletResponse) res).getCharacterEncoding());
    }
    
    public void testExecuteWithAggressiveMocks() throws Throwable {
        storeStaticField(Forward.class, "INPUT_REQUEST");
        storeStaticField(Controller.class, "application");
        storeStaticField(Forward.class, "SESSION_REQUEST");
        storeStaticField(Forward.class, "APPLICATION_REQUEST");
        storeStaticField(Forward.class, "ACTION_REQUEST");
        Forward forward = (Forward) Mockingbird.getProxyObject(Forward.class, true);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        HttpServletRequest httpServletRequest = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Output output = (Output) Mockingbird.getProxyObject(Output.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ServletContext servletContext = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        RequestDispatcher requestDispatcher = (RequestDispatcher) Mockingbird.getProxyObject(RequestDispatcher.class);
        setPrivateField(forward, "url", "");
        Forward.APPLICATION_REQUEST = "";
        Forward.SESSION_REQUEST = "";
        Forward.INPUT_REQUEST = "";
        Forward.ACTION_REQUEST = "";
        setPrivateField(Controller.class, "application", servletContext);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getOutput(), output);
        Mockingbird.setReturnValue(output.keys(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, output, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, httpServletRequest, "setAttribute", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, output, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, httpServletRequest, "setAttribute", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(action.getApplication(), null);
        Mockingbird.setReturnValue(false, httpServletRequest, "setAttribute", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(action.getSession(), null);
        Mockingbird.setReturnValue(false, httpServletRequest, "setAttribute", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(action.getInput(), null);
        Mockingbird.setReturnValue(false, httpServletRequest, "setAttribute", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, httpServletRequest, "setAttribute", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, servletContext, "getRequestDispatcher", "(java.lang.String)javax.servlet.RequestDispatcher", requestDispatcher, 1);
        requestDispatcher.forward(httpServletRequest, null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Forward.class);
        forward.execute(action, httpServletRequest, null);
        assertEquals("forward.getUrl()", "", forward.getUrl());
        assertEquals("forwardForward.INPUT_REQUEST", "", Forward.INPUT_REQUEST);
        assertEquals("forwardForward.SESSION_REQUEST", "", Forward.SESSION_REQUEST);
        assertEquals("forwardForward.APPLICATION_REQUEST", "", Forward.APPLICATION_REQUEST);
        assertEquals("forwardForward.ACTION_REQUEST", "", Forward.ACTION_REQUEST);
    }
    
    public void testForward() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        HttpServletResponse res = (HttpServletResponse) Mockingbird.getProxyObject(HttpServletResponse.class);
        Mockingbird.enterRecordingMode();
        ServletContext servletContext = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        Mockingbird.setReturnValue(Controller.getApplication(), servletContext);
        RequestDispatcher requestDispatcher = (RequestDispatcher) Mockingbird.getProxyObject(RequestDispatcher.class);
        Mockingbird.setReturnValue(servletContext.getRequestDispatcher("testString"), requestDispatcher);
        callPrivateMethod("javax.servlet.RequestDispatcher", "forward", new Class[] {ServletRequest.class, ServletResponse.class}, requestDispatcher, new Object[] {req, res});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Forward.class);
        Forward.forward("testString", req, res);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testPutSlash() throws Throwable {
        Forward forward = new Forward("testForwardUrl");
        Object result = callPrivateMethod("org.mentawai.core.Forward", "putSlash", new Class[] {String.class}, forward, new Object[] {null});
        assertNull("result", result);
    }
    
    public void testPutSlash1() throws Throwable {
        Forward forward = new Forward("testForwardUrl");
        String result = (String) callPrivateMethod("org.mentawai.core.Forward", "putSlash", new Class[] {String.class}, forward, new Object[] {"/"});
        assertEquals("result", "/", result);
    }
    
    public void testPutSlash2() throws Throwable {
        Forward forward = new Forward("testForwardUrl");
        String result = (String) callPrivateMethod("org.mentawai.core.Forward", "putSlash", new Class[] {String.class}, forward, new Object[] {"testForwardUrl"});
        assertEquals("result", "/testForwardUrl", result);
    }
    
    public void testSetUrl() throws Throwable {
        Forward forward = new Forward("testForwardUrl");
        forward.setUrl(null);
        assertNull("forward.getUrl()", forward.getUrl());
    }
    
    public void testSetUrl1() throws Throwable {
        Forward forward = new Forward("testForwardUrl");
        forward.setUrl("/");
        assertEquals("forward.getUrl()", "/", forward.getUrl());
    }
    
    public void testSetUrl2() throws Throwable {
        Forward forward = new Forward("testForwardUrl");
        forward.setUrl("testForwardUrl");
        assertEquals("forward.getUrl()", "/testForwardUrl", forward.getUrl());
    }
    
    public void testToString() throws Throwable {
        new Forward("testForwardUrl").toString();
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testExecuteThrowsConsequenceException() throws Throwable {
        Forward forward = new Forward("testForwardUrl");
        forward.setUrl("applicatin");
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        HttpServletRequest req = mockServletContext.createHttpServletRequest("testForwardParam1");
        Mockingbird.enterRecordingMode();
        Forward.forward("/applicatin", req, res);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.replaceObjectForRecording(ConsequenceException.class, "<init>(java.lang.Exception)", Mockingbird.getProxyObject(ConsequenceException.class));
        Mockingbird.enterTestMode(Forward.class);
        try {
            forward.execute(null, req, res);
            fail("Expected ConsequenceException to be thrown");
        } catch (ConsequenceException ex) {
            assertEquals("forward.getUrl()", "/applicatin", forward.getUrl());
        }
    }
    
    public void testExecuteThrowsConsequenceException1() throws Throwable {
        Forward forward = new Forward("testForwardUrl");
        forward.setUrl("testString");
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        HttpServletRequest req = mockServletContext.createHttpServletRequest("testForwardParam1");
        Action a = new MockAction();
        Mockingbird.enterRecordingMode();
        Forward.forward("/testString", req, res);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.replaceObjectForRecording(ConsequenceException.class, "<init>(java.lang.Exception)", Mockingbird.getProxyObject(ConsequenceException.class));
        Mockingbird.enterTestMode(Forward.class);
        try {
            forward.execute(a, req, res);
            fail("Expected ConsequenceException to be thrown");
        } catch (ConsequenceException ex) {
            assertEquals("forward.getUrl()", "/testString", forward.getUrl());
        }
    }
    
    public void testExecuteThrowsConsequenceException2() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        HttpServletRequest req = mockServletContext.createHttpServletRequest("testForwardParam1");
        Action a = new SuccessAction();
        try {
            new Forward("testForwardUrl").execute(a, req, res);
            fail("Expected ConsequenceException to be thrown");
        } catch (ConsequenceException ex) {
            assertEquals("(MockHttpServletResponse) res", "text/html; charset=UTF-8", ((MockHttpServletResponse) res).getContentType());
            assertEquals("(MockHttpServletResponse) res", "UTF-8", ((MockHttpServletResponse) res).getCharacterEncoding());
            assertEquals("ex.getMessage()", "java.lang.NullPointerException", ex.getMessage());
            assertThrownBy(Forward.class, ex);
            assertEquals("(MockHttpServletRequest) req.getServerName()", "localhost", ((MockHttpServletRequest) req).getServerName());
        }
    }
    
    public void testForwardThrowsNullPointerException() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        HttpServletResponse res = (HttpServletResponse) Mockingbird.getProxyObject(HttpServletResponse.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(Controller.getApplication(), null);
        Mockingbird.enterTestMode(Forward.class);
        try {
            Forward.forward("testForwardUrl", req, res);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Forward.class, ex);
        }
    }
}

