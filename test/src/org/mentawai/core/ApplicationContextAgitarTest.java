/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 7:21:25 PM
 * Time to generate: 00:21.259 seconds
 *
 */

package org.mentawai.core;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.servlet.ServletContext;
import org.mentawai.util.EnumerationToIterator;

public class ApplicationContextAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ApplicationContext.class;
    }
    
    public void testConstructor() throws Throwable {
        ApplicationContext applicationContext = new ApplicationContext(null);
        assertNull("applicationContext.getServletContext()", applicationContext.getServletContext());
    }
    
    public void testContainsKey() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(context.getAttribute("testApplicationContextParam1"), null);
        Mockingbird.enterTestMode(ApplicationContext.class);
        boolean result = applicationContext.containsKey("x");
        assertFalse("result", result);
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testContainsKey1() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(context.getAttribute(""), new Integer(0));
        Mockingbird.enterTestMode(ApplicationContext.class);
        boolean result = applicationContext.containsKey("");
        assertTrue("result", result);
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testGet() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(context.getAttribute("testApplicationContextParam1"), null);
        Mockingbird.enterTestMode(ApplicationContext.class);
        Object result = applicationContext.get("testString");
        assertNull("result", result);
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testGetAttribute() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(context.getAttribute("testApplicationContextParam1"), null);
        Mockingbird.enterTestMode(ApplicationContext.class);
        Object result = applicationContext.getAttribute("testApplicationContextName");
        assertNull("result", result);
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testGetAttribute1() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(context.getAttribute(" "), boolean2);
        Mockingbird.enterTestMode(ApplicationContext.class);
        Boolean result = (Boolean) applicationContext.getAttribute(" ");
        assertSame("result", boolean2, result);
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testGetAttribute2() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(context.getAttribute("testString"), "testString");
        Mockingbird.enterTestMode(ApplicationContext.class);
        String result = (String) applicationContext.getAttribute("testString");
        assertEquals("result", "testString", result);
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testGetAttribute3() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        Integer integer = new Integer(31);
        Mockingbird.setReturnValue(context.getAttribute("testString"), integer);
        Mockingbird.enterTestMode(ApplicationContext.class);
        Integer result = (Integer) applicationContext.getAttribute("testString");
        assertSame("result", integer, result);
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testGetAttribute4() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(context.getAttribute("testString"), boolean2);
        Mockingbird.enterTestMode(ApplicationContext.class);
        Boolean result = (Boolean) applicationContext.getAttribute("testString");
        assertSame("result", boolean2, result);
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testGetAttribute5() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        Integer integer = new Integer(0);
        Mockingbird.setReturnValue(context.getAttribute("testString"), integer);
        Mockingbird.enterTestMode(ApplicationContext.class);
        Integer result = (Integer) applicationContext.getAttribute("testString");
        assertSame("result", integer, result);
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testGetServletContext() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterTestMode(ApplicationContext.class);
        ServletContext result = applicationContext.getServletContext();
        assertSame("result", context, result);
    }
    
    public void testHasAttribute() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(context.getAttribute("testString"), Mockingbird.getProxyObject(Object.class));
        Mockingbird.enterTestMode(ApplicationContext.class);
        boolean result = applicationContext.hasAttribute("testString");
        assertTrue("result", result);
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testHasAttribute1() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(context.getAttribute("testApplicationContextParam1"), null);
        Mockingbird.enterTestMode(ApplicationContext.class);
        boolean result = applicationContext.hasAttribute("testApplicationContextName");
        assertFalse("result", result);
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testKeys() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        Enumeration enumeration = (Enumeration) Mockingbird.getProxyObject(Enumeration.class);
        Mockingbird.setReturnValue(context.getAttributeNames(), enumeration);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(EnumerationToIterator.get(enumeration), iterator);
        Mockingbird.enterTestMode(ApplicationContext.class);
        Iterator result = applicationContext.keys();
        assertSame("result", iterator, result);
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testPut() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        context.setAttribute("testString", null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(ApplicationContext.class);
        Object result = applicationContext.put("testString", null);
        assertNull("result", result);
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testPut1() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        Integer value = new Integer(0);
        context.setAttribute("\n!", value);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(ApplicationContext.class);
        Integer result = (Integer) applicationContext.put("\n!", value);
        assertSame("result", value, result);
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testPut2() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        Integer value = new Integer(1);
        context.setAttribute("x", value);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(ApplicationContext.class);
        Integer result = (Integer) applicationContext.put("x", value);
        assertSame("result", value, result);
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testPut3() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        Boolean value = Boolean.FALSE;
        context.setAttribute("abcdefghijklmnopq|stuvwxyz", value);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(ApplicationContext.class);
        Boolean result = (Boolean) applicationContext.put("abcdefghijklmnopq|stuvwxyz", value);
        assertSame("result", value, result);
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testPut4() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        context.setAttribute("testString", "");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(ApplicationContext.class);
        String result = (String) applicationContext.put("testString", "");
        assertEquals("result", "", result);
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testRemove() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(context.getAttribute("testApplicationContextParam1"), null);
        Mockingbird.enterTestMode(ApplicationContext.class);
        Object result = applicationContext.remove("testString");
        assertNull("result", result);
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testRemove1() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(context.getAttribute("testString"), "testString");
        context.removeAttribute("testString");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(ApplicationContext.class);
        String result = (String) applicationContext.remove("testString");
        assertEquals("result", "testString", result);
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testRemoveAttribute() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        context.removeAttribute("testString");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(ApplicationContext.class);
        applicationContext.removeAttribute("testString");
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testSetAttribute() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterRecordingMode();
        Integer value = new Integer(31);
        context.setAttribute("testString", value);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(ApplicationContext.class);
        applicationContext.setAttribute("testString", value);
        assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
    }
    
    public void testContainsKeyThrowsIllegalArgumentException() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Object key = new Object();
        Mockingbird.enterTestMode(ApplicationContext.class);
        try {
            applicationContext.containsKey(key);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ApplicationContext.class, ex);
            assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
        }
    }
    
    public void testContainsKeyThrowsNullPointerException() throws Throwable {
        ApplicationContext applicationContext = new ApplicationContext(null);
        try {
            applicationContext.containsKey("PUV]bM|/zrg9u\rWQn^G+eeRDV");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNull("applicationContext.getServletContext()", applicationContext.getServletContext());
        }
    }
    
    public void testGetThrowsIllegalArgumentException() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterTestMode(ApplicationContext.class);
        try {
            applicationContext.get(new Integer(0));
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ApplicationContext.class, ex);
            assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
        }
    }
    
    public void testGetThrowsNullPointerException() throws Throwable {
        ApplicationContext applicationContext = new ApplicationContext(null);
        try {
            applicationContext.get("testString");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNull("applicationContext.getServletContext()", applicationContext.getServletContext());
        }
    }
    
    public void testPutThrowsNullPointerException() throws Throwable {
        ApplicationContext applicationContext = new ApplicationContext(null);
        try {
            applicationContext.put("", "\\2");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNull("applicationContext.getServletContext()", applicationContext.getServletContext());
        }
    }
    
    public void testRemoveAttributeThrowsNullPointerException() throws Throwable {
        ApplicationContext applicationContext = new ApplicationContext(null);
        try {
            applicationContext.removeAttribute("testApplicationContextName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNull("applicationContext.getServletContext()", applicationContext.getServletContext());
        }
    }
    
    public void testRemoveThrowsIllegalArgumentException() throws Throwable {
        ServletContext context = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        ApplicationContext applicationContext = new ApplicationContext(context);
        Mockingbird.enterTestMode(ApplicationContext.class);
        try {
            applicationContext.remove(new Integer(100));
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ApplicationContext.class, ex);
            assertSame("applicationContext.getServletContext()", context, applicationContext.getServletContext());
        }
    }
    
    public void testRemoveThrowsNullPointerException() throws Throwable {
        ApplicationContext applicationContext = new ApplicationContext(null);
        try {
            applicationContext.remove("reset() is not suported for ApplicationContext!");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNull("applicationContext.getServletContext()", applicationContext.getServletContext());
        }
    }
    
    public void testResetThrowsUnsupportedOperationException() throws Throwable {
        ApplicationContext applicationContext = new ApplicationContext((ServletContext) Mockingbird.getProxyObject(ServletContext.class));
        Mockingbird.enterTestMode(ApplicationContext.class);
        try {
            applicationContext.reset();
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException ex) {
            assertEquals("ex.getMessage()", "reset() is not supported for ApplicationContext!", ex.getMessage());
            assertThrownBy(ApplicationContext.class, ex);
        }
    }
    
    public void testSetAttributeThrowsNullPointerException() throws Throwable {
        char[] value = new char[0];
        ApplicationContext applicationContext = new ApplicationContext(null);
        try {
            applicationContext.setAttribute("testApplicationContextName", value);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNull("applicationContext.getServletContext()", applicationContext.getServletContext());
        }
    }
}

