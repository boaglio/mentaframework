/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 7:30:16 PM
 * Time to generate: 00:21.145 seconds
 *
 */

package org.mentawai.core;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.Locale;
import org.mentawai.action.SuccessAction;
import org.mentawai.i18n.LocaleManager;
import org.mentawai.message.ClassMessageContext;
import org.mentawai.spring.SpringInput;

public class SingleInstanceBaseActionAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SingleInstanceBaseAction.class;
    }
    
    public void testGetApplication() throws Throwable {
        Context result = new SuccessAction().getApplication();
        assertNull("result", result);
    }
    
    public void testGetApplication1() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(LocaleManager.isUseMasterForEverything(), false);
        Mockingbird.replaceObjectForRecording(ClassMessageContext.class, "<init>(java.lang.Class)", Mockingbird.getProxyObject(ClassMessageContext.class));
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", threadLocal);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.enterTestMode(SingleInstanceBaseAction.class);
        SingleInstanceBaseAction successAction = new SuccessAction();
        Mockingbird.enterRecordingMode();
        MapContext contextMap = (MapContext) Mockingbird.getProxyObject(MapContext.class);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, contextMap, 1);
        Mockingbird.enterTestMode(SingleInstanceBaseAction.class);
        MapContext result = (MapContext) successAction.getApplication();
        assertSame("result", contextMap, result);
    }
    
    public void testGetInput() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(LocaleManager.isUseMasterForEverything(), false);
        Mockingbird.replaceObjectForRecording(ClassMessageContext.class, "<init>(java.lang.Class)", Mockingbird.getProxyObject(ClassMessageContext.class));
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", threadLocal);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.enterTestMode(SingleInstanceBaseAction.class);
        SingleInstanceBaseAction successAction = new SuccessAction();
        Mockingbird.enterRecordingMode();
        SpringInput springInput = (SpringInput) Mockingbird.getProxyObject(SpringInput.class);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, springInput, 1);
        Mockingbird.enterTestMode(SingleInstanceBaseAction.class);
        SpringInput result = (SpringInput) successAction.getInput();
        assertSame("result", springInput, result);
    }
    
    public void testGetInput1() throws Throwable {
        Input result = new SuccessAction().getInput();
        assertNull("result", result);
    }
    
    public void testGetLocale() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(LocaleManager.isUseMasterForEverything(), false);
        Mockingbird.replaceObjectForRecording(ClassMessageContext.class, "<init>(java.lang.Class)", Mockingbird.getProxyObject(ClassMessageContext.class));
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", threadLocal);
        Mockingbird.enterTestMode(SingleInstanceBaseAction.class);
        SingleInstanceBaseAction successAction = new SuccessAction();
        Mockingbird.enterRecordingMode();
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, locale, 1);
        Mockingbird.enterTestMode(SingleInstanceBaseAction.class);
        Locale result = successAction.getLocale();
        assertSame("result", locale, result);
    }
    
    public void testGetLocale1() throws Throwable {
        Locale result = new SuccessAction().getLocale();
        assertNull("result", result);
    }
    
    public void testGetOutput() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(LocaleManager.isUseMasterForEverything(), false);
        Mockingbird.replaceObjectForRecording(ClassMessageContext.class, "<init>(java.lang.Class)", Mockingbird.getProxyObject(ClassMessageContext.class));
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", threadLocal);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.enterTestMode(SingleInstanceBaseAction.class);
        SingleInstanceBaseAction successAction = new SuccessAction();
        Mockingbird.enterRecordingMode();
        ResponseOutput outputResponse = (ResponseOutput) Mockingbird.getProxyObject(ResponseOutput.class);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, outputResponse, 1);
        Mockingbird.enterTestMode(SingleInstanceBaseAction.class);
        ResponseOutput result = (ResponseOutput) successAction.getOutput();
        assertSame("result", outputResponse, result);
    }
    
    public void testGetOutput1() throws Throwable {
        Output result = new SuccessAction().getOutput();
        assertNull("result", result);
    }
    
    public void testGetSession() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(LocaleManager.isUseMasterForEverything(), false);
        Mockingbird.replaceObjectForRecording(ClassMessageContext.class, "<init>(java.lang.Class)", Mockingbird.getProxyObject(ClassMessageContext.class));
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", threadLocal);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.enterTestMode(SingleInstanceBaseAction.class);
        SingleInstanceBaseAction successAction = new SuccessAction();
        Mockingbird.enterRecordingMode();
        MapContext contextMap = (MapContext) Mockingbird.getProxyObject(MapContext.class);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, contextMap, 1);
        Mockingbird.enterTestMode(SingleInstanceBaseAction.class);
        MapContext result = (MapContext) successAction.getSession();
        assertSame("result", contextMap, result);
    }
    
    public void testGetSession1() throws Throwable {
        Context result = new SuccessAction().getSession();
        assertNull("result", result);
    }
    
    public void testSetApplication() throws Throwable {
        new SuccessAction().setApplication(new MapContext());
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetInput() throws Throwable {
        new SuccessAction().setInput(new MapInput());
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetLocale() throws Throwable {
        new SuccessAction().setLocale(Locale.CHINESE);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetOutput() throws Throwable {
        new SuccessAction().setOutput(new MapOutput());
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetSession() throws Throwable {
        new SuccessAction().setSession(new MapContext());
        assertTrue("Test call resulted in expected outcome", true);
    }
}

