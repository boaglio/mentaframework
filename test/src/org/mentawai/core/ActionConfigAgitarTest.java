/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 7:22:26 PM
 * Time to generate: 02:59.614 seconds
 *
 */

package org.mentawai.core;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.mentawai.action.LogoutAction;
import org.mentawai.ajax.AjaxRenderer;
import org.mentawai.ajax.renderer.JSONGenericRenderer;
import org.mentawai.ajax.renderer.StringAjaxRenderer;
import org.mentawai.ajaxtag.AjaxtagErrorConsequence;
import org.mentawai.filter.DateConverterFilter;
import org.mentawai.filter.OutputFilter;
import org.mentawai.filter.PushInjectionFilter;
import org.mentawai.filter.ValidatorFilter;
import org.mentawai.spring.SpringActionConfig;

public class ActionConfigAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ActionConfig.class;
    }
    
    public void testConstructor() throws Throwable {
        ActionConfig actionConfig = new ActionConfig(Integer.class);
        assertEquals("actionConfig.dirName", "integer", getPrivateField(actionConfig, "dirName"));
        assertEquals("actionConfig.filters.size()", 0, ((Collection) getPrivateField(actionConfig, "filters")).size());
        assertEquals("actionConfig.consequences.size()", 0, ((Map) getPrivateField(actionConfig, "consequences")).size());
        assertEquals("actionConfig.getName()", "Integer", actionConfig.getName());
        assertEquals("actionConfig.firstFilters.size()", 0, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
        assertEquals("actionConfig.actionClass", Integer.class, actionConfig.actionClass);
        assertNull("actionConfig.getInnerAction()", actionConfig.getInnerAction());
        assertEquals("actionConfig.innerConsequences.size()", 0, ((Map) getPrivateField(actionConfig, "innerConsequences")).size());
    }
    
    public void testConstructor1() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("/", Object.class, "testActionConfigInnerAction");
        assertEquals("actionConfig.dirName", "object", getPrivateField(actionConfig, "dirName"));
        assertEquals("actionConfig.filters.size()", 0, ((Collection) getPrivateField(actionConfig, "filters")).size());
        assertEquals("actionConfig.consequences.size()", 0, ((Map) getPrivateField(actionConfig, "consequences")).size());
        assertEquals("actionConfig.getName()", "/", actionConfig.getName());
        assertEquals("actionConfig.firstFilters.size()", 0, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
        assertEquals("actionConfig.actionClass", Object.class, actionConfig.actionClass);
        assertEquals("actionConfig.getInnerAction()", "testActionConfigInnerAction", actionConfig.getInnerAction());
        assertEquals("actionConfig.innerConsequences.size()", 0, ((Map) getPrivateField(actionConfig, "innerConsequences")).size());
    }
    
    public void testConstructor2() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("/`", Object.class, "testActionConfigInnerAction");
        assertEquals("actionConfig.dirName", "object", getPrivateField(actionConfig, "dirName"));
        assertEquals("actionConfig.filters.size()", 0, ((Collection) getPrivateField(actionConfig, "filters")).size());
        assertEquals("actionConfig.consequences.size()", 0, ((Map) getPrivateField(actionConfig, "consequences")).size());
        assertEquals("actionConfig.getName()", "`", actionConfig.getName());
        assertEquals("actionConfig.firstFilters.size()", 0, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
        assertEquals("actionConfig.actionClass", Object.class, actionConfig.actionClass);
        assertEquals("actionConfig.getInnerAction()", "testActionConfigInnerAction", actionConfig.getInnerAction());
        assertEquals("actionConfig.innerConsequences.size()", 0, ((Map) getPrivateField(actionConfig, "innerConsequences")).size());
    }
    
    public void testConstructor3() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class, "testActionConfigInnerAction");
        assertEquals("actionConfig.dirName", "integer", getPrivateField(actionConfig, "dirName"));
        assertEquals("actionConfig.filters.size()", 0, ((Collection) getPrivateField(actionConfig, "filters")).size());
        assertEquals("actionConfig.consequences.size()", 0, ((Map) getPrivateField(actionConfig, "consequences")).size());
        assertEquals("actionConfig.getName()", "testActionConfigName", actionConfig.getName());
        assertEquals("actionConfig.firstFilters.size()", 0, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
        assertEquals("actionConfig.actionClass", Integer.class, actionConfig.actionClass);
        assertEquals("actionConfig.getInnerAction()", "testActionConfigInnerAction", actionConfig.getInnerAction());
        assertEquals("actionConfig.innerConsequences.size()", 0, ((Map) getPrivateField(actionConfig, "innerConsequences")).size());
    }
    
    public void testConstructor4() throws Throwable {
        ActionConfig actionConfig = new ActionConfig(Integer.class, "testActionConfigInnerAction");
        assertEquals("actionConfig.dirName", "integer", getPrivateField(actionConfig, "dirName"));
        assertEquals("actionConfig.filters.size()", 0, ((Collection) getPrivateField(actionConfig, "filters")).size());
        assertEquals("actionConfig.consequences.size()", 0, ((Map) getPrivateField(actionConfig, "consequences")).size());
        assertEquals("actionConfig.getName()", "Integer", actionConfig.getName());
        assertEquals("actionConfig.firstFilters.size()", 0, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
        assertEquals("actionConfig.actionClass", Integer.class, actionConfig.actionClass);
        assertEquals("actionConfig.getInnerAction()", "testActionConfigInnerAction", actionConfig.getInnerAction());
        assertEquals("actionConfig.innerConsequences.size()", 0, ((Map) getPrivateField(actionConfig, "innerConsequences")).size());
    }
    
    public void testConstructor5() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("/d>3d,&qCG{<t<nF_?/t=?u%zfMk@SE", Object.class);
        assertEquals("actionConfig.dirName", "object", getPrivateField(actionConfig, "dirName"));
        assertEquals("actionConfig.filters.size()", 0, ((Collection) getPrivateField(actionConfig, "filters")).size());
        assertEquals("actionConfig.consequences.size()", 0, ((Map) getPrivateField(actionConfig, "consequences")).size());
        assertEquals("actionConfig.getName()", "d>3d,&qCG{<t<nF_?/t=?u%zfMk@SE", actionConfig.getName());
        assertEquals("actionConfig.firstFilters.size()", 0, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
        assertEquals("actionConfig.actionClass", Object.class, actionConfig.actionClass);
        assertNull("actionConfig.getInnerAction()", actionConfig.getInnerAction());
        assertEquals("actionConfig.innerConsequences.size()", 0, ((Map) getPrivateField(actionConfig, "innerConsequences")).size());
    }
    
    public void testConstructor6() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("/", Object.class);
        assertEquals("actionConfig.dirName", "object", getPrivateField(actionConfig, "dirName"));
        assertEquals("actionConfig.filters.size()", 0, ((Collection) getPrivateField(actionConfig, "filters")).size());
        assertEquals("actionConfig.consequences.size()", 0, ((Map) getPrivateField(actionConfig, "consequences")).size());
        assertEquals("actionConfig.getName()", "/", actionConfig.getName());
        assertEquals("actionConfig.firstFilters.size()", 0, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
        assertEquals("actionConfig.actionClass", Object.class, actionConfig.actionClass);
        assertNull("actionConfig.getInnerAction()", actionConfig.getInnerAction());
        assertEquals("actionConfig.innerConsequences.size()", 0, ((Map) getPrivateField(actionConfig, "innerConsequences")).size());
    }
    
    public void testConstructor7() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Action.class);
        assertEquals("actionConfig.dirName", "action", getPrivateField(actionConfig, "dirName"));
        assertEquals("actionConfig.filters.size()", 0, ((Collection) getPrivateField(actionConfig, "filters")).size());
        assertEquals("actionConfig.consequences.size()", 0, ((Map) getPrivateField(actionConfig, "consequences")).size());
        assertEquals("actionConfig.getName()", "testActionConfigName", actionConfig.getName());
        assertEquals("actionConfig.firstFilters.size()", 0, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
        assertEquals("actionConfig.actionClass", Action.class, actionConfig.actionClass);
        assertNull("actionConfig.getInnerAction()", actionConfig.getInnerAction());
        assertEquals("actionConfig.innerConsequences.size()", 0, ((Map) getPrivateField(actionConfig, "innerConsequences")).size());
    }
    
    public void testConstructor8() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("/0", Object.class);
        assertEquals("actionConfig.dirName", "object", getPrivateField(actionConfig, "dirName"));
        assertEquals("actionConfig.filters.size()", 0, ((Collection) getPrivateField(actionConfig, "filters")).size());
        assertEquals("actionConfig.consequences.size()", 0, ((Map) getPrivateField(actionConfig, "consequences")).size());
        assertEquals("actionConfig.firstFilters.size()", 0, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
        assertEquals("actionConfig.actionClass", Object.class, actionConfig.actionClass);
        assertNull("actionConfig.getInnerAction()", actionConfig.getInnerAction());
        assertEquals("actionConfig.innerConsequences.size()", 0, ((Map) getPrivateField(actionConfig, "innerConsequences")).size());
    }
    
    public void testConstructor9() throws Throwable {
        String[] strings = new String[1];
        String[] strings2 = new String[1];
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        strings[0] = "";
        strings2[0] = "";
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", Mockingbird.getProxyObject(LinkedList.class));
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", Mockingbird.getProxyObject(LinkedList.class));
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toLowerCase", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings2, 1);
        Mockingbird.enterTestMode();
        ActionConfig actionConfig = new ActionConfig(Class.forName("com.sun.corba.se.spi.activation.LocatorPackage.ServerLocationPerORBHolder"));
        assertEquals("actionConfig.dirName", "", getPrivateField(actionConfig, "dirName"));
        assertNotNull("actionConfig.filters", getPrivateField(actionConfig, "filters"));
        assertNotNull("actionConfig.consequences", getPrivateField(actionConfig, "consequences"));
        assertEquals("actionConfig.getName()", "", actionConfig.getName());
        assertNotNull("actionConfig.firstFilters", getPrivateField(actionConfig, "firstFilters"));
        assertEquals("actionConfig.actionClass", Class.forName("com.sun.corba.se.spi.activation.LocatorPackage.ServerLocationPerORBHolder"), actionConfig.actionClass);
        assertNull("actionConfig.getInnerAction()", actionConfig.getInnerAction());
        assertNotNull("actionConfig.innerConsequences", getPrivateField(actionConfig, "innerConsequences"));
    }
    
    public void testAddConsequence() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.addConsequence("testActionConfigResult", new AjaxtagErrorConsequence());
        assertEquals("actionConfig.consequences.size()", 1, ((Map) getPrivateField(actionConfig, "consequences")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testAddConsequence1() throws Throwable {
        ActionConfig actionConfig = new ActionConfig(String.class);
        actionConfig.redirError("testActionConfigPage", true);
        actionConfig.getAutoConsequence("testActionConfigResult", "testString");
        Consequence c = new StringConsequence();
        ActionConfig result = actionConfig.addConsequence("testActionConfigResult", "testString", c);
        Object actual = ((Map) ((Map) getPrivateField(actionConfig, "innerConsequences")).get("testString")).get("testActionConfigResult");
        assertSame("actionConfig.innerConsequences.get(\"testString\").get(\"testActionConfigResult\")", c, actual);
        assertSame("result", actionConfig, result);
        assertEquals("actionConfig.innerConsequences.size()", 1, ((Map) getPrivateField(actionConfig, "innerConsequences")).size());
    }
    
    public void testAddConsequence2() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Object.class);
        ActionConfig result = actionConfig.addConsequence("testActionConfigResult", "testActionConfigInnerAction", new Redirect(true));
        assertEquals("actionConfig.innerConsequences.size()", 1, ((Map) getPrivateField(actionConfig, "innerConsequences")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testAddFilter() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        String[] args = new String[1];
        ActionConfig result = actionConfig.addFilter(new OutputFilter(), args);
        assertEquals("actionConfig.filters.size()", 1, ((Collection) getPrivateField(actionConfig, "filters")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testAddFilter1() throws Throwable {
        ActionConfig actionConfig = new ActionConfig(Integer.class, "testActionConfigInnerAction");
        ActionConfig result = actionConfig.addFilter(new ValidatorFilter("testActionConfigResultForError"), (String[]) null);
        assertSame("result", actionConfig, result);
    }
    
    public void testAddFilter2() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Object.class);
        String[] args = new String[0];
        ActionConfig result = actionConfig.addFilter(new DateConverterFilter(100, "testActionConfigS1"), args);
        assertSame("result", actionConfig, result);
    }
    
    public void testAddFilter3() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.addFilter(new PushInjectionFilter());
        assertEquals("actionConfig.filters.size()", 1, ((Collection) getPrivateField(actionConfig, "filters")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testAddFilter4() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.addFilter(new DateConverterFilter("testActionConfigS1"), "testActionConfigInnerAction");
        assertEquals("actionConfig.filters.size()", 1, ((Collection) getPrivateField(actionConfig, "filters")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testAddFilter5() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        List filters = new ArrayList(100);
        filters.add(new ValidatorFilter("testActionConfigResultForError"));
        ActionConfig result = actionConfig.addFilter(filters, "testActionConfigInnerAction");
        assertEquals("actionConfig.filters.size()", 1, ((Collection) getPrivateField(actionConfig, "filters")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testAddFilter6() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.addFilter(new ArrayList(100), "testActionConfigInnerAction");
        assertSame("result", actionConfig, result);
    }
    
    public void testAddFilter7() throws Throwable {
        ActionConfig actionConfig = new ActionConfig(Integer.class);
        ActionConfig result = actionConfig.addFilter(new ArrayList(100));
        assertSame("result", actionConfig, result);
        assertEquals("actionConfig.filters.size()", 0, ((Collection) getPrivateField(actionConfig, "filters")).size());
    }
    
    public void testAddFilterFirst() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        List filters = new ArrayList(100);
        filters.add(new ValidatorFilter("testActionConfigResultForError"));
        ActionConfig result = actionConfig.addFilterFirst(filters, "testActionConfigInnerAction");
        assertEquals("actionConfig.firstFilters.size()", 1, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testAddFilterFirst1() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.addFilterFirst(new ArrayList(100), "testActionConfigInnerAction");
        assertSame("result", actionConfig, result);
    }
    
    public void testAddFilterFirst2() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.addFilterFirst(new ArrayList(100));
        assertSame("result", actionConfig, result);
        assertEquals("actionConfig.firstFilters.size()", 0, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
    }
    
    public void testAddFilterFirst3() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.addFilterFirst(new ValidatorFilter());
        assertEquals("actionConfig.firstFilters.size()", 1, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testAddFilterFirst4() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.addFilterFirst(new DateConverterFilter(100, "testActionConfigS1", "testActionConfigS2"), "testActionConfigInnerAction");
        assertEquals("actionConfig.firstFilters.size()", 1, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testAjaxError() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.ajaxError(new StringAjaxRenderer("testActionConfigTagName"));
        assertEquals("actionConfig.consequences.size()", 1, ((Map) getPrivateField(actionConfig, "consequences")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testAjaxOk() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.ajaxOk(new JSONGenericRenderer("testActionConfigDateFormat"));
        assertEquals("actionConfig.consequences.size()", 1, ((Map) getPrivateField(actionConfig, "consequences")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testCutSlash() throws Throwable {
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, actionConfig.addConsequence("testActionConfigParam1", null), actionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        actionConfig.fwdOk("testActionConfigPage");
        String result = (String) callPrivateMethod("org.mentawai.core.ActionConfig", "cutSlash", new Class[] {String.class}, actionConfig, new Object[] {"/"});
        assertEquals("result", "/", result);
    }
    
    public void testCutSlash1() throws Throwable {
        String[] args = new String[0];
        Filter filter = new OutputFilter();
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(actionConfig.addFilter(filter, args), actionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        actionConfig.filter(filter, args);
        String result = (String) callPrivateMethod("org.mentawai.core.ActionConfig", "cutSlash", new Class[] {String.class}, actionConfig, new Object[] {"/,"});
        assertEquals("result", ",", result);
    }
    
    public void testCutSlash2() throws Throwable {
        List filters = new ArrayList(100);
        SpringActionConfig springActionConfig = (SpringActionConfig) Mockingbird.getProxyObject(SpringActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(springActionConfig.addFilter(filters, "testActionConfigParam2"), springActionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        springActionConfig.filter(filters, "testActionConfigInnerAction");
        String result = (String) callPrivateMethod("org.mentawai.core.ActionConfig", "cutSlash", new Class[] {String.class}, springActionConfig, new Object[] {"testActionConfigName"});
        assertEquals("result", "testActionConfigName", result);
    }
    
    public void testFilter() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.filter(new DateConverterFilter(100, "testActionConfigS1", "testActionConfigS2"), "testActionConfigInnerAction");
        assertEquals("actionConfig.filters.size()", 1, ((Collection) getPrivateField(actionConfig, "filters")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testFilter1() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.filter(new ArrayList(100), "testActionConfigInnerAction");
        assertSame("result", actionConfig, result);
        assertEquals("actionConfig.filters.size()", 0, ((Collection) getPrivateField(actionConfig, "filters")).size());
    }
    
    public void testFilter2() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        String[] args = new String[5];
        Filter filter = new DateConverterFilter("testActionConfigS1", "testActionConfigS2", "testActionConfigS3");
        ActionConfig result = actionConfig.filter(filter, args);
        assertEquals("actionConfig.filters.size()", 5, ((Collection) getPrivateField(actionConfig, "filters")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testFilter3() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.filter(new PushInjectionFilter(true, false));
        assertEquals("actionConfig.filters.size()", 1, ((Collection) getPrivateField(actionConfig, "filters")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testFilter4() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.filter(new ArrayList(100));
        assertSame("result", actionConfig, result);
    }
    
    public void testFilterFirst() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        Filter filter = new DateConverterFilter("testActionConfigS1", "testActionConfigS2", "testActionConfigS3");
        ActionConfig result = actionConfig.filterFirst(filter, "testActionConfigInnerAction");
        assertEquals("actionConfig.firstFilters.size()", 1, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testFilterFirst1() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.filterFirst(new ValidatorFilter("testActionConfigResultForError"));
        assertEquals("actionConfig.firstFilters.size()", 1, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testFilterFirst2() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.filterFirst(new ArrayList(100));
        assertSame("result", actionConfig, result);
    }
    
    public void testFilterFirst3() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.filterFirst(new ArrayList(100), "testActionConfigInnerAction");
        assertSame("result", actionConfig, result);
        assertEquals("actionConfig.firstFilters.size()", 0, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
    }
    
    public void testFwdError() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.fwdError("testActionConfigPage");
        assertEquals("actionConfig.consequences.size()", 1, ((Map) getPrivateField(actionConfig, "consequences")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testFwdOk() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.fwdOk("testActionConfigPage");
        assertEquals("actionConfig.consequences.size()", 1, ((Map) getPrivateField(actionConfig, "consequences")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testGetAction() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", LogoutAction.class);
        LogoutAction result = (LogoutAction) actionConfig.getAction();
        assertNotNull("result", result);
        assertEquals("actionConfig.actionClass", LogoutAction.class, actionConfig.actionClass);
    }
    
    public void testGetAction1() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        Action result = actionConfig.getAction();
        assertNull("result", result);
        assertEquals("actionConfig.actionClass", Integer.class, actionConfig.actionClass);
    }
    
    public void testGetAction2() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Action.class);
        Action result = actionConfig.getAction();
        assertNull("result", result);
        assertEquals("actionConfig.actionClass", Action.class, actionConfig.actionClass);
    }
    
    public void testGetAction3() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Object.class, "testActionConfigInnerAction");
        actionConfig.redirOk("testActionConfigPage");
        PojoAction result = (PojoAction) actionConfig.getAction();
        assertNotNull("result.getPojo()", result.getPojo());
        assertEquals("actionConfig.actionClass", Object.class, actionConfig.actionClass);
    }
    
    public void testGetActionClass() throws Throwable {
        Class result = new ActionConfig("testActionConfigName", Object.class).getActionClass();
        assertSame("result", Object.class, result);
    }
    
    public void testGetAutoConsequence() throws Throwable {
        ActionConfig springActionConfig = new SpringActionConfig("testActionConfigBeanName");
        Forward result = (Forward) springActionConfig.getAutoConsequence("success", "testActionConfigInnerAction");
        assertEquals("result.getUrl()", "/action/testActionConfigInnerAction.ok.jsp", result.getUrl());
        assertEquals("(SpringActionConfig) springActionConfig.innerConsequences.size()", 1, ((Map) getPrivateField(springActionConfig, "innerConsequences")).size());
    }
    
    public void testGetAutoConsequence1() throws Throwable {
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, actionConfig.addConsequence("testActionConfigParam1", null), actionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        actionConfig.redirOk("testActionConfigPage", true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, actionConfig.addConsequence("testActionConfigParam11", null), actionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        Forward result = (Forward) actionConfig.getAutoConsequence("success", null);
        assertEquals("result.getUrl()", "/null/ok.jsp", result.getUrl());
        assertNull("actionConfig.consequences", getPrivateField(actionConfig, "consequences"));
    }
    
    public void testGetAutoConsequence2() throws Throwable {
        List filters = new ArrayList(100);
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(actionConfig.addFilter(filters, "testActionConfigParam2"), actionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        actionConfig.filter(filters, "testActionConfigInnerAction");
        Mockingbird.enterRecordingMode();
        Object consequence = actionConfig.addConsequence("testActionConfigParam1", "testActionConfigParam2", null);
        Mockingbird.setReturnValue(true, consequence, actionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        Forward result = (Forward) actionConfig.getAutoConsequence("testActionConfigResult", "testActionConfigInnerAction");
        assertEquals("result.getUrl()", "/null/testActionConfigInnerAction.testActionConfigResult.jsp", result.getUrl());
        assertNull("actionConfig.innerConsequences", getPrivateField(actionConfig, "innerConsequences"));
    }
    
    public void testGetAutoConsequence3() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Object.class, "testActionConfigInnerAction");
        Consequence result = actionConfig.getAutoConsequence(null, "testActionConfigInnerAction");
        assertNull("result", result);
    }
    
    public void testGetAutoConsequence4() throws Throwable {
        Filter filter = new DateConverterFilter("testActionConfigS1");
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(actionConfig.addFilterFirst(filter), actionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        actionConfig.filterFirst(filter);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, actionConfig.addConsequence("testActionConfigParam1", null), actionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        Forward result = (Forward) actionConfig.getAutoConsequence("testActionConfigResult", null);
        assertEquals("result.getUrl()", "/null/testActionConfigResult.jsp", result.getUrl());
        assertNull("actionConfig.consequences", getPrivateField(actionConfig, "consequences"));
    }
    
    public void testGetConsequence() throws Throwable {
        ActionConfig springActionConfig = new SpringActionConfig("testActionConfigBeanName");
        springActionConfig.on("testActionConfigResult", "testString", new AjaxtagErrorConsequence());
        springActionConfig.redirError("testActionConfigPage", true);
        Consequence result = springActionConfig.getConsequence("testActionConfigResult1", "testString");
        assertNull("result", result);
        assertEquals("(SpringActionConfig) springActionConfig.innerConsequences.size()", 1, ((Map) getPrivateField(springActionConfig, "innerConsequences")).size());
    }
    
    public void testGetConsequence1() throws Throwable {
        ActionConfig actionConfig = new ActionConfig(Integer.class, "testActionConfigInnerAction");
        Consequence result = actionConfig.getConsequence("testActionConfigResult", "testActionConfigInnerAction");
        assertNull("result", result);
        assertEquals("actionConfig.innerConsequences.size()", 0, ((Map) getPrivateField(actionConfig, "innerConsequences")).size());
    }
    
    public void testGetConsequence2() throws Throwable {
        ActionConfig actionConfig = new ActionConfig(Object.class);
        actionConfig.filter(new ArrayList(100));
        Forward autoConsequence = (Forward) actionConfig.getAutoConsequence("testString", "testString");
        actionConfig.filter(new ArrayList(1000), "testActionConfigInnerAction");
        Forward result = (Forward) actionConfig.getConsequence("testString", "testString");
        assertSame("result", autoConsequence, result);
        assertEquals("actionConfig.innerConsequences.size()", 1, ((Map) getPrivateField(actionConfig, "innerConsequences")).size());
    }
    
    public void testGetConsequence3() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        Consequence result = actionConfig.getConsequence("testActionConfigResult");
        assertNull("result", result);
        assertEquals("actionConfig.consequences.size()", 0, ((Map) getPrivateField(actionConfig, "consequences")).size());
    }
    
    public void testGetDirFromClass() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class, "testActionConfigInnerAction");
        String result = actionConfig.getDirFromClass(Integer.class);
        assertEquals("result", "integer", result);
    }
    
    public void testGetFilters() throws Throwable {
        ActionConfig actionConfig = new ActionConfig(Integer.class);
        ArrayList result = (ArrayList) actionConfig.getFilters("testActionConfigInnerAction");
        assertEquals("result.size()", 0, result.size());
        assertEquals("actionConfig.filters.size()", 0, ((Collection) getPrivateField(actionConfig, "filters")).size());
    }
    
    public void testGetFilters1() throws Throwable {
        ActionConfig springActionConfig = new SpringActionConfig("testActionConfigBeanName");
        List filters = new ArrayList(100);
        filters.add(new OutputFilter());
        springActionConfig.addFilter(filters, "testActionConfigInnerAction");
        springActionConfig.addFilter(new ArrayList(1000), "testActionConfigInnerAction1");
        ArrayList result = (ArrayList) springActionConfig.getFilters("testActionConfigInnerAction1");
        assertEquals("result.size()", 0, result.size());
        assertEquals("(SpringActionConfig) springActionConfig.filters.size()", 1, ((Collection) getPrivateField(springActionConfig, "filters")).size());
    }
    
    public void testGetFilters2() throws Throwable {
        ActionConfig actionConfig = new ActionConfig(Object.class);
        ArrayList result = (ArrayList) actionConfig.getFilters();
        assertEquals("result.size()", 0, result.size());
        assertEquals("actionConfig.filters.size()", 0, ((Collection) getPrivateField(actionConfig, "filters")).size());
        assertEquals("actionConfig.firstFilters.size()", 0, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
    }
    
    public void testGetFilters3() throws Throwable {
        ActionConfig actionConfig = new ActionConfig(Integer.class);
        Filter filter = new DateConverterFilter(100, "testActionConfigS1", "testActionConfigS2");
        actionConfig.filterFirst(filter, "testActionConfigInnerAction");
        actionConfig.redirOk("testActionConfigPage");
        ArrayList result = (ArrayList) actionConfig.getFilters();
        assertEquals("result.size()", 1, result.size());
        assertSame("(ArrayList) result.get(0)", filter, result.get(0));
        assertEquals("actionConfig.filters.size()", 0, ((Collection) getPrivateField(actionConfig, "filters")).size());
        assertEquals("actionConfig.firstFilters.size()", 1, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
    }
    
    public void testGetFilters4() throws Throwable {
        ActionConfig springActionConfig = new SpringActionConfig("testActionConfigBeanName");
        Filter filter = new OutputFilter();
        springActionConfig.filter(filter, "testString");
        springActionConfig.addFilter(new ArrayList(100));
        ArrayList result = (ArrayList) springActionConfig.getFilters("testString");
        assertEquals("result.size()", 1, result.size());
        assertSame("(ArrayList) result.get(0)", filter, result.get(0));
        assertEquals("(SpringActionConfig) springActionConfig.filters.size()", 1, ((Collection) getPrivateField(springActionConfig, "filters")).size());
    }
    
    public void testGetFilters5() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        String[] s = new String[0];
        Filter filter = new DateConverterFilter(s);
        actionConfig.filter(filter);
        actionConfig.filterFirst(new ArrayList(100));
        ArrayList result = (ArrayList) actionConfig.getFilters("testActionConfigInnerAction");
        assertEquals("result.size()", 1, result.size());
        assertSame("(ArrayList) result.get(0)", filter, result.get(0));
        assertEquals("actionConfig.filters.size()", 1, ((Collection) getPrivateField(actionConfig, "filters")).size());
    }
    
    public void testGetFilters6() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        String[] s = new String[0];
        Filter filter = new DateConverterFilter(s);
        actionConfig.filter(filter);
        List filters = new ArrayList(100);
        filters.add(new ValidatorFilter());
        actionConfig.filter(filters, "testString");
        actionConfig.filter(new DateConverterFilter(100, "testActionConfigS1", "testActionConfigS2"), "testActionConfigInnerAction");
        actionConfig.redirError("testActionConfigPage");
        ArrayList result = (ArrayList) actionConfig.getFilters("testActionConfigInnerAction");
        assertEquals("result.size()", 2, result.size());
        assertSame("(ArrayList) result.get(0)", filter, result.get(0));
        assertEquals("actionConfig.filters.size()", 3, ((Collection) getPrivateField(actionConfig, "filters")).size());
    }
    
    public void testGetFilters7() throws Throwable {
        ActionConfig actionConfig = new ActionConfig(Integer.class);
        String[] args = new String[4];
        args[0] = "2";
        Filter filter = new PushInjectionFilter(true);
        actionConfig.filter(filter, args);
        actionConfig.fwdOk("testActionConfigPage");
        ArrayList result = (ArrayList) actionConfig.getFilters("testActionConfigInnerAction");
        assertEquals("result.size()", 3, result.size());
        assertSame("(ArrayList) result.get(0)", filter, result.get(0));
        assertEquals("actionConfig.filters.size()", 4, ((Collection) getPrivateField(actionConfig, "filters")).size());
    }
    
    public void testGetFilters8() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Object.class);
        Filter filter = new DateConverterFilter(100, "testActionConfigS1");
        actionConfig.filter(filter, "testString");
        actionConfig.addFilter(new DateConverterFilter(1000, "testActionConfigS11"));
        actionConfig.addFilter(new ArrayList(100));
        ArrayList result = (ArrayList) actionConfig.getFilters("testString");
        assertEquals("result.size()", 2, result.size());
        assertSame("(ArrayList) result.get(0)", filter, result.get(0));
        assertEquals("actionConfig.filters.size()", 2, ((Collection) getPrivateField(actionConfig, "filters")).size());
    }
    
    public void testGetFilters9() throws Throwable {
        ActionConfig springActionConfig = new SpringActionConfig("testActionConfigBeanName");
        String[] args = new String[5];
        args[0] = "testString";
        args[1] = "successZ";
        args[2] = "testString";
        args[3] = "abcdefghijklmnopqrstuvwxyr";
        args[4] = "testString";
        Filter filter = new ValidatorFilter();
        springActionConfig.filter(filter, args);
        springActionConfig.on("testActionConfigResult", "testActionConfigJsp");
        ArrayList result = (ArrayList) springActionConfig.getFilters("testString");
        assertEquals("result.size()", 3, result.size());
        assertSame("(ArrayList) result.get(0)", filter, result.get(0));
        assertEquals("(SpringActionConfig) springActionConfig.filters.size()", 5, ((Collection) getPrivateField(springActionConfig, "filters")).size());
    }
    
    public void testGetFilters10() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        String[] s = new String[0];
        actionConfig.filter(new DateConverterFilter(s));
        Filter filter = new OutputFilter();
        actionConfig.addFilterFirst(filter);
        ArrayList result = (ArrayList) actionConfig.getFilters();
        assertEquals("result.size()", 2, result.size());
        assertSame("(ArrayList) result.get(0)", filter, result.get(0));
        assertEquals("actionConfig.filters.size()", 1, ((Collection) getPrivateField(actionConfig, "filters")).size());
        assertEquals("actionConfig.firstFilters.size()", 1, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
    }
    
    public void testGetFilters11() throws Throwable {
        ActionConfig classActionConfig = new ClassActionConfig(Integer.class);
        List filters = new ArrayList(100);
        String[] s = new String[0];
        DateConverterFilter dateConverterFilter = new DateConverterFilter(100, s);
        filters.add(dateConverterFilter);
        classActionConfig.addFilter(filters, "testActionConfigInnerAction");
        ArrayList result = (ArrayList) classActionConfig.getFilters();
        assertEquals("result.size()", 1, result.size());
        assertSame("(ArrayList) result.get(0)", dateConverterFilter, result.get(0));
        assertEquals("(ClassActionConfig) classActionConfig.filters.size()", 1, ((Collection) getPrivateField(classActionConfig, "filters")).size());
        assertEquals("(ClassActionConfig) classActionConfig.firstFilters.size()", 0, ((Collection) getPrivateField(classActionConfig, "firstFilters")).size());
    }
    
    public void testGetFirstFilters() throws Throwable {
        ActionConfig classActionConfig = new ClassActionConfig(Integer.class);
        classActionConfig.filterFirst(new ValidatorFilter("testActionConfigResultForError"), "testString");
        List filters = new ArrayList(100);
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        filters.add(pushInjectionFilter);
        classActionConfig.filterFirst(filters, "testActionConfigInnerAction");
        classActionConfig.on("testActionConfigResult", "testActionConfigInnerAction", ApplicationManager.chain(Integer.class, "testActionConfigInnerAction"));
        ArrayList result = (ArrayList) classActionConfig.getFirstFilters("testActionConfigInnerAction");
        assertEquals("result.size()", 1, result.size());
        assertSame("(ArrayList) result.get(0)", pushInjectionFilter, result.get(0));
        assertEquals("(ClassActionConfig) classActionConfig.firstFilters.size()", 2, ((Collection) getPrivateField(classActionConfig, "firstFilters")).size());
    }
    
    public void testGetFirstFilters1() throws Throwable {
        ActionConfig actionConfig = new ActionConfig(Integer.class);
        ArrayList result = (ArrayList) actionConfig.getFirstFilters("testActionConfigInnerAction");
        assertEquals("result.size()", 0, result.size());
        assertEquals("actionConfig.firstFilters.size()", 0, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
    }
    
    public void testGetFirstFilters2() throws Throwable {
        ActionConfig classActionConfig = new ClassActionConfig(Integer.class);
        Filter filter = new ValidatorFilter("testActionConfigResultForError");
        classActionConfig.filterFirst(filter, "testString");
        classActionConfig.addFilterFirst(new ValidatorFilter());
        ArrayList result = (ArrayList) classActionConfig.getFirstFilters("testString");
        assertEquals("result.size()", 2, result.size());
        assertSame("(ArrayList) result.get(0)", filter, result.get(0));
        assertEquals("(ClassActionConfig) classActionConfig.firstFilters.size()", 2, ((Collection) getPrivateField(classActionConfig, "firstFilters")).size());
    }
    
    public void testGetFirstFilters3() throws Throwable {
        ActionConfig classActionConfig = new ClassActionConfig(Integer.class, "testActionConfigInnerAction");
        List filters = new ArrayList(100);
        DateConverterFilter dateConverterFilter = new DateConverterFilter("testActionConfigS1", "testActionConfigS2");
        filters.add(dateConverterFilter);
        classActionConfig.filterFirst(filters, "testString");
        classActionConfig.addFilterFirst(new ArrayList(1000), "testActionConfigInnerAction");
        ArrayList result = (ArrayList) classActionConfig.getFirstFilters("testString");
        assertEquals("result.size()", 1, result.size());
        assertSame("(ArrayList) result.get(0)", dateConverterFilter, result.get(0));
        assertEquals("(ClassActionConfig) classActionConfig.firstFilters.size()", 1, ((Collection) getPrivateField(classActionConfig, "firstFilters")).size());
    }
    
    public void testGetFirstFilters4() throws Throwable {
        ActionConfig classActionConfig = new ClassActionConfig(Integer.class);
        classActionConfig.filterFirst(new ValidatorFilter("testActionConfigResultForError"), "testString");
        Filter filter = new ValidatorFilter();
        classActionConfig.addFilterFirst(filter);
        List filters = new ArrayList(100);
        filters.add(new PushInjectionFilter());
        classActionConfig.filterFirst(filters, "testActionConfigInnerAction");
        classActionConfig.on("testActionConfigResult", "testActionConfigInnerAction", ApplicationManager.chain(Integer.class, "testActionConfigInnerAction"));
        ArrayList result = (ArrayList) classActionConfig.getFirstFilters("testActionConfigInnerAction");
        assertEquals("result.size()", 2, result.size());
        assertSame("(ArrayList) result.get(0)", filter, result.get(0));
        assertEquals("(ClassActionConfig) classActionConfig.firstFilters.size()", 3, ((Collection) getPrivateField(classActionConfig, "firstFilters")).size());
    }
    
    public void testGetFirstFilters5() throws Throwable {
        ActionConfig actionConfig = new ActionConfig(Integer.class);
        Filter filter = new OutputFilter();
        actionConfig.filterFirst(filter);
        actionConfig.addFilterFirst(new ArrayList(100));
        ArrayList result = (ArrayList) actionConfig.getFirstFilters("testActionConfigInnerAction");
        assertEquals("result.size()", 1, result.size());
        assertSame("(ArrayList) result.get(0)", filter, result.get(0));
        assertEquals("actionConfig.firstFilters.size()", 1, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
    }
    
    public void testGetFirstFilters6() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        String[] s = new String[1];
        actionConfig.filterFirst(new DateConverterFilter(100, s), "testActionConfigInnerAction");
        String[] s2 = new String[0];
        DateConverterFilter dateConverterFilter = new DateConverterFilter(s2);
        List filters = new ArrayList(100);
        filters.add(dateConverterFilter);
        actionConfig.addFilterFirst(filters);
        ArrayList result = (ArrayList) actionConfig.getFirstFilters("testActionConfigInnerAction1");
        assertEquals("result.size()", 1, result.size());
        assertSame("(ArrayList) result.get(0)", dateConverterFilter, result.get(0));
        assertEquals("actionConfig.firstFilters.size()", 2, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
    }
    
    public void testGetFirstFilters7() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Object.class);
        List filters = new ArrayList(100);
        filters.add(new PushInjectionFilter(true));
        actionConfig.addFilterFirst(filters, "testActionConfigInnerAction");
        actionConfig.fwdError("testActionConfigPage");
        ArrayList result = (ArrayList) actionConfig.getFirstFilters("testActionConfigInnerAction1");
        assertEquals("result.size()", 0, result.size());
        assertEquals("actionConfig.firstFilters.size()", 1, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
    }
    
    public void testGetName() throws Throwable {
        String result = (String) callPrivateMethod("org.mentawai.core.ActionConfig", "getName", new Class[] {Class.class}, null, new Object[] {Integer.class});
        assertEquals("result", "Integer", result);
    }
    
    public void testGetName1() throws Throwable {
        String result = new ActionConfig(Integer.class).getName();
        assertEquals("result", "Integer", result);
    }
    
    public void testOn() throws Throwable {
        ActionConfig classActionConfig = new ClassActionConfig(Integer.class);
        ActionConfig result = classActionConfig.on("testActionConfigResult", "testActionConfigInnerAction", new AjaxtagErrorConsequence());
        assertSame("result", classActionConfig, result);
        assertEquals("(ClassActionConfig) classActionConfig.innerConsequences.size()", 1, ((Map) getPrivateField(classActionConfig, "innerConsequences")).size());
    }
    
    public void testOn1() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.on("testActionConfigResult", "testActionConfigJsp");
        assertEquals("actionConfig.consequences.size()", 1, ((Map) getPrivateField(actionConfig, "consequences")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testOn2() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.on("testActionConfigResult", ApplicationManager.chain(Integer.class));
        assertEquals("actionConfig.consequences.size()", 1, ((Map) getPrivateField(actionConfig, "consequences")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testRedirError() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.redirError("testActionConfigPage", true);
        assertEquals("actionConfig.consequences.size()", 1, ((Map) getPrivateField(actionConfig, "consequences")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testRedirError1() throws Throwable {
        ActionConfig classActionConfig = new ClassActionConfig(Integer.class);
        ActionConfig result = classActionConfig.redirError();
        assertSame("result", classActionConfig, result);
        assertEquals("(ClassActionConfig) classActionConfig.consequences.size()", 1, ((Map) getPrivateField(classActionConfig, "consequences")).size());
    }
    
    public void testRedirError2() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.redirError("testActionConfigPage");
        assertEquals("actionConfig.consequences.size()", 1, ((Map) getPrivateField(actionConfig, "consequences")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testRedirOk() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.redirOk("testActionConfigPage");
        assertEquals("actionConfig.consequences.size()", 1, ((Map) getPrivateField(actionConfig, "consequences")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testRedirOk1() throws Throwable {
        ActionConfig springActionConfig = new SpringActionConfig("testActionConfigBeanName");
        ActionConfig result = springActionConfig.redirOk();
        assertSame("result", springActionConfig, result);
        assertEquals("(SpringActionConfig) springActionConfig.consequences.size()", 1, ((Map) getPrivateField(springActionConfig, "consequences")).size());
    }
    
    public void testRedirOk2() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Integer.class);
        ActionConfig result = actionConfig.redirOk("testActionConfigPage", true);
        assertEquals("actionConfig.consequences.size()", 1, ((Map) getPrivateField(actionConfig, "consequences")).size());
        assertSame("result", actionConfig, result);
    }
    
    public void testSetInnerAction() throws Throwable {
        List filters = new ArrayList(100);
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(actionConfig.addFilterFirst(filters, "testActionConfigParam2"), actionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        actionConfig.addFilterFirst(filters);
        actionConfig.setInnerAction("testActionConfigInnerAction");
        assertEquals("actionConfig.getInnerAction()", "testActionConfigInnerAction", actionConfig.getInnerAction());
    }
    
    public void testToString() throws Throwable {
        String result = new SpringActionConfig("testActionConfigBeanName").toString();
        assertEquals("result", "Action", result);
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new ActionConfig(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException1() throws Throwable {
        try {
            new ActionConfig("/bJ", null, "testActionConfigInnerAction");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException2() throws Throwable {
        try {
            new ActionConfig(null, Integer.class, "testActionConfigInnerAction");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException3() throws Throwable {
        try {
            new ActionConfig("testActionConfigName", null, "testActionConfigInnerAction");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException4() throws Throwable {
        try {
            new ActionConfig("/0", (Class) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException5() throws Throwable {
        try {
            new ActionConfig((String) null, Object.class);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException6() throws Throwable {
        try {
            new ActionConfig("testActionConfigName", (Class) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
        }
    }
    
    public void testAddConsequenceThrowsIllegalStateException() throws Throwable {
        ActionConfig actionConfig = new ActionConfig(Object.class);
        actionConfig.redirOk();
        actionConfig.setInnerAction("testActionConfigInnerAction");
        actionConfig.addFilter(new DateConverterFilter("testActionConfigS1", "testActionConfigS2"), "testActionConfigInnerAction");
        try {
            actionConfig.addConsequence("testActionConfigResult", "testActionConfigInnerAction", ApplicationManager.redir());
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Calling addConsequence(result,innerAction,c) is illegal for inner action configs!", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
            assertEquals("actionConfig.innerConsequences.size()", 0, ((Map) getPrivateField(actionConfig, "innerConsequences")).size());
        }
    }
    
    public void testAddFilterFirstThrowsNullPointerException() throws Throwable {
        ActionConfig actionConfig = new ActionConfig(Integer.class);
        try {
            actionConfig.addFilterFirst((List) null, "testActionConfigInnerAction");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
            assertEquals("actionConfig.firstFilters.size()", 0, ((Collection) getPrivateField(actionConfig, "firstFilters")).size());
        }
    }
    
    public void testAddFilterFirstThrowsNullPointerException1() throws Throwable {
        List filters = new ArrayList(100);
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(actionConfig.addFilterFirst(filters, "testActionConfigParam2"), actionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        actionConfig.addFilterFirst(filters);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(actionConfig.addFilterFirst((List) null, ""), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(ActionConfig.class);
        try {
            actionConfig.addFilterFirst((List) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("actionConfig.firstFilters", getPrivateField(actionConfig, "firstFilters"));
        }
    }
    
    public void testAddFilterThrowsNullPointerException() throws Throwable {
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, actionConfig.addConsequence("testActionConfigParam1", null), actionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        actionConfig.redirOk("testActionConfigPage", true);
        try {
            actionConfig.addFilter((List) null, "testActionConfigInnerAction");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
            assertNull("actionConfig.filters", getPrivateField(actionConfig, "filters"));
        }
    }
    
    public void testAddFilterThrowsNullPointerException1() throws Throwable {
        List filters = new ArrayList(100);
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(actionConfig.addFilter(filters, "testActionConfigParam2"), actionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        actionConfig.addFilter(filters);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(actionConfig.addFilter((List) null, ""), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(ActionConfig.class);
        try {
            actionConfig.addFilter((List) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("actionConfig.filters", getPrivateField(actionConfig, "filters"));
        }
    }
    
    public void testCutSlashThrowsNullPointerException() throws Throwable {
        String[] args = new String[0];
        Filter filter = new OutputFilter();
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(actionConfig.addFilter(filter, args), actionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        actionConfig.filter(filter, args);
        try {
            callPrivateMethod("org.mentawai.core.ActionConfig", "cutSlash", new Class[] {String.class}, actionConfig, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
        }
    }
    
    public void testFilterFirstThrowsNullPointerException() throws Throwable {
        List filters = new ArrayList(100);
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(actionConfig.addFilterFirst(filters), actionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        actionConfig.filterFirst(filters);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(actionConfig.addFilterFirst((List) null), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(ActionConfig.class);
        try {
            actionConfig.filterFirst((List) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("actionConfig.firstFilters", getPrivateField(actionConfig, "firstFilters"));
        }
    }
    
    public void testFilterFirstThrowsNullPointerException1() throws Throwable {
        List filters = new ArrayList(100);
        ClassActionConfig classActionConfig = (ClassActionConfig) Mockingbird.getProxyObject(ClassActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(classActionConfig.addFilterFirst(filters, "testActionConfigParam2"), classActionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        classActionConfig.filterFirst(filters, "testActionConfigInnerAction");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(classActionConfig.addFilterFirst((List) null, "testString"), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(ActionConfig.class);
        try {
            classActionConfig.filterFirst((List) null, "testString");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("classActionConfig.firstFilters", getPrivateField(classActionConfig, "firstFilters"));
        }
    }
    
    public void testFilterThrowsNullPointerException() throws Throwable {
        AjaxRenderer renderer = new JSONGenericRenderer("testActionConfigDateFormat", 100);
        ClassActionConfig classActionConfig = (ClassActionConfig) Mockingbird.getProxyObject(ClassActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, classActionConfig.addConsequence("testActionConfigParam1", null), classActionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        classActionConfig.ajaxOk(renderer);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(classActionConfig.addFilter((List) null, "testString"), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(ActionConfig.class);
        try {
            classActionConfig.filter((List) null, "testString");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("classActionConfig.filters", getPrivateField(classActionConfig, "filters"));
        }
    }
    
    public void testFilterThrowsNullPointerException1() throws Throwable {
        List filters = new ArrayList(100);
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(actionConfig.addFilter(filters), actionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        actionConfig.filter(filters);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(actionConfig.addFilter((List) null), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(ActionConfig.class);
        try {
            actionConfig.filter((List) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("actionConfig.filters", getPrivateField(actionConfig, "filters"));
        }
    }
    
    public void testGetAutoConsequenceThrowsIllegalStateException() throws Throwable {
        ActionConfig actionConfig = new ActionConfig(Object.class);
        actionConfig.redirOk();
        actionConfig.setInnerAction("testActionConfigInnerAction");
        actionConfig.addFilterFirst(new PushInjectionFilter(true, false), "testActionConfigInnerAction");
        try {
            actionConfig.getAutoConsequence("testActionConfigResult", "testActionConfigInnerAction");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Calling addConsequence(result,innerAction,c) is illegal for inner action configs!", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
            assertEquals("actionConfig.consequences.size()", 1, ((Map) getPrivateField(actionConfig, "consequences")).size());
            assertEquals("actionConfig.innerConsequences.size()", 0, ((Map) getPrivateField(actionConfig, "innerConsequences")).size());
        }
    }
    
    public void testGetAutoConsequenceThrowsIllegalStateException1() throws Throwable {
        List filters = new ArrayList(100);
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(actionConfig.addFilter(filters, "testActionConfigParam2"), actionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        actionConfig.addFilter(filters);
        Mockingbird.enterRecordingMode();
        Object consequence = actionConfig.addConsequence("testActionConfigParam1", "testActionConfigParam2", null);
        Mockingbird.setException(true, consequence, (Throwable) Mockingbird.getProxyObject(IllegalStateException.class));
        Mockingbird.enterTestMode(ActionConfig.class);
        try {
            actionConfig.getAutoConsequence("success", "testActionConfigInnerAction");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertNull("actionConfig.consequences", getPrivateField(actionConfig, "consequences"));
            assertNull("actionConfig.innerConsequences", getPrivateField(actionConfig, "innerConsequences"));
        }
    }
    
    public void testGetAutoConsequenceThrowsNullPointerException() throws Throwable {
        ClassActionConfig classActionConfig = (ClassActionConfig) Mockingbird.getProxyObject(ClassActionConfig.class);
        classActionConfig.filter(new ArrayList(100), "testActionConfigInnerAction");
        Mockingbird.enterTestMode(ActionConfig.class);
        try {
            classActionConfig.getAutoConsequence("testActionConfigResult", "testActionConfigInnerAction");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
            assertNull("classActionConfig.innerConsequences", getPrivateField(classActionConfig, "innerConsequences"));
            assertNull("classActionConfig.consequences", getPrivateField(classActionConfig, "consequences"));
        }
    }
    
    public void testGetConsequenceThrowsNullPointerException() throws Throwable {
        List filters = new ArrayList(100);
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(actionConfig.addFilter(filters, "testActionConfigParam2"), actionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        actionConfig.filter(filters, "testActionConfigInnerAction");
        try {
            actionConfig.getConsequence("testActionConfigResult", "testActionConfigInnerAction");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
            assertNull("actionConfig.innerConsequences", getPrivateField(actionConfig, "innerConsequences"));
        }
    }
    
    public void testGetConsequenceThrowsNullPointerException1() throws Throwable {
        List filters = new ArrayList(100);
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(actionConfig.addFilter(filters, "testActionConfigParam2"), actionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        actionConfig.addFilter(filters);
        try {
            actionConfig.getConsequence("testActionConfigResult");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
            assertNull("actionConfig.consequences", getPrivateField(actionConfig, "consequences"));
        }
    }
    
    public void testGetDirFromClassThrowsNullPointerException() throws Throwable {
        ActionConfig actionConfig = new ActionConfig("testActionConfigName", Object.class, "testActionConfigInnerAction");
        try {
            actionConfig.getDirFromClass(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
        }
    }
    
    public void testGetFiltersThrowsNullPointerException() throws Throwable {
        List filters = new ArrayList(100);
        ActionConfig actionConfig = (ActionConfig) Mockingbird.getProxyObject(ActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(actionConfig.addFilterFirst(filters), actionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        actionConfig.filterFirst(filters);
        try {
            actionConfig.getFilters("testActionConfigInnerAction");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
            assertNull("actionConfig.filters", getPrivateField(actionConfig, "filters"));
        }
    }
    
    public void testGetFiltersThrowsNullPointerException1() throws Throwable {
        List filters = new ArrayList(100);
        ClassActionConfig classActionConfig = (ClassActionConfig) Mockingbird.getProxyObject(ClassActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, classActionConfig.addFilter((Filter) null, "testActionConfigParam2"), classActionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        classActionConfig.addFilter(filters, "testActionConfigInnerAction");
        try {
            classActionConfig.getFilters();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
            assertNull("classActionConfig.firstFilters", getPrivateField(classActionConfig, "firstFilters"));
            assertNull("classActionConfig.filters", getPrivateField(classActionConfig, "filters"));
        }
    }
    
    public void testGetFirstFiltersThrowsNullPointerException() throws Throwable {
        Consequence c = ApplicationManager.chain(Integer.class, "testActionConfigInnerAction");
        ClassActionConfig classActionConfig = (ClassActionConfig) Mockingbird.getProxyObject(ClassActionConfig.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(classActionConfig.addConsequence("okE.jsp", "testString", c), classActionConfig);
        Mockingbird.enterTestMode(ActionConfig.class);
        classActionConfig.on("okE.jsp", "testString", c);
        try {
            classActionConfig.getFirstFilters("testActionConfigInnerAction");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
            assertNull("classActionConfig.firstFilters", getPrivateField(classActionConfig, "firstFilters"));
        }
    }
    
    public void testGetNameThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("org.mentawai.core.ActionConfig", "getName", new Class[] {Class.class}, null, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
        }
    }
    
    public void testOnThrowsIllegalStateException() throws Throwable {
        ActionConfig actionConfig = new ActionConfig(Integer.class, "testActionConfigInnerAction");
        actionConfig.addFilterFirst(new PushInjectionFilter(), "testActionConfigInnerAction");
        try {
            actionConfig.on("testActionConfigResult", "testActionConfigInnerAction", new StreamConsequence("testActionConfigContentType"));
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Calling addConsequence(result,innerAction,c) is illegal for inner action configs!", ex.getMessage());
            assertThrownBy(ActionConfig.class, ex);
            assertEquals("actionConfig.innerConsequences.size()", 0, ((Map) getPrivateField(actionConfig, "innerConsequences")).size());
        }
    }
}

