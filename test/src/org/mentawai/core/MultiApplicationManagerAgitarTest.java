/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 7:30:06 PM
 * Time to generate: 00:14.871 seconds
 *
 */

package org.mentawai.core;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.mentawai.ioc.Component;

public class MultiApplicationManagerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MultiApplicationManager.class;
    }
    
    public void testGetComponentWithAggressiveMocks() throws Throwable {
        MultiApplicationManager multiApplicationManager = (MultiApplicationManager) Mockingbird.getProxyObject(MultiApplicationManager.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Component component = (Component) Mockingbird.getProxyObject(Component.class);
        setPrivateField(multiApplicationManager, "components", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", component, 1);
        Mockingbird.enterTestMode(MultiApplicationManager.class);
        Component result = multiApplicationManager.getComponent("");
        assertNotNull("result", result);
    }
    
    public void testGetComponentWithAggressiveMocks1() throws Throwable {
        MultiApplicationManager multiApplicationManager = (MultiApplicationManager) Mockingbird.getProxyObject(MultiApplicationManager.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ApplicationManager applicationManager2 = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ApplicationManager applicationManager3 = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Component component = (Component) Mockingbird.getProxyObject(Component.class);
        setPrivateField(multiApplicationManager, "components", map);
        setPrivateField(multiApplicationManager, "managers", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), applicationManager);
        Mockingbird.setReturnValue(false, applicationManager, "getComponent", "(java.lang.String)org.mentawai.ioc.Component", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), applicationManager2);
        Mockingbird.setReturnValue(false, applicationManager2, "getComponent", "(java.lang.String)org.mentawai.ioc.Component", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), applicationManager3);
        Mockingbird.setReturnValue(false, applicationManager3, "getComponent", "(java.lang.String)org.mentawai.ioc.Component", component, 1);
        Mockingbird.enterTestMode(MultiApplicationManager.class);
        Component result = multiApplicationManager.getComponent("");
        assertNotNull("result", result);
    }
    
    public void testGetComponentWithAggressiveMocks2() throws Throwable {
        MultiApplicationManager multiApplicationManager = (MultiApplicationManager) Mockingbird.getProxyObject(MultiApplicationManager.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ApplicationManager applicationManager2 = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        setPrivateField(multiApplicationManager, "components", map);
        setPrivateField(multiApplicationManager, "managers", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), applicationManager);
        Mockingbird.setReturnValue(false, applicationManager, "getComponent", "(java.lang.String)org.mentawai.ioc.Component", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), applicationManager2);
        Mockingbird.setReturnValue(false, applicationManager2, "getComponent", "(java.lang.String)org.mentawai.ioc.Component", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(MultiApplicationManager.class);
        Component result = multiApplicationManager.getComponent("");
        assertNull("result", result);
    }
    
    public void testGetDependenciesWithAggressiveMocks() throws Throwable {
        MultiApplicationManager multiApplicationManager = (MultiApplicationManager) Mockingbird.getProxyObject(MultiApplicationManager.class, true);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.replaceObjectForRecording(LinkedList.class, "<init>()", linkedList);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ApplicationManager applicationManager2 = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        setPrivateField(multiApplicationManager, "dependencies", set);
        setPrivateField(multiApplicationManager, "managers", list);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(linkedList.add(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(linkedList.add(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(list.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), applicationManager);
        Mockingbird.setReturnValue(applicationManager.getDependencies(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), applicationManager2);
        Mockingbird.setReturnValue(applicationManager2.getDependencies(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), null);
        Mockingbird.setReturnValue(linkedList.add(null), false);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), null);
        Mockingbird.setReturnValue(linkedList.add(null), false);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(linkedList.iterator(), null);
        Mockingbird.enterTestMode(MultiApplicationManager.class);
        Iterator result = multiApplicationManager.getDependencies();
        assertNull("result", result);
    }
    
    public void testInitWithAggressiveMocks() throws Throwable {
        MultiApplicationManager multiApplicationManager = (MultiApplicationManager) Mockingbird.getProxyObject(MultiApplicationManager.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ApplicationManager applicationManager2 = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        setPrivateField(multiApplicationManager, "managers", list);
        Mockingbird.enterRecordingMode();
        multiApplicationManager.init();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), applicationManager);
        applicationManager.init(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), applicationManager2);
        applicationManager2.init(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(MultiApplicationManager.class);
        multiApplicationManager.init(null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLoadActionsWithAggressiveMocks() throws Throwable {
        MultiApplicationManager multiApplicationManager = (MultiApplicationManager) Mockingbird.getProxyObject(MultiApplicationManager.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ApplicationManager applicationManager2 = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        setPrivateField(multiApplicationManager, "managers", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), applicationManager);
        applicationManager.loadActions();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), applicationManager2);
        applicationManager2.loadActions();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(MultiApplicationManager.class);
        multiApplicationManager.loadActions();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLoadBeansWithAggressiveMocks() throws Throwable {
        MultiApplicationManager multiApplicationManager = (MultiApplicationManager) Mockingbird.getProxyObject(MultiApplicationManager.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ApplicationManager applicationManager2 = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        setPrivateField(multiApplicationManager, "managers", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), applicationManager);
        applicationManager.loadBeans();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), applicationManager2);
        applicationManager2.loadBeans();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(MultiApplicationManager.class);
        multiApplicationManager.loadBeans();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLoadFormattersWithAggressiveMocks() throws Throwable {
        MultiApplicationManager multiApplicationManager = (MultiApplicationManager) Mockingbird.getProxyObject(MultiApplicationManager.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ApplicationManager applicationManager2 = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        setPrivateField(multiApplicationManager, "managers", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), applicationManager);
        applicationManager.loadFormatters();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), applicationManager2);
        applicationManager2.loadFormatters();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(MultiApplicationManager.class);
        multiApplicationManager.loadFormatters();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLoadListsWithAggressiveMocks() throws Throwable {
        MultiApplicationManager multiApplicationManager = (MultiApplicationManager) Mockingbird.getProxyObject(MultiApplicationManager.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ApplicationManager applicationManager2 = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        setPrivateField(multiApplicationManager, "managers", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), applicationManager);
        applicationManager.loadLists();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), applicationManager2);
        applicationManager2.loadLists();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(MultiApplicationManager.class);
        multiApplicationManager.loadLists();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLoadLocalesWithAggressiveMocks() throws Throwable {
        MultiApplicationManager multiApplicationManager = (MultiApplicationManager) Mockingbird.getProxyObject(MultiApplicationManager.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ApplicationManager applicationManager2 = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        setPrivateField(multiApplicationManager, "managers", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), applicationManager);
        applicationManager.loadLocales();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), applicationManager2);
        applicationManager2.loadLocales();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(MultiApplicationManager.class);
        multiApplicationManager.loadLocales();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRegisterThrowsIllegalStateExceptionWithAggressiveMocks() throws Throwable {
        MultiApplicationManager multiApplicationManager = (MultiApplicationManager) Mockingbird.getProxyObject(MultiApplicationManager.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(IllegalStateException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(IllegalStateException.class));
        setPrivateField(multiApplicationManager, "initialized", Boolean.TRUE);
        Mockingbird.enterTestMode(MultiApplicationManager.class);
        try {
            multiApplicationManager.register(null);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testRegisterThrowsRuntimeExceptionWithAggressiveMocks() throws Throwable {
        MultiApplicationManager multiApplicationManager = (MultiApplicationManager) Mockingbird.getProxyObject(MultiApplicationManager.class, true);
        Class class2 = (Class) Mockingbird.getProxyObject(Class.class);
        setPrivateField(multiApplicationManager, "initialized", Boolean.FALSE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(RuntimeException.class, "<init>(java.lang.String,java.lang.Throwable)", Mockingbird.getProxyObject(RuntimeException.class));
        Mockingbird.enterTestMode(MultiApplicationManager.class);
        try {
            multiApplicationManager.register(class2);
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
}

