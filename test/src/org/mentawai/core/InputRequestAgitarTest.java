/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 7:29:09 PM
 * Time to generate: 01:43.134 seconds
 *
 */

package org.mentawai.core;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.AbstractSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import javax.servlet.http.HttpServletRequest;
import org.agitar.mock.servlet.MockServletContext;
import org.mentawai.i18n.LocaleManager;
import org.mentawai.util.EnumerationToIterator;

public class InputRequestAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return RequestInput.class;
    }
    
    public void testConstructor() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        assertSame("inputRequest.req", req, inputRequest.req);
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
        assertEquals("inputRequest.keys.size()", 0, inputRequest.keys.size());
    }
    
    public void testConstructor1() throws Throwable {
        HttpServletRequest req = new MockServletContext().createHttpServletRequest("testInputRequestParam1");
        RequestInput inputRequest = new RequestInput(req);
        assertSame("inputRequest.req", req, inputRequest.req);
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
        assertEquals("inputRequest.keys.size()", 0, inputRequest.keys.size());
    }
    
    public void testClone() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Map hashMap = new HashMap(100, 100.0F);
        String[] strings = new String[1];
        hashMap.put("testString", strings);
        HashMap result = (HashMap) callPrivateMethod("org.mentawai.core.RequestInput", "clone", new Class[] {Map.class}, inputRequest, new Object[] {hashMap});
        assertEquals("result.size()", 1, result.size());
        assertNull("(HashMap) result.get(\"testString\")", ((Map) result).get("testString"));
        assertEquals("inputRequest.keys.size()", 1, inputRequest.keys.size());
    }
    
    public void testClone1() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Map hashMap = new HashMap(100, 100.0F);
        String[] strings = new String[1];
        String[] strings2 = new String[0];
        hashMap.put("testString", strings);
        hashMap.put(",", strings2);
        HashMap result = (HashMap) callPrivateMethod("org.mentawai.core.RequestInput", "clone", new Class[] {Map.class}, inputRequest, new Object[] {hashMap});
        assertEquals("result.size()", 2, result.size());
        assertNull("(HashMap) result.get(\"testString\")", ((Map) result).get("testString"));
        assertEquals("inputRequest.keys.size()", 2, inputRequest.keys.size());
    }
    
    public void testClone2() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Map hashMap = new HashMap(100, 100.0F);
        String[] strings = new String[1];
        String[] strings2 = new String[0];
        String[] strings3 = new String[2];
        hashMap.put("Could not convert input \"o float: ", strings);
        hashMap.put("Erro' trying to get a String []: ", strings2);
        hashMap.put("testString", strings3);
        HashMap result = (HashMap) callPrivateMethod("org.mentawai.core.RequestInput", "clone", new Class[] {Map.class}, inputRequest, new Object[] {hashMap});
        assertEquals("result.size()", 3, result.size());
        assertNull("(HashMap) result.get(\"Could not convert input \\\"o float: \")", ((Map) result).get("Could not convert input \"o float: "));
        assertEquals("inputRequest.keys.size()", 3, inputRequest.keys.size());
    }
    
    public void testClone3() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Map hashMap = new HashMap(100, 100.0F);
        String[] strings = new String[1];
        hashMap.put("testString", strings);
        hashMap.put("", null);
        HashMap result = (HashMap) callPrivateMethod("org.mentawai.core.RequestInput", "clone", new Class[] {Map.class}, inputRequest, new Object[] {hashMap});
        assertEquals("result.size()", 2, result.size());
        assertNull("(HashMap) result.get(\"testString\")", ((Map) result).get("testString"));
        assertEquals("inputRequest.keys.size()", 2, inputRequest.keys.size());
    }
    
    public void testClone4() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Map hashMap = new HashMap(100, 100.0F);
        String[] strings = new String[0];
        hashMap.put("", strings);
        HashMap result = (HashMap) callPrivateMethod("org.mentawai.core.RequestInput", "clone", new Class[] {Map.class}, inputRequest, new Object[] {hashMap});
        assertEquals("result.size()", 1, result.size());
        assertEquals("inputRequest.keys.size()", 1, inputRequest.keys.size());
    }
    
    public void testClone5() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Map hashMap = new HashMap(100, 100.0F);
        String[] strings = new String[2];
        hashMap.put("g", null);
        hashMap.put("testString", strings);
        HashMap result = (HashMap) callPrivateMethod("org.mentawai.core.RequestInput", "clone", new Class[] {Map.class}, inputRequest, new Object[] {hashMap});
        assertEquals("result.size()", 2, result.size());
        assertNull("(HashMap) result.get(\"g\")", ((Map) result).get("g"));
        assertEquals("inputRequest.keys.size()", 2, inputRequest.keys.size());
    }
    
    public void testClone6() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Map hashMap = new HashMap(100, 100.0F);
        hashMap.put("testString", "testString");
        HashMap result = (HashMap) callPrivateMethod("org.mentawai.core.RequestInput", "clone", new Class[] {Map.class}, inputRequest, new Object[] {hashMap});
        assertEquals("result.size()", 1, result.size());
        assertEquals("(HashMap) result.get(\"testString\")", "testString", ((Map) result).get("testString"));
        assertEquals("inputRequest.keys.size()", 1, inputRequest.keys.size());
    }
    
    public void testClone7() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        HashMap result = (HashMap) callPrivateMethod("org.mentawai.core.RequestInput", "clone", new Class[] {Map.class}, inputRequest, new Object[] {new HashMap(100, 100.0F)});
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testContainsKey() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"", ""});
        boolean result = inputRequest.containsKey("");
        assertTrue("result", result);
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
    }
    
    public void testContainsKey1() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"", ""});
        boolean result = inputRequest.containsKey("");
        assertTrue("result", result);
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
    }
    
    public void testContainsKey2() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        boolean result = inputRequest.containsKey("{/OT[)hRP2");
        assertFalse("result", result);
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
    }
    
    public void testContainsValue() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        boolean result = inputRequest.containsValue(new Integer(0));
        assertFalse("result", result);
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
    }
    
    public void testContainsValue1() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        inputRequest.setValue("testInputRequestName", "");
        boolean result = inputRequest.containsValue("");
        assertTrue("result", result);
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
    }
    
    public void testEntrySet() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        AbstractSet result = (AbstractSet) inputRequest.entrySet();
        assertEquals("result.size()", 0, result.size());
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
    }
    
    public void testEntrySet1() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        AbstractSet result = (AbstractSet) inputRequest.entrySet();
        assertEquals("result.size()", 0, result.size());
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
    }
    
    public void testGet() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Integer value = new Integer(-20);
        inputRequest.setValue("testString", value);
        Integer result = (Integer) inputRequest.get("testString");
        assertSame("result", value, result);
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
    }
    
    public void testGet1() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Boolean value = Boolean.FALSE;
        inputRequest.put("testString", value);
        Boolean result = (Boolean) inputRequest.get("testString");
        assertSame("result", value, result);
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
    }
    
    public void testGet2() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        inputRequest.setValue("testString", "testString");
        String result = (String) inputRequest.get("testString");
        assertEquals("result", "testString", result);
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
    }
    
    public void testGet3() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Object result = inputRequest.get(" @");
        assertNull("result", result);
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
    }
    
    public void testGet4() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        String[] strings = new String[0];
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"", strings});
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", strings, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        String[] result = (String[]) inputRequest.get("");
        assertSame("result", strings, result);
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
    }
    
    public void testGetHeader() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(req.getHeader("testString"), null);
        Mockingbird.enterTestMode(RequestInput.class);
        String result = inputRequest.getHeader("testString");
        assertNull("result", result);
        assertSame("inputRequest.req", req, inputRequest.req);
    }
    
    public void testGetHeader1() throws Throwable {
        HttpServletRequest req = new MockServletContext().createHttpServletRequest("testInputRequestParam1");
        RequestInput inputRequest = new RequestInput(req);
        String result = inputRequest.getHeader("testInputRequestName");
        assertNull("result", result);
        assertSame("inputRequest.req", req, inputRequest.req);
    }
    
    public void testGetHeader2() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(req.getHeader("testInputRequestParam1"), "2>1,3^c!\rsDEL?oM;21Dnq^P9z8u");
        Mockingbird.enterTestMode(RequestInput.class);
        String result = inputRequest.getHeader("testInputRequestName");
        assertEquals("result", "", result);
        assertSame("inputRequest.req", req, inputRequest.req);
    }
    
    public void testGetHeaderKeys() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        Mockingbird.enterRecordingMode();
        Enumeration collectionEnumeration = (Enumeration) Mockingbird.getProxyObject(Enumeration.class);
        Mockingbird.setReturnValue(req.getHeaderNames(), collectionEnumeration);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(EnumerationToIterator.get(collectionEnumeration), iterator2);
        Mockingbird.enterTestMode(RequestInput.class);
        Iterator result = inputRequest.getHeaderKeys();
        assertSame("result", iterator2, result);
        assertSame("inputRequest.req", req, inputRequest.req);
    }
    
    public void testGetHeaderKeys1() throws Throwable {
        HttpServletRequest req = new MockServletContext().createHttpServletRequest("testInputRequestParam1");
        RequestInput inputRequest = new RequestInput(req);
        Iterator result = inputRequest.getHeaderKeys();
        assertFalse("result.hasNext()", result.hasNext());
        assertSame("inputRequest.req", req, inputRequest.req);
    }
    
    public void testGetLocale() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        Mockingbird.enterRecordingMode();
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.setReturnValue(LocaleManager.getLocale(req), locale);
        Mockingbird.enterTestMode(RequestInput.class);
        Locale result = inputRequest.getLocale();
        assertSame("result", locale, result);
    }
    
    public void testGetLocale1() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Locale result = inputRequest.getLocale();
    }
    
    public void testGetProperty() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        String result = inputRequest.getProperty("2C");
        assertNull("result", result);
        assertEquals("inputRequestInputRequest.cache.size()", 0, RequestInput.cache.size());
    }
    
    public void testGetProperty1() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        String result = inputRequest.getProperty("2C");
        assertNull("result", result);
        assertEquals("inputRequestInputRequest.cache.size()", 0, RequestInput.cache.size());
    }
    
    public void testGetProperty2() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        String result = inputRequest.getProperty(" ");
        assertNull("result", result);
        assertEquals("inputRequestInputRequest.cache.size()", 0, RequestInput.cache.size());
    }
    
    public void testGetProperty3() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        String result = inputRequest.getProperty(" ");
        assertNull("result", result);
        assertEquals("inputRequestInputRequest.cache.size()", 0, RequestInput.cache.size());
    }
    
    public void testGetRequest() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        HttpServletRequest result = new RequestInput(req).getRequest();
        assertSame("result", req, result);
    }
    
    public void testGetRequest1() throws Throwable {
        HttpServletRequest req = new MockServletContext().createHttpServletRequest("testInputRequestParam1");
        HttpServletRequest result = new RequestInput(req).getRequest();
        assertSame("result", req, result);
    }
    
    public void testGetStringValue() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        String result = inputRequest.getStringValue("testInputRequestName");
        assertNull("result", result);
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
    }
    
    public void testGetStringValue1() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        String put = (String) callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"testString", "testString"});
        String result = inputRequest.getStringValue("testString");
        assertEquals("result", put, result);
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
    }
    
    public void testGetStringValue2() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        String put = (String) callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"testString", "abcdefghij>klmnopqrstuvwxyz"});
        String result = inputRequest.getStringValue("testString");
        assertEquals("result", put, result);
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
    }
    
    public void testGetStringValues() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        String value = (String) inputRequest.put("testString", "");
        String[] result = inputRequest.getStringValues("testString");
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", value, result[0]);
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
    }
    
    public void testGetStringValues1() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        String[] result = inputRequest.getStringValues("testInputRequestName");
        assertNull("result", result);
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
    }
    
    public void testGetStringValues2() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        String[] result = inputRequest.getStringValues("testInputRequestName");
        assertNull("result", result);
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
    }
    
    public void testGetValue() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        String[] strings = new String[0];
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"testString", strings});
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", strings, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        String[] result = (String[]) inputRequest.getValue("testInputRequestName");
        assertSame("result", strings, result);
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
    }
    
    public void testGetValue1() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        Object obj = Mockingbird.getProxyObject(Object.class);
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"[!\r\u0012\u0008,A#p\u0011+\u00156\u0003-c\n#E\u0019\u001CkU+S", obj});
        Object result = inputRequest.getValue("[!\r\u0012\u0008,A#p\u0011+\u00156\u0003-c\n#E\u0019\u001CkU+S");
        assertSame("result", obj, result);
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
    }
    
    public void testGetValue2() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        Integer integer = new Integer(100);
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"testString", integer});
        Integer result = (Integer) inputRequest.getValue("testString");
        assertSame("result", integer, result);
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
    }
    
    public void testGetValue3() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Object result = inputRequest.getValue("testInputRequestName");
        assertNull("result", result);
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
    }
    
    public void testHasValue() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        inputRequest.setValue("testString", "");
        boolean result = inputRequest.hasValue("testString");
        assertTrue("result", result);
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
    }
    
    public void testHasValue1() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"testString", new Integer(100)});
        boolean result = inputRequest.hasValue("testString");
        assertTrue("result", result);
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
    }
    
    public void testHasValue2() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        boolean result = inputRequest.hasValue("testInputRequestName");
        assertFalse("result", result);
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
    }
    
    public void testIsEmpty() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        boolean result = inputRequest.isEmpty();
        assertTrue("result", result);
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
    }
    
    public void testKeys() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Map hashMap = new HashMap(100, 100.0F);
        hashMap.put("", "");
        callPrivateMethod("org.mentawai.core.RequestInput", "clone", new Class[] {Map.class}, inputRequest, new Object[] {hashMap});
        inputRequest.keys();
        assertEquals("inputRequest.keys.size()", 1, inputRequest.keys.size());
    }
    
    public void testKeys1() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Iterator result = inputRequest.keys();
        assertFalse("result.hasNext()", result.hasNext());
        assertEquals("inputRequest.keys.size()", 0, inputRequest.keys.size());
    }
    
    public void testPut() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        String result = (String) inputRequest.put("testInputRequestKey", "");
        assertEquals("result", "", result);
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
        assertEquals("inputRequest.keys.size()", 1, inputRequest.keys.size());
    }
    
    public void testPut1() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Integer value = new Integer(58);
        Integer result = (Integer) inputRequest.put("testInputRequestKey", value);
        assertSame("result", value, result);
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
        assertEquals("inputRequest.keys.size()", 1, inputRequest.keys.size());
    }
    
    public void testPut2() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Boolean value = Boolean.FALSE;
        Boolean result = (Boolean) inputRequest.put("testInputRequestKey", value);
        assertSame("result", value, result);
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
        assertEquals("inputRequest.keys.size()", 1, inputRequest.keys.size());
    }
    
    public void testPut3() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Object result = inputRequest.put("testInputRequestKey", null);
        assertNull("result", result);
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
        assertEquals("inputRequest.keys.size()", 1, inputRequest.keys.size());
    }
    
    public void testRemove() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        Object result = inputRequest.remove("Could not convert gnput to date: ");
        assertNull("result", result);
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
    }
    
    public void testRemove1() throws Throwable {
        String[] strings = new String[2];
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"testString", strings});
        String[] result = (String[]) inputRequest.remove("testString");
        assertSame("result", strings, result);
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
        assertEquals("inputRequest.keys.size()", 0, inputRequest.keys.size());
    }
    
    public void testRemove2() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Object result = inputRequest.remove("");
        assertNull("result", result);
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
    }
    
    public void testRemove3() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        inputRequest.setValue("testString", "");
        String result = (String) inputRequest.remove("testString");
        assertEquals("result", "", result);
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
        assertEquals("inputRequest.keys.size()", 0, inputRequest.keys.size());
    }
    
    public void testRemove4() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        String[] strings = new String[0];
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"testString", strings});
        String[] result = (String[]) inputRequest.remove("testString");
        assertSame("result", strings, result);
    }
    
    public void testRemoveValue() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        inputRequest.removeValue("testInputRequestName");
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
        assertEquals("inputRequest.keys.size()", 0, inputRequest.keys.size());
    }
    
    public void testRemoveValue1() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        inputRequest.removeValue("testInputRequestName");
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
        assertEquals("inputRequest.keys.size()", 0, inputRequest.keys.size());
    }
    
    public void testSetValue() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        inputRequest.setValue("testInputRequestName", new Integer(0));
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
        assertEquals("inputRequest.keys.size()", 1, inputRequest.keys.size());
    }
    
    public void testSize() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        Mockingbird.enterRecordingMode();
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"k~R$cu!42)oLwPx0&zwaBltB lf$", req});
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, hashMap2, "size", "()int", new Integer(2), 1);
        Mockingbird.enterTestMode(RequestInput.class);
        inputRequest.size();
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
    }
    
    public void testSize1() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        inputRequest.setValue("testInputRequestName", new Integer(18));
        int result = inputRequest.size();
        assertEquals("result", 1, result);
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
    }
    
    public void testSize2() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        int result = inputRequest.size();
        assertEquals("result", 0, result);
        assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
    }
    
    public void testToString() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        String result = inputRequest.toString();
        assertEquals("result", "", result);
        assertEquals("inputRequest.keys.size()", 0, inputRequest.keys.size());
    }
    
    public void testToString1() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"testString", new Integer(0)});
        String result = inputRequest.toString();
        assertEquals("result", "testString = 0\n", result);
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
        assertEquals("inputRequest.keys.size()", 1, inputRequest.keys.size());
    }
    
    public void testToString2() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"testString", Boolean.FALSE});
        String result = inputRequest.toString();
        assertEquals("result", "testString = false\n", result);
        assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
        assertEquals("inputRequest.keys.size()", 1, inputRequest.keys.size());
    }
    
    public void testToString3() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        String result = inputRequest.toString();
        assertEquals("result", "", result);
        assertEquals("inputRequest.keys.size()", 0, inputRequest.keys.size());
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(req.getParameterMap(), null);
        Mockingbird.enterTestMode(RequestInput.class);
        try {
            new RequestInput(req);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testConstructorThrowsNullPointerException1() throws Throwable {
        Map inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"testString", req});
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(req.getParameterMap(), null);
        Mockingbird.enterTestMode(RequestInput.class);
        try {
            new RequestInput(req);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testCloneThrowsNullPointerException() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Map hashMap = new HashMap(100, 100.0F);
        String[] strings = new String[1];
        hashMap.put("testString", strings);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(false, Mockingbird.getProxyObject(TreeSet.class), "add", "(java.lang.Object)boolean", (Throwable) Mockingbird.getProxyObject(NullPointerException.class), 1);
        Mockingbird.enterTestMode(RequestInput.class);
        try {
            callPrivateMethod("org.mentawai.core.RequestInput", "clone", new Class[] {Map.class}, inputRequest, new Object[] {hashMap});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("inputRequest.keys.size()", 0, inputRequest.keys.size());
            assertEquals("(HashMap) hashMap.size()", 1, hashMap.size());
        }
    }
    
    public void testCloneThrowsNullPointerException1() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Map hashMap = new HashMap(100, 100.0F);
        hashMap.put("Could not convert input 0o float: ", "");
        hashMap.put(null, "");
        try {
            callPrivateMethod("org.mentawai.core.RequestInput", "clone", new Class[] {Map.class}, inputRequest, new Object[] {hashMap});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(String.class, ex);
            assertEquals("inputRequest.keys.size()", 1, inputRequest.keys.size());
            assertEquals("(HashMap) hashMap.size()", 2, hashMap.size());
        }
    }
    
    public void testCloneThrowsNullPointerException2() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        try {
            callPrivateMethod("org.mentawai.core.RequestInput", "clone", new Class[] {Map.class}, inputRequest, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("inputRequest.keys.size()", 0, inputRequest.keys.size());
        }
    }
    
    public void testContainsKeyThrowsIllegalArgumentException() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        try {
            inputRequest.containsKey(Mockingbird.getProxyObject(HttpServletRequest.class));
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RequestInput.class, ex);
            assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
        }
    }
    
    public void testContainsKeyThrowsIllegalArgumentException1() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        try {
            inputRequest.containsKey(new Object());
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RequestInput.class, ex);
            assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
        }
    }
    
    public void testContainsKeyThrowsNullPointerException() throws Throwable {
        Map inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        RequestInput inputRequest2 = (RequestInput) Mockingbird.getProxyObject(RequestInput.class);
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"testString", inputRequest2});
        Mockingbird.enterTestMode(RequestInput.class);
        try {
            inputRequest2.containsKey("");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNull("inputRequest2.map", inputRequest2.map);
        }
    }
    
    public void testGetLocaleThrowsNullPointerException() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(LocaleManager.getLocale(req), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(RequestInput.class);
        try {
            inputRequest.getLocale();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("inputRequest.req", req, inputRequest.req);
        }
    }
    
    public void testGetPropertyThrowsNullPointerException() throws Throwable {
        Map inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        RequestInput inputRequest2 = (RequestInput) Mockingbird.getProxyObject(RequestInput.class);
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"testString", inputRequest2});
        Mockingbird.enterTestMode(RequestInput.class);
        try {
            inputRequest2.getProperty(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("inputRequest2InputRequest.cache.size()", 0, RequestInput.cache.size());
        }
    }
    
    public void testGetPropertyThrowsNullPointerException1() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        try {
            inputRequest.getProperty(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("inputRequestInputRequest.cache.size()", 0, RequestInput.cache.size());
        }
    }
    
    public void testGetPropertyThrowsStringIndexOutOfBoundsException() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        try {
            inputRequest.getProperty("");
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "String index out of range: 1", ex.getMessage());
            assertThrownBy(String.class, ex);
            assertEquals("inputRequestInputRequest.cache.size()", 0, RequestInput.cache.size());
        }
    }
    
    public void testGetStringValuesThrowsInputException() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Object obj = Mockingbird.getProxyObject(Object.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"+", obj});
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", obj, 1);
        Mockingbird.setReturnValue(false, hashMap, "isEmpty", "()boolean", Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        try {
            inputRequest.getStringValues("testInputRequestName");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Error trying to get a String []: testInputRequestName", ex.getMessage());
            assertThrownBy(RequestInput.class, ex);
            assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
        }
    }
    
    public void testGetThrowsIllegalArgumentException() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        try {
            inputRequest.get(Boolean.FALSE);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RequestInput.class, ex);
            assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
        }
    }
    
    public void testPutThrowsNullPointerException() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        inputRequest.setValue(null, null);
        try {
            inputRequest.put("testInputRequestKey", new Integer(33));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(String.class, ex);
            assertEquals("inputRequest.map.size()", 2, inputRequest.map.size());
            assertEquals("inputRequest.keys.size()", 1, inputRequest.keys.size());
        }
    }
    
    public void testRemoveThrowsIllegalArgumentException() throws Throwable {
        RequestInput key = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        try {
            key.remove(key);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RequestInput.class, ex);
            assertEquals("key.map.size()", 0, key.map.size());
            assertEquals("key.keys.size()", 0, key.keys.size());
        }
    }
    
    public void testRemoveThrowsIllegalArgumentException1() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        try {
            inputRequest.remove(null);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RequestInput.class, ex);
            assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
            assertEquals("inputRequest.keys.size()", 0, inputRequest.keys.size());
        }
    }
    
    public void testRemoveValueThrowsNullPointerException() throws Throwable {
        HttpServletRequest req = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(req.getParameterMap(), hashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, hashMap, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RequestInput.class);
        RequestInput inputRequest = new RequestInput(req);
        callPrivateMethod("java.util.Map", "put", new Class[] {Object.class, Object.class}, inputRequest, new Object[] {"QA1&jyO&f(\f", ""});
        try {
            inputRequest.removeValue(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
            assertEquals("inputRequest.keys.size()", 1, inputRequest.keys.size());
        }
    }
    
    public void testRemoveValueThrowsNullPointerException1() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        inputRequest.put("testInputRequestKey", "");
        try {
            inputRequest.removeValue(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
            assertEquals("inputRequest.keys.size()", 1, inputRequest.keys.size());
        }
    }
    
    public void testSetValueThrowsNullPointerException() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Map hashMap = new HashMap(100, 100.0F);
        String[] strings = new String[3];
        hashMap.put("testString", strings);
        callPrivateMethod("org.mentawai.core.RequestInput", "clone", new Class[] {Map.class}, inputRequest, new Object[] {hashMap});
        try {
            inputRequest.setValue(null, "");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
            assertEquals("inputRequest.keys.size()", 1, inputRequest.keys.size());
        }
    }
    
    public void testToStringThrowsNullPointerException() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Map hashMap = new HashMap(100, 100.0F);
        String[] strings = new String[3];
        hashMap.put("testString", strings);
        callPrivateMethod("org.mentawai.core.RequestInput", "clone", new Class[] {Map.class}, inputRequest, new Object[] {hashMap});
        inputRequest.setValue("testInputRequestName", "testString");
        try {
            inputRequest.toString();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("inputRequest.map.size()", 1, inputRequest.map.size());
            assertEquals("inputRequest.keys.size()", 2, inputRequest.keys.size());
        }
    }
    
    public void testToStringThrowsNullPointerException1() throws Throwable {
        RequestInput inputRequest = new RequestInput(new MockServletContext().createHttpServletRequest("testInputRequestParam1"));
        Map hashMap = new HashMap(100, 100.0F);
        String[] strings = new String[2];
        hashMap.put("", strings);
        callPrivateMethod("org.mentawai.core.RequestInput", "clone", new Class[] {Map.class}, inputRequest, new Object[] {hashMap});
        try {
            inputRequest.toString();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("inputRequest.map.size()", 0, inputRequest.map.size());
            assertEquals("inputRequest.keys.size()", 1, inputRequest.keys.size());
        }
    }
}

