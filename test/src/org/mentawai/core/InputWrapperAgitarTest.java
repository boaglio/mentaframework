/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 7:32:22 PM
 * Time to generate: 01:53.964 seconds
 *
 */

package org.mentawai.core;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.AbstractSet;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import javax.persistence.EntityManagerFactory;
import javax.servlet.http.HttpServletRequest;
import org.hibernate.SessionFactory;
import org.mentawai.filter.DIFilter;
import org.mentawai.filter.HibernateAnnotationFilter;
import org.mentawai.filter.HibernateFilter;
import org.mentawai.filter.JpaFilter;
import org.mentawai.spring.SpringInput;
import org.springframework.beans.factory.BeanFactory;

public class InputWrapperAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return InputWrapper.class;
    }
    
    public void testConstructor() throws Throwable {
        Input input = new MapInput(new HashMap(100, 100.0F));
        InputWrapper inputWrapper = new InputWrapper(input);
        assertSame("inputWrapper.input.get()", input, ((ThreadLocal) getPrivateField(inputWrapper, "input")).get());
    }
    
    public void testConstructor1() throws Throwable {
        InputWrapper inputWrapper = new InputWrapper();
        assertNull("inputWrapper.input.get()", ((ThreadLocal) getPrivateField(inputWrapper, "input")).get());
    }
    
    public void testClearWithAggressiveMocks() throws Throwable {
        InputWrapper inputWrapper = (InputWrapper) Mockingbird.getProxyObject(InputWrapper.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, inputWrapper, "getMap", "()java.util.Map", new Object[] {}, map, 1);
        map.clear();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(InputWrapper.class);
        inputWrapper.clear();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testContainsKey() throws Throwable {
        RequestInput input = (RequestInput) Mockingbird.getProxyObject(RequestInput.class);
        Mockingbird.enterRecordingMode();
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(InputWrapper.class);
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", input, 1);
        Mockingbird.setReturnValue(input.containsKey("testString"), true);
        Mockingbird.enterTestMode(InputWrapper.class);
        boolean result = inputWrapper.containsKey("testString");
        assertTrue("result", result);
    }
    
    public void testContainsKey1() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterTestMode(InputWrapper.class);
        boolean result = inputWrapper.containsKey("");
        assertFalse("result", result);
    }
    
    public void testContainsValue() throws Throwable {
        RequestInput input = (RequestInput) Mockingbird.getProxyObject(RequestInput.class);
        Mockingbird.enterRecordingMode();
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(InputWrapper.class);
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", input, 1);
        Mockingbird.setReturnValue(input.containsValue(""), true);
        Mockingbird.enterTestMode(InputWrapper.class);
        boolean result = inputWrapper.containsValue("");
        assertTrue("result", result);
    }
    
    public void testContainsValue1() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterTestMode(InputWrapper.class);
        boolean result = inputWrapper.containsValue(" 1");
        assertFalse("result", result);
    }
    
    public void testEntries() throws Throwable {
        RequestInput input = (RequestInput) Mockingbird.getProxyObject(RequestInput.class);
        Mockingbird.enterRecordingMode();
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(InputWrapper.class);
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", input, 1);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(input.entrySet(), abstractSet);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, Mockingbird.getProxyObject(Iterator.class), 1);
        Mockingbird.enterTestMode(InputWrapper.class);
        Iterator result = inputWrapper.entries();
        assertNotNull("result", result);
    }
    
    public void testEntries1() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterTestMode(InputWrapper.class);
        Iterator result = inputWrapper.entries();
        assertFalse("result.hasNext()", result.hasNext());
    }
    
    public void testEntrySet() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterTestMode(InputWrapper.class);
        AbstractSet result = (AbstractSet) inputWrapper.entrySet();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGet() throws Throwable {
        RequestInput input = (RequestInput) Mockingbird.getProxyObject(RequestInput.class);
        Mockingbird.enterRecordingMode();
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(InputWrapper.class);
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", input, 1);
        Mockingbird.setReturnValue(input.get(""), "");
        Mockingbird.enterTestMode(InputWrapper.class);
        String result = (String) inputWrapper.get("");
        assertEquals("result", "", result);
    }
    
    public void testGet1() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterTestMode(InputWrapper.class);
        Object result = inputWrapper.get("testString");
        assertNull("result", result);
    }
    
    public void testGetBooleanValue() throws Throwable {
        boolean result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getBooleanValue("testInputWrapperName");
        assertFalse("result", result);
    }
    
    public void testGetBooleanValue1() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterTestMode(InputWrapper.class);
        boolean result = inputWrapper.getBooleanValue("testInputWrapperName", true);
        assertTrue("result", result);
    }
    
    public void testGetBooleanValue2() throws Throwable {
        boolean result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getBooleanValue("testInputWrapperName", false);
        assertFalse("result", result);
    }
    
    public void testGetDate() throws Throwable {
        Input input = new MapInput(new HashMap(100, 100.0F));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(input.getDate("testInputWrapperParam1", "testInputWrapperParam2"), null);
        Mockingbird.enterTestMode(InputWrapper.class);
        Date result = inputWrapper.getDate("testInputWrapperName", "testInputWrapperPattern");
        assertNull("result", result);
    }
    
    public void testGetDate1() throws Throwable {
        Date result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getDate("testInputWrapperName");
        assertNull("result", result);
    }
    
    public void testGetDate2() throws Throwable {
        Date result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getDate("testInputWrapperName", 100);
        assertNull("result", result);
    }
    
    public void testGetDoubleValue() throws Throwable {
        double result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getDoubleValue("testInputWrapperName", 100.0);
        assertEquals("result", 100.0, result, 1.0E-6);
    }
    
    public void testGetDoubleValue1() throws Throwable {
        double result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getDoubleValue("testInputWrapperName", 0.0);
        assertEquals("result", 0.0, result, 1.0E-6);
    }
    
    public void testGetDoubleValue2() throws Throwable {
        MapInput input = (MapInput) Mockingbird.getProxyObject(MapInput.class);
        Mockingbird.enterRecordingMode();
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(InputWrapper.class);
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", input, 1);
        Mockingbird.setReturnValue(input.getDoubleValue("testString"), 0.0);
        Mockingbird.enterTestMode(InputWrapper.class);
        double result = inputWrapper.getDoubleValue("testString");
        assertEquals("result", 0.0, result, 1.0E-6);
    }
    
    public void testGetDoubleValue3() throws Throwable {
        double result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getDoubleValue("testInputWrapperName");
        assertEquals("result", -1.0, result, 1.0E-6);
    }
    
    public void testGetFloatValue() throws Throwable {
        MapInput input = (MapInput) Mockingbird.getProxyObject(MapInput.class);
        Mockingbird.enterRecordingMode();
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(InputWrapper.class);
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", input, 1);
        Mockingbird.setReturnValue(input.getFloatValue("testString"), -1.0F);
        Mockingbird.enterTestMode(InputWrapper.class);
        float result = inputWrapper.getFloatValue("testString");
        assertEquals("result", -1.0F, result, 1.0E-6F);
    }
    
    public void testGetFloatValue1() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterTestMode(InputWrapper.class);
        float result = inputWrapper.getFloatValue("testInputWrapperName", 0.0F);
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testGetFloatValue2() throws Throwable {
        float result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getFloatValue("testInputWrapperName", 100.0F);
        assertEquals("result", 100.0F, result, 1.0E-6F);
    }
    
    public void testGetHeader() throws Throwable {
        String result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getHeader("testInputWrapperName");
        assertNull("result", result);
    }
    
    public void testGetHeaderKeys() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterTestMode(InputWrapper.class);
        Iterator result = inputWrapper.getHeaderKeys();
        assertFalse("result.hasNext()", result.hasNext());
    }
    
    public void testGetHeaderKeys1() throws Throwable {
        Iterator result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getHeaderKeys();
        assertFalse("result.hasNext()", result.hasNext());
    }
    
    public void testGetInput() throws Throwable {
        Input input = new MapInput(new HashMap(100, 100.0F));
        InputWrapper inputWrapper = new InputWrapper(input);
        Input result = (Input) callPrivateMethod("org.mentawai.core.InputWrapper", "getInput", new Class[] {}, inputWrapper, new Object[] {});
        assertSame("result", input, result);
    }
    
    public void testGetIntValue() throws Throwable {
        MapInput input = (MapInput) Mockingbird.getProxyObject(MapInput.class);
        Mockingbird.enterRecordingMode();
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(InputWrapper.class);
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", input, 1);
        Mockingbird.setReturnValue(input.getIntValue("testString"), -1);
        Mockingbird.enterTestMode(InputWrapper.class);
        int result = inputWrapper.getIntValue("testString");
        assertEquals("result", -1, result);
    }
    
    public void testGetIntValue1() throws Throwable {
        int result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getIntValue("testInputWrapperName", 0);
        assertEquals("result", 0, result);
    }
    
    public void testGetIntValue2() throws Throwable {
        int result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getIntValue("testInputWrapperName", 100);
        assertEquals("result", 100, result);
    }
    
    public void testGetIntValues() throws Throwable {
        int[] result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getIntValues("testInputWrapperName");
        assertNull("result", result);
    }
    
    public void testGetLongValue() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterTestMode(InputWrapper.class);
        long result = inputWrapper.getLongValue("testInputWrapperName", 0L);
        assertEquals("result", 0L, result);
    }
    
    public void testGetLongValue1() throws Throwable {
        long result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getLongValue("testInputWrapperName", 100L);
        assertEquals("result", 100L, result);
    }
    
    public void testGetLongValue2() throws Throwable {
        long result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getLongValue("testInputWrapperName");
        assertEquals("result", -1L, result);
    }
    
    public void testGetMap() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterTestMode(InputWrapper.class);
        callPrivateMethod("org.mentawai.core.InputWrapper", "getMap", new Class[] {}, inputWrapper, new Object[] {});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetObject() throws Throwable {
        Object result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getObject(Object.class);
        assertNotNull("result", result);
    }
    
    public void testGetObject1() throws Throwable {
        String result = (String) new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getObject("testString");
        assertEquals("result", "testString", result);
    }
    
    public void testGetObject2() throws Throwable {
        RequestInput input = (RequestInput) Mockingbird.getProxyObject(RequestInput.class);
        Mockingbird.enterRecordingMode();
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(InputWrapper.class);
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", input, 1);
        Integer bean = new Integer(2);
        Mockingbird.setReturnValue(input.getObject(bean), bean);
        Mockingbird.enterTestMode(InputWrapper.class);
        Integer result = (Integer) inputWrapper.getObject(bean);
        assertSame("result", bean, result);
    }
    
    public void testGetObject3() throws Throwable {
        Object result = new InputWrapper(new MapInput()).getObject(Object.class, "testInputWrapperPrefix");
        assertNotNull("result", result);
    }
    
    public void testGetObject4() throws Throwable {
        Integer bean = new Integer(54);
        Integer result = (Integer) new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getObject(bean, "testInputWrapperPrefix");
        assertSame("result", bean, result);
    }
    
    public void testGetObject5() throws Throwable {
        String result = (String) new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getObject("lz", "testInputWrapperPrefix");
        assertEquals("result", "lz", result);
    }
    
    public void testGetProperty() throws Throwable {
        String result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getProperty("testInputWrapperName");
        assertNull("result", result);
    }
    
    public void testGetStringValue() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        String result = new InputWrapper(new MapInput(values)).getStringValue("testString");
        assertEquals("result", "testString", result);
    }
    
    public void testGetStringValue1() throws Throwable {
        String result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getStringValue("testInputWrapperName");
        assertNull("result", result);
    }
    
    public void testGetStringValues() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        String[] result = new InputWrapper(new MapInput(values)).getStringValues("testString");
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", "testString", result[0]);
    }
    
    public void testGetStringValues1() throws Throwable {
        String[] result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getStringValues("testInputWrapperName");
        assertNull("result", result);
    }
    
    public void testGetValue() throws Throwable {
        Object result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getValue("testInputWrapperName");
        assertNull("result", result);
    }
    
    public void testGetValue1() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        String result = (String) new InputWrapper(new MapInput(values)).getValue("testString");
        assertEquals("result", "testString", result);
    }
    
    public void testHasValue() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        boolean result = new InputWrapper(new MapInput(values)).hasValue("testString");
        assertTrue("result", result);
    }
    
    public void testHasValue1() throws Throwable {
        boolean result = new InputWrapper(new MapInput(new HashMap(100, 100.0F))).hasValue("testInputWrapperName");
        assertFalse("result", result);
    }
    
    public void testIsEmpty() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterTestMode(InputWrapper.class);
        boolean result = inputWrapper.isEmpty();
        assertTrue("result", result);
    }
    
    public void testIsEmpty1() throws Throwable {
        RequestInput input = (RequestInput) Mockingbird.getProxyObject(RequestInput.class);
        Mockingbird.enterRecordingMode();
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(InputWrapper.class);
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", input, 1);
        Mockingbird.setReturnValue(input.isEmpty(), false);
        Mockingbird.enterTestMode(InputWrapper.class);
        boolean result = inputWrapper.isEmpty();
        assertFalse("result", result);
    }
    
    public void testKeys() throws Throwable {
        MapInput input = (MapInput) Mockingbird.getProxyObject(MapInput.class);
        Mockingbird.enterRecordingMode();
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(InputWrapper.class);
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", input, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(input.keys(), iterator);
        Mockingbird.enterTestMode(InputWrapper.class);
        Iterator result = inputWrapper.keys();
        assertNotNull("result", result);
    }
    
    public void testKeys1() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        Iterator result = new InputWrapper(new MapInput(values)).keys();
        assertTrue("result.hasNext()", result.hasNext());
    }
    
    public void testPut() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper springInput = new SpringInput(input, (BeanFactory) Mockingbird.getProxyObject(BeanFactory.class));
        Mockingbird.enterTestMode(InputWrapper.class);
        Integer value = new Integer(0);
        Integer result = (Integer) springInput.put("n]ull", value);
        assertSame("result", value, result);
    }
    
    public void testPut1() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterTestMode(InputWrapper.class);
        String result = (String) inputWrapper.put("", "");
        assertEquals("result", "", result);
    }
    
    public void testPutAllWithAggressiveMocks() throws Throwable {
        InputWrapper inputWrapper = (InputWrapper) Mockingbird.getProxyObject(InputWrapper.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, inputWrapper, "getMap", "()java.util.Map", new Object[] {}, map, 1);
        map.putAll(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(InputWrapper.class);
        inputWrapper.putAll(null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRemove() throws Throwable {
        RequestInput input = (RequestInput) Mockingbird.getProxyObject(RequestInput.class);
        Mockingbird.enterRecordingMode();
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(InputWrapper.class);
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", input, 1);
        Mockingbird.setReturnValue(input.remove(""), "");
        Mockingbird.enterTestMode(InputWrapper.class);
        String result = (String) inputWrapper.remove("");
        assertEquals("result", "", result);
    }
    
    public void testRemove1() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterTestMode(InputWrapper.class);
        Object result = inputWrapper.remove("");
        assertNull("result", result);
    }
    
    public void testRemoveValue() throws Throwable {
        new InputWrapper(new MapInput(new HashMap(100, 100.0F))).removeValue("testInputWrapperName");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetInput() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Input input2 = new MapInput();
        Mockingbird.enterTestMode(InputWrapper.class);
        inputWrapper.setInput(input2);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetValue() throws Throwable {
        new InputWrapper(new MapInput(new HashMap(100, 100.0F))).setValue("testInputWrapperName", "");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSize() throws Throwable {
        RequestInput input = (RequestInput) Mockingbird.getProxyObject(RequestInput.class);
        Mockingbird.enterRecordingMode();
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(InputWrapper.class);
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", input, 1);
        Mockingbird.setReturnValue(input.size(), 2);
        Mockingbird.enterTestMode(InputWrapper.class);
        int result = inputWrapper.size();
        assertEquals("result", 2, result);
    }
    
    public void testSize1() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterTestMode(InputWrapper.class);
        int result = inputWrapper.size();
        assertEquals("result", 0, result);
    }
    
    public void testClearThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).clear();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testClearThrowsIllegalStateException1() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).clear();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testContainsKeyThrowsIllegalArgumentException() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.containsKey(new Integer(-100));
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RequestInput.class, ex);
        }
    }
    
    public void testContainsKeyThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).containsKey("");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testContainsKeyThrowsIllegalStateException1() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).containsKey(new Integer(31));
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testContainsKeyThrowsUnsupportedOperationException() throws Throwable {
        try {
            new InputWrapper(new MapInput(new HashMap(100, 100.0F))).containsKey("");
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException ex) {
            assertEquals("ex.getMessage()", "Underlying input is not a map!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testContainsValueThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).containsValue(new Integer(0));
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testContainsValueThrowsIllegalStateException1() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).containsValue("");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testContainsValueThrowsUnsupportedOperationException() throws Throwable {
        try {
            new InputWrapper(new MapInput(new HashMap(100, 100.0F))).containsValue("");
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException ex) {
            assertEquals("ex.getMessage()", "Underlying input is not a map!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testEntriesThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).entries();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testEntriesThrowsIllegalStateException1() throws Throwable {
        InputWrapper jpaFilter = new JpaFilter((EntityManagerFactory) null, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(jpaFilter.entrySet(), (Throwable) Mockingbird.getProxyObject(IllegalStateException.class));
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            jpaFilter.entries();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testEntriesThrowsIllegalStateException2() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).entries();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testEntriesThrowsUnsupportedOperationException() throws Throwable {
        try {
            new InputWrapper(new MapInput(new HashMap(100, 100.0F))).entries();
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException ex) {
            assertEquals("ex.getMessage()", "Underlying input is not a map!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testEntrySetThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).entrySet();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testEntrySetThrowsIllegalStateException1() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).entrySet();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testEntrySetThrowsUnsupportedOperationException() throws Throwable {
        try {
            new InputWrapper(new MapInput(new HashMap(100, 100.0F))).entrySet();
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException ex) {
            assertEquals("ex.getMessage()", "Underlying input is not a map!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetBooleanValueThrowsIllegalStateException() throws Throwable {
        HibernateFilter input = (HibernateFilter) Mockingbird.getProxyObject(HibernateFilter.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(input.isEmpty(), (Throwable) Mockingbird.getProxyObject(IllegalStateException.class));
        Mockingbird.enterTestMode(InputWrapper.class);
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(input.getBooleanValue("testString"), (Throwable) Mockingbird.getProxyObject(IllegalStateException.class));
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.getBooleanValue("testString");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetBooleanValueThrowsIllegalStateException1() throws Throwable {
        Input input = new HibernateFilter((SessionFactory) null);
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(input.getBooleanValue("testString"), (Throwable) Mockingbird.getProxyObject(IllegalStateException.class));
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.getBooleanValue("testString");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetBooleanValueThrowsIllegalStateException2() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getBooleanValue("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetBooleanValueThrowsIllegalStateException3() throws Throwable {
        Input input = new HibernateFilter((SessionFactory) null);
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(input.getBooleanValue("testString", false), (Throwable) Mockingbird.getProxyObject(IllegalStateException.class));
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.getBooleanValue("testString", false);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetBooleanValueThrowsIllegalStateException4() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getBooleanValue("testInputWrapperName", true);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetBooleanValueThrowsIllegalStateException5() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getBooleanValue("testInputWrapperName", true);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetBooleanValueThrowsInputException() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(input.getBooleanValue("testString"), (Throwable) Mockingbird.getProxyObject(InputException.class));
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.getBooleanValue("testString");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetBooleanValueThrowsInputException1() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "file:///_/MZ_8_48M_Xc6/k/_4sE_SV_o/B.eycr");
        try {
            new InputWrapper(new MapInput(values)).getBooleanValue("testString", true);
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to boolean: testString (file:///_/MZ_8_48M_Xc6/k/_4sE_SV_o/B.eycr)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetBooleanValueThrowsNullPointerException() throws Throwable {
        InputWrapper inputWrapper = (InputWrapper) Mockingbird.getProxyObject(HibernateFilter.class);
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.getBooleanValue("testInputWrapperName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testGetBooleanValueThrowsNullPointerException1() throws Throwable {
        InputWrapper inputWrapper = (InputWrapper) Mockingbird.getProxyObject(HibernateFilter.class);
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.getBooleanValue("testInputWrapperName", true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testGetDateThrowsIllegalArgumentException() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "file:///_/MZ_8_48M_Xc6/k/_4sE_SV_o/B.eycr");
        try {
            new InputWrapper(new MapInput(values)).getDate("testString", "testInputWrapperPattern");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Illegal pattern character 't'", ex.getMessage());
            assertThrownBy(SimpleDateFormat.class, ex);
        }
    }
    
    public void testGetDateThrowsIllegalArgumentException1() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", new Object());
        try {
            new InputWrapper(new MapInput(values)).getDate("testString", 100);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Illegal date style 100", ex.getMessage());
            assertThrownBy(DateFormat.class, ex);
        }
    }
    
    public void testGetDateThrowsIllegalStateException() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getDate("testInputWrapperName", "testInputWrapperPattern");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetDateThrowsIllegalStateException1() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getDate("testInputWrapperName", "testInputWrapperPattern");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetDateThrowsIllegalStateException2() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getDate("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetDateThrowsIllegalStateException3() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getDate("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetDateThrowsIllegalStateException4() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getDate("testInputWrapperName", 100);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetDateThrowsIllegalStateException5() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getDate("testInputWrapperName", 100);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetDateThrowsInputException() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        try {
            new InputWrapper(new MapInput(values)).getDate("testString", "");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to date: testString (testString)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetDateThrowsInputException1() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "file:///_/MZ_8_48M_Xc6/k/_4sE_SV_o/B.eycr");
        try {
            new InputWrapper(new MapInput(values)).getDate("testString");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to date: testString (file:///_/MZ_8_48M_Xc6/k/_4sE_SV_o/B.eycr)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetDateThrowsInputException2() throws Throwable {
        Input input = new MapInput();
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(input.getDate("testString", 2), (Throwable) Mockingbird.getProxyObject(InputException.class));
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.getDate("testString", 2);
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetDateThrowsNullPointerException() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(input.getDate("testString", 0), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.getDate("testString", 0);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetDoubleValueThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getDoubleValue("testInputWrapperName", 100.0);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetDoubleValueThrowsIllegalStateException1() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getDoubleValue("testInputWrapperName", 100.0);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetDoubleValueThrowsIllegalStateException2() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getDoubleValue("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetDoubleValueThrowsIllegalStateException3() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getDoubleValue("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetDoubleValueThrowsInputException() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(input.getDoubleValue("testString", 8.168025970458984), (Throwable) Mockingbird.getProxyObject(InputException.class));
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.getDoubleValue("testString", 8.168025970458984);
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetDoubleValueThrowsInputException1() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "file:///_/MZ_8_48M_Xc6/k/_4sE_SV_o/B.eycr");
        try {
            new InputWrapper(new MapInput(values)).getDoubleValue("testString");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to double: testString (file:///_/MZ_8_48M_Xc6/k/_4sE_SV_o/B.eycr)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetFloatValueThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(null).getFloatValue("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetFloatValueThrowsIllegalStateException1() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getFloatValue("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetFloatValueThrowsIllegalStateException2() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getFloatValue("testInputWrapperName", 100.0F);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetFloatValueThrowsIllegalStateException3() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getFloatValue("testInputWrapperName", 100.0F);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetFloatValueThrowsInputException() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "file:///_/MZ_8_48M_Xc6/k/_4sE_SV_o/B.eycr");
        try {
            new InputWrapper(new MapInput(values)).getFloatValue("testString");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to float: testString (file:///_/MZ_8_48M_Xc6/k/_4sE_SV_o/B.eycr)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetFloatValueThrowsInputException1() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "file:///_/MZ_8_48M_Xc6/k/_4sE_SV_o/B.eycr");
        try {
            new InputWrapper(new MapInput(values)).getFloatValue("testString", 100.0F);
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to float: testString (file:///_/MZ_8_48M_Xc6/k/_4sE_SV_o/B.eycr)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetFloatValueThrowsNullPointerException() throws Throwable {
        InputWrapper inputWrapper = (InputWrapper) Mockingbird.getProxyObject(HibernateFilter.class);
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.getFloatValue("testInputWrapperName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testGetHeaderKeysThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getHeaderKeys();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetHeaderKeysThrowsIllegalStateException1() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getHeaderKeys();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetHeaderKeysThrowsIllegalStateException2() throws Throwable {
        Input input = new HibernateFilter((SessionFactory) null);
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(input.getHeaderKeys(), (Throwable) Mockingbird.getProxyObject(IllegalStateException.class));
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.getHeaderKeys();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetHeaderThrowsIllegalStateException() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getHeader("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetHeaderThrowsIllegalStateException1() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getHeader("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetInputThrowsIllegalStateException() throws Throwable {
        InputWrapper jpaFilter = new JpaFilter((EntityManagerFactory) null, true);
        try {
            callPrivateMethod("org.mentawai.core.InputWrapper", "getInput", new Class[] {}, jpaFilter, new Object[] {});
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetIntValueThrowsIllegalStateException() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getIntValue("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetIntValueThrowsIllegalStateException1() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getIntValue("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetIntValueThrowsIllegalStateException2() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getIntValue("testInputWrapperName", 100);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetIntValueThrowsIllegalStateException3() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getIntValue("testInputWrapperName", 100);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetIntValueThrowsInputException() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        try {
            new InputWrapper(new MapInput(values)).getIntValue("testString");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to number: testString (testString)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetIntValueThrowsInputException1() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        try {
            new InputWrapper(new MapInput(values)).getIntValue("testString", 100);
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to number: testString (testString)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetIntValuesThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getIntValues("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetIntValuesThrowsIllegalStateException1() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getIntValues("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetIntValuesThrowsInputException() throws Throwable {
        Input input = new MapInput();
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(input.getIntValues("testString"), (Throwable) Mockingbird.getProxyObject(InputException.class));
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.getIntValues("testString");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetLongValueThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getLongValue("testInputWrapperName", 100L);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetLongValueThrowsIllegalStateException1() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getLongValue("testInputWrapperName", 100L);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetLongValueThrowsIllegalStateException2() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getLongValue("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetLongValueThrowsIllegalStateException3() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getLongValue("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetLongValueThrowsInputException() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "file:///_/MZ_8_48M_Xc6/k/_4sE_SV_o/B.eycr");
        try {
            new InputWrapper(new MapInput(values)).getLongValue("testString", 100L);
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to long: testString (file:///_/MZ_8_48M_Xc6/k/_4sE_SV_o/B.eycr)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetLongValueThrowsInputException1() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("testString", "testString");
        try {
            new InputWrapper(new MapInput(values)).getLongValue("testString");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "Could not convert input to long: testString (testString)", ex.getMessage());
            assertThrownBy(AbstractInput.class, ex);
        }
    }
    
    public void testGetMapThrowsIllegalStateException() throws Throwable {
        InputWrapper jpaFilter = new JpaFilter((EntityManagerFactory) null, true);
        try {
            callPrivateMethod("org.mentawai.core.InputWrapper", "getMap", new Class[] {}, jpaFilter, new Object[] {});
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetMapThrowsUnsupportedOperationException() throws Throwable {
        InputWrapper inputWrapper = new InputWrapper(new MapInput(new HashMap(100, 100.0F)));
        try {
            callPrivateMethod("org.mentawai.core.InputWrapper", "getMap", new Class[] {}, inputWrapper, new Object[] {});
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException ex) {
            assertEquals("ex.getMessage()", "Underlying input is not a map!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetObjectThrowsIllegalStateException() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getObject(Integer.class);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetObjectThrowsIllegalStateException1() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getObject(Integer.class);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetObjectThrowsIllegalStateException2() throws Throwable {
        try {
            new DIFilter().getObject("trul");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetObjectThrowsIllegalStateException3() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getObject("");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetObjectThrowsIllegalStateException4() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getObject(Integer.class, "testInputWrapperPrefix");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetObjectThrowsIllegalStateException5() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getObject(Integer.class, "testInputWrapperPrefix");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetObjectThrowsIllegalStateException6() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getObject(new Integer(33), "testInputWrapperPrefix");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetObjectThrowsIllegalStateException7() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getObject(new Object(), "testInputWrapperPrefix");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetObjectThrowsInputException() throws Throwable {
        try {
            new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getObject(Integer.class);
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "java.lang.InstantiationException: java.lang.Integer", ex.getMessage());
            assertThrownBy(Class.class, ex);
        }
    }
    
    public void testGetObjectThrowsInputException1() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(input.getObject(""), (Throwable) Mockingbird.getProxyObject(InputException.class));
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.getObject("");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetObjectThrowsInputException2() throws Throwable {
        try {
            new InputWrapper(new MapInput(new HashMap(100, 100.0F))).getObject(Integer.class, "testInputWrapperPrefix");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertEquals("ex.getMessage()", "java.lang.InstantiationException: java.lang.Integer", ex.getMessage());
            assertThrownBy(Class.class, ex);
        }
    }
    
    public void testGetObjectThrowsInputException3() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(input.getObject("", "testString"), (Throwable) Mockingbird.getProxyObject(InputException.class));
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.getObject("", "testString");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetPropertyThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getProperty("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetPropertyThrowsIllegalStateException1() throws Throwable {
        Input input = new DIFilter();
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(input.getProperty("\nA"), (Throwable) Mockingbird.getProxyObject(IllegalStateException.class));
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.getProperty("\nA");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetPropertyThrowsIllegalStateException2() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getProperty("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetStringValueThrowsIllegalStateException() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getStringValue("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetStringValueThrowsIllegalStateException1() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getStringValue("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetStringValueThrowsNullPointerException() throws Throwable {
        InputWrapper inputWrapper = (InputWrapper) Mockingbird.getProxyObject(HibernateFilter.class);
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.getStringValue("testInputWrapperName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testGetStringValuesThrowsIllegalStateException() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).getStringValues("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetStringValuesThrowsIllegalStateException1() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getStringValues("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetStringValuesThrowsInputException() throws Throwable {
        Input input = new MapInput();
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(input.getStringValues("testString"), (Throwable) Mockingbird.getProxyObject(InputException.class));
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.getStringValues("testString");
            fail("Expected InputException to be thrown");
        } catch (InputException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetThrowsIllegalArgumentException() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.get(new Integer(-1));
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RequestInput.class, ex);
        }
    }
    
    public void testGetThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).get("");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetThrowsIllegalStateException1() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).get(new Integer(0));
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetThrowsUnsupportedOperationException() throws Throwable {
        try {
            new InputWrapper(new MapInput(new HashMap(100, 100.0F))).get(new Integer(0));
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException ex) {
            assertEquals("ex.getMessage()", "Underlying input is not a map!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetValueThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).getValue("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetValueThrowsIllegalStateException1() throws Throwable {
        try {
            new InputWrapper().getValue("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testHasValueThrowsIllegalStateException() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).hasValue("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testHasValueThrowsIllegalStateException1() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).hasValue("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testIsEmptyThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).isEmpty();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testIsEmptyThrowsIllegalStateException1() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).isEmpty();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testIsEmptyThrowsUnsupportedOperationException() throws Throwable {
        try {
            new InputWrapper(new MapInput(new HashMap(100, 100.0F))).isEmpty();
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException ex) {
            assertEquals("ex.getMessage()", "Underlying input is not a map!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testKeySetThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).keySet();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testKeySetThrowsIllegalStateException1() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).keySet();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testKeySetThrowsUnsupportedOperationException1() throws Throwable {
        try {
            new InputWrapper(new MapInput(new HashMap(100, 100.0F))).keySet();
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException ex) {
            assertEquals("ex.getMessage()", "Underlying input is not a map!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testKeysThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).keys();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testKeysThrowsIllegalStateException1() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).keys();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testPutAllThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).putAll(new HashMap(100, 100.0F));
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testPutAllThrowsIllegalStateException1() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).putAll(new HashMap(100, 100.0F));
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testPutAllThrowsUnsupportedOperationException() throws Throwable {
        try {
            new InputWrapper(new MapInput(new HashMap(100, 100.0F))).putAll(new HashMap(1000, 1000.0F));
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException ex) {
            assertEquals("ex.getMessage()", "Underlying input is not a map!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testPutThrowsIllegalArgumentException() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.put(null, new Integer(0));
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RequestInput.class, ex);
        }
    }
    
    public void testPutThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).put("testString", "testString");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testPutThrowsIllegalStateException1() throws Throwable {
        try {
            new HibernateAnnotationFilter((SessionFactory) null).put("  ", "");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testPutThrowsUnsupportedOperationException() throws Throwable {
        try {
            new InputWrapper(new MapInput(new HashMap(100, 100.0F))).put("", "+1");
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException ex) {
            assertEquals("ex.getMessage()", "Underlying input is not a map!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testRemoveThrowsIllegalArgumentException() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.remove(new Integer(1));
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RequestInput.class, ex);
        }
    }
    
    public void testRemoveThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).remove("");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testRemoveThrowsIllegalStateException1() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).remove(new Integer(0));
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testRemoveThrowsUnsupportedOperationException() throws Throwable {
        try {
            new InputWrapper(new MapInput(new HashMap(100, 100.0F))).remove("testString");
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException ex) {
            assertEquals("ex.getMessage()", "Underlying input is not a map!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testRemoveValueThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).removeValue("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testRemoveValueThrowsIllegalStateException1() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).removeValue("testInputWrapperName");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testRemoveValueThrowsNullPointerException() throws Throwable {
        InputWrapper inputWrapper = (InputWrapper) Mockingbird.getProxyObject(HibernateFilter.class);
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.removeValue("testInputWrapperName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testSetValueThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).setValue("testInputWrapperName", "");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testSetValueThrowsIllegalStateException1() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).setValue("testInputWrapperName", new Integer(32));
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testSetValueThrowsNullPointerException() throws Throwable {
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        InputWrapper inputWrapper = new InputWrapper(input);
        Mockingbird.enterRecordingMode();
        Integer value = new Integer(0);
        input.setValue("", value);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(InputWrapper.class);
        try {
            inputWrapper.setValue("", value);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testSizeThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).size();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testSizeThrowsIllegalStateException1() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).size();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testSizeThrowsUnsupportedOperationException() throws Throwable {
        try {
            new InputWrapper(new MapInput(new HashMap(100, 100.0F))).size();
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException ex) {
            assertEquals("ex.getMessage()", "Underlying input is not a map!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testValuesThrowsIllegalStateException() throws Throwable {
        try {
            new InputWrapper(new InputWrapper()).values();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testValuesThrowsIllegalStateException1() throws Throwable {
        try {
            new JpaFilter((EntityManagerFactory) null, true).values();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testValuesThrowsUnsupportedOperationException1() throws Throwable {
        try {
            new InputWrapper(new MapInput(new HashMap(100, 100.0F))).values();
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException ex) {
            assertEquals("ex.getMessage()", "Underlying input is not a map!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
}

