/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 7:27:27 PM
 * Time to generate: 04:21.531 seconds
 *
 */

package org.mentawai.core;

import bsh.EvalError;
import bsh.Interpreter;
import bsh.TargetError;
import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.File;
import java.util.Collection;
import java.util.Map;
import javax.servlet.ServletContext;

public class BshApplicationManagerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return BshApplicationManager.class;
    }
    
    public void testConstructor() throws Throwable {
        BshApplicationManager bshApplicationManager = new BshApplicationManager();
        assertEquals("bshApplicationManager.innerActions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "innerActions")).size());
        assertEquals("bshApplicationManager.getGlobalFilters().size()", 0, bshApplicationManager.getGlobalFilters().size());
        assertEquals("bshApplicationManager.actions.size()", 0, ((Map) getPrivateField(bshApplicationManager, "actions")).size());
        assertEquals("bshApplicationManager.dependencies.size()", 0, ((Collection) getPrivateField(bshApplicationManager, "dependencies")).size());
        assertEquals("bshApplicationManager.components.size()", 0, ((Map) getPrivateField(bshApplicationManager, "components")).size());
        assertNull("bshApplicationManager.file", bshApplicationManager.file);
        assertTrue("bshApplicationManager.reload", bshApplicationManager.reload);
        assertEquals("bshApplicationManager.globalConsequences.size()", 0, ((Map) getPrivateField(bshApplicationManager, "globalConsequences")).size());
        assertNull("bshApplicationManager.filename", bshApplicationManager.filename);
        assertEquals("bshApplicationManager.beans.size()", 0, ((Map) getPrivateField(bshApplicationManager, "beans")).size());
        assertEquals("bshApplicationManager.ts", 0L, ((Number) getPrivateField(bshApplicationManager, "ts")).longValue());
    }
    
    public void testGetScriptName() throws Throwable {
        BshApplicationManager bshApplicationManager = new BshApplicationManager();
        String result = bshApplicationManager.getScriptName();
        assertEquals("result", "ApplicationManager.bsh", result);
    }
    
    public void testInitWithAggressiveMocks() throws Throwable {
        BshApplicationManager bshApplicationManager = (BshApplicationManager) Mockingbird.getProxyObject(BshApplicationManager.class, true);
        bshApplicationManager.filename = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, bshApplicationManager, "initScriptFile", "()void", new Object[] {}, null, 1);
        bshApplicationManager.reset();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, bshApplicationManager, "runScript", "(java.lang.String,org.mentawai.core.Context)void", null, 1);
        Mockingbird.enterTestMode(BshApplicationManager.class);
        bshApplicationManager.init(null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testPrepareScript() throws Throwable {
        BshApplicationManager bshApplicationManager = new BshApplicationManager();
        Interpreter i = new Interpreter();
        bshApplicationManager.prepareScript(i);
        assertEquals("i.getNameSpace().getDeclaredVariables().length", 13, i.getNameSpace().getDeclaredVariables().length);
        assertEquals("i.getNameSpace().getAllNames().length", 15, i.getNameSpace().getAllNames().length);
        assertEquals("i.getNameSpace().names.size()", 1, ((Map) getPrivateField(i.getNameSpace(), "names")).size());
    }
    
    public void testRunScriptWithAggressiveMocks() throws Throwable {
        storeStaticField(ApplicationManager.class, "EXCEPTION");
        BshApplicationManager bshApplicationManager = (BshApplicationManager) Mockingbird.getProxyObject(BshApplicationManager.class, true);
        Mockingbird.enterRecordingMode();
        Interpreter interpreter = (Interpreter) Mockingbird.getProxyObject(Interpreter.class);
        Mockingbird.replaceObjectForRecording(Interpreter.class, "<init>()", interpreter);
        setPrivateField(ApplicationManager.class, "EXCEPTION", "");
        Mockingbird.setReturnValue(interpreter.source(""), null);
        interpreter.set("application", null);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("appMgr", bshApplicationManager);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("SUCCESS", "success");
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("ERROR", "error");
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("LOGIN", "login");
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("ACCESSDENIED", "accessdenied");
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("ACTION", 10);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("REQUEST", 11);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("INPUT", 1);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("OUTPUT", 2);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("SESSION", 3);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("APPLICATION", 4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, interpreter, "set", "(java.lang.String,java.lang.Object)void", null, 1);
        interpreter.set("REDIR", "redir");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(interpreter.eval("fwd(a) { return new Forward(a); }"), null);
        Mockingbird.setReturnValue(interpreter.eval("redir(a) { return new Redirect(a); }"), null);
        Mockingbird.setReturnValue(interpreter.eval("config(appMgr, application)"), null);
        Mockingbird.enterTestMode(BshApplicationManager.class);
        bshApplicationManager.runScript("", null);
        assertEquals("bshApplicationManagerApplicationManager.EXCEPTION", "", ApplicationManager.EXCEPTION);
    }
    
    public void testPrepareScriptThrowsNullPointerException() throws Throwable {
        BshApplicationManager parent = new BshApplicationManager();
        Interpreter i = new Interpreter();
        parent.setParent(parent);
        Mockingbird.enterRecordingMode();
        i.set("SUCCESS", "success");
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(BshApplicationManager.class);
        try {
            parent.prepareScript(i);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testRunScriptThrowsDSLException() throws Throwable {
        BshApplicationManager bshApplicationManager = new BshApplicationManager();
        Context application = new ApplicationContext((ServletContext) Mockingbird.getProxyObject(ServletContext.class));
        Mockingbird.enterTestMode(BshApplicationManager.class);
        try {
            bshApplicationManager.runScript("testBshApplicationManagerScriptFile", application);
            fail("Expected DSLException to be thrown");
        } catch (DSLException ex) {
            assertEquals("ex.getMessage()", "Error reading the bsh script testBshApplicationManagerScriptFile", ex.getMessage());
            assertThrownBy(BshApplicationManager.class, ex);
        }
    }
    
    public void testRunScriptThrowsDSLExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ApplicationManager.class, "EXCEPTION");
        BshApplicationManager bshApplicationManager = (BshApplicationManager) Mockingbird.getProxyObject(BshApplicationManager.class, true);
        Mockingbird.enterRecordingMode();
        Interpreter interpreter = (Interpreter) Mockingbird.getProxyObject(Interpreter.class);
        Mockingbird.replaceObjectForRecording(Interpreter.class, "<init>()", interpreter);
        TargetError targetError = (TargetError) Mockingbird.getProxyObject(TargetError.class);
        setPrivateField(ApplicationManager.class, "EXCEPTION", "");
        Mockingbird.setReturnValue(interpreter.source(""), null);
        interpreter.set("application", null);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("appMgr", bshApplicationManager);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("SUCCESS", "success");
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("ERROR", "error");
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("LOGIN", "login");
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("ACCESSDENIED", "accessdenied");
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("ACTION", 10);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("REQUEST", 11);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("INPUT", 1);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("OUTPUT", 2);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("SESSION", 3);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("APPLICATION", 4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, interpreter, "set", "(java.lang.String,java.lang.Object)void", null, 1);
        interpreter.set("REDIR", "redir");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(interpreter.eval("fwd(a) { return new Forward(a); }"), null);
        Mockingbird.setReturnValue(interpreter.eval("redir(a) { return new Redirect(a); }"), null);
        Mockingbird.setException(interpreter.eval("config(appMgr, application)"), targetError);
        targetError.printStackTrace();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(targetError.getTarget(), null);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(DSLException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(DSLException.class));
        Mockingbird.enterTestMode(BshApplicationManager.class);
        try {
            bshApplicationManager.runScript("", null);
            fail("Expected DSLException to be thrown");
        } catch (DSLException ex) {
            assertEquals("bshApplicationManager.getScriptName()", "ApplicationManager.bsh", bshApplicationManager.getScriptName());
        }
    }
    
    public void testRunScriptThrowsDSLExceptionWithAggressiveMocks1() throws Throwable {
        storeStaticField(ApplicationManager.class, "EXCEPTION");
        BshApplicationManager bshApplicationManager = (BshApplicationManager) Mockingbird.getProxyObject(BshApplicationManager.class, true);
        Mockingbird.enterRecordingMode();
        Interpreter interpreter = (Interpreter) Mockingbird.getProxyObject(Interpreter.class);
        Mockingbird.replaceObjectForRecording(Interpreter.class, "<init>()", interpreter);
        EvalError evalError = (EvalError) Mockingbird.getProxyObject(EvalError.class);
        setPrivateField(ApplicationManager.class, "EXCEPTION", "");
        Mockingbird.setReturnValue(interpreter.source(""), null);
        interpreter.set("application", null);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("appMgr", bshApplicationManager);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("SUCCESS", "success");
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("ERROR", "error");
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("LOGIN", "login");
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("ACCESSDENIED", "accessdenied");
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("ACTION", 10);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("REQUEST", 11);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("INPUT", 1);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("OUTPUT", 2);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("SESSION", 3);
        Mockingbird.setNormalReturnForVoid();
        interpreter.set("APPLICATION", 4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, interpreter, "set", "(java.lang.String,java.lang.Object)void", null, 1);
        interpreter.set("REDIR", "redir");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(interpreter.eval("fwd(a) { return new Forward(a); }"), null);
        Mockingbird.setReturnValue(interpreter.eval("redir(a) { return new Redirect(a); }"), null);
        Mockingbird.setException(interpreter.eval("config(appMgr, application)"), evalError);
        evalError.printStackTrace();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(DSLException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(DSLException.class));
        Mockingbird.enterTestMode(BshApplicationManager.class);
        try {
            bshApplicationManager.runScript("", null);
            fail("Expected DSLException to be thrown");
        } catch (DSLException ex) {
            assertEquals("bshApplicationManager.getScriptName()", "ApplicationManager.bsh", bshApplicationManager.getScriptName());
        }
    }
    
    public void testRunScriptThrowsNullPointerException() throws Throwable {
        BshApplicationManager bshApplicationManager = new BshApplicationManager();
        Context application = new ApplicationContext((ServletContext) Mockingbird.getProxyObject(ServletContext.class));
        Mockingbird.enterTestMode(BshApplicationManager.class);
        try {
            bshApplicationManager.runScript(null, application);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
        }
    }
}

