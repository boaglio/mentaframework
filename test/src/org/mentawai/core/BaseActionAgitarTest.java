/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 7:22:45 PM
 * Time to generate: 01:37.472 seconds
 *
 */

package org.mentawai.core;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import org.agitar.mock.persistence.MockEntityManagerFactory;
import org.hibernate.SessionFactory;
import org.mentawai.action.BaseLoginAction;
import org.mentawai.action.LogoutAction;
import org.mentawai.action.SuccessAction;
import org.mentawai.filter.DIFilter;
import org.mentawai.filter.HibernateFilter;
import org.mentawai.filter.JpaFilter;
import org.mentawai.message.ClassMessageContext;
import org.mentawai.message.ClasspathMessageContext;
import org.mentawai.message.DefaultMessage;
import org.mentawai.message.FileMessageContext;
import org.mentawai.message.Message;
import org.mentawai.message.MessageContext;
import org.mentawai.message.MessageManager;

public class BaseActionAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return BaseAction.class;
    }
    
    public void testAddError() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Output output = new MapOutput();
        logoutAction.setOutput(output);
        Input input = new MapInput(new HashMap(100, 100.0F));
        logoutAction.setInput(input);
        logoutAction.addError("testBaseActionError_id", new FileMessageContext("testBaseActionFile", "testBaseActionDir"));
        assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
        assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
    }
    
    public void testAddError1() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Input input = new MapInput(new HashMap(100, 100.0F));
        Output output = new MapOutput();
        logoutAction.setOutput(output);
        logoutAction.setInput(input);
        logoutAction.addError(100);
        assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
        assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
    }
    
    public void testAddError2() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Input input = new MapInput(new HashMap(100, 100.0F));
        Output output = new MapOutput();
        logoutAction.setOutput(output);
        logoutAction.setInput(input);
        logoutAction.addError("testBaseActionError_id");
        assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
        assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
    }
    
    public void testAddError3() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setOutput(new ResponseOutput(null));
        Message error = new DefaultMessage("testBaseActionId", new FileMessageContext("testBaseActionFile"), new HashMap(100, 100.0F));
        logoutAction.addError("testBaseActionField", error);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAddError4() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Output output = new MapOutput();
        logoutAction.setOutput(output);
        Input input = new MapInput(new HashMap(100, 100.0F));
        logoutAction.setInput(input);
        logoutAction.addError("testBaseActionField", 100);
        assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
        assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
    }
    
    public void testAddError5() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Output output = new MapOutput();
        logoutAction.setOutput(output);
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        logoutAction.setInput(input);
        MessageContext msgContext = new FileMessageContext("testBaseActionFile");
        Mockingbird.enterTestMode(BaseAction.class);
        logoutAction.addError(100, msgContext);
        assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
        assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
    }
    
    public void testAddError6() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        ClasspathMessageContext msgContext = (ClasspathMessageContext) Mockingbird.getProxyObject(ClasspathMessageContext.class);
        Mockingbird.enterRecordingMode();
        logoutAction.addError("succe~ss", "-2", msgContext);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(BaseAction.class);
        logoutAction.addError("succe~ss", -2, msgContext);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAddError7() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setOutput(new MapOutput());
        Message error = new DefaultMessage("testBaseActionId", new FileMessageContext("testBaseActionFile", "testBaseActionDir"));
        logoutAction.addError(error);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAddError8() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Input input = new MapInput(new HashMap(100, 100.0F));
        Output output = new MapOutput();
        logoutAction.setOutput(output);
        logoutAction.setInput(input);
        logoutAction.addError("testBaseActionField", "testBaseActionError_id");
        assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
        assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
    }
    
    public void testAddError9() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Input input = new MapInput(new HashMap(100, 100.0F));
        Output output = new MapOutput();
        logoutAction.setOutput(output);
        logoutAction.setInput(input);
        logoutAction.addError("testBaseActionField", "testBaseActionError_id", new FileMessageContext("testBaseActionFile"));
        assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
        assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
    }
    
    public void testAddMessage() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Input input = new MapInput(new HashMap(100, 100.0F));
        Output output = new MapOutput();
        logoutAction.setOutput(output);
        logoutAction.setInput(input);
        logoutAction.addMessage(100);
        assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
        assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
    }
    
    public void testAddMessage1() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setOutput(new MapOutput());
        Message msg = new DefaultMessage(100, new ClasspathMessageContext("testBaseActionResource"), new IdentityHashMap());
        logoutAction.addMessage(msg);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAddMessage2() throws Throwable {
        Output output = new MapOutput();
        Input input = new MapInput(new HashMap(100, 100.0F));
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setOutput(output);
        logoutAction.setInput(input);
        logoutAction.addMessage("testBaseActionMsg_id");
        assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
        assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
    }
    
    public void testAddMessage3() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        FileMessageContext msgContext = (FileMessageContext) Mockingbird.getProxyObject(FileMessageContext.class);
        Mockingbird.enterRecordingMode();
        logoutAction.addMessage("100", msgContext);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(BaseAction.class);
        logoutAction.addMessage(100, msgContext);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAddMessage4() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        MessageContext msgContext = new FileMessageContext("testBaseActionFile");
        Mockingbird.enterRecordingMode();
        logoutAction.addMessage("100", msgContext);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(BaseAction.class);
        logoutAction.addMessage(100, msgContext);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAddMessage5() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Input input = new MapInput(new HashMap(100, 100.0F));
        Output output = new MapOutput();
        logoutAction.setOutput(output);
        logoutAction.setInput(input);
        logoutAction.addMessage("testBaseActionMsg_id", new ClasspathMessageContext("testBaseActionResource"));
        assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
        assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
    }
    
    public void testAddMessageWithAggressiveMocks() throws Throwable {
        BaseAction baseAction = (BaseAction) Mockingbird.getProxyObject(BaseAction.class, true);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Output output = (Output) Mockingbird.getProxyObject(Output.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        setPrivateField(baseAction, "msgContext", null);
        baseAction.setInput(input);
        baseAction.setOutput(output);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(MessageManager.getMessages(baseAction, true), list);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(input.keys(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, input, "getStringValue", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, input, "getStringValue", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(output.keys(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), "");
        Mockingbird.setReturnValue(false, output, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), "");
        Mockingbird.setReturnValue(false, output, "getValue", "(java.lang.String)java.lang.Object", obj, 1);
        Mockingbird.setReturnValue(false, obj, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), "");
        Mockingbird.setReturnValue(false, output, "getValue", "(java.lang.String)java.lang.Object", obj2, 1);
        Mockingbird.setReturnValue(false, obj2, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), "");
        Mockingbird.setReturnValue(false, output, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        DefaultMessage defaultMessage = (DefaultMessage) Mockingbird.getProxyObject(DefaultMessage.class);
        Mockingbird.replaceObjectForRecording(DefaultMessage.class, "<init>(java.lang.String,org.mentawai.message.MessageContext,java.util.Map)", defaultMessage);
        Mockingbird.setReturnValue(list.add(defaultMessage), false);
        Mockingbird.enterTestMode(BaseAction.class);
        baseAction.addMessage("");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAdhere() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setSession(new MapContext(new HashMap(100, 100.0F)));
        logoutAction.adhere();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testDisjoin() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setSession(new MapContext(new HashMap(100, 100.0F)));
        logoutAction.disjoin();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testExecuteWithAggressiveMocks() throws Throwable {
        BaseAction baseAction = (BaseAction) Mockingbird.getProxyObject(BaseAction.class, true);
        Mockingbird.enterTestMode(BaseAction.class);
        String result = baseAction.execute();
        assertEquals("result", "success", result);
    }
    
    public void testGetApplication() throws Throwable {
        Context context = new ApplicationContext((ServletContext) Mockingbird.getProxyObject(ServletContext.class));
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setApplication(context);
        Mockingbird.enterTestMode(BaseAction.class);
        Context result = logoutAction.getApplication();
        assertSame("result", context, result);
    }
    
    public void testGetCookies() throws Throwable {
        Context context = new MapContext();
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setCookies(context);
        Context result = logoutAction.getCookies();
        assertSame("result", context, result);
    }
    
    public void testGetInput() throws Throwable {
        Input input = new InputWrapper();
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setInput(input);
        Input result = logoutAction.getInput();
        assertSame("result", input, result);
    }
    
    public void testGetLocale() throws Throwable {
        Locale loc = Locale.FRENCH;
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setLocale(loc);
        Locale result = logoutAction.getLocale();
        assertSame("result", loc, result);
    }
    
    public void testGetMessageTokens() throws Throwable {
        Output output = new MapOutput();
        Map values = new HashMap(100, 100.0F);
        values.put("", "");
        Input input = new MapInput(values);
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setOutput(output);
        logoutAction.setInput(input);
        HashMap result = (HashMap) logoutAction.getMessageTokens("testBaseActionField");
        assertEquals("result.size()", 2, result.size());
        assertNull("(HashMap) result.get(\"field\")", result.get("field"));
        assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
        assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
    }
    
    public void testGetMessageTokens1() throws Throwable {
        Input input = new MapInput();
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setInput(input);
        Output output = new ResponseOutput(null);
        logoutAction.setOutput(output);
        logoutAction.addMessage("testBaseActionMsg_id");
        HashMap result = (HashMap) logoutAction.getMessageTokens(null);
        assertEquals("result.size()", 1, result.size());
        assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
        assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testGetMessageTokens2() throws Throwable {
        Input input = new MapInput();
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setInput(input);
        Output output = new ResponseOutput(null);
        logoutAction.setOutput(output);
        HashMap result = (HashMap) logoutAction.getMessageTokens(null);
        assertEquals("result.size()", 0, result.size());
        assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
        assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
    }
    
    public void testGetMessageTokens3() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Map values = new HashMap(100, 100.0F);
        values.put("Cou?ld not convert input to float: ", new Integer(15));
        Input input = new MapInput(values);
        Output output = new MapOutput();
        logoutAction.setOutput(output);
        logoutAction.setInput(input);
        logoutAction.addError(100);
        HashMap result = (HashMap) logoutAction.getMessageTokens("testBaseActionField");
        assertEquals("result.size()", 3, result.size());
        assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
        assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testGetMessageTokens4() throws Throwable {
        Output output = new MapOutput();
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setOutput(output);
        Input input = new MapInput();
        logoutAction.setInput(input);
        HashMap result = (HashMap) logoutAction.getMessageTokens("testBaseActionField");
        assertEquals("result.size()", 1, result.size());
        assertNull("(HashMap) result.get(\"field\")", result.get("field"));
        assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
        assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
    }
    
    public void testGetMessageTokens5() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Output output = new MapOutput();
        logoutAction.setOutput(output);
        Input input = new RequestInput((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class));
        logoutAction.setInput(input);
        logoutAction.addError(100, new FileMessageContext("testBaseActionFile"));
        Mockingbird.enterTestMode(BaseAction.class);
        HashMap result = (HashMap) logoutAction.getMessageTokens("testBaseActionField");
        assertEquals("result.size()", 2, result.size());
        assertEquals("(HashMap) result.get(\"errors\")", "[Message: ID[100] CONTEXT[/messages/testBaseActionFile]]", result.get("errors"));
        assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
        assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
    }
    
    public void testGetOutput() throws Throwable {
        Output output = new MapOutput();
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setOutput(output);
        Output result = logoutAction.getOutput();
        assertSame("result", output, result);
    }
    
    public void testGetSession() throws Throwable {
        Context context = new MapContext();
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setSession(context);
        Context result = logoutAction.getSession();
        assertSame("result", context, result);
    }
    
    public void testGetUserSession() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Context context = (ApplicationContext) Mockingbird.getProxyObject(ApplicationContext.class);
        logoutAction.setSession(context);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(BaseLoginAction.getUserSession(context), "");
        Mockingbird.enterTestMode(BaseAction.class);
        String result = (String) logoutAction.getUserSession();
        assertEquals("result", "", result);
    }
    
    public void testGetUserSession1() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setSession(new MapContext());
        Object result = logoutAction.getUserSession();
        assertNull("result", result);
    }
    
    public void testIsLogged() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        ApplicationContext context = (ApplicationContext) Mockingbird.getProxyObject(ApplicationContext.class);
        logoutAction.setSession(context);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(BaseLoginAction.isLogged(context), true);
        Mockingbird.enterTestMode(BaseAction.class);
        boolean result = logoutAction.isLogged();
        assertTrue("result", result);
    }
    
    public void testIsLogged1() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setSession(new MapContext());
        boolean result = logoutAction.isLogged();
        assertFalse("result", result);
    }
    
    public void testIsPost() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        RequestInput input = (RequestInput) Mockingbird.getProxyObject(RequestInput.class);
        logoutAction.setInput(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(input.getProperty("method"), "testString");
        Mockingbird.enterTestMode(BaseAction.class);
        boolean result = logoutAction.isPost();
        assertFalse("result", result);
        assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
    }
    
    public void testIsPost1() throws Throwable {
        Input input = new MapInput();
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setInput(input);
        boolean result = logoutAction.isPost();
        assertFalse("result", result);
        assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
    }
    
    public void testIsPostWithAggressiveMocks() throws Throwable {
        BaseAction baseAction = (BaseAction) Mockingbird.getProxyObject(BaseAction.class, true);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        baseAction.setInput(input);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(input.getProperty("method"), "post");
        Mockingbird.enterTestMode(BaseAction.class);
        boolean result = baseAction.isPost();
        assertTrue("result", result);
    }
    
    public void testOnRemoved() throws Throwable {
        new LogoutAction().onRemoved();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetApplication() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Context context = new MapContext();
        logoutAction.setApplication(context);
        assertSame("(LogoutAction) logoutAction.application", context, ((LogoutAction) logoutAction).application);
    }
    
    public void testSetCookies() throws Throwable {
        Context context = new MapContext(new HashMap(100, 100.0F));
        BaseAction successAction = new SuccessAction();
        successAction.setCookies(context);
        assertSame("(SuccessAction) successAction.cookies", context, ((SuccessAction) successAction).cookies);
    }
    
    public void testSetInput() throws Throwable {
        Input input = new MapInput();
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setInput(input);
        assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
    }
    
    public void testSetLocale() throws Throwable {
        Locale loc = Locale.FRENCH;
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setLocale(loc);
        assertSame("(LogoutAction) logoutAction.loc", loc, ((LogoutAction) logoutAction).loc);
    }
    
    public void testSetMessageContext() throws Throwable {
        MessageContext msgContext = new ClassMessageContext(Integer.class, "testBaseActionDir");
        BaseAction.setMessageContext(msgContext);
        assertSame("BaseAction.FIXED_MSG_CONTEXT", msgContext, getPrivateField(BaseAction.class, "FIXED_MSG_CONTEXT"));
    }
    
    public void testSetOutput() throws Throwable {
        Output output = new MapOutput();
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setOutput(output);
        assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
    }
    
    public void testSetSession() throws Throwable {
        Context context = new MapContext(new HashMap(100, 100.0F));
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setSession(context);
        assertSame("(LogoutAction) logoutAction.session", context, ((LogoutAction) logoutAction).session);
    }
    
    public void testAddErrorThrowsIllegalStateException() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Output output = new MapOutput();
        logoutAction.setOutput(output);
        Input input = new JpaFilter(new MockEntityManagerFactory());
        logoutAction.setInput(input);
        try {
            logoutAction.addError("testBaseActionError_id", new FileMessageContext("testBaseActionFile", "testBaseActionDir"));
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
            assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
            assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testAddErrorThrowsIllegalStateException1() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Mockingbird.enterRecordingMode();
        logoutAction.addError("-100");
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(IllegalStateException.class));
        Mockingbird.enterTestMode(BaseAction.class);
        try {
            logoutAction.addError(-100);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddErrorThrowsIllegalStateException2() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Output output = new ResponseOutput(null);
        logoutAction.setOutput(output);
        Input input = new InputWrapper();
        logoutAction.setInput(input);
        try {
            logoutAction.addError("testBaseActionError_id");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
            assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
            assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testAddErrorThrowsIllegalStateException3() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Mockingbird.enterRecordingMode();
        logoutAction.addError("inde", "2");
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(IllegalStateException.class));
        Mockingbird.enterTestMode(BaseAction.class);
        try {
            logoutAction.addError("inde", 2);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddErrorThrowsIllegalStateException4() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        FileMessageContext msgContext = (FileMessageContext) Mockingbird.getProxyObject(FileMessageContext.class);
        Mockingbird.enterRecordingMode();
        logoutAction.addError("17", msgContext);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(IllegalStateException.class));
        Mockingbird.enterTestMode(BaseAction.class);
        try {
            logoutAction.addError(17, msgContext);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddErrorThrowsIllegalStateException5() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        MessageContext msgContext = new FileMessageContext("testBaseActionFile", "testBaseActionDir");
        Mockingbird.enterRecordingMode();
        logoutAction.addError("17", msgContext);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(IllegalStateException.class));
        Mockingbird.enterTestMode(BaseAction.class);
        try {
            logoutAction.addError(17, msgContext);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddErrorThrowsIllegalStateException6() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        MessageContext msgContext = new FileMessageContext("testBaseActionFile");
        Mockingbird.enterRecordingMode();
        logoutAction.addError("testString", "2", msgContext);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(IllegalStateException.class));
        Mockingbird.enterTestMode(BaseAction.class);
        try {
            logoutAction.addError("testString", 2, msgContext);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddErrorThrowsIllegalStateException7() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        FileMessageContext msgContext = (FileMessageContext) Mockingbird.getProxyObject(FileMessageContext.class);
        Mockingbird.enterRecordingMode();
        logoutAction.addError("testString", "2", msgContext);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(IllegalStateException.class));
        Mockingbird.enterTestMode(BaseAction.class);
        try {
            logoutAction.addError("testString", 2, msgContext);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddErrorThrowsIllegalStateException8() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Output output = new ResponseOutput(null);
        logoutAction.setOutput(output);
        Input input = new InputWrapper();
        logoutAction.setInput(input);
        try {
            logoutAction.addError("testBaseActionField", "testBaseActionError_id");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
            assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
            assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testAddErrorThrowsIllegalStateException9() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Output output = new ResponseOutput(null);
        logoutAction.setOutput(output);
        Input input = new DIFilter();
        logoutAction.setInput(input);
        try {
            logoutAction.addError("testBaseActionField", "testBaseActionError_id", new ClasspathMessageContext("testBaseActionResource"));
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
            assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
            assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testAddErrorThrowsNullPointerException() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Output output = new MapOutput();
        logoutAction.setOutput(output);
        try {
            logoutAction.addError("testBaseActionError_id", new FileMessageContext("testBaseActionFile", "testBaseActionDir"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseAction.class, ex);
            assertNull("(LogoutAction) logoutAction.input", ((LogoutAction) logoutAction).input);
            assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testAddErrorThrowsNullPointerException1() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        try {
            logoutAction.addError("testBaseActionError_id", new FileMessageContext("testBaseActionFile"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MessageManager.class, ex);
            assertNull("(LogoutAction) logoutAction.input", ((LogoutAction) logoutAction).input);
            assertNull("(LogoutAction) logoutAction.output", ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testAddErrorThrowsNullPointerException2() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Message error = new DefaultMessage("testBaseActionId", new FileMessageContext("testBaseActionFile"));
        try {
            logoutAction.addError(error);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MessageManager.class, ex);
        }
    }
    
    public void testAddErrorThrowsNullPointerException3() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        try {
            logoutAction.addError("testBaseActionField", "testBaseActionError_id");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MessageManager.class, ex);
            assertNull("(LogoutAction) logoutAction.input", ((LogoutAction) logoutAction).input);
            assertNull("(LogoutAction) logoutAction.output", ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testAddErrorThrowsNullPointerException4() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        try {
            logoutAction.addError("testBaseActionField", "testBaseActionError_id", new ClasspathMessageContext("testBaseActionResource"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MessageManager.class, ex);
            assertNull("(LogoutAction) logoutAction.input", ((LogoutAction) logoutAction).input);
            assertNull("(LogoutAction) logoutAction.output", ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testAddErrorThrowsNullPointerException5() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        try {
            logoutAction.addError(100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MessageManager.class, ex);
            assertNull("(LogoutAction) logoutAction.input", ((LogoutAction) logoutAction).input);
            assertNull("(LogoutAction) logoutAction.output", ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testAddErrorThrowsNullPointerException6() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Mockingbird.enterRecordingMode();
        logoutAction.addError("-16");
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(BaseAction.class);
        try {
            logoutAction.addError(-16);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddErrorThrowsNullPointerException7() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        try {
            logoutAction.addError("testBaseActionError_id");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MessageManager.class, ex);
            assertNull("(LogoutAction) logoutAction.input", ((LogoutAction) logoutAction).input);
            assertNull("(LogoutAction) logoutAction.output", ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testAddErrorThrowsNullPointerException8() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Output output = new MapOutput();
        logoutAction.setOutput(output);
        try {
            logoutAction.addError("testBaseActionError_id");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseAction.class, ex);
            assertNull("(LogoutAction) logoutAction.input", ((LogoutAction) logoutAction).input);
            assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testAddErrorThrowsNullPointerException9() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        String[] strings = new String[2];
        Message error = new DefaultMessage("testBaseActionId", new ClasspathMessageContext("testBaseActionResource"), new HashMap(100, 100.0F), strings);
        try {
            logoutAction.addError("testBaseActionField", error);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MessageManager.class, ex);
        }
    }
    
    public void testAddErrorThrowsNullPointerException10() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Mockingbird.enterRecordingMode();
        logoutAction.addError("", "0");
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(BaseAction.class);
        try {
            logoutAction.addError("", 0);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddErrorThrowsNullPointerException11() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        ClasspathMessageContext msgContext = (ClasspathMessageContext) Mockingbird.getProxyObject(ClasspathMessageContext.class);
        Mockingbird.enterRecordingMode();
        logoutAction.addError("0", msgContext);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(BaseAction.class);
        try {
            logoutAction.addError(0, msgContext);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddErrorThrowsNullPointerException12() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        MessageContext msgContext = new FileMessageContext("testBaseActionFile", "testBaseActionDir");
        Mockingbird.enterRecordingMode();
        logoutAction.addError("testString", "100", msgContext);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(BaseAction.class);
        try {
            logoutAction.addError("testString", 100, msgContext);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddMessageThrowsIllegalStateException() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Mockingbird.enterRecordingMode();
        logoutAction.addMessage("0");
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(IllegalStateException.class));
        Mockingbird.enterTestMode(BaseAction.class);
        try {
            logoutAction.addMessage(0);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddMessageThrowsIllegalStateException1() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Input input = new HibernateFilter((SessionFactory) null);
        Output output = new MapOutput();
        logoutAction.setOutput(output);
        logoutAction.setInput(input);
        try {
            logoutAction.addMessage("testBaseActionMsg_id");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
            assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
            assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testAddMessageThrowsIllegalStateException2() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        MessageContext msgContext = new FileMessageContext("testBaseActionFile");
        Mockingbird.enterRecordingMode();
        logoutAction.addMessage("0", msgContext);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(IllegalStateException.class));
        Mockingbird.enterTestMode(BaseAction.class);
        try {
            logoutAction.addMessage(0, msgContext);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddMessageThrowsIllegalStateException3() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        ClasspathMessageContext msgContext = (ClasspathMessageContext) Mockingbird.getProxyObject(ClasspathMessageContext.class);
        Mockingbird.enterRecordingMode();
        logoutAction.addMessage("15", msgContext);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(IllegalStateException.class));
        Mockingbird.enterTestMode(BaseAction.class);
        try {
            logoutAction.addMessage(15, msgContext);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddMessageThrowsIllegalStateException4() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Output output = new MapOutput();
        logoutAction.setOutput(output);
        Input input = new JpaFilter(new MockEntityManagerFactory());
        logoutAction.setInput(input);
        try {
            logoutAction.addMessage("testBaseActionMsg_id", new ClasspathMessageContext("testBaseActionResource"));
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
            assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
            assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testAddMessageThrowsNullPointerException() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Mockingbird.enterRecordingMode();
        logoutAction.addMessage("1");
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(BaseAction.class);
        try {
            logoutAction.addMessage(1);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddMessageThrowsNullPointerException1() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        try {
            logoutAction.addMessage(100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MessageManager.class, ex);
            assertNull("(LogoutAction) logoutAction.input", ((LogoutAction) logoutAction).input);
            assertNull("(LogoutAction) logoutAction.output", ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testAddMessageThrowsNullPointerException2() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        try {
            logoutAction.addMessage(new DefaultMessage(100, new FileMessageContext("testBaseActionFile")));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MessageManager.class, ex);
        }
    }
    
    public void testAddMessageThrowsNullPointerException3() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Output output = new MapOutput();
        logoutAction.setOutput(output);
        try {
            logoutAction.addMessage("testBaseActionMsg_id");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseAction.class, ex);
            assertNull("(LogoutAction) logoutAction.input", ((LogoutAction) logoutAction).input);
            assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testAddMessageThrowsNullPointerException4() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        try {
            logoutAction.addMessage("testBaseActionMsg_id");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MessageManager.class, ex);
            assertNull("(LogoutAction) logoutAction.input", ((LogoutAction) logoutAction).input);
            assertNull("(LogoutAction) logoutAction.output", ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testAddMessageThrowsNullPointerException5() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        MessageContext msgContext = new ClassMessageContext(new Integer(0));
        Mockingbird.enterRecordingMode();
        logoutAction.addMessage("0", msgContext);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(BaseAction.class);
        try {
            logoutAction.addMessage(0, msgContext);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddMessageThrowsNullPointerException6() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Output output = new MapOutput();
        logoutAction.setOutput(output);
        try {
            logoutAction.addMessage("testBaseActionMsg_id", new FileMessageContext("testBaseActionFile"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseAction.class, ex);
            assertNull("(LogoutAction) logoutAction.input", ((LogoutAction) logoutAction).input);
            assertSame("(LogoutAction) logoutAction.output", output, ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testAddMessageThrowsNullPointerException7() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        try {
            logoutAction.addMessage("testBaseActionMsg_id", new FileMessageContext("testBaseActionFile", "testBaseActionDir"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MessageManager.class, ex);
            assertNull("(LogoutAction) logoutAction.input", ((LogoutAction) logoutAction).input);
            assertNull("(LogoutAction) logoutAction.output", ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testAdhereThrowsClassCastException() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Mockingbird.enterRecordingMode();
        Controller.adhere(logoutAction, LogoutAction.class);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(ClassCastException.class));
        Mockingbird.enterTestMode(BaseAction.class);
        try {
            logoutAction.adhere();
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAdhereThrowsNullPointerException() throws Throwable {
        try {
            new LogoutAction().adhere();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Controller.class, ex);
        }
    }
    
    public void testDisjoinThrowsNullPointerException() throws Throwable {
        try {
            new LogoutAction().disjoin();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Controller.class, ex);
        }
    }
    
    public void testGetErrorsThrowsNullPointerException() throws Throwable {
        BaseAction successAction = new SuccessAction();
        try {
            callPrivateMethod("org.mentawai.core.BaseAction", "getErrors", new Class[] {}, successAction, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MessageManager.class, ex);
        }
    }
    
    public void testGetFieldErrorsThrowsNullPointerException() throws Throwable {
        BaseAction successAction = new SuccessAction();
        try {
            callPrivateMethod("org.mentawai.core.BaseAction", "getFieldErrors", new Class[] {}, successAction, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MessageManager.class, ex);
        }
    }
    
    public void testGetMessageTokensThrowsIllegalStateException() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        Input input = new DIFilter(true);
        logoutAction.setInput(input);
        try {
            logoutAction.getMessageTokens("testBaseActionField");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
            assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
            assertNull("(LogoutAction) logoutAction.output", ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testGetMessageTokensThrowsNullPointerException() throws Throwable {
        Input input = new MapInput();
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setInput(input);
        try {
            logoutAction.getMessageTokens(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseAction.class, ex);
            assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
            assertNull("(LogoutAction) logoutAction.output", ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testGetMessageTokensThrowsNullPointerException1() throws Throwable {
        BaseAction successAction = new SuccessAction();
        try {
            successAction.getMessageTokens("testBaseActionField");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseAction.class, ex);
        }
    }
    
    public void testGetMessageTokensThrowsNullPointerException2() throws Throwable {
        Input input = new MapInput();
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setInput(input);
        try {
            logoutAction.getMessageTokens("testBaseActionField");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseAction.class, ex);
            assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
            assertNull("(LogoutAction) logoutAction.output", ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testGetMessageTokensThrowsNullPointerException3() throws Throwable {
        Map values = new HashMap(100, 100.0F);
        values.put("Cou?ld not convert input to float: ", new Integer(15));
        Input input = new MapInput(values);
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setInput(input);
        try {
            logoutAction.getMessageTokens("testBaseActionField");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseAction.class, ex);
            assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
            assertNull("(LogoutAction) logoutAction.output", ((LogoutAction) logoutAction).output);
        }
    }
    
    public void testGetMessagesThrowsNullPointerException() throws Throwable {
        BaseAction successAction = new SuccessAction();
        try {
            callPrivateMethod("org.mentawai.core.BaseAction", "getMessages", new Class[] {}, successAction, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MessageManager.class, ex);
        }
    }
    
    public void testGetUserSessionThrowsNullPointerException() throws Throwable {
        try {
            new LogoutAction().getUserSession();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testIsLoggedThrowsNullPointerException() throws Throwable {
        try {
            new LogoutAction().isLogged();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testIsPostThrowsIllegalStateException() throws Throwable {
        Input input = new DIFilter();
        BaseAction logoutAction = new LogoutAction();
        logoutAction.setInput(input);
        try {
            logoutAction.isPost();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
            assertSame("(LogoutAction) logoutAction.input", input, ((LogoutAction) logoutAction).input);
        }
    }
    
    public void testIsPostThrowsNullPointerException() throws Throwable {
        BaseAction logoutAction = new LogoutAction();
        try {
            logoutAction.isPost();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseAction.class, ex);
            assertNull("(LogoutAction) logoutAction.input", ((LogoutAction) logoutAction).input);
        }
    }
}

