/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 7:31:23 PM
 * Time to generate: 01:44.115 seconds
 *
 */

package org.mentawai.core;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.agitar.mock.servlet.MockHttpServletResponse;
import org.agitar.mock.servlet.MockServletContext;

public class ScriptApplicationManagerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ScriptApplicationManager.class;
    }
    
    public void testRunScriptWithAggressiveMocks() throws Throwable {
        ScriptApplicationManager scriptApplicationManager = (ScriptApplicationManager) Mockingbird.getProxyObject(ScriptApplicationManager.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Map map3 = (Map) Mockingbird.getProxyObject(Map.class);
        scriptApplicationManager.file = null;
        setPrivateField(scriptApplicationManager, "actions", map);
        setPrivateField(scriptApplicationManager, "innerActions", map2);
        setPrivateField(scriptApplicationManager, "globalFilters", list);
        setPrivateField(scriptApplicationManager, "globalFiltersLast", list2);
        setPrivateField(scriptApplicationManager, "globalConsequences", map3);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(scriptApplicationManager.getScriptName(), "");
        Mockingbird.setReturnValue(false, scriptApplicationManager, "getFilename", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(File.class));
        Mockingbird.setReturnValue(false, map, "clear", "()void", null, 1);
        Mockingbird.setReturnValue(false, map2, "clear", "()void", null, 1);
        Mockingbird.setReturnValue(false, list, "clear", "()void", null, 1);
        Mockingbird.setReturnValue(false, list2, "clear", "()void", null, 1);
        Mockingbird.setReturnValue(false, map3, "clear", "()void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(ScriptApplicationManager.class, true), "runScript", "(java.lang.String,org.mentawai.core.Context)void", null, 1);
        Mockingbird.enterTestMode(ScriptApplicationManager.class);
        scriptApplicationManager.runScript(null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testService() throws Throwable {
        HttpServletRequest req = new MockServletContext().createHttpServletRequest("testScriptApplicationManagerParam1");
        ScriptApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.setReloadMode(false);
        HttpServletResponse res = new MockServletContext().createHttpServletResponse();
        bshApplicationManager.service(new MapContext(new HashMap(100, 100.0F)), req, res);
        assertEquals("(MockHttpServletResponse) res", "text/html; charset=UTF-8", ((MockHttpServletResponse) res).getContentType());
        assertEquals("(MockHttpServletResponse) res", "UTF-8", ((MockHttpServletResponse) res).getCharacterEncoding());
    }
    
    public void testServiceWithAggressiveMocks() throws Throwable {
        ScriptApplicationManager scriptApplicationManager = (ScriptApplicationManager) Mockingbird.getProxyObject(ScriptApplicationManager.class, true);
        scriptApplicationManager.setReloadMode(true);
        scriptApplicationManager.file = null;
        setPrivateField(scriptApplicationManager, "ts", new Long(1L));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(scriptApplicationManager.getScriptName(), "");
        Mockingbird.setReturnValue(false, scriptApplicationManager, "getFilename", "(java.lang.String)java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "lastModified", "()long", new Object[] {}, new Long(1L), 1);
        Mockingbird.enterTestMode(ScriptApplicationManager.class);
        scriptApplicationManager.service(null, null, null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetReloadMode() throws Throwable {
        ScriptApplicationManager bshApplicationManager = new BshApplicationManager();
        bshApplicationManager.setReloadMode(true);
        assertTrue("(BshApplicationManager) bshApplicationManager.reload", ((BshApplicationManager) bshApplicationManager).reload);
    }
    
    public void testGetFilenameThrowsNullPointerException() throws Throwable {
        ScriptApplicationManager bshApplicationManager = new BshApplicationManager();
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(ScriptApplicationManager.getRealPath(), null);
        Mockingbird.enterTestMode(ScriptApplicationManager.class);
        try {
            bshApplicationManager.getFilename("testScriptApplicationManagerScript");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(StringBuffer.class, ex);
        }
    }
    
    public void testInitScriptFileThrowsNullPointerException() throws Throwable {
        ScriptApplicationManager bshApplicationManager = new BshApplicationManager();
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(bshApplicationManager.getFilename("ApplicationManager.bsh"), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(ScriptApplicationManager.class);
        try {
            callPrivateMethod("org.mentawai.core.ScriptApplicationManager", "initScriptFile", new Class[] {}, bshApplicationManager, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testRunScriptThrowsNullPointerException() throws Throwable {
        ScriptApplicationManager bshApplicationManager = new BshApplicationManager();
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(bshApplicationManager.getFilename("ApplicationManager.bsh"), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(ScriptApplicationManager.class);
        try {
            bshApplicationManager.runScript(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testServiceThrowsNullPointerException() throws Throwable {
        ScriptApplicationManager bshApplicationManager = new BshApplicationManager();
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest req = mockServletContext.createHttpServletRequest("testScriptApplicationManagerParam1");
        HttpServletResponse res = mockServletContext.createHttpServletResponse();
        Context appContext = new MapContext();
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(bshApplicationManager.getFilename("ApplicationManager.bsh"), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(ScriptApplicationManager.class);
        try {
            bshApplicationManager.service(appContext, req, res);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("(MockHttpServletResponse) res", "text/html; charset=UTF-8", ((MockHttpServletResponse) res).getContentType());
            assertEquals("(MockHttpServletResponse) res", "UTF-8", ((MockHttpServletResponse) res).getCharacterEncoding());
        }
    }
    
    public void testServiceThrowsThrowableWithAggressiveMocks() throws Throwable {
        ScriptApplicationManager scriptApplicationManager = (ScriptApplicationManager) Mockingbird.getProxyObject(ScriptApplicationManager.class, true);
        scriptApplicationManager.setReloadMode(true);
        setPrivateField(scriptApplicationManager, "ts", new Long(1L));
        scriptApplicationManager.file = null;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, scriptApplicationManager, "initScriptFile", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(ScriptApplicationManager.class);
        try {
            scriptApplicationManager.service(null, null, null);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ScriptApplicationManager.class, ex);
        }
    }
}

