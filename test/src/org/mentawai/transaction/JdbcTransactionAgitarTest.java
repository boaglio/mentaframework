/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 5:49:09 PM
 * Time to generate: 00:17.573 seconds
 *
 */

package org.mentawai.transaction;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.sql.Connection;

public class JdbcTransactionAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return JdbcTransaction.class;
    }
    
    public void testConstructor() throws Throwable {
        JdbcTransaction jdbcTransaction = new JdbcTransaction(null);
        assertNull("jdbcTransaction.conn", getPrivateField(jdbcTransaction, "conn"));
        assertFalse("jdbcTransaction.wasCommited()", jdbcTransaction.wasCommited());
        assertFalse("jdbcTransaction.wasRolledBack()", jdbcTransaction.wasRolledBack());
        assertFalse("jdbcTransaction.isActive()", jdbcTransaction.isActive());
    }
    
    public void testConstructor1() throws Throwable {
        JdbcTransaction jdbcTransaction = new JdbcTransaction();
        assertFalse("jdbcTransaction.wasCommited()", jdbcTransaction.wasCommited());
        assertFalse("jdbcTransaction.wasRolledBack()", jdbcTransaction.wasRolledBack());
        assertFalse("jdbcTransaction.isActive()", jdbcTransaction.isActive());
    }
    
    public void testBegin() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcTransaction jdbcTransaction = new JdbcTransaction(conn);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(conn.getAutoCommit(), false);
        conn.setAutoCommit(false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcTransaction.class);
        jdbcTransaction.begin();
        assertTrue("jdbcTransaction.isActive()", jdbcTransaction.isActive());
        assertSame("jdbcTransaction.conn", conn, getPrivateField(jdbcTransaction, "conn"));
        assertFalse("jdbcTransaction.oldAutoCommit", ((Boolean) getPrivateField(jdbcTransaction, "oldAutoCommit")).booleanValue());
    }
    
    public void testCommit() throws Throwable {
        JdbcTransaction jdbcTransaction = new JdbcTransaction(null);
        jdbcTransaction.commit();
        jdbcTransaction.commit();
        assertNull("jdbcTransaction.conn", getPrivateField(jdbcTransaction, "conn"));
        assertTrue("jdbcTransaction.wasCommited()", jdbcTransaction.wasCommited());
        assertFalse("jdbcTransaction.isActive()", jdbcTransaction.isActive());
    }
    
    public void testCommit1() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcTransaction jdbcTransaction = new JdbcTransaction(conn);
        Mockingbird.enterRecordingMode();
        conn.setAutoCommit(false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcTransaction.class);
        jdbcTransaction.commit();
        assertTrue("jdbcTransaction.wasCommited()", jdbcTransaction.wasCommited());
        assertSame("jdbcTransaction.conn", conn, getPrivateField(jdbcTransaction, "conn"));
        assertFalse("jdbcTransaction.isActive()", jdbcTransaction.isActive());
    }
    
    public void testCommit2() throws Throwable {
        JdbcTransaction jdbcTransaction = new JdbcTransaction(null);
        jdbcTransaction.commit();
        assertTrue("jdbcTransaction.wasCommited()", jdbcTransaction.wasCommited());
        assertNull("jdbcTransaction.conn", getPrivateField(jdbcTransaction, "conn"));
        assertFalse("jdbcTransaction.isActive()", jdbcTransaction.isActive());
    }
    
    public void testCommit3() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcTransaction jdbcTransaction = new JdbcTransaction(conn);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(conn.getAutoCommit(), false);
        conn.setAutoCommit(false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcTransaction.class);
        jdbcTransaction.begin();
        Mockingbird.enterRecordingMode();
        conn.commit();
        Mockingbird.setNormalReturnForVoid();
        conn.setAutoCommit(false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcTransaction.class);
        jdbcTransaction.commit();
        assertFalse("jdbcTransaction.isActive()", jdbcTransaction.isActive());
        assertTrue("jdbcTransaction.wasCommited()", jdbcTransaction.wasCommited());
        assertSame("jdbcTransaction.conn", conn, getPrivateField(jdbcTransaction, "conn"));
    }
    
    public void testCommit4() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcTransaction jdbcTransaction = new JdbcTransaction(conn);
        Mockingbird.enterRecordingMode();
        conn.setAutoCommit(false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcTransaction.class);
        jdbcTransaction.commit();
        Mockingbird.enterRecordingMode();
        conn.setAutoCommit(false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcTransaction.class);
        jdbcTransaction.commit();
        assertSame("jdbcTransaction.conn", conn, getPrivateField(jdbcTransaction, "conn"));
        assertTrue("jdbcTransaction.wasCommited()", jdbcTransaction.wasCommited());
        assertFalse("jdbcTransaction.isActive()", jdbcTransaction.isActive());
    }
    
    public void testIsActive() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcTransaction jdbcTransaction = new JdbcTransaction(conn);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(conn.getAutoCommit(), false);
        conn.setAutoCommit(false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcTransaction.class);
        jdbcTransaction.begin();
        boolean result = jdbcTransaction.isActive();
        assertTrue("result", result);
    }
    
    public void testIsActive1() throws Throwable {
        JdbcTransaction jdbcTransaction = new JdbcTransaction((Connection) Mockingbird.getProxyObject(Connection.class));
        Mockingbird.enterTestMode(JdbcTransaction.class);
        boolean result = jdbcTransaction.isActive();
        assertFalse("result", result);
    }
    
    public void testRollback() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcTransaction jdbcTransaction = new JdbcTransaction(conn);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(conn.getAutoCommit(), false);
        conn.setAutoCommit(false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcTransaction.class);
        jdbcTransaction.begin();
        Mockingbird.enterRecordingMode();
        conn.rollback();
        Mockingbird.setNormalReturnForVoid();
        conn.setAutoCommit(false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcTransaction.class);
        jdbcTransaction.rollback();
        assertFalse("jdbcTransaction.isActive()", jdbcTransaction.isActive());
        assertTrue("jdbcTransaction.wasRolledBack()", jdbcTransaction.wasRolledBack());
        assertSame("jdbcTransaction.conn", conn, getPrivateField(jdbcTransaction, "conn"));
    }
    
    public void testRollback1() throws Throwable {
        JdbcTransaction jdbcTransaction = new JdbcTransaction(null);
        jdbcTransaction.rollback();
        jdbcTransaction.rollback();
        assertNull("jdbcTransaction.conn", getPrivateField(jdbcTransaction, "conn"));
        assertTrue("jdbcTransaction.wasRolledBack()", jdbcTransaction.wasRolledBack());
        assertFalse("jdbcTransaction.isActive()", jdbcTransaction.isActive());
    }
    
    public void testRollback2() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcTransaction jdbcTransaction = new JdbcTransaction(conn);
        Mockingbird.enterRecordingMode();
        conn.setAutoCommit(false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcTransaction.class);
        jdbcTransaction.rollback();
        Mockingbird.enterRecordingMode();
        conn.setAutoCommit(false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcTransaction.class);
        jdbcTransaction.rollback();
        assertSame("jdbcTransaction.conn", conn, getPrivateField(jdbcTransaction, "conn"));
        assertTrue("jdbcTransaction.wasRolledBack()", jdbcTransaction.wasRolledBack());
        assertFalse("jdbcTransaction.isActive()", jdbcTransaction.isActive());
    }
    
    public void testRollback3() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcTransaction jdbcTransaction = new JdbcTransaction(conn);
        Mockingbird.enterRecordingMode();
        conn.setAutoCommit(false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcTransaction.class);
        jdbcTransaction.rollback();
        assertTrue("jdbcTransaction.wasRolledBack()", jdbcTransaction.wasRolledBack());
        assertSame("jdbcTransaction.conn", conn, getPrivateField(jdbcTransaction, "conn"));
        assertFalse("jdbcTransaction.isActive()", jdbcTransaction.isActive());
    }
    
    public void testRollback4() throws Throwable {
        JdbcTransaction jdbcTransaction = new JdbcTransaction(null);
        jdbcTransaction.rollback();
        assertTrue("jdbcTransaction.wasRolledBack()", jdbcTransaction.wasRolledBack());
        assertNull("jdbcTransaction.conn", getPrivateField(jdbcTransaction, "conn"));
        assertFalse("jdbcTransaction.isActive()", jdbcTransaction.isActive());
    }
    
    public void testSetConnection() throws Throwable {
        JdbcTransaction jdbcTransaction = new JdbcTransaction();
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterTestMode(JdbcTransaction.class);
        jdbcTransaction.setConnection(conn);
        assertSame("jdbcTransaction.conn", conn, getPrivateField(jdbcTransaction, "conn"));
    }
    
    public void testWasCommited() throws Throwable {
        JdbcTransaction jdbcTransaction = new JdbcTransaction((Connection) Mockingbird.getProxyObject(Connection.class));
        Mockingbird.enterTestMode(JdbcTransaction.class);
        boolean result = jdbcTransaction.wasCommited();
        assertFalse("result", result);
    }
    
    public void testWasCommited1() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcTransaction jdbcTransaction = new JdbcTransaction(conn);
        Mockingbird.enterRecordingMode();
        conn.setAutoCommit(false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcTransaction.class);
        jdbcTransaction.commit();
        boolean result = jdbcTransaction.wasCommited();
        assertTrue("result", result);
    }
    
    public void testWasRolledBack() throws Throwable {
        JdbcTransaction jdbcTransaction = new JdbcTransaction((Connection) Mockingbird.getProxyObject(Connection.class));
        Mockingbird.enterTestMode(JdbcTransaction.class);
        boolean result = jdbcTransaction.wasRolledBack();
        assertFalse("result", result);
    }
    
    public void testWasRolledBack1() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcTransaction jdbcTransaction = new JdbcTransaction(conn);
        Mockingbird.enterRecordingMode();
        conn.setAutoCommit(false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcTransaction.class);
        jdbcTransaction.rollback();
        boolean result = jdbcTransaction.wasRolledBack();
        assertTrue("result", result);
    }
    
    public void testBeginThrowsIllegalStateException() throws Throwable {
        JdbcTransaction jdbcTransaction = new JdbcTransaction(null);
        try {
            jdbcTransaction.begin();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "JdbcTransaction does not have a connection!", ex.getMessage());
            assertThrownBy(JdbcTransaction.class, ex);
            assertNull("jdbcTransaction.conn", getPrivateField(jdbcTransaction, "conn"));
            assertFalse("jdbcTransaction.isActive()", jdbcTransaction.isActive());
            assertFalse("jdbcTransaction.oldAutoCommit", ((Boolean) getPrivateField(jdbcTransaction, "oldAutoCommit")).booleanValue());
        }
    }
    
    public void testBeginThrowsIllegalStateException1() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcTransaction jdbcTransaction = new JdbcTransaction(conn);
        Mockingbird.enterRecordingMode();
        conn.setAutoCommit(false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcTransaction.class);
        jdbcTransaction.rollback();
        try {
            jdbcTransaction.begin();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Cannot begin transaction again!", ex.getMessage());
            assertThrownBy(JdbcTransaction.class, ex);
            assertSame("jdbcTransaction.conn", conn, getPrivateField(jdbcTransaction, "conn"));
            assertFalse("jdbcTransaction.isActive()", jdbcTransaction.isActive());
            assertFalse("jdbcTransaction.oldAutoCommit", ((Boolean) getPrivateField(jdbcTransaction, "oldAutoCommit")).booleanValue());
        }
    }
    
    public void testBeginThrowsIllegalStateException2() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcTransaction jdbcTransaction = new JdbcTransaction(conn);
        Mockingbird.enterRecordingMode();
        conn.setAutoCommit(false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcTransaction.class);
        jdbcTransaction.commit();
        try {
            jdbcTransaction.begin();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Cannot begin transaction again!", ex.getMessage());
            assertThrownBy(JdbcTransaction.class, ex);
            assertSame("jdbcTransaction.conn", conn, getPrivateField(jdbcTransaction, "conn"));
            assertFalse("jdbcTransaction.isActive()", jdbcTransaction.isActive());
            assertFalse("jdbcTransaction.oldAutoCommit", ((Boolean) getPrivateField(jdbcTransaction, "oldAutoCommit")).booleanValue());
        }
    }
    
    public void testBeginThrowsIllegalStateException3() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcTransaction jdbcTransaction = new JdbcTransaction(conn);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(conn.getAutoCommit(), false);
        conn.setAutoCommit(false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcTransaction.class);
        jdbcTransaction.begin();
        try {
            jdbcTransaction.begin();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Cannot begin transaction again!", ex.getMessage());
            assertThrownBy(JdbcTransaction.class, ex);
            assertSame("jdbcTransaction.conn", conn, getPrivateField(jdbcTransaction, "conn"));
            assertTrue("jdbcTransaction.isActive()", jdbcTransaction.isActive());
            assertFalse("jdbcTransaction.oldAutoCommit", ((Boolean) getPrivateField(jdbcTransaction, "oldAutoCommit")).booleanValue());
        }
    }
    
    public void testCommitThrowsIllegalStateException() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcTransaction jdbcTransaction = new JdbcTransaction(conn);
        Mockingbird.enterRecordingMode();
        conn.setAutoCommit(false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcTransaction.class);
        jdbcTransaction.rollback();
        try {
            jdbcTransaction.commit();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Tried to commit but transaction is already rolledback!", ex.getMessage());
            assertThrownBy(JdbcTransaction.class, ex);
            assertSame("jdbcTransaction.conn", conn, getPrivateField(jdbcTransaction, "conn"));
            assertFalse("jdbcTransaction.wasCommited()", jdbcTransaction.wasCommited());
            assertFalse("jdbcTransaction.isActive()", jdbcTransaction.isActive());
        }
    }
    
    public void testRollbackThrowsIllegalStateException() throws Throwable {
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        JdbcTransaction jdbcTransaction = new JdbcTransaction(conn);
        Mockingbird.enterRecordingMode();
        conn.setAutoCommit(false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JdbcTransaction.class);
        jdbcTransaction.commit();
        try {
            jdbcTransaction.rollback();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Tried to rollback but transaction is already commited!", ex.getMessage());
            assertThrownBy(JdbcTransaction.class, ex);
            assertSame("jdbcTransaction.conn", conn, getPrivateField(jdbcTransaction, "conn"));
            assertFalse("jdbcTransaction.wasRolledBack()", jdbcTransaction.wasRolledBack());
            assertFalse("jdbcTransaction.isActive()", jdbcTransaction.isActive());
        }
    }
}

