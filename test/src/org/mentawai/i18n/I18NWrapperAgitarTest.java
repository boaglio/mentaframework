/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:22:09 PM
 * Time to generate: 00:49.450 seconds
 *
 */

package org.mentawai.i18n;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.zip.ZipFile;

public class I18NWrapperAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return I18NWrapper.class;
    }
    
    public void testConstructor() throws Throwable {
        I18NWrapper i18NWrapper = new I18NWrapper("testI18NWrapperResource");
        assertEquals("i18NWrapper.resource", "testI18NWrapperResource", getPrivateField(i18NWrapper, "resource"));
        assertEquals("i18NWrapper.lm", 0L, ((Number) getPrivateField(i18NWrapper, "lm")).longValue());
        assertNull("i18NWrapper.file", getPrivateField(i18NWrapper, "file"));
        assertEquals("i18NWrapper.ts", 0L, ((Number) getPrivateField(i18NWrapper, "ts")).longValue());
        assertNull("i18NWrapper.i18n", getPrivateField(i18NWrapper, "i18n"));
    }
    
    public void testConstructor1() throws Throwable {
        File file = new File((File) null, "testI18NWrapperParam2");
        I18NWrapper i18NWrapper = new I18NWrapper(file);
        assertNull("i18NWrapper.resource", getPrivateField(i18NWrapper, "resource"));
        assertEquals("i18NWrapper.lm", 0L, ((Number) getPrivateField(i18NWrapper, "lm")).longValue());
        assertSame("i18NWrapper.file", file, getPrivateField(i18NWrapper, "file"));
        assertEquals("i18NWrapper.ts", 0L, ((Number) getPrivateField(i18NWrapper, "ts")).longValue());
        assertNull("i18NWrapper.i18n", getPrivateField(i18NWrapper, "i18n"));
    }
    
    public void testGetI18N() throws Throwable {
        I18NWrapper i18NWrapper = new I18NWrapper(new File("testI18NWrapperParam1"));
        i18NWrapper.getI18N();
        I18N result = i18NWrapper.getI18N();
        assertNull("result", result);
    }
    
    public void testGetI18N1() throws Throwable {
        File file = new File("testI18NWrapperParam1");
        I18NWrapper i18NWrapper = new I18NWrapper(file);
        I18N result = i18NWrapper.getI18N();
        assertNull("result", result);
        assertSame("i18NWrapper.file", file, getPrivateField(i18NWrapper, "file"));
        assertNull("i18NWrapper.i18n", getPrivateField(i18NWrapper, "i18n"));
    }
    
    public void testGetI18NWithAggressiveMocks() throws Throwable {
        I18NWrapper i18NWrapper = (I18NWrapper) Mockingbird.getProxyObject(I18NWrapper.class, true);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", properties);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(i18NWrapper, "file", file);
        setPrivateField(i18NWrapper, "resource", "");
        setPrivateField(i18NWrapper, "i18n", null);
        Mockingbird.setException(false, properties, "load", "(java.io.InputStream)void", iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setException(false, Mockingbird.getProxyObject(InputStream.class), "close", "()void", (Throwable) Mockingbird.getProxyObject(IOException.class), 1);
        Mockingbird.enterTestMode(I18NWrapper.class);
        I18N result = i18NWrapper.getI18N();
        assertNull("result", result);
        assertEquals("i18NWrapper.lm", 0L, ((Number) getPrivateField(i18NWrapper, "lm")).longValue());
        assertEquals("i18NWrapper.ts", 0L, ((Number) getPrivateField(i18NWrapper, "ts")).longValue());
        assertEquals("i18NWrapper.file.getPath()", "", ((File) getPrivateField(i18NWrapper, "file")).getPath());
        assertNull("i18NWrapper.i18n", getPrivateField(i18NWrapper, "i18n"));
    }
    
    public void testGetI18NWithAggressiveMocks1() throws Throwable {
        storeStaticField(I18NWrapper.class, "TIME");
        I18NWrapper i18NWrapper = (I18NWrapper) Mockingbird.getProxyObject(I18NWrapper.class, true);
        File file = (File) Mockingbird.getProxyObject(File.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        IOException iOException2 = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(i18NWrapper, "ts", new Long(1L));
        setPrivateField(i18NWrapper, "i18n", Mockingbird.getProxyObject(I18N.class));
        setPrivateField(i18NWrapper, "file", file);
        setPrivateField(i18NWrapper, "resource", null);
        setPrivateField(i18NWrapper, "lm", new Long(1L));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        setPrivateField(I18NWrapper.class, "TIME", new Long(-2L));
        Mockingbird.setReturnValue(false, file, "lastModified", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, file, "lastModified", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", properties);
        Mockingbird.setReturnValue(false, properties, "load", "(java.io.InputStream)void", new Object[] {fileInputStream}, null, 1);
        Mockingbird.setException(false, fileInputStream, "close", "()void", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setException(false, fileInputStream, "close", "()void", new Object[] {}, iOException2, 1);
        Mockingbird.enterTestMode(I18NWrapper.class);
        I18N result = i18NWrapper.getI18N();
        assertNotNull("result", result);
        assertEquals("i18NWrapper.lm", 1L, ((Number) getPrivateField(i18NWrapper, "lm")).longValue());
        assertEquals("i18NWrapper.ts", 0L, ((Number) getPrivateField(i18NWrapper, "ts")).longValue());
        assertEquals("i18NWrapper.file.getPath()", "", ((File) getPrivateField(i18NWrapper, "file")).getPath());
        assertNotNull("i18NWrapper.i18n", getPrivateField(i18NWrapper, "i18n"));
    }
    
    public void testGetI18NWithAggressiveMocks2() throws Throwable {
        I18NWrapper i18NWrapper = (I18NWrapper) Mockingbird.getProxyObject(I18NWrapper.class, true);
        setPrivateField(i18NWrapper, "file", Mockingbird.getProxyObject(File.class));
        setPrivateField(i18NWrapper, "i18n", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, i18NWrapper, "needsUpdate", "(boolean)boolean", new Object[] {new Integer(1)}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, i18NWrapper, "needsUpdate", "(boolean)boolean", new Object[] {new Integer(0)}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(I18NWrapper.class);
        I18N result = i18NWrapper.getI18N();
        assertNull("result", result);
    }
    
    public void testLoadFromClasspathWithAggressiveMocks() throws Throwable {
        I18NWrapper i18NWrapper = (I18NWrapper) Mockingbird.getProxyObject(I18NWrapper.class, true);
        Mockingbird.enterRecordingMode();
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", properties);
        setPrivateField(i18NWrapper, "resource", "");
        Mockingbird.setReturnValue(false, properties, "load", "(java.io.InputStream)void", null, 1);
        Mockingbird.replaceObjectForRecording(I18N.class, "<init>(java.util.Properties)", Mockingbird.getProxyObject(I18N.class));
        Mockingbird.setException(false, Mockingbird.getProxyObject(InputStream.class), "close", "()void", (Throwable) Mockingbird.getProxyObject(IOException.class), 1);
        Mockingbird.enterTestMode(I18NWrapper.class);
        callPrivateMethod("org.mentawai.i18n.I18NWrapper", "loadFromClasspath", new Class[] {}, i18NWrapper, new Object[] {});
        assertNotNull("i18NWrapper.i18n", getPrivateField(i18NWrapper, "i18n"));
    }
    
    public void testLoadFromClasspathWithAggressiveMocks1() throws Throwable {
        I18NWrapper i18NWrapper = (I18NWrapper) Mockingbird.getProxyObject(I18NWrapper.class, true);
        Mockingbird.enterRecordingMode();
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", properties);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(i18NWrapper, "resource", "");
        Mockingbird.setException(false, properties, "load", "(java.io.InputStream)void", iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(InputStream.class), "close", "()void", null, 1);
        Mockingbird.enterTestMode(I18NWrapper.class);
        callPrivateMethod("org.mentawai.i18n.I18NWrapper", "loadFromClasspath", new Class[] {}, i18NWrapper, new Object[] {});
        assertNull("i18NWrapper.i18n", getPrivateField(i18NWrapper, "i18n"));
    }
    
    public void testNeedsUpdate() throws Throwable {
        I18NWrapper i18NWrapper = new I18NWrapper((String) null);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.i18n.I18NWrapper", "needsUpdate", new Class[] {boolean.class}, i18NWrapper, new Object[] {Boolean.TRUE})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testNeedsUpdate1() throws Throwable {
        I18NWrapper i18NWrapper = new I18NWrapper((String) null);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.i18n.I18NWrapper", "needsUpdate", new Class[] {boolean.class}, i18NWrapper, new Object[] {Boolean.FALSE})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testNeedsUpdate2() throws Throwable {
        I18NWrapper i18NWrapper = new I18NWrapper(new File("testI18NWrapperParam1"));
        i18NWrapper.getI18N();
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.i18n.I18NWrapper", "needsUpdate", new Class[] {boolean.class}, i18NWrapper, new Object[] {Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testNeedsUpdate3() throws Throwable {
        I18NWrapper i18NWrapper = new I18NWrapper("testI18NWrapperResource");
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.i18n.I18NWrapper", "needsUpdate", new Class[] {boolean.class}, i18NWrapper, new Object[] {Boolean.TRUE})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testNeedsUpdateWithAggressiveMocks() throws Throwable {
        I18NWrapper i18NWrapper = (I18NWrapper) Mockingbird.getProxyObject(I18NWrapper.class, true);
        File file = (File) Mockingbird.getProxyObject(File.class);
        setPrivateField(i18NWrapper, "resource", null);
        setPrivateField(i18NWrapper, "i18n", Mockingbird.getProxyObject(I18N.class));
        setPrivateField(i18NWrapper, "file", file);
        setPrivateField(i18NWrapper, "lm", new Long(0L));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, file, "lastModified", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.enterTestMode(I18NWrapper.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.i18n.I18NWrapper", "needsUpdate", new Class[] {boolean.class}, i18NWrapper, new Object[] {Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
        assertEquals("i18NWrapper.file.getPath()", "", ((File) getPrivateField(i18NWrapper, "file")).getPath());
        assertEquals("i18NWrapper.ts", 0L, ((Number) getPrivateField(i18NWrapper, "ts")).longValue());
    }
    
    public void testReloadFromFile() throws Throwable {
        File file = new File("testI18NWrapperParam1");
        I18NWrapper i18NWrapper = new I18NWrapper(file);
        callPrivateMethod("org.mentawai.i18n.I18NWrapper", "reloadFromFile", new Class[] {}, i18NWrapper, new Object[] {});
        assertSame("i18NWrapper.file", file, getPrivateField(i18NWrapper, "file"));
        assertNull("i18NWrapper.i18n", getPrivateField(i18NWrapper, "i18n"));
    }
    
    public void testReloadFromFileWithAggressiveMocks() throws Throwable {
        I18NWrapper i18NWrapper = (I18NWrapper) Mockingbird.getProxyObject(I18NWrapper.class, true);
        File file = (File) Mockingbird.getProxyObject(File.class);
        setPrivateField(i18NWrapper, "file", file);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(I18NWrapper.class);
        callPrivateMethod("org.mentawai.i18n.I18NWrapper", "reloadFromFile", new Class[] {}, i18NWrapper, new Object[] {});
        assertEquals("i18NWrapper.lm", 0L, ((Number) getPrivateField(i18NWrapper, "lm")).longValue());
        assertEquals("i18NWrapper.file.getPath()", "", ((File) getPrivateField(i18NWrapper, "file")).getPath());
        assertNull("i18NWrapper.i18n", getPrivateField(i18NWrapper, "i18n"));
    }
    
    public void testReloadFromFileWithAggressiveMocks1() throws Throwable {
        I18NWrapper i18NWrapper = (I18NWrapper) Mockingbird.getProxyObject(I18NWrapper.class, true);
        File file = (File) Mockingbird.getProxyObject(File.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(i18NWrapper, "file", file);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", properties);
        Mockingbird.setReturnValue(false, properties, "load", "(java.io.InputStream)void", new Object[] {fileInputStream}, null, 1);
        Mockingbird.setReturnValue(false, fileInputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, file, "lastModified", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.replaceObjectForRecording(I18N.class, "<init>(java.util.Properties)", Mockingbird.getProxyObject(I18N.class));
        Mockingbird.setException(false, fileInputStream, "close", "()void", new Object[] {}, iOException, 1);
        Mockingbird.enterTestMode(I18NWrapper.class);
        callPrivateMethod("org.mentawai.i18n.I18NWrapper", "reloadFromFile", new Class[] {}, i18NWrapper, new Object[] {});
        assertEquals("i18NWrapper.lm", 0L, ((Number) getPrivateField(i18NWrapper, "lm")).longValue());
        assertEquals("i18NWrapper.file.getPath()", "", ((File) getPrivateField(i18NWrapper, "file")).getPath());
        assertNotNull("i18NWrapper.i18n", getPrivateField(i18NWrapper, "i18n"));
    }
    
    public void testReloadFromFileWithAggressiveMocks2() throws Throwable {
        I18NWrapper i18NWrapper = (I18NWrapper) Mockingbird.getProxyObject(I18NWrapper.class, true);
        File file = (File) Mockingbird.getProxyObject(File.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(i18NWrapper, "file", file);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", properties);
        Mockingbird.setReturnValue(false, properties, "load", "(java.io.InputStream)void", new Object[] {fileInputStream}, null, 1);
        Mockingbird.setException(false, fileInputStream, "close", "()void", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, fileInputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(I18NWrapper.class);
        callPrivateMethod("org.mentawai.i18n.I18NWrapper", "reloadFromFile", new Class[] {}, i18NWrapper, new Object[] {});
        assertEquals("i18NWrapper.lm", 0L, ((Number) getPrivateField(i18NWrapper, "lm")).longValue());
        assertEquals("i18NWrapper.file.getPath()", "", ((File) getPrivateField(i18NWrapper, "file")).getPath());
        assertNull("i18NWrapper.i18n", getPrivateField(i18NWrapper, "i18n"));
    }
    
    public void testReloadFromFileWithAggressiveMocks3() throws Throwable {
        I18NWrapper i18NWrapper = (I18NWrapper) Mockingbird.getProxyObject(I18NWrapper.class, true);
        File file = (File) Mockingbird.getProxyObject(File.class);
        setPrivateField(i18NWrapper, "file", file);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", properties);
        Mockingbird.setReturnValue(false, properties, "load", "(java.io.InputStream)void", new Object[] {fileInputStream}, null, 1);
        Mockingbird.setReturnValue(false, fileInputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, file, "lastModified", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.replaceObjectForRecording(I18N.class, "<init>(java.util.Properties)", Mockingbird.getProxyObject(I18N.class));
        Mockingbird.setReturnValue(false, fileInputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(I18NWrapper.class);
        callPrivateMethod("org.mentawai.i18n.I18NWrapper", "reloadFromFile", new Class[] {}, i18NWrapper, new Object[] {});
        assertEquals("i18NWrapper.lm", 0L, ((Number) getPrivateField(i18NWrapper, "lm")).longValue());
        assertEquals("i18NWrapper.file.getPath()", "", ((File) getPrivateField(i18NWrapper, "file")).getPath());
        assertNotNull("i18NWrapper.i18n", getPrivateField(i18NWrapper, "i18n"));
    }
    
    public void testReloadFromFileWithAggressiveMocks4() throws Throwable {
        I18NWrapper i18NWrapper = (I18NWrapper) Mockingbird.getProxyObject(I18NWrapper.class, true);
        File file = (File) Mockingbird.getProxyObject(File.class);
        FileNotFoundException fileNotFoundException = (FileNotFoundException) Mockingbird.getProxyObject(FileNotFoundException.class);
        setPrivateField(i18NWrapper, "file", file);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setConstructorForException(FileInputStream.class, "<init>(java.io.File)", fileNotFoundException);
        Mockingbird.setReturnValue(false, fileNotFoundException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(I18NWrapper.class);
        callPrivateMethod("org.mentawai.i18n.I18NWrapper", "reloadFromFile", new Class[] {}, i18NWrapper, new Object[] {});
        assertEquals("i18NWrapper.lm", 0L, ((Number) getPrivateField(i18NWrapper, "lm")).longValue());
        assertEquals("i18NWrapper.file.getPath()", "", ((File) getPrivateField(i18NWrapper, "file")).getPath());
        assertNull("i18NWrapper.i18n", getPrivateField(i18NWrapper, "i18n"));
    }
    
    public void testGetI18NThrowsNullPointerException() throws Throwable {
        I18NWrapper i18NWrapper = new I18NWrapper((String) null);
        try {
            i18NWrapper.getI18N();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(I18NWrapper.class, ex);
            assertEquals("i18NWrapper.lm", 0L, ((Number) getPrivateField(i18NWrapper, "lm")).longValue());
            assertNull("i18NWrapper.file", getPrivateField(i18NWrapper, "file"));
            assertNull("i18NWrapper.i18n", getPrivateField(i18NWrapper, "i18n"));
        }
    }
    
    public void testGetI18NThrowsNullPointerException1() throws Throwable {
        I18NWrapper i18NWrapper = new I18NWrapper("testI18NWrapperResource");
        try {
            i18NWrapper.getI18N();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(I18NWrapper.class, ex);
            assertEquals("i18NWrapper.lm", 0L, ((Number) getPrivateField(i18NWrapper, "lm")).longValue());
            assertEquals("i18NWrapper.ts", 0L, ((Number) getPrivateField(i18NWrapper, "ts")).longValue());
            assertNull("i18NWrapper.file", getPrivateField(i18NWrapper, "file"));
            assertNull("i18NWrapper.i18n", getPrivateField(i18NWrapper, "i18n"));
        }
    }
    
    public void testLoadFromClasspathThrowsNullPointerException1() throws Throwable {
        I18NWrapper i18NWrapper = new I18NWrapper("testI18NWrapperResource");
        try {
            callPrivateMethod("org.mentawai.i18n.I18NWrapper", "loadFromClasspath", new Class[] {}, i18NWrapper, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNull("i18NWrapper.i18n", getPrivateField(i18NWrapper, "i18n"));
        }
    }
    
    public void testReloadFromFileThrowsNullPointerException() throws Throwable {
        I18NWrapper i18NWrapper = new I18NWrapper("testI18NWrapperResource");
        try {
            callPrivateMethod("org.mentawai.i18n.I18NWrapper", "reloadFromFile", new Class[] {}, i18NWrapper, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(I18NWrapper.class, ex);
            assertNull("i18NWrapper.file", getPrivateField(i18NWrapper, "file"));
            assertEquals("i18NWrapper.lm", 0L, ((Number) getPrivateField(i18NWrapper, "lm")).longValue());
            assertNull("i18NWrapper.i18n", getPrivateField(i18NWrapper, "i18n"));
        }
    }
    
    public void testReloadFromFileThrowsThrowableWithAggressiveMocks() throws Throwable {
        I18NWrapper i18NWrapper = (I18NWrapper) Mockingbird.getProxyObject(I18NWrapper.class, true);
        setPrivateField(i18NWrapper, "file", null);
        Mockingbird.enterTestMode(I18NWrapper.class);
        try {
            callPrivateMethod("org.mentawai.i18n.I18NWrapper", "reloadFromFile", new Class[] {}, i18NWrapper, new Object[] {});
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(I18NWrapper.class, ex);
            assertEquals("i18NWrapper.lm", 0L, ((Number) getPrivateField(i18NWrapper, "lm")).longValue());
            assertNull("i18NWrapper.file", getPrivateField(i18NWrapper, "file"));
            assertNull("i18NWrapper.i18n", getPrivateField(i18NWrapper, "i18n"));
        }
    }
}

