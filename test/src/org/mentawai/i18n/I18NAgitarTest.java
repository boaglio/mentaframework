/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:23:27 PM
 * Time to generate: 00:19.151 seconds
 *
 */

package org.mentawai.i18n;

import com.agitar.lib.junit.AgitarTestCase;
import com.mchange.v2.c3p0.impl.AuthMaskingProperties;
import java.util.Iterator;
import java.util.Properties;

public class I18NAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return I18N.class;
    }
    
    public void testConstructor() throws Throwable {
        I18N i18N = new I18N(new AuthMaskingProperties());
        assertFalse("i18N.keys().hasNext()", i18N.keys().hasNext());
    }
    
    public void testGet() throws Throwable {
        String result = new I18N(new AuthMaskingProperties()).get(100);
        assertEquals("result", "100", result);
    }
    
    public void testGet1() throws Throwable {
        Properties props = new Properties();
        props.put("testString", "testString");
        String result = new I18N(props).get("testString");
        assertEquals("result", "testString", result);
    }
    
    public void testGet2() throws Throwable {
        Properties props = new Properties(null);
        I18N i18N = new I18N(props);
        props.clear();
        String result = i18N.get("testI18NKey");
        assertEquals("result", "testI18NKey", result);
    }
    
    public void testHasKey() throws Throwable {
        Properties props = new AuthMaskingProperties();
        props.put("=", "testString");
        boolean result = new I18N(props).hasKey("=");
        assertTrue("result", result);
    }
    
    public void testHasKey1() throws Throwable {
        boolean result = new I18N(new Properties()).hasKey("testI18NKey");
        assertFalse("result", result);
    }
    
    public void testKeys() throws Throwable {
        Properties props = new Properties();
        props.put("testString", "hr@SKw::Gkq2HJMH\f{\t\rby8|})\n\n%slWz(d;h6");
        Iterator result = new I18N(props).keys();
        assertTrue("result.hasNext()", result.hasNext());
    }
    
    public void testKeys1() throws Throwable {
        Iterator result = new I18N(new Properties()).keys();
        assertFalse("result.hasNext()", result.hasNext());
    }
    
    public void testGetThrowsNullPointerException() throws Throwable {
        try {
            new I18N(null).get(100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(I18N.class, ex);
        }
    }
    
    public void testGetThrowsNullPointerException1() throws Throwable {
        try {
            new I18N(null).get("testI18NKey");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(I18N.class, ex);
        }
    }
    
    public void testHasKeyThrowsNullPointerException() throws Throwable {
        try {
            new I18N(null).hasKey("testI18NKey");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(I18N.class, ex);
        }
    }
    
    public void testKeysThrowsNullPointerException() throws Throwable {
        try {
            new I18N(null).keys();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(I18N.class, ex);
        }
    }
}

