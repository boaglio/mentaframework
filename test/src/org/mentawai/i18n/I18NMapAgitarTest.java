/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:20:31 PM
 * Time to generate: 00:26.996 seconds
 *
 */

package org.mentawai.i18n;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.File;
import java.util.Hashtable;
import java.util.Map;
import org.mentawai.core.ApplicationManager;

public class I18NMapAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return I18NMap.class;
    }
    
    public void testConstructor() throws Throwable {
        new I18NMap();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetI18N() throws Throwable {
        I18N result = I18NMap.getI18N("testI18NMapFile");
        assertNull("result", result);
    }
    
    public void testGetI18N1() throws Throwable {
        I18N result = I18NMap.getI18N("");
        assertNull("result", result);
    }
    
    public void testGetI18N2() throws Throwable {
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        I18NWrapper i18NWrapper = (I18NWrapper) Mockingbird.getProxyObject(I18NWrapper.class);
        Object i18NWrapperCP = callPrivateMethod("org.mentawai.i18n.I18NMap", "getI18NWrapperCP", new Class[] {File.class}, null, new Object[] {file});
        Mockingbird.setReturnValue(i18NWrapperCP, i18NWrapper);
        Mockingbird.setReturnValue(i18NWrapper.getI18N(), null);
        Mockingbird.enterTestMode(I18NMap.class);
        I18N result = I18NMap.getI18N(file);
        assertNull("result", result);
    }
    
    public void testGetI18N3() throws Throwable {
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        I18NWrapper i18NWrapper = (I18NWrapper) Mockingbird.getProxyObject(I18NWrapper.class);
        Object i18NWrapperCP = callPrivateMethod("org.mentawai.i18n.I18NMap", "getI18NWrapperCP", new Class[] {File.class}, null, new Object[] {file});
        Mockingbird.setReturnValue(i18NWrapperCP, i18NWrapper);
        Mockingbird.setReturnValue(i18NWrapper.getI18N(), null);
        Mockingbird.enterTestMode(I18NMap.class);
        I18N result = I18NMap.getI18N(file);
        assertNull("result", result);
    }
    
    public void testGetI18N4() throws Throwable {
        I18N result = I18NMap.getI18N(new File("testI18NMapParam1"));
        assertNull("result", result);
    }
    
    public void testGetI18N5() throws Throwable {
        storeStaticField(I18NMap.class, "mapFile");
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        I18NWrapper i18NWrapper = (I18NWrapper) Mockingbird.getProxyObject(I18NWrapper.class);
        setPrivateField(I18NMap.class, "mapFile", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(null), null);
        Mockingbird.setReturnValue(map.get(null), i18NWrapper);
        Mockingbird.setReturnValue(i18NWrapper.getI18N(), null);
        Mockingbird.enterTestMode(I18NMap.class);
        I18N result = I18NMap.getI18N((File) null);
        assertNull("result", result);
    }
    
    public void testGetI18NFromClasspath() throws Throwable {
        storeStaticField(I18NMap.class, "mapCP");
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        I18NWrapper i18NWrapper = (I18NWrapper) Mockingbird.getProxyObject(I18NWrapper.class);
        setPrivateField(I18NMap.class, "mapCP", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", i18NWrapper, 1);
        Mockingbird.setReturnValue(i18NWrapper.getI18N(), null);
        Mockingbird.enterTestMode(I18NMap.class);
        I18N result = I18NMap.getI18NFromClasspath("");
        assertNull("result", result);
    }
    
    public void testGetI18NWrapper() throws Throwable {
        I18NWrapper result = (I18NWrapper) callPrivateMethod("org.mentawai.i18n.I18NMap", "getI18NWrapper", new Class[] {String.class}, null, new Object[] {"testI18NMapFile"});
        assertSame("result", result, result);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testGetI18NWrapper1() throws Throwable {
        storeStaticField(I18NMap.class, "map");
        storeStaticField(I18NMap.class, "cache");
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(I18NMap.class, "cache", map);
        setPrivateField(I18NMap.class, "map", map2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterNormalMode();
        ApplicationManager.setRealPath("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "endsWith", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(File.class));
        Mockingbird.replaceObjectForRecording(I18NWrapper.class, "<init>(java.io.File)", Mockingbird.getProxyObject(I18NWrapper.class));
        Mockingbird.setReturnValue(false, map2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(I18NMap.class);
        I18NWrapper result = (I18NWrapper) callPrivateMethod("org.mentawai.i18n.I18NMap", "getI18NWrapper", new Class[] {String.class}, null, new Object[] {""});
        assertNotNull("result", result);
        assertNotNull("I18NMap.map", getPrivateField(I18NMap.class, "map"));
    }
    
    public void testGetI18NWrapperCP() throws Throwable {
        I18NWrapper result = (I18NWrapper) callPrivateMethod("org.mentawai.i18n.I18NMap", "getI18NWrapperCP", new Class[] {File.class}, null, new Object[] {new File("")});
        assertSame("result", result, result);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testGetI18NWrapperCP1() throws Throwable {
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        Hashtable hashtable = (Hashtable) Mockingbird.getProxyObject(Hashtable.class);
        Mockingbird.setReturnValue(false, hashtable, "get", "(java.lang.Object)java.lang.Object", null, 1);
        I18NWrapper i18NWrapper = (I18NWrapper) Mockingbird.getProxyObject(I18NWrapper.class);
        Mockingbird.replaceObjectForRecording(I18NWrapper.class, "<init>(java.io.File)", i18NWrapper);
        Mockingbird.setReturnValue(false, hashtable, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(I18NMap.class);
        I18NWrapper result = (I18NWrapper) callPrivateMethod("org.mentawai.i18n.I18NMap", "getI18NWrapperCP", new Class[] {File.class}, null, new Object[] {file});
        assertSame("result", i18NWrapper, result);
    }
    
    public void testGetI18NWrapperCP2() throws Throwable {
        I18NWrapper result = (I18NWrapper) callPrivateMethod("org.mentawai.i18n.I18NMap", "getI18NWrapperCP", new Class[] {String.class}, null, new Object[] {""});
        assertSame("result", result, result);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testGetPath() throws Throwable {
        String result = I18NMap.getPath("testI18NMapFile");
        assertEquals("result", "nulltestI18NMapFile.i18n", result);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testGetPath1() throws Throwable {
        storeStaticField(I18NMap.class, "cache");
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(I18NMap.class, "cache", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), null);
        Mockingbird.enterNormalMode();
        ApplicationManager.setRealPath("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "endsWith", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(I18NMap.class);
        String result = I18NMap.getPath("");
        assertEquals("result", "", result);
        assertNotNull("I18NMap.cache", getPrivateField(I18NMap.class, "cache"));
    }
    
    public void testGetPath2() throws Throwable {
        storeStaticField(I18NMap.class, "cache");
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(I18NMap.class, "cache", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), null);
        Mockingbird.enterNormalMode();
        ApplicationManager.setRealPath("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "endsWith", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(I18NMap.class);
        String result = I18NMap.getPath("");
        assertEquals("result", "", result);
        assertNotNull("I18NMap.cache", getPrivateField(I18NMap.class, "cache"));
    }
    
    public void testGetPath3() throws Throwable {
        storeStaticField(I18NMap.class, "cache");
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(I18NMap.class, "cache", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), null);
        Mockingbird.enterNormalMode();
        ApplicationManager.setRealPath("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "endsWith", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(I18NMap.class);
        String result = I18NMap.getPath("");
        assertEquals("result", "", result);
        assertNotNull("I18NMap.cache", getPrivateField(I18NMap.class, "cache"));
    }
    
    public void testGetPath4() throws Throwable {
        storeStaticField(I18NMap.class, "cache");
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(I18NMap.class, "cache", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), null);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.enterTestMode(I18NMap.class);
        String result = I18NMap.getPath("");
        assertEquals("result", "", result);
        assertNotNull("I18NMap.cache", getPrivateField(I18NMap.class, "cache"));
    }
    
    public void testGetI18NFromClasspathThrowsNullPointerException() throws Throwable {
        try {
            I18NMap.getI18NFromClasspath("testI18NMapFile");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(I18NWrapper.class, ex);
        }
    }
    
    public void testGetI18NFromClasspathThrowsNullPointerException1() throws Throwable {
        Mockingbird.enterRecordingMode();
        Object i18NWrapperCP = callPrivateMethod("org.mentawai.i18n.I18NMap", "getI18NWrapperCP", new Class[] {String.class}, null, new Object[] {""});
        Mockingbird.setException(i18NWrapperCP, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(I18NMap.class);
        try {
            I18NMap.getI18NFromClasspath("");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetI18NFromClasspathThrowsNullPointerException2() throws Throwable {
        try {
            I18NMap.getI18NFromClasspath(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testGetI18NFromClasspathThrowsNullPointerException3() throws Throwable {
        try {
            I18NMap.getI18NFromClasspath("testI18NMapFile");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(I18NWrapper.class, ex);
        }
    }
    
    public void testGetI18NFromClasspathThrowsNullPointerException4() throws Throwable {
        try {
            I18NMap.getI18NFromClasspath("");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(I18NWrapper.class, ex);
        }
    }
    
    public void testGetI18NThrowsNullPointerException() throws Throwable {
        Mockingbird.enterRecordingMode();
        Object i18NWrapper = callPrivateMethod("org.mentawai.i18n.I18NMap", "getI18NWrapper", new Class[] {String.class}, null, new Object[] {""});
        Mockingbird.setException(i18NWrapper, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(I18NMap.class);
        try {
            I18NMap.getI18N("");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetI18NThrowsNullPointerException1() throws Throwable {
        try {
            I18NMap.getI18N((String) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testGetI18NThrowsNullPointerException2() throws Throwable {
        try {
            I18NMap.getI18N((File) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testGetI18NThrowsNullPointerException3() throws Throwable {
        Mockingbird.enterRecordingMode();
        Object i18NWrapperCP = callPrivateMethod("org.mentawai.i18n.I18NMap", "getI18NWrapperCP", new Class[] {File.class}, null, new Object[] {null});
        Mockingbird.setException(i18NWrapperCP, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(I18NMap.class);
        try {
            I18NMap.getI18N((File) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetI18NWrapperCPThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("org.mentawai.i18n.I18NMap", "getI18NWrapperCP", new Class[] {File.class}, null, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 3 assertions
        }
    }
    
    public void testGetI18NWrapperCPThrowsNullPointerException1() throws Throwable {
        try {
            callPrivateMethod("org.mentawai.i18n.I18NMap", "getI18NWrapperCP", new Class[] {String.class}, null, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 3 assertions
        }
    }
    
    public void testGetI18NWrapperCPThrowsThrowable() throws Throwable {
        storeStaticField(I18NMap.class, "mapFile");
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        setPrivateField(I18NMap.class, "mapFile", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(null), null);
        Mockingbird.setReturnValue(map.get(null), obj);
        Mockingbird.enterTestMode(I18NMap.class);
        try {
            callPrivateMethod("org.mentawai.i18n.I18NMap", "getI18NWrapperCP", new Class[] {File.class}, null, new Object[] {null});
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(I18NMap.class, ex);
            assertNotNull("I18NMap.mapFile", getPrivateField(I18NMap.class, "mapFile"));
        }
    }
    
    public void testGetI18NWrapperCPThrowsThrowable1() throws Throwable {
        storeStaticField(I18NMap.class, "mapCP");
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        setPrivateField(I18NMap.class, "mapCP", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), null);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj, 1);
        Mockingbird.enterTestMode(I18NMap.class);
        try {
            callPrivateMethod("org.mentawai.i18n.I18NMap", "getI18NWrapperCP", new Class[] {String.class}, null, new Object[] {""});
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(I18NMap.class, ex);
            assertNotNull("I18NMap.mapCP", getPrivateField(I18NMap.class, "mapCP"));
        }
    }
    
    public void testGetI18NWrapperThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("org.mentawai.i18n.I18NMap", "getI18NWrapper", new Class[] {String.class}, null, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 3 assertions
        }
    }
    
    public void testGetI18NWrapperThrowsThrowable() throws Throwable {
        storeStaticField(I18NMap.class, "map");
        storeStaticField(I18NMap.class, "cache");
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        setPrivateField(I18NMap.class, "cache", map);
        setPrivateField(I18NMap.class, "map", map2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterNormalMode();
        ApplicationManager.setRealPath("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "endsWith", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", obj, 1);
        Mockingbird.enterTestMode(I18NMap.class);
        try {
            callPrivateMethod("org.mentawai.i18n.I18NMap", "getI18NWrapper", new Class[] {String.class}, null, new Object[] {""});
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(I18NMap.class, ex);
            assertNotNull("I18NMap.map", getPrivateField(I18NMap.class, "map"));
        }
    }
    
    public void testGetPathThrowsNullPointerException() throws Throwable {
        try {
            I18NMap.getPath(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 3 assertions
        }
    }
    
    public void testGetPathThrowsThrowable() throws Throwable {
        storeStaticField(I18NMap.class, "cache");
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        setPrivateField(I18NMap.class, "cache", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), null);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj, 1);
        Mockingbird.enterTestMode(I18NMap.class);
        try {
            I18NMap.getPath("");
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(I18NMap.class, ex);
            assertNotNull("I18NMap.cache", getPrivateField(I18NMap.class, "cache"));
        }
    }
}

