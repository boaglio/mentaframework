/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:21:48 PM
 * Time to generate: 00:31.503 seconds
 *
 */

package org.mentawai.i18n;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.mchange.v2.c3p0.impl.AuthMaskingProperties;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;

public class I18NHolderAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return I18NHolder.class;
    }
    
    public void testConstructor() throws Throwable {
        I18NHolder i18NHolder = new I18NHolder();
        assertEquals("i18NHolder.map.size()", 0, ((Map) getPrivateField(i18NHolder, "map")).size());
    }
    
    public void testEmptyI18nConstructor() throws Throwable {
        I18N i18N = (I18N) callPrivateMethod("org.mentawai.i18n.I18NHolder$EmptyI18n", "<init>", new Class[] {I18NHolder.class}, null, new Object[] {new I18NHolder()});
        Iterator keys = (Iterator) callPrivateMethod("org.mentawai.i18n.I18N", "keys", new Class[] {}, i18N, new Object[] {});
        assertFalse("(I18N) i18N.keys().hasNext()", keys.hasNext());
    }
    
    public void testAdd() throws Throwable {
        Locale loc = Locale.SIMPLIFIED_CHINESE;
        I18NHolder i18NHolder = new I18NHolder();
        I18N i18n = new I18N(new Properties());
        i18NHolder.add(loc, i18n);
        I18N result = i18NHolder.add(loc, i18n);
        assertSame("result", i18n, result);
        assertEquals("i18NHolder.map.size()", 1, ((Map) getPrivateField(i18NHolder, "map")).size());
    }
    
    public void testAdd1() throws Throwable {
        I18NHolder i18NHolder = new I18NHolder();
        I18N result = i18NHolder.add(Locale.KOREA, new I18N(new AuthMaskingProperties()));
        assertEquals("i18NHolder.map.size()", 1, ((Map) getPrivateField(i18NHolder, "map")).size());
        assertNull("result", result);
    }
    
    public void testClear() throws Throwable {
        I18NHolder i18NHolder = new I18NHolder();
        i18NHolder.clear();
        assertEquals("i18NHolder.map.size()", 0, ((Map) getPrivateField(i18NHolder, "map")).size());
    }
    
    public void testContainsI18n() throws Throwable {
        I18NHolder i18NHolder = new I18NHolder();
        I18N i18n = (I18N) Mockingbird.getProxyObject(I18N.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(HashMap.class), "containsValue", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.enterTestMode(I18NHolder.class);
        boolean result = i18NHolder.containsI18n(i18n);
        assertTrue("result", result);
        assertEquals("i18NHolder.map.size()", 0, ((Map) getPrivateField(i18NHolder, "map")).size());
    }
    
    public void testContainsI18n1() throws Throwable {
        I18NHolder i18NHolder = new I18NHolder();
        boolean result = i18NHolder.containsI18n(new I18N(new Properties()));
        assertFalse("result", result);
        assertEquals("i18NHolder.map.size()", 0, ((Map) getPrivateField(i18NHolder, "map")).size());
    }
    
    public void testContainsLocale() throws Throwable {
        I18NHolder i18NHolder = new I18NHolder();
        boolean result = i18NHolder.containsLocale(Locale.KOREA);
        assertFalse("result", result);
        assertEquals("i18NHolder.map.size()", 0, ((Map) getPrivateField(i18NHolder, "map")).size());
    }
    
    public void testContainsLocale1() throws Throwable {
        I18NHolder i18NHolder = new I18NHolder();
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(HashMap.class), "containsKey", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.enterTestMode(I18NHolder.class);
        boolean result = i18NHolder.containsLocale(loc);
        assertTrue("result", result);
        assertEquals("i18NHolder.map.size()", 0, ((Map) getPrivateField(i18NHolder, "map")).size());
    }
    
    public void testEmptyI18nGetWithAggressiveMocks() throws Throwable {
        I18N i18N = (I18N) Mockingbird.getProxyObject(Class.forName("org.mentawai.i18n.I18NHolder$EmptyI18n"), true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(Class.forName("org.mentawai.i18n.I18NHolder$EmptyI18n"));
        String result = (String) callPrivateMethod("org.mentawai.i18n.I18NHolder$EmptyI18n", "get", new Class[] {int.class}, i18N, new Object[] {new Integer(0)});
        assertEquals("result", "", result);
    }
    
    public void testEmptyI18nHasKeyWithAggressiveMocks() throws Throwable {
        I18N i18N = (I18N) Mockingbird.getProxyObject(Class.forName("org.mentawai.i18n.I18NHolder$EmptyI18n"), true);
        Mockingbird.enterTestMode(Class.forName("org.mentawai.i18n.I18NHolder$EmptyI18n"));
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.i18n.I18NHolder$EmptyI18n", "hasKey", new Class[] {String.class}, i18N, new Object[] {""})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testEmptyI18nKeysWithAggressiveMocks() throws Throwable {
        I18N i18N = (I18N) Mockingbird.getProxyObject(Class.forName("org.mentawai.i18n.I18NHolder$EmptyI18n"), true);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(false, arrayList, "iterator", "()java.util.Iterator", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(Class.forName("org.mentawai.i18n.I18NHolder$EmptyI18n"));
        Iterator result = (Iterator) callPrivateMethod("org.mentawai.i18n.I18NHolder$EmptyI18n", "keys", new Class[] {}, i18N, new Object[] {});
        assertNull("result", result);
    }
    
    public void testGet() throws Throwable {
        I18NHolder i18NHolder = new I18NHolder();
        I18N result = i18NHolder.get(Locale.CHINA);
        assertNotNull("result", result);
        assertEquals("i18NHolder.map.size()", 0, ((Map) getPrivateField(i18NHolder, "map")).size());
    }
    
    public void testGet1() throws Throwable {
        I18NHolder i18NHolder = new I18NHolder();
        Locale loc = Locale.ENGLISH;
        I18N i18n = new I18N(new Properties());
        i18NHolder.add(loc, i18n);
        I18N result = i18NHolder.get(loc);
        assertSame("result", i18n, result);
        assertEquals("i18NHolder.map.size()", 1, ((Map) getPrivateField(i18NHolder, "map")).size());
    }
    
    public void testIsEmpty() throws Throwable {
        I18NHolder i18NHolder = new I18NHolder();
        Locale loc = Locale.UK;
        i18NHolder.add(loc, new I18N(null));
        boolean result = i18NHolder.isEmpty();
        assertFalse("result", result);
        assertEquals("i18NHolder.map.size()", 1, ((Map) getPrivateField(i18NHolder, "map")).size());
    }
    
    public void testIsEmpty1() throws Throwable {
        I18NHolder i18NHolder = new I18NHolder();
        boolean result = i18NHolder.isEmpty();
        assertTrue("result", result);
        assertEquals("i18NHolder.map.size()", 0, ((Map) getPrivateField(i18NHolder, "map")).size());
    }
    
    public void testLocales() throws Throwable {
        I18NHolder i18NHolder = new I18NHolder();
        ArrayList result = (ArrayList) i18NHolder.locales();
        assertEquals("result.size()", 0, result.size());
        assertEquals("i18NHolder.map.size()", 0, ((Map) getPrivateField(i18NHolder, "map")).size());
    }
    
    public void testLocales1() throws Throwable {
        I18NHolder i18NHolder = new I18NHolder();
        Map map = new HashMap(100, 100.0F);
        map.put(Locale.US, new I18N(new AuthMaskingProperties()));
        i18NHolder.putAll(map);
        ArrayList result = (ArrayList) i18NHolder.locales();
        assertEquals("result.size()", 1, result.size());
        assertEquals("i18NHolder.map.size()", 1, ((Map) getPrivateField(i18NHolder, "map")).size());
    }
    
    public void testPutAll() throws Throwable {
        I18NHolder i18NHolder = new I18NHolder();
        i18NHolder.putAll(new HashMap(100, 100.0F));
        assertEquals("i18NHolder.map.size()", 0, ((Map) getPrivateField(i18NHolder, "map")).size());
    }
    
    public void testRemove() throws Throwable {
        I18NHolder i18NHolder = new I18NHolder();
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        I18N i18N = (I18N) Mockingbird.getProxyObject(I18N.class);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(HashMap.class), "remove", "(java.lang.Object)java.lang.Object", i18N, 1);
        Mockingbird.enterTestMode(I18NHolder.class);
        I18N result = i18NHolder.remove(loc);
        assertSame("result", i18N, result);
        assertEquals("i18NHolder.map.size()", 0, ((Map) getPrivateField(i18NHolder, "map")).size());
    }
    
    public void testRemove1() throws Throwable {
        I18NHolder i18NHolder = new I18NHolder();
        I18N result = i18NHolder.remove(Locale.FRENCH);
        assertNull("result", result);
        assertEquals("i18NHolder.map.size()", 0, ((Map) getPrivateField(i18NHolder, "map")).size());
    }
    
    public void testSize() throws Throwable {
        Map map = new HashMap(100, 100.0F);
        map.put(Locale.FRANCE, new I18N(new AuthMaskingProperties()));
        I18NHolder i18NHolder = new I18NHolder();
        i18NHolder.putAll(map);
        int result = i18NHolder.size();
        assertEquals("result", 1, result);
        assertEquals("i18NHolder.map.size()", 1, ((Map) getPrivateField(i18NHolder, "map")).size());
    }
    
    public void testSize1() throws Throwable {
        I18NHolder i18NHolder = new I18NHolder();
        int result = i18NHolder.size();
        assertEquals("result", 0, result);
        assertEquals("i18NHolder.map.size()", 0, ((Map) getPrivateField(i18NHolder, "map")).size());
    }
    
    public void testPutAllThrowsNullPointerException() throws Throwable {
        I18NHolder i18NHolder = new I18NHolder();
        try {
            i18NHolder.putAll(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("i18NHolder.map.size()", 0, ((Map) getPrivateField(i18NHolder, "map")).size());
        }
    }
}

