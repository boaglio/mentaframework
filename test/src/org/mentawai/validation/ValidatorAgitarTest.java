/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 5:49:30 PM
 * Time to generate: 02:10.936 seconds
 *
 */

package org.mentawai.validation;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.TreeMap;
import java.util.Vector;
import org.mentawai.action.LogoutAction;
import org.mentawai.action.SuccessAction;
import org.mentawai.core.Action;
import org.mentawai.core.Input;
import org.mentawai.core.PojoAction;
import org.mentawai.message.ClassMessageContext;
import org.mentawai.message.ClasspathMessageContext;
import org.mentawai.message.DefaultMessage;
import org.mentawai.message.FileMessageContext;
import org.mentawai.message.MessageManager;
import org.mentawai.rule.BasicRule;
import org.mentawai.rule.BooleanRule;
import org.mentawai.rule.CNPJRule;
import org.mentawai.rule.CPFRule;
import org.mentawai.rule.DateRule;
import org.mentawai.rule.DejavuRule;
import org.mentawai.rule.EmailRule;
import org.mentawai.rule.EqualRule;
import org.mentawai.rule.IntegerRule;
import org.mentawai.rule.NumberRule;
import org.mentawai.rule.RegexRule;
import org.mentawai.rule.RequiredFieldRule;
import org.mentawai.rule.RequiredRule;
import org.mentawai.rule.Rule;
import org.mentawai.rule.StringRule;
import org.mentawai.rule.TimeRule;
import org.mentawai.util.MockAction;

public class ValidatorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return Validator.class;
    }
    
    public void testConstructor() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        Map errors = new HashMap(1000, 1000.0F);
        Map hashMap = new HashMap(0, 1.0F);
        Validator validator = new Validator(rules, errors, hashMap);
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
        assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
    }
    
    public void testConstructor1() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        Map errors = new HashMap(1000, 1000.0F);
        Validator validator = new Validator(rules, errors);
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
    }
    
    public void testAdd() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Properties properties = new Properties();
        errors.put("testString", properties);
        Map rules = new HashMap(0, 1.0F);
        Validator validator = new Validator(rules, errors, new HashMap(1000, 1000.0F));
        validator.add("testString", new RegexRule("testValidatorPattern"), "testValidatorError_id");
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
        assertSame("validator.errors.get(\"testString\")", properties, ((Map) getPrivateField(validator, "errors")).get("testString"));
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
    }
    
    public void testAdd1() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        HashMap hashMap = new HashMap();
        errors.put("testString", hashMap);
        ArrayList arrayList = new ArrayList(100);
        Map rules = new HashMap(1000, 1000.0F);
        rules.put("testString", Collections.emptyList());
        rules.put("testString", arrayList);
        Validator validator = new Validator(rules, errors, new HashMap(0, 1.0F));
        validator.add("testString", new DateRule(100), "testValidatorError_id");
        assertSame("validator.rules.get(\"testString\")", arrayList, ((Map) getPrivateField(validator, "rules")).get("testString"));
        assertSame("validator.errors.get(\"testString\")", hashMap, ((Map) getPrivateField(validator, "errors")).get("testString"));
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
    }
    
    public void testAdd2() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        Map errors = new HashMap(1000, 1000.0F);
        Validator validator = new Validator(rules, errors);
        String[] strings = new String[1];
        validator.add("testValidatorField", new DateRule(null, null), "testValidatorError_id", strings);
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        assertEquals("validator.params.size()", 1, ((Map) getPrivateField(validator, "params")).size());
    }
    
    public void testAdd3() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        Map errors = new HashMap(1000, 1000.0F);
        Validator validator = new Validator(rules, errors);
        validator.add("testValidatorField", new CPFRule(), "testValidatorError_id", (String[]) null);
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
    }
    
    public void testAdd4() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map rules = new HashMap(1000, 1000.0F);
        LinkedList linkedList = new LinkedList();
        rules.put("testString", linkedList);
        Validator validator = new Validator(rules, errors, new HashMap(0, 1.0F));
        validator.add("testString", new EmailRule(), "testValidatorError_id");
        assertSame("validator.rules.get(\"testString\")", linkedList, ((Map) getPrivateField(validator, "rules")).get("testString"));
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
    }
    
    public void testAdd5() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map rules = new HashMap(1000, 1000.0F);
        Validator validator = new Validator(rules, errors, new HashMap(0, 1.0F));
        validator.add("testValidatorField", new RegexRule("testValidatorPattern"), "testValidatorError_id");
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
    }
    
    public void testAdd6() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        Map errors = new HashMap(1000, 1000.0F);
        Validator validator = new Validator(rules, errors);
        validator.add("testValidatorField", new StringRule(), 100);
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
    }
    
    public void testAdd7() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map rules = new HashMap(1000, 1000.0F);
        Map hashMap = new HashMap(0, 1.0F);
        Validator validator = new Validator(rules, errors, hashMap);
        String[] strings = new String[1];
        validator.add("testValidatorField", new CPFRule(), 100, strings);
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
    }
    
    public void testAdd8() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map rules = new HashMap(1000, 1000.0F);
        Validator validator = new Validator(rules, errors, new HashMap(0, 1.0F));
        String[] strings = new String[0];
        validator.add("testValidatorField", new RequiredFieldRule(), 100, strings);
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
    }
    
    public void testAdd9() throws Throwable {
        Map rules = new HashMap(1000, 1000.0F);
        Map errors = new HashMap(0, 1.0F);
        Validator validator = new Validator(rules, errors, new HashMap(100, 100.0F));
        String[] strings = new String[0];
        validator.add("testValidatorField", new StringRule(), "testValidatorError_id", strings);
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
    }
    
    public void testAdd10() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map rules = new HashMap(1000, 1000.0F);
        Map hashMap = new HashMap(0, 1.0F);
        Validator validator = new Validator(rules, errors, hashMap);
        String[] strings = new String[1];
        validator.add("testValidatorField", CNPJRule.getInstance(), "testValidatorError_id", strings);
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
    }
    
    public void testAdd11() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        ArrayList arrayList = new ArrayList(100);
        Map rules = new HashMap(1000, 1000.0F);
        rules.put("testString", arrayList);
        Map hashMap = new HashMap(0, 1.0F);
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        hashMap.put("testString", linkedHashMap);
        Validator validator = new Validator(rules, errors, hashMap);
        String[] strings = new String[1];
        validator.add("testString", new DateRule(new Date(), new Date()), "testValidatorError_id", strings);
        assertSame("validator.rules.get(\"testString\")", arrayList, ((Map) getPrivateField(validator, "rules")).get("testString"));
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        assertSame("validator.params.get(\"testString\")", linkedHashMap, ((Map) getPrivateField(validator, "params")).get("testString"));
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
        assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
    }
    
    public void testGetErrorId() throws Throwable {
        Map hashMap = new HashMap(100, 100.0F);
        Rule timeRule = new TimeRule();
        hashMap.put(timeRule, ";2@7z`");
        Map errors = new HashMap(1000, 1000.0F);
        errors.put("testString", new Properties());
        errors.put("testString", hashMap);
        Validator validator = new Validator(new HashMap(1, 10.0F), errors, new HashMap(0, 1.0F));
        String result = (String) callPrivateMethod("org.mentawai.validation.Validator", "getErrorId", new Class[] {String.class, Rule.class}, validator, new Object[] {"testString", timeRule});
        assertEquals("result", ";2@7z`", result);
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
    }
    
    public void testGetErrorId1() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        errors.put("testString", new Properties());
        Validator validator = new Validator(new HashMap(0, 1.0F), errors, new HashMap(1000, 1000.0F));
        Object result = callPrivateMethod("org.mentawai.validation.Validator", "getErrorId", new Class[] {String.class, Rule.class}, validator, new Object[] {"testString", new CNPJRule()});
        assertNull("result", result);
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
    }
    
    public void testGetParams() throws Throwable {
        Rule equalRule = new EqualRule("testValidatorField1", "testValidatorField2");
        String[] strings = new String[0];
        Map hashMap = new HashMap(100, 100.0F);
        hashMap.put(equalRule, strings);
        Map hashMap2 = new HashMap(1000, 1000.0F);
        hashMap2.put("testString", new HashMap(0, 1.0F));
        hashMap2.put("testString", hashMap);
        Validator validator = new Validator(new HashMap(1, 10.0F), new HashMap(10, 10000.0F), hashMap2);
        String[] result = (String[]) callPrivateMethod("org.mentawai.validation.Validator", "getParams", new Class[] {String.class, Rule.class}, validator, new Object[] {"testString", equalRule});
        assertSame("result", strings, result);
        assertSame("validator.params", hashMap2, getPrivateField(validator, "params"));
    }
    
    public void testGetParams1() throws Throwable {
        Map hashMap = new HashMap(0, 1.0F);
        Validator validator = new Validator(new HashMap(1000, 1000.0F), new HashMap(100, 100.0F), hashMap);
        String[] strings = new String[2];
        Rule rule = new RegexRule("testValidatorPattern");
        validator.add("testString", rule, "testValidatorError_id", strings);
        String[] result = (String[]) callPrivateMethod("org.mentawai.validation.Validator", "getParams", new Class[] {String.class, Rule.class}, validator, new Object[] {"testString", rule});
        assertSame("result", strings, result);
        assertNull("strings[0]", strings[0]);
        assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
    }
    
    public void testGetParams2() throws Throwable {
        Map hashMap = new HashMap(100, 100.0F);
        hashMap.put("testString", new Properties());
        Validator validator = new Validator(new HashMap(1000, 1000.0F), new HashMap(0, 1.0F), hashMap);
        Object result = callPrivateMethod("org.mentawai.validation.Validator", "getParams", new Class[] {String.class, Rule.class}, validator, new Object[] {"testString", new NumberRule()});
        assertNull("result", result);
        assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
    }
    
    public void testGetParams3() throws Throwable {
        Validator validator = new Validator(new HashMap(1000, 1000.0F), new HashMap(100, 100.0F));
        Object result = callPrivateMethod("org.mentawai.validation.Validator", "getParams", new Class[] {String.class, Rule.class}, validator, new Object[] {"testValidatorField", new CPFRule()});
        assertNull("result", result);
    }
    
    public void testGetParams4() throws Throwable {
        Map hashMap = new HashMap(100, 100.0F);
        Validator validator = new Validator(new HashMap(1000, 1000.0F), new HashMap(0, 1.0F), hashMap);
        Object result = callPrivateMethod("org.mentawai.validation.Validator", "getParams", new Class[] {String.class, Rule.class}, validator, new Object[] {"testValidatorField", new NumberRule()});
        assertNull("result", result);
        assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
    }
    
    public void testGetTokens() throws Throwable {
        Validator validator = new Validator(new HashMap(100, 100.0F), new HashMap(1000, 1000.0F));
        Map tokens = new HashMap(0, 1.0F);
        tokens.put("testString", "testString");
        HashMap result = (HashMap) validator.getTokens(new MockAction(), tokens, "testValidatorField");
        assertEquals("result.size()", 1, result.size());
        assertEquals("(HashMap) result.get(\"testString\")", "testString", result.get("testString"));
    }
    
    public void testGetTokens1() throws Throwable {
        Validator validator = new Validator(new HashMap(100, 100.0F), new HashMap(1000, 1000.0F));
        HashMap result = (HashMap) validator.getTokens(new MockAction(), null, "testValidatorField");
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetTokens2() throws Throwable {
        Validator validator = new Validator(new HashMap(1000, 1000.0F), new HashMap(0, 1.0F));
        HashMap result = (HashMap) validator.getTokens(new MockAction(), new HashMap(100, 100.0F), "testValidatorField");
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testRequiredFields() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        Map errors = new HashMap(1000, 1000.0F);
        Validator validator = new Validator(rules, errors);
        String[] fields = new String[1];
        validator.requiredFields("testValidatorError_id", fields);
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
    }
    
    public void testRequiredFields1() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        Map errors = new HashMap(1000, 1000.0F);
        Validator validator = new Validator(rules, errors);
        String[] fields = new String[0];
        validator.requiredFields("testValidatorError_id", fields);
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
    }
    
    public void testRequiredFields2() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        Map errors = new HashMap(1000, 1000.0F);
        Validator validator = new Validator(rules, errors);
        validator.requiredFields("testValidatorError_id", (String[]) null);
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
    }
    
    public void testRequiredLists() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        Map errors = new HashMap(1000, 1000.0F);
        Validator validator = new Validator(rules, errors);
        String[] fields = new String[0];
        validator.requiredLists("testValidatorError_id", fields);
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
    }
    
    public void testRequiredLists1() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        Map errors = new HashMap(1000, 1000.0F);
        Validator validator = new Validator(rules, errors);
        String[] fields = new String[1];
        validator.requiredLists("testValidatorError_id", fields);
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
    }
    
    public void testRequiredLists2() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        Map errors = new HashMap(1000, 1000.0F);
        Validator validator = new Validator(rules, errors);
        validator.requiredLists("testValidatorError_id", (String[]) null);
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
    }
    
    public void testValidate() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map rules = new HashMap(1000, 1000.0F);
        Map hashMap = new HashMap(0, 1.0F);
        Validator validator = new Validator(rules, errors, hashMap);
        String[] strings = new String[2];
        String[] strings2 = new String[2];
        validator.add("testString", new RegexRule("testValidatorPattern"), "testValidatorError_id", strings);
        validator.add("42", new DateRule(), "testValidatorError_id1", strings2);
        String[] fields = new String[3];
        fields[0] = "testString";
        validator.requiredFields("testValidatorError_id", fields);
        boolean result = validator.validate(new MockAction(new PojoAction(null)), new ClassMessageContext(new Object()));
        assertFalse("result", result);
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
        assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
    }
    
    public void testValidate1() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map rules = new HashMap(1000, 1000.0F);
        Map hashMap = new HashMap(0, 1.0F);
        Validator validator = new Validator(rules, errors, hashMap);
        String[] strings = new String[2];
        validator.add("testString", new RegexRule("testValidatorPattern"), "testValidatorError_id", strings);
        String[] fields = new String[3];
        fields[0] = "testString";
        fields[1] = "testString";
        fields[2] = "testString";
        validator.requiredFields("testValidatorError_id", fields);
        boolean result = validator.validate(new MockAction(new PojoAction(null)), new ClassMessageContext(new Object()));
        assertFalse("result", result);
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
        assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
    }
    
    public void testValidate2() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map rules = new HashMap(1000, 1000.0F);
        Map hashMap = new HashMap(0, 1.0F);
        Validator validator = new Validator(rules, errors, hashMap);
        String[] strings = new String[2];
        validator.add("testValidatorField", new DateRule(), "testValidatorError_id", strings);
        String[] fields = new String[3];
        validator.requiredFields("testValidatorError_id", fields);
        boolean result = validator.validate(new MockAction(new PojoAction(null)), new ClassMessageContext(new Object()));
        assertFalse("result", result);
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
        assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
    }
    
    public void testValidate3() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        Validator validator = new Validator(rules, new HashMap(1000, 1000.0F), new HashMap(0, 1.0F));
        boolean result = validator.validate(new LogoutAction(), new FileMessageContext("testValidatorFile"));
        assertTrue("result", result);
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
    }
    
    public void testValidate4() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map rules = new HashMap(1000, 1000.0F);
        Validator validator = new Validator(rules, errors, new HashMap(0, 1.0F));
        String[] strings = new String[2];
        validator.add("testValidatorField", new RegexRule("testValidatorPattern"), "testValidatorError_id", strings);
        boolean result = validator.validate(new MockAction(), new FileMessageContext("testValidatorFile", "testValidatorDir"));
        assertTrue("result", result);
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
    }
    
    public void testValidate5() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        rules.put("testString", new Vector(100));
        Validator validator = new Validator(rules, new HashMap(1000, 1000.0F), new HashMap(0, 1.0F));
        boolean result = validator.validate(new SuccessAction(), new FileMessageContext("testValidatorFile"));
        assertTrue("result", result);
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
    }
    
    public void testValidate6() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map rules = new HashMap(1000, 1000.0F);
        Map hashMap = new HashMap(0, 1.0F);
        Validator validator = new Validator(rules, errors, hashMap);
        String[] strings = new String[2];
        String[] strings2 = new String[2];
        validator.add("testString", new RegexRule("testValidatorPattern"), "testValidatorError_id", strings);
        validator.add("42", new DateRule(), "testValidatorError_id1", strings2);
        String[] fields = new String[3];
        fields[0] = "testString";
        fields[1] = "testString";
        fields[2] = "testString";
        validator.requiredFields("testValidatorError_id", fields);
        boolean result = validator.validate(new MockAction(new PojoAction(null)), new ClassMessageContext(new Object()));
        assertFalse("result", result);
        assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
        assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
    }
    
    public void testValidateWithAggressiveMocks() throws Throwable {
        storeStaticField(Validator.class, "FIELD_TOKEN");
        Validator validator = (Validator) Mockingbird.getProxyObject(Validator.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Rule rule = (Rule) Mockingbird.getProxyObject(Rule.class);
        Map map3 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map4 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map5 = (Map) Mockingbird.getProxyObject(Map.class);
        Set set2 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Rule rule2 = (Rule) Mockingbird.getProxyObject(Rule.class);
        Map map6 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map7 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map8 = (Map) Mockingbird.getProxyObject(Map.class);
        Set set3 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Input input2 = (Input) Mockingbird.getProxyObject(Input.class);
        Iterator iterator8 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator9 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Rule rule3 = (Rule) Mockingbird.getProxyObject(Rule.class);
        Map map9 = (Map) Mockingbird.getProxyObject(Map.class);
        Rule rule4 = (Rule) Mockingbird.getProxyObject(Rule.class);
        Map map10 = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(validator, "params", null);
        setPrivateField(validator, "rules", map);
        setPrivateField(validator, "errors", map2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.keySet(), set);
        Validator.FIELD_TOKEN = "";
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", list, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", list2, 1);
        Mockingbird.setReturnValue(list2.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), rule);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", map3, 1);
        Mockingbird.setReturnValue(map3.get(rule), "");
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, rule, "check", "(java.lang.String,org.mentawai.core.Action)boolean", boolean2, 1);
        Mockingbird.setReturnValue(MessageManager.getFieldErrors(action, true), map4);
        Mockingbird.setReturnValue(rule.getTokens(), map5);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(map5.keySet(), set2);
        Mockingbird.setReturnValue(set2.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(action.getInput(), input);
        Mockingbird.setReturnValue(input.keys(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(false, input, "getStringValue", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(DefaultMessage.class, "<init>(java.lang.String,org.mentawai.message.MessageContext,java.util.Map,java.lang.String[])", Mockingbird.getProxyObject(DefaultMessage.class));
        Mockingbird.setReturnValue(false, map4, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", list3, 1);
        Mockingbird.setReturnValue(list3.iterator(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), rule2);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", map6, 1);
        Mockingbird.setReturnValue(map6.get(rule2), "");
        Mockingbird.setReturnValue(false, rule2, "check", "(java.lang.String,org.mentawai.core.Action)boolean", boolean2, 1);
        Mockingbird.setReturnValue(MessageManager.getFieldErrors(action, true), map7);
        Mockingbird.setReturnValue(rule2.getTokens(), map8);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap2);
        Mockingbird.setReturnValue(map8.keySet(), set3);
        Mockingbird.setReturnValue(set3.iterator(), iterator7);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), "");
        Mockingbird.setReturnValue(false, map8, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), "");
        Mockingbird.setReturnValue(false, map8, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator7.hasNext(), false);
        Mockingbird.setReturnValue(action.getInput(), input2);
        Mockingbird.setReturnValue(input2.keys(), iterator8);
        Mockingbird.setReturnValue(iterator8.hasNext(), true);
        Mockingbird.setReturnValue(iterator8.next(), "");
        Mockingbird.setReturnValue(false, input2, "getStringValue", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator8.hasNext(), true);
        Mockingbird.setReturnValue(iterator8.next(), "");
        Mockingbird.setReturnValue(false, input2, "getStringValue", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator8.hasNext(), false);
        Mockingbird.setReturnValue(false, input2, "getStringValue", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(DefaultMessage.class, "<init>(java.lang.String,org.mentawai.message.MessageContext,java.util.Map,java.lang.String[])", Mockingbird.getProxyObject(DefaultMessage.class));
        Mockingbird.setReturnValue(false, map7, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", list4, 1);
        Mockingbird.setReturnValue(list4.iterator(), iterator9);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), rule3);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", map9, 1);
        Mockingbird.setReturnValue(map9.get(rule3), "");
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, rule3, "check", "(java.lang.String,org.mentawai.core.Action)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), rule4);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", map10, 1);
        Mockingbird.setReturnValue(map10.get(rule4), "");
        Mockingbird.setReturnValue(false, rule4, "check", "(java.lang.String,org.mentawai.core.Action)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator9.hasNext(), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(Validator.class);
        boolean result = validator.validate(action, null);
        assertFalse("result", result);
        assertNotNull("validator.errors", getPrivateField(validator, "errors"));
        assertNotNull("validator.rules", getPrivateField(validator, "rules"));
        assertNull("validator.params", getPrivateField(validator, "params"));
    }
    
    public void testAddThrowsClassCastException() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        rules.put("testString", "testString");
        Map errors = new HashMap(1000, 1000.0F);
        Validator validator = new Validator(rules, errors);
        try {
            validator.add("testString", new NumberRule(), "testValidatorError_id");
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(Validator.class, ex);
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        }
    }
    
    public void testAddThrowsClassCastException1() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        Map errors = new HashMap(1000, 1000.0F);
        errors.put("abcdefghijklmnopqrhtuvwxyz", "");
        Validator validator = new Validator(rules, errors);
        try {
            validator.add("abcdefghijklmnopqrhtuvwxyz", new CNPJRule(), 100);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(Validator.class, ex);
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        }
    }
    
    public void testAddThrowsClassCastException2() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map rules = new HashMap(1000, 1000.0F);
        Map hashMap = new HashMap(0, 1.0F);
        hashMap.put("testString", "");
        Validator validator = new Validator(rules, errors, hashMap);
        String[] strings = new String[1];
        try {
            validator.add("testString", CNPJRule.getInstance(), 100, strings);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(Validator.class, ex);
            assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
        }
    }
    
    public void testAddThrowsClassCastException3() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map rules = new HashMap(1000, 1000.0F);
        Map hashMap = new HashMap(0, 1.0F);
        hashMap.put("testString", new Object());
        Validator validator = new Validator(rules, errors, hashMap);
        String[] strings = new String[1];
        try {
            validator.add("testString", new DejavuRule(), "testValidatorError_id", strings);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(Validator.class, ex);
            assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
        }
    }
    
    public void testAddThrowsNullPointerException() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        ArrayList arrayList = new ArrayList(100);
        rules.put("testString", arrayList);
        Validator validator = new Validator(rules, null, new HashMap(1000, 1000.0F));
        try {
            validator.add("testString", new RequiredRule(), "testValidatorError_id");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("validator.rules.get(\"testString\")", arrayList, ((Map) getPrivateField(validator, "rules")).get("testString"));
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertNull("validator.errors", getPrivateField(validator, "errors"));
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
        }
    }
    
    public void testAddThrowsNullPointerException1() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        Validator validator = new Validator(rules, null, new HashMap(1000, 1000.0F));
        try {
            validator.add("testValidatorField", new RequiredFieldRule(), "testValidatorError_id");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertNull("validator.errors", getPrivateField(validator, "errors"));
        }
    }
    
    public void testAddThrowsNullPointerException2() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Validator validator = new Validator(null, errors, new HashMap(1000, 1000.0F));
        try {
            validator.add("testValidatorField", new RegexRule("testValidatorPattern"), 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertNull("validator.rules", getPrivateField(validator, "rules"));
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        }
    }
    
    public void testAddThrowsNullPointerException3() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        errors.put("testString", new TreeMap());
        Map rules = new HashMap(1000, 1000.0F);
        Map hashMap = new HashMap(0, 1.0F);
        Validator validator = new Validator(rules, errors, hashMap);
        String[] fields = new String[1];
        fields[0] = "testString";
        validator.requiredLists("testValidatorError_id", fields);
        String[] strings = new String[4];
        try {
            validator.add("testString", null, 100, strings);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("validator.rules.get(\"testString\").size()", 2, ((List) ((Map) getPrivateField(validator, "rules")).get("testString")).size());
            assertNull("ex.getMessage()", ex.getMessage());
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
        }
    }
    
    public void testAddThrowsNullPointerException4() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        Validator validator = new Validator(rules, null);
        String[] strings = new String[1];
        try {
            validator.add("testValidatorField", new IntegerRule(100), "testValidatorError_id", strings);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertNull("validator.errors", getPrivateField(validator, "errors"));
            assertNull("validator.params", getPrivateField(validator, "params"));
        }
    }
    
    public void testAddThrowsNullPointerException5() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map rules = new HashMap(1000, 1000.0F);
        Map hashMap = new HashMap(0, 1.0F);
        hashMap.put("testString", new Hashtable(100));
        Validator validator = new Validator(rules, errors, hashMap);
        String[] strings = new String[3];
        try {
            validator.add("testString", null, "testValidatorError_id", strings);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertNull("ex.getMessage()", ex.getMessage());
            assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
        }
    }
    
    public void testAddThrowsUnsupportedOperationException() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map rules = new HashMap(1000, 1000.0F);
        AbstractList list = (AbstractList) Collections.emptyList();
        rules.put("testString", list);
        rules.put("testString", new ArrayList(100));
        rules.put("u,er5]06i7XKVx\"\t;WLM%Kh87iF>PZI7pj", list);
        Validator validator = new Validator(rules, errors, new HashMap(0, 1.0F));
        try {
            validator.add("u,er5]06i7XKVx\"\t;WLM%Kh87iF>PZI7pj", null, "testValidatorError_id");
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractList.class, ex);
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
        }
    }
    
    public void testAddThrowsUnsupportedOperationException1() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map rules = new HashMap(1000, 1000.0F);
        rules.put("fiel", Collections.unmodifiableList(new ArrayList(100)));
        Map hashMap = new HashMap(0, 1.0F);
        Validator validator = new Validator(rules, errors, hashMap);
        String[] strings = new String[3];
        try {
            validator.add("fiel", new BooleanRule(), 100, strings);
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
        }
    }
    
    public void testAddThrowsUnsupportedOperationException2() throws Throwable {
        ArrayList arrayList = new ArrayList(100);
        Map hashMap = new HashMap(100, 100.0F);
        AbstractList list = (AbstractList) Collections.emptyList();
        hashMap.put("testString", list);
        hashMap.put("testString", arrayList);
        ArrayList arrayList2 = new ArrayList(1000);
        Map hashMap2 = new HashMap(1000, 1000.0F);
        hashMap2.put("testString", list);
        hashMap2.put("testString", arrayList2);
        Map errors = new HashMap(0, 1.0F);
        Map rules = new HashMap(1, 10.0F);
        rules.put("testString", list);
        Map hashMap3 = new HashMap(10, 10000.0F);
        Validator validator = new Validator(rules, errors, hashMap3);
        String[] strings = new String[1];
        try {
            validator.add("testString", new TimeRule(), "testValidatorError_id", strings);
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractList.class, ex);
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertSame("validator.params", hashMap3, getPrivateField(validator, "params"));
        }
    }
    
    public void testGetErrorIdThrowsClassCastException() throws Throwable {
        HashMap rules = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        HashMap errors = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Validator validator = new Validator(rules, errors, (Map) Mockingbird.getProxyObject(HashMap.class));
        NumberRule numberRule = (NumberRule) Mockingbird.getProxyObject(NumberRule.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, errors, "get", "(java.lang.Object)java.lang.Object", new Object[] {"testString"}, hashMap, 1);
        char[] chars = new char[1];
        chars[0] = '1';
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {numberRule}, chars, 1);
        Mockingbird.enterTestMode(Validator.class);
        try {
            callPrivateMethod("org.mentawai.validation.Validator", "getErrorId", new Class[] {String.class, Rule.class}, validator, new Object[] {"testString", numberRule});
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(Validator.class, ex);
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        }
    }
    
    public void testGetErrorIdThrowsNullPointerException() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Validator validator = new Validator(new HashMap(1000, 1000.0F), errors, new HashMap(0, 1.0F));
        try {
            callPrivateMethod("org.mentawai.validation.Validator", "getErrorId", new Class[] {String.class, Rule.class}, validator, new Object[] {"testValidatorField", new RequiredRule()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        }
    }
    
    public void testGetErrorIdThrowsNullPointerException1() throws Throwable {
        Validator validator = new Validator(new HashMap(100, 100.0F), null, new HashMap(1000, 1000.0F));
        try {
            callPrivateMethod("org.mentawai.validation.Validator", "getErrorId", new Class[] {String.class, Rule.class}, validator, new Object[] {"testValidatorField", new DateRule()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertNull("validator.errors", getPrivateField(validator, "errors"));
        }
    }
    
    public void testGetParamsThrowsClassCastException() throws Throwable {
        Map hashMap = new HashMap(0, 1.0F);
        hashMap.put("testString", "");
        Validator validator = new Validator(new HashMap(1000, 1000.0F), new HashMap(100, 100.0F), hashMap);
        try {
            callPrivateMethod("org.mentawai.validation.Validator", "getParams", new Class[] {String.class, Rule.class}, validator, new Object[] {"testString", new IntegerRule(100)});
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(Validator.class, ex);
            assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
        }
    }
    
    public void testGetTokensThrowsNullPointerException() throws Throwable {
        Validator validator = new Validator(new HashMap(100, 100.0F), new HashMap(1000, 1000.0F));
        Action action = new PojoAction("");
        Map tokens = new HashMap(0, 1.0F);
        try {
            validator.getTokens(action, tokens, "testValidatorField");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertEquals("(PojoAction) action.getPojo()", "", ((PojoAction) action).getPojo());
            assertEquals("(HashMap) tokens.size()", 0, tokens.size());
        }
    }
    
    public void testGetTokensThrowsNullPointerException1() throws Throwable {
        Validator validator = new Validator(new HashMap(100, 100.0F), new HashMap(1000, 1000.0F));
        Map tokens = new HashMap(0, 1.0F);
        try {
            validator.getTokens(null, tokens, "testValidatorField");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertEquals("(HashMap) tokens.size()", 0, tokens.size());
        }
    }
    
    public void testGetTokensThrowsNullPointerException2() throws Throwable {
        Validator validator = new Validator(new HashMap(100, 100.0F), new HashMap(1000, 1000.0F));
        Action action = new PojoAction(new Integer(0));
        Map tokens = new HashMap(0, 1.0F);
        tokens.put("", "");
        try {
            validator.getTokens(action, tokens, "testValidatorField");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertEquals("(PojoAction) action.getPojo()", new Integer(0), ((PojoAction) action).getPojo());
            assertEquals("(HashMap) tokens.size()", 1, tokens.size());
        }
    }
    
    public void testGetTokensThrowsNullPointerException3() throws Throwable {
        Validator validator = new Validator(new HashMap(100, 100.0F), new HashMap(1000, 1000.0F));
        Action action = new PojoAction(new Integer(0));
        try {
            validator.getTokens(action, null, "testValidatorField");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertEquals("(PojoAction) action.getPojo()", new Integer(0), ((PojoAction) action).getPojo());
        }
    }
    
    public void testGetTokensThrowsNullPointerException4() throws Throwable {
        Validator validator = new Validator(new HashMap(1000, 1000.0F), new HashMap(100, 100.0F));
        Map tokens = new HashMap(0, 1.0F);
        tokens.put("testString", "?Ue9;\n~^he6nWAZK:.AZ");
        try {
            validator.getTokens(null, tokens, "testValidatorField");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertEquals("(HashMap) tokens.size()", 1, tokens.size());
        }
    }
    
    public void testRequiredFieldsThrowsClassCastException() throws Throwable {
        String[] fields = new String[1];
        fields[0] = "testString";
        Map rules = new HashMap(100, 100.0F);
        Map errors = new HashMap(1000, 1000.0F);
        errors.put("testString", new Integer(0));
        Validator validator = new Validator(rules, errors);
        try {
            validator.requiredFields("testValidatorError_id", fields);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(Validator.class, ex);
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        }
    }
    
    public void testRequiredFieldsThrowsClassCastException1() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        rules.put("testString", new Date());
        Map errors = new HashMap(1000, 1000.0F);
        Validator validator = new Validator(rules, errors);
        String[] fields = new String[3];
        fields[2] = "testString";
        try {
            validator.requiredFields("testValidatorError_id", fields);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(Validator.class, ex);
        }
    }
    
    public void testRequiredFieldsThrowsNullPointerException() throws Throwable {
        Map rules = new HashMap(1000, 1000.0F);
        Validator validator = new Validator(rules, null, new HashMap(100, 100.0F));
        String[] fields = new String[3];
        try {
            validator.requiredFields("testValidatorError_id", fields);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertNull("validator.errors", getPrivateField(validator, "errors"));
        }
    }
    
    public void testRequiredListsThrowsClassCastException() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        Map errors = new HashMap(1000, 1000.0F);
        errors.put("", "testString");
        Validator validator = new Validator(rules, errors);
        String[] fields = new String[1];
        fields[0] = "";
        try {
            validator.requiredLists("testValidatorError_id", fields);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(Validator.class, ex);
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        }
    }
    
    public void testRequiredListsThrowsClassCastException1() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        Map errors = new HashMap(1000, 1000.0F);
        errors.put("testString", "testString");
        Validator validator = new Validator(rules, errors);
        String[] fields = new String[5];
        fields[2] = "testString";
        try {
            validator.requiredLists("testValidatorError_id", fields);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(Validator.class, ex);
        }
    }
    
    public void testRequiredListsThrowsNullPointerException() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Validator validator = new Validator(null, errors, new HashMap(1000, 1000.0F));
        String[] fields = new String[2];
        try {
            validator.requiredLists("testValidatorError_id", fields);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertNull("validator.rules", getPrivateField(validator, "rules"));
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
        }
    }
    
    public void testValidateThrowsClassCastException1() throws Throwable {
        HashMap rules = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        HashMap errors = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Validator validator = new Validator(rules, errors);
        PojoAction action = (PojoAction) Mockingbird.getProxyObject(PojoAction.class);
        FileMessageContext msgContext = (FileMessageContext) Mockingbird.getProxyObject(FileMessageContext.class);
        Mockingbird.enterRecordingMode();
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, rules, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "testString", 1);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.setReturnValue(false, rules, "get", "(java.lang.Object)java.lang.Object", new Object[] {"testString"}, linkedList, 1);
        Iterator listIterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, linkedList, "iterator", "()java.util.Iterator", new Object[] {}, listIterator, 1);
        Mockingbird.setReturnValue(false, listIterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, listIterator, "next", "()java.lang.Object", new Object[] {}, Mockingbird.getProxyObject(IntegerRule.class), 1);
        Mockingbird.setReturnValue(false, errors, "get", "(java.lang.Object)java.lang.Object", new Object[] {"testString"}, "testString", 1);
        Mockingbird.enterTestMode(Validator.class);
        try {
            validator.validate(action, msgContext);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(Validator.class, ex);
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertNull("validator.params", getPrivateField(validator, "params"));
            assertNull("action.getLocale()", action.getLocale());
        }
    }
    
    public void testValidateThrowsClassCastException3() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        rules.put("testString", "testString");
        Map errors = new HashMap(1000, 1000.0F);
        Validator validator = new Validator(rules, errors);
        Action action = new MockAction();
        try {
            validator.validate(action, new ClasspathMessageContext("testValidatorResource"));
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(Validator.class, ex);
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertNull("validator.params", getPrivateField(validator, "params"));
        }
    }
    
    public void testValidateThrowsClassCastException5() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        rules.put("testString", Collections.nCopies(100, new Object()));
        Map errors = new HashMap(1000, 1000.0F);
        Map hashMap = new HashMap(0, 1.0F);
        Validator validator = new Validator(rules, errors, hashMap);
        Action action = new LogoutAction();
        try {
            validator.validate(action, new ClasspathMessageContext("testValidatorResource"));
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(Validator.class, ex);
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
        }
    }
    
    public void testValidateThrowsNullPointerException() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map rules = new HashMap(0, 1.0F);
        Map hashMap = new HashMap(1, 10.0F);
        Validator validator = new Validator(rules, errors, hashMap);
        String[] strings = new String[2];
        validator.add("testString", new RegexRule("testValidatorPattern"), "testValidatorError_id", strings);
        String[] fields = new String[3];
        fields[0] = "testString";
        fields[1] = "testString";
        fields[2] = "testString";
        validator.requiredFields("testValidatorError_id", fields);
        validator.add(null, null, "testValidatorError_id1", (String[]) null);
        Action action = new MockAction();
        try {
            validator.validate(action, new FileMessageContext("testValidatorFile"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
        }
    }
    
    public void testValidateThrowsNullPointerException1() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map rules = new HashMap(0, 1.0F);
        rules.put("testString", new ArrayList());
        Map hashMap = new HashMap(1, 10.0F);
        Validator validator = new Validator(rules, errors, hashMap);
        validator.add("testValidatorField", new IntegerRule(), "testValidatorError_id");
        Action action = new SuccessAction();
        try {
            validator.validate(action, new ClasspathMessageContext("testValidatorResource"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BasicRule.class, ex);
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
        }
    }
    
    public void testValidateThrowsNullPointerException2() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map rules = new HashMap(0, 1.0F);
        Map hashMap = new HashMap(1, 10.0F);
        Validator validator = new Validator(rules, errors, hashMap);
        String[] fields = new String[3];
        fields[0] = "testString";
        fields[1] = "testString";
        fields[2] = "testString";
        validator.requiredFields("testValidatorError_id", fields);
        validator.add("testValidatorField", null, "testValidatorError_id", (String[]) null);
        Action action = new MockAction();
        try {
            validator.validate(action, new FileMessageContext("testValidatorFile"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
        }
    }
    
    public void testValidateThrowsNullPointerException3() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map rules = new HashMap(0, 1.0F);
        Map hashMap = new HashMap(1, 10.0F);
        Validator validator = new Validator(rules, errors, hashMap);
        String[] strings = new String[2];
        validator.add("testValidatorField", new RegexRule("testValidatorPattern"), "testValidatorError_id", strings);
        validator.add("testValidatorField1", null, "testValidatorError_id1", (String[]) null);
        Action action = new MockAction();
        try {
            validator.validate(action, new FileMessageContext("testValidatorFile"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
        }
    }
    
    public void testValidateThrowsNullPointerException4() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        rules.put("testString", null);
        Map errors = new HashMap(1000, 1000.0F);
        Map hashMap = new HashMap(0, 1.0F);
        Validator validator = new Validator(rules, errors, hashMap);
        Action action = new LogoutAction();
        try {
            validator.validate(action, new ClasspathMessageContext("testValidatorResource"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
        }
    }
    
    public void testValidateThrowsNullPointerException5() throws Throwable {
        Map rules = new HashMap(1000, 100.0F);
        rules.put("testString", null);
        rules.put("\u0019", new Vector(100));
        Map errors = new HashMap(0, 1000.0F);
        Validator validator = new Validator(rules, errors, null);
        try {
            validator.validate(null, new FileMessageContext("testValidatorFile", "testValidatorDir"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertNull("validator.params", getPrivateField(validator, "params"));
        }
    }
    
    public void testValidateThrowsNullPointerException6() throws Throwable {
        Map rules = new HashMap(100, 100.0F);
        Map errors = new HashMap(1000, 1000.0F);
        Validator validator = new Validator(rules, errors);
        String[] fields = new String[1];
        validator.requiredLists("testValidatorError_id", fields);
        Object pojo = new Object();
        Action action = new PojoAction(pojo);
        try {
            validator.validate(action, new ClasspathMessageContext("testValidatorResource"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BasicRule.class, ex);
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertNull("validator.params", getPrivateField(validator, "params"));
            assertSame("(PojoAction) action.getPojo()", pojo, ((PojoAction) action).getPojo());
        }
    }
    
    public void testValidateThrowsNullPointerException7() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map hashMap = new HashMap(1000, 1000.0F);
        Validator validator = new Validator(null, errors, hashMap);
        Action action = new LogoutAction();
        try {
            validator.validate(action, new ClasspathMessageContext("testValidatorResource"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertNull("validator.rules", getPrivateField(validator, "rules"));
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
        }
    }
    
    public void testValidateThrowsNullPointerException8() throws Throwable {
        HashMap rules = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        HashMap errors = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Validator validator = new Validator(rules, errors, hashMap);
        MockAction action = (MockAction) Mockingbird.getProxyObject(MockAction.class);
        FileMessageContext msgContext = (FileMessageContext) Mockingbird.getProxyObject(FileMessageContext.class);
        Mockingbird.enterRecordingMode();
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, rules, "keySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "testString", 1);
        LinkedList linkedList = (LinkedList) Mockingbird.getProxyObject(LinkedList.class);
        Mockingbird.setReturnValue(false, rules, "get", "(java.lang.Object)java.lang.Object", new Object[] {"testString"}, linkedList, 1);
        Iterator listIterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, linkedList, "iterator", "()java.util.Iterator", new Object[] {}, listIterator, 1);
        Mockingbird.setReturnValue(false, listIterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        RegexRule regexRule = (RegexRule) Mockingbird.getProxyObject(RegexRule.class);
        Mockingbird.setReturnValue(false, listIterator, "next", "()java.lang.Object", new Object[] {}, regexRule, 1);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, errors, "get", "(java.lang.Object)java.lang.Object", new Object[] {"testString"}, hashMap2, 1);
        Mockingbird.setReturnValue(false, hashMap2, "get", "(java.lang.Object)java.lang.Object", new Object[] {regexRule}, "testString", 1);
        Mockingbird.setReturnValue(regexRule.check("testString", action), true);
        Mockingbird.setReturnValue(false, listIterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, listIterator, "next", "()java.lang.Object", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, errors, "get", "(java.lang.Object)java.lang.Object", new Object[] {"testString"}, hashMap2, 1);
        Mockingbird.setReturnValue(false, hashMap2, "get", "(java.lang.Object)java.lang.Object", new Object[] {null}, "testString", 1);
        Mockingbird.enterTestMode(Validator.class);
        try {
            validator.validate(action, msgContext);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
            assertNull("action.getAction()", action.getAction());
        }
    }
    
    public void testValidateThrowsNullPointerException9() throws Throwable {
        Map errors = new HashMap(100, 100.0F);
        Map rules = new HashMap(0, 1.0F);
        Map hashMap = new HashMap(1, 10.0F);
        Validator validator = new Validator(rules, errors, hashMap);
        String[] strings = new String[2];
        validator.add("testValidatorField1", new RegexRule("testValidatorPattern"), "testValidatorError_id", strings);
        String[] fields = new String[3];
        fields[0] = "testString";
        fields[1] = "testString";
        fields[2] = "testString";
        validator.requiredFields("testValidatorError_id", fields);
        validator.add("", null, "testValidatorError_id1", (String[]) null);
        Action action = new MockAction();
        try {
            validator.validate(action, new FileMessageContext("testValidatorFile"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Validator.class, ex);
            assertSame("validator.errors", errors, getPrivateField(validator, "errors"));
            assertSame("validator.rules", rules, getPrivateField(validator, "rules"));
            assertSame("validator.params", hashMap, getPrivateField(validator, "params"));
        }
    }
}

