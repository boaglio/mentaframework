/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:20:55 PM
 * Time to generate: 00:16.840 seconds
 *
 */

package org.mentawai.formatter;

import com.agitar.lib.junit.AgitarTestCase;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

public class DateFormatterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return DateFormatter.class;
    }
    
    public void testConstructor() throws Throwable {
        DateFormatter dateFormatter = new DateFormatter(100);
        assertEquals("dateFormatter.style", 100, ((Number) getPrivateField(dateFormatter, "style")).intValue());
        assertNull("dateFormatter.sdf", getPrivateField(dateFormatter, "sdf"));
    }
    
    public void testConstructor1() throws Throwable {
        DateFormatter dateFormatter = new DateFormatter("");
        assertEquals("dateFormatter.style", -1, ((Number) getPrivateField(dateFormatter, "style")).intValue());
        assertEquals("dateFormatter.sdf.toPattern()", "", ((SimpleDateFormat) getPrivateField(dateFormatter, "sdf")).toPattern());
    }
    
    public void testFormat() throws Throwable {
        String result = new DateFormatter(100).format("%>eK3[", Locale.FRENCH);
        assertEquals("result", "%>eK3[", result);
    }
    
    public void testFormat1() throws Throwable {
        new DateFormatter(1).format(new Date(), Locale.JAPAN);
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testFormat2() throws Throwable {
        DateFormatter dateFormatter = new DateFormatter("");
        String result = dateFormatter.format(new Date(), Locale.CHINA);
        assertEquals("result", "", result);
        assertEquals("dateFormatter.sdf.toPattern()", "", ((SimpleDateFormat) getPrivateField(dateFormatter, "sdf")).toPattern());
    }
    
    public void testFormat3() throws Throwable {
        new DateFormatter(0).format(new Date(100L), Locale.KOREAN);
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testConstructorThrowsIllegalArgumentException() throws Throwable {
        try {
            new DateFormatter("testDateFormatterPattern");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Illegal pattern character 't'", ex.getMessage());
            assertThrownBy(SimpleDateFormat.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new DateFormatter(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SimpleDateFormat.class, ex);
        }
    }
    
    public void testFormatThrowsIllegalArgumentException() throws Throwable {
        DateFormatter dateFormatter = new DateFormatter(-2);
        try {
            dateFormatter.format(new Date(), Locale.UK);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Illegal date style -2", ex.getMessage());
            assertThrownBy(DateFormat.class, ex);
            assertNull("dateFormatter.sdf", getPrivateField(dateFormatter, "sdf"));
        }
    }
    
    public void testFormatThrowsIllegalStateException() throws Throwable {
        DateFormatter dateFormatter = new DateFormatter(-1);
        try {
            dateFormatter.format(new Date(), Locale.GERMAN);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Should never be here!", ex.getMessage());
            assertThrownBy(DateFormatter.class, ex);
            assertNull("dateFormatter.sdf", getPrivateField(dateFormatter, "sdf"));
        }
    }
    
    public void testFormatThrowsNullPointerException() throws Throwable {
        DateFormatter dateFormatter = new DateFormatter(0);
        try {
            dateFormatter.format(new Date(), null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNull("dateFormatter.sdf", getPrivateField(dateFormatter, "sdf"));
        }
    }
}

