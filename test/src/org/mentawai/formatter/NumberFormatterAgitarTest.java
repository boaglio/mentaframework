/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:21:36 PM
 * Time to generate: 00:17.733 seconds
 *
 */

package org.mentawai.formatter;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.Locale;

public class NumberFormatterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return NumberFormatter.class;
    }
    
    public void testConstructor() throws Throwable {
        NumberFormatter numberFormatter = new NumberFormatter("testNumberFormatterPattern");
        assertEquals("numberFormatter.pattern", "testNumberFormatterPattern", getPrivateField(numberFormatter, "pattern"));
        assertEquals("numberFormatter.style", -1, ((Number) getPrivateField(numberFormatter, "style")).intValue());
        Object actual = ((DecimalFormatSymbols) getPrivateField(numberFormatter, "symbols")).getCurrencySymbol();
    }
    
    public void testConstructor1() throws Throwable {
        DecimalFormatSymbols symbols = new DecimalFormatSymbols(Locale.ENGLISH);
        NumberFormatter numberFormatter = new NumberFormatter("testNumberFormatterPattern", symbols);
        assertEquals("numberFormatter.pattern", "testNumberFormatterPattern", getPrivateField(numberFormatter, "pattern"));
        assertEquals("numberFormatter.style", -1, ((Number) getPrivateField(numberFormatter, "style")).intValue());
        assertSame("numberFormatter.symbols", symbols, getPrivateField(numberFormatter, "symbols"));
    }
    
    public void testConstructor2() throws Throwable {
        NumberFormatter numberFormatter = new NumberFormatter(100);
        assertNull("numberFormatter.pattern", getPrivateField(numberFormatter, "pattern"));
        assertEquals("numberFormatter.style", 100, ((Number) getPrivateField(numberFormatter, "style")).intValue());
    }
    
    public void testFormat() throws Throwable {
        String result = new NumberFormatter(1).format(new Byte((byte)-8), Locale.JAPANESE);
        assertEquals("result", "-8", result);
    }
    
    public void testFormat1() throws Throwable {
        String result = new NumberFormatter(2).format(new Byte((byte)0), Locale.SIMPLIFIED_CHINESE);
        assertEquals("result", "0%", result);
    }
    
    public void testFormat2() throws Throwable {
        NumberFormatter numberFormatter = new NumberFormatter("testNumberFormatterPattern");
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterTestMode(NumberFormatter.class);
        String result = numberFormatter.format(new Integer(0), loc);
        assertEquals("result", "testNumberFormatterPattern0", result);
    }
    
    public void testFormat3() throws Throwable {
        String result = new NumberFormatter("testNumberFormatterPattern").format("testString", Locale.CHINESE);
        assertEquals("result", "testString", result);
    }
    
    public void testFormat4() throws Throwable {
        String result = new NumberFormatter(0).format(new Double(1.0), Locale.ITALY);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testFormatWithAggressiveMocks() throws Throwable {
        NumberFormatter numberFormatter = (NumberFormatter) Mockingbird.getProxyObject(NumberFormatter.class, true);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        NumberFormat numberFormat = (NumberFormat) Mockingbird.getProxyObject(NumberFormat.class);
        setPrivateField(numberFormatter, "pattern", null);
        setPrivateField(numberFormatter, "style", new Integer(3));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, NumberFormat.class, "getCurrencyInstance", "(java.util.Locale)java.text.NumberFormat", new Object[] {null}, numberFormat, 1);
        Mockingbird.setReturnValue(false, numberFormat, "format", "(java.lang.Object)java.lang.String", new Object[] {number}, "", 1);
        Mockingbird.enterTestMode(NumberFormatter.class);
        String result = numberFormatter.format(number, null);
        assertEquals("result", "", result);
    }
    
    public void testFormatThrowsIllegalArgumentException() throws Throwable {
        try {
            new NumberFormatter(-2).format(new Integer(0), null);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Invalid Style number: -2", ex.getMessage());
            assertThrownBy(NumberFormatter.class, ex);
        }
    }
    
    public void testFormatThrowsIllegalArgumentException1() throws Throwable {
        try {
            new NumberFormatter("sun.text.resourQces.LocaleElements").format(new Byte((byte)0), Locale.UK);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Multiple decimal separators in pattern \"sun.text.resourQces.LocaleElements\"", ex.getMessage());
            assertThrownBy(DecimalFormat.class, ex);
        }
    }
    
    public void testFormatThrowsIllegalArgumentExceptionWithAggressiveMocks() throws Throwable {
        NumberFormatter numberFormatter = (NumberFormatter) Mockingbird.getProxyObject(NumberFormatter.class, true);
        Number number = (Number) Mockingbird.getProxyObject(Number.class);
        setPrivateField(numberFormatter, "pattern", null);
        setPrivateField(numberFormatter, "style", new Integer(4));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(IllegalArgumentException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(IllegalArgumentException.class));
        Mockingbird.enterTestMode(NumberFormatter.class);
        try {
            numberFormatter.format(number, null);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testFormatThrowsIllegalStateException() throws Throwable {
        NumberFormatter numberFormatter = new NumberFormatter(null);
        try {
            numberFormatter.format(new Integer(-3), Locale.GERMAN);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Should never be here!", ex.getMessage());
            assertThrownBy(NumberFormatter.class, ex);
        }
    }
    
    public void testFormatThrowsNullPointerException() throws Throwable {
        try {
            new NumberFormatter(0).format(new Short((short)0), null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testFormatThrowsNullPointerException1() throws Throwable {
        try {
            new NumberFormatter(2).format(new Short((short)0), null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testFormatThrowsNullPointerException2() throws Throwable {
        try {
            new NumberFormatter(1).format(new Integer(0), null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
}

