/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:37:24 PM
 * Time to generate: 00:17.625 seconds
 *
 */

package org.mentawai.authorization;

import com.agitar.lib.junit.AgitarTestCase;

public class PermissionAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return Permission.class;
    }
    
    public void testConstructor() throws Throwable {
        Permission permission = new Permission(100, "testPermissionName");
        assertEquals("permission.getName()", "testPermissionName", permission.getName());
        assertEquals("permission.getId()", 100, permission.getId());
    }
    
    public void testConstructor1() throws Throwable {
        Permission permission = new Permission("testPermissionName");
        assertEquals("permission.getName()", "testPermissionName", permission.getName());
        assertEquals("permission.getId()", -1, permission.getId());
    }
    
    public void testEquals() throws Throwable {
        boolean result = new Permission("testPermissionName").equals(new Permission(0, "testPermissionName1"));
        assertFalse("result", result);
    }
    
    public void testEquals1() throws Throwable {
        boolean result = new Permission(100, "testPermissionName").equals(new Permission(0, "testPermissionName1"));
        assertFalse("result", result);
    }
    
    public void testEquals2() throws Throwable {
        boolean result = new Permission("testPermissionName").equals(new Permission(-2, "testPermissionName1"));
        assertFalse("result", result);
    }
    
    public void testEquals3() throws Throwable {
        boolean result = new Permission(0, "testPermissionName").equals(new Permission(-2, "testPermissionName1"));
        assertFalse("result", result);
    }
    
    public void testEquals4() throws Throwable {
        boolean result = new Permission("testString").equals(new Permission("teStstriNg"));
        assertTrue("result", result);
    }
    
    public void testEquals5() throws Throwable {
        Permission permission = new Permission("testString");
        boolean result = permission.equals(new Permission(100, "testString"));
        assertTrue("result", result);
    }
    
    public void testEquals6() throws Throwable {
        boolean result = new Permission("testPermissionName").equals(new Permission("testPermissionName1"));
        assertFalse("result", result);
    }
    
    public void testEquals7() throws Throwable {
        boolean result = new Permission(-2, "testPermissionName").equals(new Permission(74, "testPermissionName1"));
        assertFalse("result", result);
    }
    
    public void testEquals8() throws Throwable {
        Permission permission = new Permission(0, "testPermissionName");
        boolean result = permission.equals(new Permission(0, "testPermissionName1"));
        assertTrue("result", result);
    }
    
    public void testEquals9() throws Throwable {
        boolean result = new Permission(100, "testPermissionName").equals("testString");
        assertFalse("result", result);
    }
    
    public void testHashCode() throws Throwable {
        int result = new Permission(-2, "testPermissionName").hashCode();
        assertEquals("result", -2, result);
    }
    
    public void testHashCode1() throws Throwable {
        Permission permission = new Permission("testPermissionName");
        int result = permission.hashCode();
        assertEquals("result", 1604181548, result);
        assertEquals("permission.getName()", "testPermissionName", permission.getName());
    }
    
    public void testHashCode2() throws Throwable {
        Permission permission = new Permission("");
        int result = permission.hashCode();
        assertEquals("result", 0, result);
        assertEquals("permission.getName()", "", permission.getName());
    }
    
    public void testHashCode3() throws Throwable {
        int result = new Permission(0, "testPermissionName").hashCode();
        assertEquals("result", 0, result);
    }
    
    public void testSetId() throws Throwable {
        Permission permission = new Permission("testPermissionName");
        permission.setId(100);
        assertEquals("permission.getId()", 100, permission.getId());
    }
    
    public void testSetName() throws Throwable {
        Permission permission = new Permission(100, "testPermissionName");
        permission.setName("testPermissionName");
        assertEquals("permission.getName()", "testPermissionName", permission.getName());
    }
    
    public void testToString() throws Throwable {
        String result = new Permission(-2, "testPermissionName").toString();
        assertEquals("result", "-2: testPermissionName", result);
    }
    
    public void testToString1() throws Throwable {
        String result = new Permission(0, "testPermissionName").toString();
        assertEquals("result", "0: testPermissionName", result);
    }
    
    public void testToString2() throws Throwable {
        String result = new Permission("testPermissionName").toString();
        assertEquals("result", "testPermissionName", result);
    }
    
    public void testEqualsThrowsNullPointerException() throws Throwable {
        try {
            new Permission("testPermissionName").equals(new Permission(null));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Permission.class, ex);
        }
    }
    
    public void testHashCodeThrowsNullPointerException() throws Throwable {
        Permission permission = new Permission(null);
        try {
            permission.hashCode();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Permission.class, ex);
            assertNull("permission.getName()", permission.getName());
        }
    }
}

