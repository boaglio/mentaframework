/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:34:03 PM
 * Time to generate: 00:26.450 seconds
 *
 */

package org.mentawai.authorization;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.StringTokenizer;

public class GroupAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return Group.class;
    }
    
    public void testConstructor() throws Throwable {
        Set permissions = new HashSet(100, 100.0F);
        permissions.add(new Permission("testGroupName"));
        Group group = new Group("testGroupName", permissions);
        assertEquals("group.getId()", -1, group.getId());
        assertEquals("group.getName()", "testGroupName", group.getName());
        assertEquals("group.getPermissions().size()", 1, group.getPermissions().size());
    }
    
    public void testConstructor1() throws Throwable {
        Group group = new Group("testGroupName", new HashSet(100, 100.0F));
        assertEquals("group.getId()", -1, group.getId());
        assertEquals("group.getName()", "testGroupName", group.getName());
        assertEquals("group.getPermissions().size()", 0, group.getPermissions().size());
    }
    
    public void testConstructor2() throws Throwable {
        Group group = new Group("testGroupName", "testGroupPermissions");
        assertEquals("group.getId()", -1, group.getId());
        assertEquals("group.getName()", "testGroupName", group.getName());
        assertEquals("group.getPermissions().size()", 1, group.getPermissions().size());
    }
    
    public void testConstructor3() throws Throwable {
        Set permissions = new HashSet(100, 100.0F);
        permissions.add(new Permission("testGroupName"));
        Group group = new Group(100, "testGroupName", permissions);
        assertEquals("group.getId()", 100, group.getId());
        assertEquals("group.getName()", "testGroupName", group.getName());
        assertEquals("group.getPermissions().size()", 1, group.getPermissions().size());
    }
    
    public void testConstructor4() throws Throwable {
        Group group = new Group(100, "testGroupName", new LinkedHashSet(100, 100.0F));
        assertEquals("group.getId()", 100, group.getId());
        assertEquals("group.getName()", "testGroupName", group.getName());
        assertEquals("group.getPermissions().size()", 0, group.getPermissions().size());
    }
    
    public void testConstructor5() throws Throwable {
        Permission[] permissions = new Permission[1];
        Group group = new Group(100, "testGroupName", permissions);
        assertEquals("group.getId()", 100, group.getId());
        assertEquals("group.getName()", "testGroupName", group.getName());
        assertEquals("group.getPermissions().size()", 1, group.getPermissions().size());
    }
    
    public void testConstructor6() throws Throwable {
        Permission[] permissions = new Permission[0];
        Group group = new Group(100, "testGroupName", permissions);
        assertEquals("group.getId()", 100, group.getId());
        assertEquals("group.getName()", "testGroupName", group.getName());
        assertEquals("group.getPermissions().size()", 0, group.getPermissions().size());
    }
    
    public void testConstructor7() throws Throwable {
        Group group = new Group(100, "testGroupName", (Permission[]) null);
        assertEquals("group.getId()", 100, group.getId());
        assertEquals("group.getName()", "testGroupName", group.getName());
    }
    
    public void testConstructor8() throws Throwable {
        String[] permissions = new String[3];
        permissions[0] = "testString";
        permissions[1] = "testString";
        permissions[2] = "";
        Group group = new Group("testGroupName", permissions);
        assertEquals("group.getId()", -1, group.getId());
        assertEquals("group.getName()", "testGroupName", group.getName());
        assertEquals("group.getPermissions().size()", 2, group.getPermissions().size());
    }
    
    public void testConstructor9() throws Throwable {
        Group group = new Group(100, "testGroupName", (String[]) null);
        assertEquals("group.getId()", 100, group.getId());
        assertEquals("group.getName()", "testGroupName", group.getName());
    }
    
    public void testConstructor10() throws Throwable {
        String[] permissions = new String[1];
        permissions[0] = "testString";
        Group group = new Group(100, "testGroupName", permissions);
        assertEquals("group.getId()", 100, group.getId());
        assertEquals("group.getName()", "testGroupName", group.getName());
        assertEquals("group.getPermissions().size()", 1, group.getPermissions().size());
    }
    
    public void testConstructor11() throws Throwable {
        String[] permissions = new String[0];
        Group group = new Group(100, "testGroupName", permissions);
        assertEquals("group.getId()", 100, group.getId());
        assertEquals("group.getName()", "testGroupName", group.getName());
        assertEquals("group.getPermissions().size()", 0, group.getPermissions().size());
    }
    
    public void testConstructor12() throws Throwable {
        Group group = new Group("testGroupName");
        assertEquals("group.getId()", -1, group.getId());
        assertEquals("group.getName()", "testGroupName", group.getName());
    }
    
    public void testConstructor13() throws Throwable {
        Group group = new Group(100, "testGroupName");
        assertEquals("group.getId()", 100, group.getId());
        assertEquals("group.getName()", "testGroupName", group.getName());
    }
    
    public void testConstructor14() throws Throwable {
        Permission[] permissions = new Permission[3];
        Group group = new Group("testGroupName", permissions);
        assertEquals("group.getId()", -1, group.getId());
        assertEquals("group.getName()", "testGroupName", group.getName());
        assertEquals("group.getPermissions().size()", 1, group.getPermissions().size());
    }
    
    public void testConstructor15() throws Throwable {
        Group group = new Group("testGroupName", "");
        assertEquals("group.getId()", -1, group.getId());
        assertEquals("group.getName()", "testGroupName", group.getName());
        assertEquals("group.getPermissions().size()", 0, group.getPermissions().size());
    }
    
    public void testAddPermission() throws Throwable {
        Permission p = new Permission("testGroupName");
        Group group = (Group) Mockingbird.getProxyObject(Group.class);
        group.addPermission(p);
        Mockingbird.enterTestMode(Group.class);
        Group result = group.addPermission(p);
        assertSame("result", group, result);
        assertEquals("group.getPermissions().size()", 1, group.getPermissions().size());
    }
    
    public void testAddPermission1() throws Throwable {
        Group group = new Group(100, "testGroupName");
        Group result = group.addPermission(new Permission(100, "testGroupName"));
        assertEquals("group.getPermissions().size()", 1, group.getPermissions().size());
        assertSame("result", group, result);
    }
    
    public void testAddPermission2() throws Throwable {
        Group group = new Group(100, "testGroupName");
        Group result = group.addPermission("testGroupPermission");
        assertEquals("group.getPermissions().size()", 1, group.getPermissions().size());
        assertSame("result", group, result);
    }
    
    public void testEquals() throws Throwable {
        String[] permissions = new String[1];
        permissions[0] = "testString";
        boolean result = new Group(-18, "testGroupName1", (String[]) null).equals(new Group(-2, "testGroupName", permissions));
        assertFalse("result", result);
    }
    
    public void testEquals1() throws Throwable {
        Group group = new Group("testGroupName", "testGroupPermissions");
        group.setId(0);
        group.addPermission(new Permission("testGroupName"));
        String[] permissions = new String[1];
        permissions[0] = "testString";
        boolean result = group.equals(new Group(100, "testGroupName", permissions));
        assertFalse("result", result);
    }
    
    public void testEquals2() throws Throwable {
        boolean result = new Group("testGroupName", new HashSet(100, 100.0F)).equals(new Group("testGroupName1", "testGroupPermissions"));
        assertFalse("result", result);
    }
    
    public void testEquals3() throws Throwable {
        Group obj = new Group("testGroupName", "testGroupPermissions");
        boolean result = obj.equals(obj);
        assertTrue("result", result);
    }
    
    public void testEquals4() throws Throwable {
        Group group = new Group("testString", "testGroupPermissions");
        group.addPermission(new Permission("testGroupName"));
        boolean result = group.equals(new Group(100, "testString"));
        assertTrue("result", result);
    }
    
    public void testEquals5() throws Throwable {
        Group obj = new Group("testGroupName");
        obj.setId(0);
        boolean result = obj.equals(obj);
        assertTrue("result", result);
    }
    
    public void testEquals6() throws Throwable {
        String[] permissions = new String[2];
        permissions[0] = "";
        permissions[1] = "x";
        Group group = new Group(-2, "testGroupName", permissions);
        String[] permissions2 = new String[0];
        group.addPermission(new Permission("testGroupName"));
        boolean result = group.equals(new Group(-18, "testGroupName1", permissions2));
        assertFalse("result", result);
    }
    
    public void testEquals7() throws Throwable {
        String[] permissions = new String[5];
        permissions[0] = "";
        permissions[1] = "";
        permissions[2] = "";
        permissions[3] = "";
        permissions[4] = "";
        String[] permissions2 = new String[1];
        permissions2[0] = "testString";
        boolean result = new Group("testGroupName", permissions).equals(new Group(0, "testGroupName1", permissions2));
        assertFalse("result", result);
    }
    
    public void testEquals8() throws Throwable {
        Group group = (Group) Mockingbird.getProxyObject(Group.class);
        group.addPermission(new Permission("testGroupName"));
        Mockingbird.enterTestMode(Group.class);
        boolean result = group.equals(new Integer(-100));
        assertFalse("result", result);
    }
    
    public void testGetPermissions() throws Throwable {
        Set hashSet = new HashSet(100, 100.0F);
        Permission permission = new Permission(100, "testGroupName");
        hashSet.add(permission);
        HashSet result = (HashSet) callPrivateMethod("org.mentawai.authorization.Group", "getPermissions", new Class[] {Set.class}, null, new Object[] {hashSet});
        assertEquals("result.size()", 1, result.size());
        assertTrue("(HashSet) result.contains(permission)", ((Collection) result).contains(permission));
    }
    
    public void testGetPermissions1() throws Throwable {
        Set hashSet = new HashSet(100, 100.0F);
        hashSet.add(",<");
        HashSet result = (HashSet) callPrivateMethod("org.mentawai.authorization.Group", "getPermissions", new Class[] {Set.class}, null, new Object[] {hashSet});
        assertEquals("result.size()", 1, result.size());
    }
    
    public void testGetPermissions2() throws Throwable {
        HashSet result = (HashSet) callPrivateMethod("org.mentawai.authorization.Group", "getPermissions", new Class[] {Set.class}, null, new Object[] {new HashSet(100, 100.0F)});
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testHasPermission() throws Throwable {
        String[] permissions = new String[2];
        permissions[0] = "abcdefghijklmnopqrstuvxyz";
        permissions[1] = "testString";
        Group group = new Group("testGroupName", permissions);
        boolean result = group.hasPermission("testString");
        assertTrue("result", result);
        assertEquals("group.getPermissions().size()", 2, group.getPermissions().size());
    }
    
    public void testHasPermission1() throws Throwable {
        boolean result = new Group("testGroupName").hasPermission("testGroupPermission");
        assertFalse("result", result);
    }
    
    public void testHasPermission2() throws Throwable {
        String[] permissions = new String[2];
        permissions[0] = "testString";
        permissions[1] = "1";
        Group group = new Group("testGroupName", permissions);
        boolean result = group.hasPermission("testString");
        assertTrue("result", result);
        assertEquals("group.getPermissions().size()", 2, group.getPermissions().size());
    }
    
    public void testHasPermission3() throws Throwable {
        String[] permissions = new String[0];
        Group group = new Group(100, "testGroupName", permissions);
        boolean result = group.hasPermission("testGroupPermission");
        assertFalse("result", result);
        assertEquals("group.getPermissions().size()", 0, group.getPermissions().size());
    }
    
    public void testHasPermission4() throws Throwable {
        Permission permission = new Permission(100, "testGroupName");
        String[] permissions = new String[0];
        Group group = new Group(100, "testGroupName", permissions);
        Set permissions2 = new HashSet(100, 100.0F);
        permissions2.add(permission);
        group.setPermissions(permissions2);
        boolean result = group.hasPermission("testGroupPermission");
        assertFalse("result", result);
        assertSame("group.getPermissions()", permissions2, group.getPermissions());
    }
    
    public void testHasPermission5() throws Throwable {
        Permission[] permissions = new Permission[1];
        Group group = new Group(100, "testGroupName", permissions);
        group.addPermission("testGroupPermission");
        boolean result = group.hasPermission(new Permission(100, "testGroupName"));
        assertFalse("result", result);
        assertEquals("group.getPermissions().size()", 2, group.getPermissions().size());
    }
    
    public void testHasPermission6() throws Throwable {
        Permission[] permissions = new Permission[0];
        Group group = new Group(100, "testGroupName", permissions);
        group.setPermissions(null);
        boolean result = group.hasPermission(new Permission(100, "testGroupName"));
        assertFalse("result", result);
    }
    
    public void testHasPermission7() throws Throwable {
        String[] permissions = new String[1];
        permissions[0] = "testString";
        Group group = new Group(100, "testGroupName", permissions);
        boolean result = group.hasPermission(new Permission("testString"));
        assertTrue("result", result);
        assertEquals("group.getPermissions().size()", 1, group.getPermissions().size());
    }
    
    public void testHashCode() throws Throwable {
        int result = new Group(0, "testGroupName", new HashSet(100, 100.0F)).hashCode();
        assertEquals("result", 0, result);
    }
    
    public void testHashCode1() throws Throwable {
        String[] permissions = new String[3];
        permissions[0] = "42w";
        permissions[1] = "testString";
        permissions[2] = "";
        Group group = new Group("testGroupName", permissions);
        int result = group.hashCode();
        assertEquals("result", -813470408, result);
        assertEquals("group.getName()", "testGroupName", group.getName());
    }
    
    public void testHashCode2() throws Throwable {
        int result = new Group(-2, "testGroupName", new HashSet(100, 100.0F)).hashCode();
        assertEquals("result", -2, result);
    }
    
    public void testSetId() throws Throwable {
        Group group = new Group("testGroupName");
        group.setId(100);
        assertEquals("group.getId()", 100, group.getId());
    }
    
    public void testSetName() throws Throwable {
        Group group = new Group(100, "testGroupName");
        group.setName("testGroupName");
        assertEquals("group.getName()", "testGroupName", group.getName());
    }
    
    public void testSetPermissions() throws Throwable {
        Group group = new Group("testGroupName");
        Set permissions = new HashSet(100, 100.0F);
        group.setPermissions(permissions);
        assertSame("group.getPermissions()", permissions, group.getPermissions());
    }
    
    public void testToString() throws Throwable {
        String[] permissions = new String[2];
        permissions[0] = "testString";
        permissions[1] = "abcdefghwjklmnopqrstuvwxyz";
        String result = new Group("testGroupName", permissions).toString();
        assertEquals("result", "testGroupName", result);
    }
    
    public void testToString1() throws Throwable {
        String result = new Group(-2, "testGroupName", (String[]) null).toString();
        assertEquals("result", "-2: testGroupName", result);
    }
    
    public void testToString2() throws Throwable {
        String[] permissions = new String[0];
        String result = new Group(0, "testGroupName", permissions).toString();
        assertEquals("result", "0: testGroupName", result);
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        String[] permissions = new String[2];
        try {
            new Group("testGroupName", permissions);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Permission.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException1() throws Throwable {
        String[] permissions = new String[2];
        try {
            new Group(100, "testGroupName", permissions);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Permission.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException2() throws Throwable {
        String[] permissions = new String[2];
        permissions[0] = "";
        try {
            new Group(100, "testGroupName", permissions);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Permission.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException3() throws Throwable {
        try {
            new Group("testGroupName", (String) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(StringTokenizer.class, ex);
        }
    }
    
    public void testAddPermissionThrowsNullPointerException() throws Throwable {
        Group group = new Group("testGroupName");
        try {
            group.addPermission(new Permission(null));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("group.getPermissions().size()", 0, group.getPermissions().size());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Permission.class, ex);
        }
    }
    
    public void testAddPermissionThrowsNullPointerException1() throws Throwable {
        String[] permissions = new String[1];
        permissions[0] = "testString";
        Group group = new Group("testGroupName", permissions);
        try {
            group.addPermission((String) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Permission.class, ex);
            assertEquals("group.getPermissions().size()", 1, group.getPermissions().size());
        }
    }
    
    public void testEqualsThrowsNullPointerException() throws Throwable {
        String[] permissions = new String[2];
        permissions[0] = "testString";
        permissions[1] = "testString";
        try {
            new Group("testGroupName").equals(new Group((String) null, permissions));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Group.class, ex);
        }
    }
    
    public void testGetPermissionsThrowsIllegalArgumentException() throws Throwable {
        Set hashSet = new HashSet(100, 100.0F);
        Object obj = new Object();
        hashSet.add(obj);
        try {
            callPrivateMethod("org.mentawai.authorization.Group", "getPermissions", new Class[] {Set.class}, null, new Object[] {hashSet});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertTrue("(HashSet) hashSet.contains(obj)", hashSet.contains(obj));
            assertThrownBy(Group.class, ex);
            assertEquals("(HashSet) hashSet.size()", 1, hashSet.size());
        }
    }
    
    public void testGetPermissionsThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("org.mentawai.authorization.Group", "getPermissions", new Class[] {Set.class}, null, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Group.class, ex);
        }
    }
    
    public void testHasPermissionThrowsNullPointerException() throws Throwable {
        Group group = (Group) Mockingbird.getProxyObject(Group.class);
        group.addPermission((Permission) null);
        group.addPermission(new Permission("testGroupName"));
        Mockingbird.enterTestMode(Group.class);
        try {
            group.hasPermission("testGroupPermission");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Group.class, ex);
            assertEquals("group.getPermissions().size()", 2, group.getPermissions().size());
        }
    }
    
    public void testHasPermissionThrowsNullPointerException1() throws Throwable {
        Group group = (Group) Mockingbird.getProxyObject(Group.class);
        group.addPermission((Permission) null);
        group.addPermission(new Permission(100, "testGroupName"));
        group.addPermission(new Permission(1000, "testGroupName1"));
        Mockingbird.enterTestMode(Group.class);
        try {
            group.hasPermission("testGroupPermission");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Group.class, ex);
            assertEquals("group.getPermissions().size()", 3, group.getPermissions().size());
        }
    }
    
    public void testHashCodeThrowsNullPointerException() throws Throwable {
        String[] permissions = new String[2];
        permissions[0] = "";
        permissions[1] = "";
        Group group = new Group((String) null, permissions);
        try {
            group.hashCode();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Group.class, ex);
            assertNull("group.getName()", group.getName());
        }
    }
}

