/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:28:07 PM
 * Time to generate: 00:27.770 seconds
 *
 */

package org.mentawai.authorization;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.mentawai.action.BaseLoginAction;
import org.mentawai.core.ApplicationContext;
import org.mentawai.core.Context;
import org.mentawai.core.MapContext;
import org.mentawai.core.SessionContext;
import org.mentawai.i18n.LocaleManager;
import org.mentawai.list.DBListData;
import org.mentawai.list.ListData;
import org.mentawai.list.ListItem;
import org.mentawai.list.ListManager;
import org.mentawai.list.LocalizedListData;
import org.mentawai.list.SimpleListData;

public class AuthorizationManagerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return AuthorizationManager.class;
    }
    
    public void testConstructor() throws Throwable {
        new AuthorizationManager();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAddGroup() throws Throwable {
        AuthorizationManager.addGroup(new Group("testAuthorizationManagerName"));
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 2 assertions
    }
    
    public void testAddGroup1() throws Throwable {
        String[] permissions = new String[0];
        AuthorizationManager.addGroup(new Group(-2, "testAuthorizationManagerName", permissions));
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 3 assertions
    }
    
    public void testAddGroup2() throws Throwable {
        String[] permissions = new String[1];
        permissions[0] = "testString";
        AuthorizationManager.addGroup(new Group(0, "testAuthorizationManagerName", permissions));
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 3 assertions
    }
    
    public void testAddListGroup() throws Throwable {
        ListData data = new SimpleListData();
        AuthorizationManager.addListGroup(data);
        assertEquals("(SimpleListData) data.getName()", "", ((SimpleListData) data).getName());
    }
    
    public void testAddListGroupWithAggressiveMocks() throws Throwable {
        storeStaticField(AuthorizationManager.class, "groupsMapId");
        storeStaticField(AuthorizationManager.class, "groupsMap");
        storeStaticField(AuthorizationManager.class, "groups");
        ListData listData = (ListData) Mockingbird.getProxyObject(ListData.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ListItem listItem = (ListItem) Mockingbird.getProxyObject(ListItem.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        ListItem listItem2 = (ListItem) Mockingbird.getProxyObject(ListItem.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(LocaleManager.getDefaultLocale(), null);
        AuthorizationManager.groups = set;
        AuthorizationManager.groupsMap = map;
        AuthorizationManager.groupsMapId = map2;
        Mockingbird.setReturnValue(listData.getValues(null), list);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), listItem);
        Mockingbird.setReturnValue(listItem.getKey(), "");
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(listItem.getValue(), "");
        Group group = (Group) Mockingbird.getProxyObject(Group.class);
        Mockingbird.replaceObjectForRecording(Group.class, "<init>(int,java.lang.String)", group);
        Mockingbird.enterNormalMode();
        group.setName("");
        group.setId(0);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(set.add(group), false);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), listItem2);
        Mockingbird.setReturnValue(listItem2.getKey(), "");
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(listItem2.getValue(), "");
        Group group2 = (Group) Mockingbird.getProxyObject(Group.class);
        Mockingbird.replaceObjectForRecording(Group.class, "<init>(int,java.lang.String)", group2);
        Mockingbird.enterNormalMode();
        group2.setName("");
        group2.setId(0);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(set.add(group2), false);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(AuthorizationManager.class);
        AuthorizationManager.addListGroup(listData);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCheck() throws Throwable {
        boolean result = AuthorizationManager.check("", "testAuthorizationManagerPermission");
        assertFalse("result", result);
    }
    
    public void testCheck1() throws Throwable {
        Mockingbird.enterRecordingMode();
        Group group = (Group) Mockingbird.getProxyObject(Group.class);
        Mockingbird.setReturnValue(AuthorizationManager.getGroup("testString"), group);
        Mockingbird.setReturnValue(group.hasPermission("testString"), true);
        Mockingbird.enterTestMode(AuthorizationManager.class);
        boolean result = AuthorizationManager.check("testString", "testString");
        assertTrue("result", result);
    }
    
    public void testCheck2() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(AuthorizationManager.getGroup("testString"), null);
        Mockingbird.enterTestMode(AuthorizationManager.class);
        boolean result = AuthorizationManager.check("testAuthorizationManagerGroup", "testAuthorizationManagerPermission");
        assertFalse("result", result);
    }
    
    public void testCheckAny() throws Throwable {
        boolean result = AuthorizationManager.checkAny("testAuthorizationManagerGroup", new ArrayList(100));
        assertFalse("result", result);
    }
    
    public void testCheckAny1() throws Throwable {
        ArrayList permissions = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, permissions, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "testString", 1);
        Mockingbird.setReturnValue(AuthorizationManager.check("testString", "testString"), true);
        Mockingbird.enterTestMode(AuthorizationManager.class);
        boolean result = AuthorizationManager.checkAny("testString", permissions);
        assertTrue("result", result);
    }
    
    public void testCheckAny2() throws Throwable {
        List permissions = new ArrayList(100);
        permissions.add("testString");
        boolean result = AuthorizationManager.checkAny("testAuthorizationManagerGroup", permissions);
        assertFalse("result", result);
    }
    
    public void testGetGroup() throws Throwable {
        AuthorizationManager.getGroup("testAuthorizationManagerGroupName");
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 2 assertions
    }
    
    public void testGetGroup1() throws Throwable {
        AuthorizationManager.getGroup(-1);
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 2 assertions
    }
    
    public void testHasGroup() throws Throwable {
        Group g = (Group) Mockingbird.getProxyObject(Group.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(HashSet.class), "contains", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AuthorizationManager.class);
        boolean result = AuthorizationManager.hasGroup(g);
        assertFalse("result", result);
    }
    
    public void testHasGroup1() throws Throwable {
        AuthorizationManager.hasGroup(new Group(100, "testAuthorizationManagerName", (String[]) null));
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 2 assertions
    }
    
    public void testHasGroup2() throws Throwable {
        AuthorizationManager.hasGroup(-1);
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 2 assertions
    }
    
    public void testHasGroup3() throws Throwable {
        AuthorizationManager.hasGroup(100);
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 2 assertions
    }
    
    public void testHasGroup4() throws Throwable {
        AuthorizationManager.hasGroup("testAuthorizationManagerName");
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 2 assertions
    }
    
    public void testSetUserGroup() throws Throwable {
        Permission[] permissions = new Permission[2];
        Group g = new Group("testAuthorizationManagerName", permissions);
        Context session = new ApplicationContext((ServletContext) Mockingbird.getProxyObject(ServletContext.class));
        Mockingbird.enterRecordingMode();
        BaseLoginAction.setUserGroup(g, session);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(AuthorizationManager.class);
        AuthorizationManager.setUserGroup(g, session);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetUserGroup1() throws Throwable {
        Context session = new ApplicationContext((ServletContext) Mockingbird.getProxyObject(ServletContext.class));
        Mockingbird.enterTestMode(AuthorizationManager.class);
        AuthorizationManager.setUserGroup(-1, session);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetUserGroup2() throws Throwable {
        Context session = new ApplicationContext((ServletContext) Mockingbird.getProxyObject(ServletContext.class));
        Mockingbird.enterRecordingMode();
        BaseLoginAction.setUserGroup("testString", session);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(AuthorizationManager.class);
        AuthorizationManager.setUserGroup("testString", session);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetUserGroups() throws Throwable {
        List groups = new ArrayList(100);
        Context session = new ApplicationContext((ServletContext) Mockingbird.getProxyObject(ServletContext.class));
        Mockingbird.enterRecordingMode();
        BaseLoginAction.setUserGroups(groups, session);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(AuthorizationManager.class);
        AuthorizationManager.setUserGroups(groups, session);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetUserGroups1() throws Throwable {
        Context session = new ApplicationContext((ServletContext) Mockingbird.getProxyObject(ServletContext.class));
        Mockingbird.enterRecordingMode();
        BaseLoginAction.setUserGroups("testString", session);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(AuthorizationManager.class);
        AuthorizationManager.setUserGroups("testString", session);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAddGroupThrowsNullPointerException() throws Throwable {
        try {
            AuthorizationManager.addGroup(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 5 assertions
        }
    }
    
    public void testAddGroupThrowsNullPointerException1() throws Throwable {
        String[] permissions = new String[3];
        permissions[0] = "";
        permissions[1] = "";
        permissions[2] = "";
        try {
            AuthorizationManager.addGroup(new Group((String) null, permissions));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 5 assertions
        }
    }
    
    public void testAddListGroupThrowsIllegalArgumentException() throws Throwable {
        Map data = new HashMap(100, 100.0F);
        data.put(new SimpleListData(), "");
        ListData data2 = ListManager.convert(data);
        try {
            AuthorizationManager.addListGroup(data2);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "List data has non-integer keys: {}", ex.getMessage());
            assertThrownBy(AuthorizationManager.class, ex);
            assertEquals("(SimpleListData) data2.getName()", "", ((SimpleListData) data2).getName());
        }
    }
    
    public void testAddListGroupThrowsIllegalStateException() throws Throwable {
        ListData data = new DBListData("testAuthorizationManagerName", "testAuthorizationManagerKeyColumn", "testAuthorizationManagerValueColumn", "testAuthorizationManagerTableName", "testAuthorizationManagerOrderByColumn");
        try {
            AuthorizationManager.addListGroup(data);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "List is not loaded: testAuthorizationManagerName", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertEquals("(DBListData) data.getName()", "testAuthorizationManagerName", ((DBListData) data).getName());
        }
    }
    
    public void testCheckAnyThrowsNullPointerException() throws Throwable {
        try {
            AuthorizationManager.checkAny("testAuthorizationManagerGroup", null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AuthorizationManager.class, ex);
        }
    }
    
    public void testHasGroupThrowsNullPointerException() throws Throwable {
        String[] permissions = new String[2];
        permissions[0] = "";
        permissions[1] = "testString";
        try {
            AuthorizationManager.hasGroup(new Group((String) null, permissions));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 3 assertions
        }
    }
    
    public void testSetUserGroupThrowsIllegalStateException() throws Throwable {
        String[] permissions = new String[3];
        permissions[0] = "testString";
        permissions[1] = "testString";
        permissions[2] = "testString";
        try {
            AuthorizationManager.setUserGroup(new Group("testAuthorizationManagerName", permissions), new MapContext());
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Tried to set user groups, but there is no user in the session!", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testSetUserGroupThrowsIllegalStateException1() throws Throwable {
        try {
            AuthorizationManager.setUserGroup("testAuthorizationManagerGroup", new MapContext());
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Tried to set user groups, but there is no user in the session!", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testSetUserGroupThrowsNullPointerException() throws Throwable {
        String[] permissions = new String[3];
        permissions[0] = "testString";
        permissions[1] = "testString";
        permissions[2] = "testString";
        try {
            AuthorizationManager.setUserGroup(new Group("testAuthorizationManagerName", permissions), null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testSetUserGroupThrowsNullPointerException1() throws Throwable {
        try {
            AuthorizationManager.setUserGroup("testAuthorizationManagerGroup", null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testSetUserGroupsThrowsIllegalStateException() throws Throwable {
        try {
            AuthorizationManager.setUserGroups(new ArrayList(100), new MapContext());
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Tried to set user groups, but there is no user in the session!", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testSetUserGroupsThrowsIllegalStateException1() throws Throwable {
        try {
            AuthorizationManager.setUserGroups("testAuthorizationManagerGroups", new MapContext());
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Tried to set user groups, but there is no user in the session!", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testSetUserGroupsThrowsNullPointerException() throws Throwable {
        List groups = new ArrayList(100);
        Context session = new SessionContext((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class), (HttpServletResponse) Mockingbird.getProxyObject(HttpServletResponse.class));
        Mockingbird.enterRecordingMode();
        BaseLoginAction.setUserGroups(groups, session);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(AuthorizationManager.class);
        try {
            AuthorizationManager.setUserGroups(groups, session);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testSetUserGroupsThrowsNullPointerException1() throws Throwable {
        try {
            AuthorizationManager.setUserGroups("testAuthorizationManagerGroups", null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
}

