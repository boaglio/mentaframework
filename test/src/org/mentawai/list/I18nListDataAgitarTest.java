/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:14:37 PM
 * Time to generate: 00:39.480 seconds
 *
 */

package org.mentawai.list;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.File;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import org.mentawai.i18n.I18NHolder;
import org.mentawai.i18n.I18NMap;
import org.mentawai.i18n.LocaleManager;

public class I18nListDataAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return I18nListData.class;
    }
    
    public void testConstructor() throws Throwable {
        I18nListData i18nListData = new I18nListData("testI18nListDataListname");
        assertEquals("i18nListData.getName()", "testI18nListDataListname", i18nListData.getName());
        assertEquals("i18nListData.map.size()", 0, ((Map) getPrivateField(i18nListData, "map")).size());
        assertEquals("i18nListData.i18n.size()", 0, ((I18NHolder) getPrivateField(i18nListData, "i18n")).size());
    }
    
    public void testConstructor1() throws Throwable {
        storeStaticField(I18nListData.class, "SEP");
        storeStaticField(I18nListData.class, "FULLDIR");
        storeStaticField(ListManager.class, "LIST_DIR");
        File[] files = new File[2];
        File file = (File) Mockingbird.getProxyObject(File.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(LinkedHashMap.class, "<init>()", Mockingbird.getProxyObject(LinkedHashMap.class));
        setPrivateField(I18nListData.class, "FULLDIR", "");
        setPrivateField(I18nListData.class, "SEP", "");
        ListManager.LIST_DIR = "";
        files[0] = file;
        files[1] = file2;
        Mockingbird.replaceObjectForRecording(I18NHolder.class, "<init>()", Mockingbird.getProxyObject(I18NHolder.class));
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file3);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file3, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file3, "listFiles", "()java.io.File[]", new Object[] {}, files, 1);
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "endsWith", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "startsWith", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, file2, "isDirectory", "()boolean", boolean2, 1);
        Mockingbird.enterTestMode();
        I18nListData i18nListData = new I18nListData("");
        assertEquals("i18nListData.getName()", "", i18nListData.getName());
        assertNotNull("i18nListData.map", getPrivateField(i18nListData, "map"));
        assertNotNull("i18nListData.i18n", getPrivateField(i18nListData, "i18n"));
    }
    
    public void testConstructor2() throws Throwable {
        storeStaticField(I18nListData.class, "SEP");
        storeStaticField(I18nListData.class, "FULLDIR");
        storeStaticField(ListManager.class, "LIST_DIR");
        File[] files = new File[2];
        File file = (File) Mockingbird.getProxyObject(File.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(LinkedHashMap.class, "<init>()", Mockingbird.getProxyObject(LinkedHashMap.class));
        setPrivateField(I18nListData.class, "FULLDIR", "");
        setPrivateField(I18nListData.class, "SEP", "");
        ListManager.LIST_DIR = "";
        files[0] = file;
        files[1] = file2;
        Mockingbird.replaceObjectForRecording(I18NHolder.class, "<init>()", Mockingbird.getProxyObject(I18NHolder.class));
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file3);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file3, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file3, "listFiles", "()java.io.File[]", new Object[] {}, files, 1);
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "endsWith", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, file2, "isDirectory", "()boolean", boolean2, 1);
        Mockingbird.enterTestMode();
        I18nListData i18nListData = new I18nListData("");
        assertEquals("i18nListData.getName()", "", i18nListData.getName());
        assertNotNull("i18nListData.map", getPrivateField(i18nListData, "map"));
        assertNotNull("i18nListData.i18n", getPrivateField(i18nListData, "i18n"));
    }
    
    public void testConstructorWithAggressiveMocks() throws Throwable {
        storeStaticField(I18nListData.class, "SEP");
        storeStaticField(I18nListData.class, "FULLDIR");
        storeStaticField(ListManager.class, "LIST_DIR");
        File[] files = new File[2];
        File file = (File) Mockingbird.getProxyObject(File.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        String[] strings = new String[0];
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(LinkedHashMap.class, "<init>()", Mockingbird.getProxyObject(LinkedHashMap.class));
        setPrivateField(I18nListData.class, "FULLDIR", "");
        setPrivateField(I18nListData.class, "SEP", "");
        ListManager.LIST_DIR = "";
        files[0] = file;
        files[1] = file2;
        I18NHolder i18NHolder = (I18NHolder) Mockingbird.getProxyObject(I18NHolder.class);
        Mockingbird.replaceObjectForRecording(I18NHolder.class, "<init>()", i18NHolder);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file3);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file3, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file3, "listFiles", "()java.io.File[]", new Object[] {}, files, 1);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "endsWith", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "startsWith", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, "", "split", "(java.lang.String)java.lang.String[]", new Object[] {"_"}, strings, 1);
        Mockingbird.setReturnValue(LocaleManager.getDefaultLocale(), null);
        Mockingbird.setReturnValue(true, I18NMap.class, "getI18N", "(java.io.File)org.mentawai.i18n.I18N", null, 1);
        Mockingbird.setReturnValue(i18NHolder.add(null, null), null);
        Mockingbird.setReturnValue(false, file2, "isDirectory", "()boolean", boolean2, 1);
        Mockingbird.enterTestMode();
        I18nListData i18nListData = new I18nListData("");
        assertNotNull("i18nListData.getName()", i18nListData.getName());
        assertNotNull("i18nListData.map", getPrivateField(i18nListData, "map"));
        assertNotNull("i18nListData.i18n", getPrivateField(i18nListData, "i18n"));
    }
    
    public void testAdd() throws Throwable {
        I18nListData i18nListData = new I18nListData("testI18nListDataListname");
        i18nListData.add("testI18nListDataId", "testI18nListDataI18nKey");
        assertEquals("i18nListData.map.size()", 1, ((Map) getPrivateField(i18nListData, "map")).size());
        assertEquals("i18nListData.map.get(\"testI18nListDataId\")", "testI18nListDataI18nKey", ((Map) getPrivateField(i18nListData, "map")).get("testI18nListDataId"));
    }
    
    public void testAdd1() throws Throwable {
        I18nListData i18nListData = new I18nListData("testI18nListDataListname");
        i18nListData.add("testString", "testI18nListDataI18nKey");
        i18nListData.add("testString", "testI18nListDataI18nKey");
        assertEquals("i18nListData.map.size()", 1, ((Map) getPrivateField(i18nListData, "map")).size());
    }
    
    public void testGetLocaleWithAggressiveMocks() throws Throwable {
        I18nListData i18nListData = (I18nListData) Mockingbird.getProxyObject(I18nListData.class, true);
        File file = (File) Mockingbird.getProxyObject(File.class);
        String[] strings = new String[1];
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", new Object[] {}, "", 1);
        strings[0] = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings, 1);
        Mockingbird.replaceObjectForRecording(Locale.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(Locale.class));
        Mockingbird.enterTestMode(I18nListData.class);
    }
    
    public void testGetLocaleWithAggressiveMocks1() throws Throwable {
        I18nListData i18nListData = (I18nListData) Mockingbird.getProxyObject(I18nListData.class, true);
        File file = (File) Mockingbird.getProxyObject(File.class);
        String[] strings = new String[2];
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", new Object[] {}, "", 1);
        strings[0] = "";
        strings[1] = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings, 1);
        Mockingbird.replaceObjectForRecording(Locale.class, "<init>(java.lang.String,java.lang.String)", Mockingbird.getProxyObject(Locale.class));
        Mockingbird.enterTestMode(I18nListData.class);
    }
    
    public void testGetName() throws Throwable {
        String result = new I18nListData("testI18nListDataListname").getName();
        assertEquals("result", "testI18nListDataListname", result);
    }
    
    public void testGetValues() throws Throwable {
        I18nListData i18nListData = new I18nListData("testI18nListDataListname");
        i18nListData.add("testI18nListDataId", "testI18nListDataI18nKey");
        ArrayList result = (ArrayList) i18nListData.getValues();
        assertEquals("result.size()", 1, result.size());
        assertEquals("i18nListData.map.size()", 1, ((Map) getPrivateField(i18nListData, "map")).size());
        assertEquals("i18nListData.i18n.size()", 0, ((I18NHolder) getPrivateField(i18nListData, "i18n")).size());
    }
    
    public void testGetValues1() throws Throwable {
        I18nListData i18nListData = new I18nListData("testI18nListDataListname");
        ArrayList result = (ArrayList) i18nListData.getValues();
        assertEquals("result.size()", 0, result.size());
        assertEquals("i18nListData.map.size()", 0, ((Map) getPrivateField(i18nListData, "map")).size());
        assertEquals("i18nListData.i18n.size()", 0, ((I18NHolder) getPrivateField(i18nListData, "i18n")).size());
    }
    
    public void testGetValues2() throws Throwable {
        I18nListData i18nListData = new I18nListData("testI18nListDataListname");
        i18nListData.add("testI18nListDataId", "testI18nListDataI18nKey");
        ArrayList result = (ArrayList) i18nListData.getValues(Locale.CANADA_FRENCH);
        assertEquals("result.size()", 1, result.size());
        assertEquals("i18nListData.map.size()", 1, ((Map) getPrivateField(i18nListData, "map")).size());
        assertEquals("i18nListData.i18n.size()", 0, ((I18NHolder) getPrivateField(i18nListData, "i18n")).size());
    }
    
    public void testGetValues3() throws Throwable {
        I18nListData i18nListData = new I18nListData("testI18nListDataListname");
        ArrayList result = (ArrayList) i18nListData.getValues(Locale.CHINESE);
        assertEquals("result.size()", 0, result.size());
        assertEquals("i18nListData.map.size()", 0, ((Map) getPrivateField(i18nListData, "map")).size());
        assertEquals("i18nListData.i18n.size()", 0, ((I18NHolder) getPrivateField(i18nListData, "i18n")).size());
    }
    
    public void testSize() throws Throwable {
        I18nListData i18nListData = new I18nListData("testI18nListDataListname");
        int result = i18nListData.size();
        assertEquals("result", 0, result);
        assertEquals("i18nListData.map.size()", 0, ((Map) getPrivateField(i18nListData, "map")).size());
    }
    
    public void testSize1() throws Throwable {
        I18nListData i18nListData = new I18nListData("testI18nListDataListname");
        i18nListData.add("testI18nListDataId", "testI18nListDataI18nKey");
        int result = i18nListData.size();
        assertEquals("result", 1, result);
        assertEquals("i18nListData.map.size()", 1, ((Map) getPrivateField(i18nListData, "map")).size());
    }
    
    public void testToString() throws Throwable {
        I18nListData i18nListData = new I18nListData("testI18nListDataListname");
        i18nListData.add("testI18nListDataId", "testI18nListDataI18nKey");
        String result = i18nListData.toString();
        assertEquals("result", "{testI18nListDataId=testI18nListDataI18nKey}", result);
        assertEquals("i18nListData.map.size()", 1, ((Map) getPrivateField(i18nListData, "map")).size());
    }
    
    public void testToString1() throws Throwable {
        I18nListData i18nListData = new I18nListData("testI18nListDataListname");
        String result = i18nListData.toString();
        assertEquals("result", "{}", result);
        assertEquals("i18nListData.map.size()", 0, ((Map) getPrivateField(i18nListData, "map")).size());
    }
    
    public void testGetLocaleThrowsNullPointerException() throws Throwable {
        I18nListData i18nListData = new I18nListData("testI18nListDataListname");
        try {
            callPrivateMethod("org.mentawai.list.I18nListData", "getLocale", new Class[] {File.class, String.class}, i18nListData, new Object[] {null, "testI18nListDataListname"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(I18nListData.class, ex);
        }
    }
    
    public void testGetLocaleThrowsStringIndexOutOfBoundsException() throws Throwable {
        I18nListData i18nListData = new I18nListData("testI18nListDataListname");
        File file = new File("testI18nListDataParam1");
        try {
            callPrivateMethod("org.mentawai.list.I18nListData", "getLocale", new Class[] {File.class, String.class}, i18nListData, new Object[] {file, "testI18nListDataListname"});
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "String index out of range: -1", ex.getMessage());
            assertThrownBy(String.class, ex);
            assertEquals("file.getName()", "testI18nListDataParam1", file.getName());
        }
    }
}

