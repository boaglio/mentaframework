/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:13:02 PM
 * Time to generate: 00:34.560 seconds
 *
 */

package org.mentawai.list;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;

public class LocalizedListDataAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return LocalizedListData.class;
    }
    
    public void testConstructor() throws Throwable {
        LocalizedListData localizedListData = new LocalizedListData("testLocalizedListDataName");
        assertEquals("localizedListData.getName()", "testLocalizedListDataName", localizedListData.getName());
        assertEquals("localizedListData.lists.size()", 0, ((Map) getPrivateField(localizedListData, "lists")).size());
        assertEquals("localizedListData.items.size()", 0, ((Map) getPrivateField(localizedListData, "items")).size());
    }
    
    public void testAdd() throws Throwable {
        LocalizedListData localizedListData = new LocalizedListData("testLocalizedListDataName");
        localizedListData.add(100, "testLocalizedListDataValue", Locale.GERMAN);
        assertEquals("localizedListData.lists.size()", 1, ((Map) getPrivateField(localizedListData, "lists")).size());
        assertEquals("localizedListData.items.size()", 1, ((Map) getPrivateField(localizedListData, "items")).size());
    }
    
    public void testAdd1() throws Throwable {
        LocalizedListData localizedListData = new LocalizedListData("testLocalizedListDataName");
        localizedListData.add("testLocalizedListDataId", "testLocalizedListDataValue", Locale.JAPAN);
        assertEquals("localizedListData.lists.size()", 1, ((Map) getPrivateField(localizedListData, "lists")).size());
        assertEquals("localizedListData.items.size()", 1, ((Map) getPrivateField(localizedListData, "items")).size());
    }
    
    public void testAdd2() throws Throwable {
        LocalizedListData localizedListData = new LocalizedListData("testLocalizedListDataName");
        Locale loc = Locale.JAPAN;
        localizedListData.add("testLocalizedListDataId", "testLocalizedListDataValue", loc);
        localizedListData.add("testLocalizedListDataId", "testLocalizedListDataValue", loc);
        assertEquals("localizedListData.lists.size()", 1, ((Map) getPrivateField(localizedListData, "lists")).size());
        assertEquals("localizedListData.items.size()", 1, ((Map) getPrivateField(localizedListData, "items")).size());
    }
    
    public void testClear() throws Throwable {
        LocalizedListData localizedListData = new LocalizedListData("testLocalizedListDataName");
        localizedListData.clear();
        assertEquals("localizedListData.lists.size()", 0, ((Map) getPrivateField(localizedListData, "lists")).size());
        assertEquals("localizedListData.items.size()", 0, ((Map) getPrivateField(localizedListData, "items")).size());
    }
    
    public void testGetName() throws Throwable {
        String result = new LocalizedListData("testLocalizedListDataName").getName();
        assertEquals("result", "testLocalizedListDataName", result);
    }
    
    public void testGetValue() throws Throwable {
        LocalizedListData localizedListData = new LocalizedListData("testLocalizedListDataName");
        String result = localizedListData.getValue(100, Locale.SIMPLIFIED_CHINESE);
        assertNull("result", result);
        assertEquals("localizedListData.items.size()", 0, ((Map) getPrivateField(localizedListData, "items")).size());
    }
    
    public void testGetValue1() throws Throwable {
        Locale loc = Locale.TAIWAN;
        LocalizedListData localizedListData = new LocalizedListData("testLocalizedListDataName");
        localizedListData.add(1, "testLocalizedListDataValue", loc);
        String result = localizedListData.getValue(1, loc);
        assertEquals("result", "testLocalizedListDataValue", result);
        assertEquals("localizedListData.items.size()", 1, ((Map) getPrivateField(localizedListData, "items")).size());
    }
    
    public void testGetValue2() throws Throwable {
        LocalizedListData localizedListData = new LocalizedListData("testLocalizedListDataName");
        localizedListData.add("-5023", null, null);
        String result = localizedListData.getValue("-5023", null);
        assertNull("result", result);
        assertEquals("localizedListData.items.size()", 1, ((Map) getPrivateField(localizedListData, "items")).size());
    }
    
    public void testGetValue3() throws Throwable {
        Locale loc = Locale.ENGLISH;
        LocalizedListData localizedListData = new LocalizedListData("testLocalizedListDataName");
        localizedListData.add(0, "testLocalizedListDataValue", loc);
        String result = localizedListData.getValue("0", loc);
        assertEquals("result", "testLocalizedListDataValue", result);
        assertEquals("localizedListData.items.size()", 1, ((Map) getPrivateField(localizedListData, "items")).size());
    }
    
    public void testGetValue4() throws Throwable {
        LocalizedListData localizedListData = new LocalizedListData("testLocalizedListDataName");
        String result = localizedListData.getValue("testLocalizedListDataId", Locale.KOREAN);
        assertNull("result", result);
        assertEquals("localizedListData.items.size()", 0, ((Map) getPrivateField(localizedListData, "items")).size());
    }
    
    public void testGetValue5() throws Throwable {
        Locale loc = Locale.KOREAN;
        LocalizedListData localizedListData = new LocalizedListData("testLocalizedListDataName");
        localizedListData.add(100, "testLocalizedListDataValue", loc);
        String result = localizedListData.getValue("testLocalizedListDataId", loc);
        assertNull("result", result);
        assertEquals("localizedListData.items.size()", 1, ((Map) getPrivateField(localizedListData, "items")).size());
    }
    
    public void testGetValues1() throws Throwable {
        LocalizedListData localizedListData = new LocalizedListData("testLocalizedListDataName");
        Locale loc = Locale.TRADITIONAL_CHINESE;
        localizedListData.add(100, "testLocalizedListDataValue", loc);
        LinkedList result = (LinkedList) localizedListData.getValues(loc);
        assertEquals("result.size()", 1, result.size());
        assertEquals("localizedListData.lists.size()", 1, ((Map) getPrivateField(localizedListData, "lists")).size());
    }
    
    public void testSize() throws Throwable {
        LocalizedListData localizedListData = new LocalizedListData("testLocalizedListDataName");
        int result = localizedListData.size();
        assertEquals("result", 0, result);
        assertEquals("localizedListData.lists.size()", 0, ((Map) getPrivateField(localizedListData, "lists")).size());
    }
    
    public void testSize1() throws Throwable {
        LocalizedListData localizedListData = new LocalizedListData("testLocalizedListDataName");
        localizedListData.add(100, "testLocalizedListDataValue", Locale.KOREAN);
        int result = localizedListData.size();
        assertEquals("result", 1, result);
        assertEquals("localizedListData.lists.size()", 1, ((Map) getPrivateField(localizedListData, "lists")).size());
    }
    
    public void testToString() throws Throwable {
        LocalizedListData localizedListData = new LocalizedListData("testLocalizedListDataName");
        String result = localizedListData.toString();
        assertEquals("result", "LocalizedListData: name=testLocalizedListDataName size=0", result);
        assertEquals("localizedListData.lists.size()", 0, ((Map) getPrivateField(localizedListData, "lists")).size());
    }
    
    public void testGetValueThrowsNullPointerException() throws Throwable {
        LocalizedListData localizedListData = new LocalizedListData("testLocalizedListDataName");
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap2, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        ListDataItem listDataItem = (ListDataItem) Mockingbird.getProxyObject(ListDataItem.class);
        Mockingbird.replaceObjectForRecording(ListDataItem.class, "<init>(java.lang.String,java.lang.String)", listDataItem);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(LinkedList.class), "add", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(listDataItem.getKey(), "-8");
        HashMap hashMap3 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap3, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(LocalizedListData.class);
        localizedListData.add(100, "testLocalizedListDataValue", loc);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, hashMap2, "get", "(java.lang.Object)java.lang.Object", hashMap3, 1);
        Mockingbird.setReturnValue(false, hashMap3, "containsKey", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        ListDataItem listDataItem2 = (ListDataItem) Mockingbird.getProxyObject(ListDataItem.class);
        Mockingbird.setReturnValue(false, hashMap3, "get", "(java.lang.Object)java.lang.Object", listDataItem2, 1);
        Mockingbird.setReturnValue(listDataItem2.getValue(), "abcdefghijklmnopqrstuvwxyz");
        Mockingbird.enterTestMode(LocalizedListData.class);
        try {
            localizedListData.getValue(100, loc);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(LocalizedListData.class, ex);
            assertEquals("localizedListData.items.size()", 0, ((Map) getPrivateField(localizedListData, "items")).size());
        }
    }
}

