/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:13:14 PM
 * Time to generate: 00:22.753 seconds
 *
 */

package org.mentawai.list;

import com.agitar.lib.junit.AgitarTestCase;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;

public class SimpleListDataAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SimpleListData.class;
    }
    
    public void testConstructor() throws Throwable {
        SimpleListData simpleListData = new SimpleListData("testSimpleListDataName");
        assertEquals("simpleListData.getName()", "testSimpleListDataName", simpleListData.getName());
        assertEquals("simpleListData.getValues().size()", 0, simpleListData.getValues().size());
        assertEquals("simpleListData.map.size()", 0, ((Map) getPrivateField(simpleListData, "map")).size());
    }
    
    public void testConstructor1() throws Throwable {
        SimpleListData simpleListData = new SimpleListData();
        assertEquals("simpleListData.getName()", "", simpleListData.getName());
        assertEquals("simpleListData.getValues().size()", 0, simpleListData.getValues().size());
        assertEquals("simpleListData.map.size()", 0, ((Map) getPrivateField(simpleListData, "map")).size());
    }
    
    public void testAdd() throws Throwable {
        SimpleListData simpleListData = new SimpleListData();
        simpleListData.add("testSimpleListDataId", "testSimpleListDataMsg");
        assertEquals("simpleListData.getValues().size()", 1, simpleListData.getValues().size());
        assertEquals("simpleListData.map.size()", 1, ((Map) getPrivateField(simpleListData, "map")).size());
        assertEquals("simpleListData.map.get(\"testSimpleListDataId\")", "testSimpleListDataMsg", ((Map) getPrivateField(simpleListData, "map")).get("testSimpleListDataId"));
    }
    
    public void testAdd1() throws Throwable {
        SimpleListData simpleListData = new SimpleListData();
        simpleListData.add("testString", "testSimpleListDataMsg");
        simpleListData.add("testString", "testSimpleListDataMsg");
        assertEquals("simpleListData.map.size()", 1, ((Map) getPrivateField(simpleListData, "map")).size());
    }
    
    public void testAdd2() throws Throwable {
        SimpleListData simpleListData = new SimpleListData();
        simpleListData.add(100, "testSimpleListDataMsg");
        assertEquals("simpleListData.getValues().size()", 1, simpleListData.getValues().size());
        assertEquals("simpleListData.map.size()", 1, ((Map) getPrivateField(simpleListData, "map")).size());
        assertEquals("simpleListData.map.get(\"100\")", "testSimpleListDataMsg", ((Map) getPrivateField(simpleListData, "map")).get("100"));
    }
    
    public void testClear() throws Throwable {
        SimpleListData simpleListData = new SimpleListData();
        simpleListData.clear();
        assertEquals("simpleListData.getValues().size()", 0, simpleListData.getValues().size());
        assertEquals("simpleListData.map.size()", 0, ((Map) getPrivateField(simpleListData, "map")).size());
    }
    
    public void testGetName() throws Throwable {
        String result = new SimpleListData().getName();
        assertEquals("result", "", result);
    }
    
    public void testGetValue() throws Throwable {
        SimpleListData simpleListData = new SimpleListData();
        String result = simpleListData.getValue(100, Locale.KOREA);
        assertNull("result", result);
        assertEquals("simpleListData.map.size()", 0, ((Map) getPrivateField(simpleListData, "map")).size());
    }
    
    public void testGetValue1() throws Throwable {
        SimpleListData simpleListData = new SimpleListData("testSimpleListDataName");
        simpleListData.add(1, "testSimpleListDataMsg");
        String result = simpleListData.getValue(1, Locale.ITALY);
        assertEquals("result", "testSimpleListDataMsg", result);
        assertEquals("simpleListData.map.size()", 1, ((Map) getPrivateField(simpleListData, "map")).size());
    }
    
    public void testGetValue2() throws Throwable {
        SimpleListData simpleListData = new SimpleListData();
        simpleListData.add("testString", "testSimpleListDataMsg");
        String result = simpleListData.getValue("testString");
        assertEquals("result", "testSimpleListDataMsg", result);
        assertEquals("simpleListData.map.size()", 1, ((Map) getPrivateField(simpleListData, "map")).size());
    }
    
    public void testGetValue3() throws Throwable {
        SimpleListData simpleListData = new SimpleListData();
        String result = simpleListData.getValue("testSimpleListDataId");
        assertNull("result", result);
        assertEquals("simpleListData.map.size()", 0, ((Map) getPrivateField(simpleListData, "map")).size());
    }
    
    public void testGetValue4() throws Throwable {
        SimpleListData simpleListData = new SimpleListData();
        String result = simpleListData.getValue("testSimpleListDataId", Locale.ENGLISH);
        assertNull("result", result);
        assertEquals("simpleListData.map.size()", 0, ((Map) getPrivateField(simpleListData, "map")).size());
    }
    
    public void testGetValue5() throws Throwable {
        SimpleListData simpleListData = new SimpleListData();
        String result = simpleListData.getValue(100);
        assertNull("result", result);
        assertEquals("simpleListData.map.size()", 0, ((Map) getPrivateField(simpleListData, "map")).size());
    }
    
    public void testGetValue6() throws Throwable {
        SimpleListData simpleListData = new SimpleListData();
        simpleListData.add(1, "testSimpleListDataMsg");
        String result = simpleListData.getValue(1);
        assertEquals("result", "testSimpleListDataMsg", result);
        assertEquals("simpleListData.map.size()", 1, ((Map) getPrivateField(simpleListData, "map")).size());
    }
    
    public void testGetValues() throws Throwable {
        SimpleListData simpleListData = new SimpleListData();
        simpleListData.add("testSimpleListDataId", "testSimpleListDataMsg");
        LinkedList result = (LinkedList) simpleListData.getValues();
        assertEquals("result.size()", 1, result.size());
    }
    
    public void testGetValues1() throws Throwable {
        LinkedList result = (LinkedList) new SimpleListData("testSimpleListDataName").getValues();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetValues2() throws Throwable {
        LinkedList result = (LinkedList) new SimpleListData().getValues(Locale.ITALY);
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetValues3() throws Throwable {
        SimpleListData simpleListData = new SimpleListData("testSimpleListDataName");
        simpleListData.add(100, "testSimpleListDataMsg");
        LinkedList result = (LinkedList) simpleListData.getValues(Locale.ENGLISH);
        assertEquals("result.size()", 1, result.size());
    }
    
    public void testSize() throws Throwable {
        int result = new SimpleListData().size();
        assertEquals("result", 0, result);
    }
    
    public void testSize1() throws Throwable {
        SimpleListData simpleListData = new SimpleListData();
        simpleListData.add("testSimpleListDataId", "testSimpleListDataMsg");
        int result = simpleListData.size();
        assertEquals("result", 1, result);
    }
    
    public void testToString() throws Throwable {
        SimpleListData simpleListData = new SimpleListData();
        simpleListData.add(100, "testSimpleListDataMsg");
        String result = simpleListData.toString();
        assertEquals("result", "{100=testSimpleListDataMsg}", result);
        assertEquals("simpleListData.getValues().size()", 1, simpleListData.getValues().size());
    }
    
    public void testToString1() throws Throwable {
        SimpleListData simpleListData = new SimpleListData("testSimpleListDataName");
        String result = simpleListData.toString();
        assertEquals("result", "{}", result);
        assertEquals("simpleListData.getValues().size()", 0, simpleListData.getValues().size());
    }
    
    public void testToString2() throws Throwable {
        SimpleListData simpleListData = new SimpleListData();
        simpleListData.add(100, "testSimpleListDataMsg");
        simpleListData.add("testSimpleListDataId", "testSimpleListDataMsg");
        String result = simpleListData.toString();
        assertEquals("result", "{100=testSimpleListDataMsg,\ntestSimpleListDataId=testSimpleListDataMsg}", result);
        assertEquals("simpleListData.getValues().size()", 2, simpleListData.getValues().size());
    }
}

