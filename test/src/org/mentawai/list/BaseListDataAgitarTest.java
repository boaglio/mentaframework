/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:14:01 PM
 * Time to generate: 02:39.604 seconds
 *
 */

package org.mentawai.list;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import org.mentawai.i18n.I18N;
import org.mentawai.i18n.I18NMap;
import org.mentawai.i18n.LocaleManager;
import org.mentawai.util.StringComparator;

public class BaseListDataAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return BaseListData.class;
    }
    
    public void testConstructor() throws Throwable {
        storeStaticField(ListManager.class, "LIST_DIR");
        Mockingbird.ignoreConstructorExceptions(BaseListData.class, "(java.lang.String,int,java.lang.String)");
        ListManager.LIST_DIR = "";
        BaseListData baseListData = new BaseListData("", 0);
        assertEquals("baseListData.listDir", "", getPrivateField(baseListData, "listDir"));
        assertEquals("baseListData.size()", 0, baseListData.size());
        assertEquals("baseListData.map.size()", 0, ((Map) getPrivateField(baseListData, "map")).size());
        assertEquals("baseListData.getName()", "", baseListData.getName());
        assertEquals("baseListData.values.size()", 0, ((Map) getPrivateField(baseListData, "values")).size());
    }
    
    public void testConstructor1() throws Throwable {
        storeStaticField(ListManager.class, "LIST_DIR");
        Mockingbird.ignoreConstructorExceptions(BaseListData.class, "(java.lang.String,int,java.lang.String)");
        ListManager.LIST_DIR = "";
        BaseListData baseListData = new BaseListData("");
        assertEquals("baseListData.listDir", "", getPrivateField(baseListData, "listDir"));
        assertEquals("baseListData.size()", 0, baseListData.size());
        assertEquals("baseListData.map.size()", 0, ((Map) getPrivateField(baseListData, "map")).size());
        assertEquals("baseListData.getName()", "", baseListData.getName());
        assertEquals("baseListData.values.size()", 0, ((Map) getPrivateField(baseListData, "values")).size());
    }
    
    public void testIdComparatorConstructor() throws Throwable {
        callPrivateMethod("org.mentawai.list.BaseListData$IdComparator", "<init>", new Class[] {}, null, new Object[] {});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testStringIdComparatorConstructor() throws Throwable {
        callPrivateMethod("org.mentawai.list.BaseListData$StringIdComparator", "<init>", new Class[] {}, null, new Object[] {});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testValueComparatorConstructor() throws Throwable {
        callPrivateMethod("org.mentawai.list.BaseListData$ValueComparator", "<init>", new Class[] {}, null, new Object[] {});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetIdFromLineWithAggressiveMocks() throws Throwable {
        BaseListData baseListData = (BaseListData) Mockingbird.getProxyObject(BaseListData.class, true);
        Mockingbird.enterRecordingMode();
        StringTokenizer stringTokenizer = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(BaseListData.class);
        String result = (String) callPrivateMethod("org.mentawai.list.BaseListData", "getIdFromLine", new Class[] {String.class}, baseListData, new Object[] {""});
        assertEquals("result", "", result);
    }
    
    public void testGetNameWithAggressiveMocks() throws Throwable {
        BaseListData baseListData = (BaseListData) Mockingbird.getProxyObject(BaseListData.class, true);
        setPrivateField(baseListData, "listname", "");
        Mockingbird.enterTestMode(BaseListData.class);
        String result = baseListData.getName();
        assertEquals("result", "", result);
    }
    
    public void testGetValueWithAggressiveMocks() throws Throwable {
        BaseListData baseListData = (BaseListData) Mockingbird.getProxyObject(BaseListData.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        ListItem listItem = (ListItem) Mockingbird.getProxyObject(ListItem.class);
        setPrivateField(baseListData, "values", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.containsKey(null), false);
        Mockingbird.setReturnValue(map.isEmpty(), false);
        Mockingbird.setReturnValue(map.values(), collection);
        Mockingbird.setReturnValue(collection.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.next(), map2);
        Mockingbird.setReturnValue(map2.get(""), listItem);
        Mockingbird.setReturnValue(listItem.getValue(), "");
        Mockingbird.enterTestMode(BaseListData.class);
        String result = baseListData.getValue(0, null);
        assertEquals("result", "!!0!!", result);
        assertNotNull("baseListData.values", getPrivateField(baseListData, "values"));
    }
    
    public void testGetValueWithAggressiveMocks1() throws Throwable {
        BaseListData baseListData = (BaseListData) Mockingbird.getProxyObject(BaseListData.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        ListItem listItem = (ListItem) Mockingbird.getProxyObject(ListItem.class);
        setPrivateField(baseListData, "values", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.containsKey(null), false);
        Mockingbird.setReturnValue(map.isEmpty(), false);
        Mockingbird.setReturnValue(map.values(), collection);
        Mockingbird.setReturnValue(collection.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.next(), map2);
        Mockingbird.setReturnValue(map2.get(""), listItem);
        Mockingbird.setReturnValue(listItem.getValue(), "");
        Mockingbird.enterTestMode(BaseListData.class);
        String result = baseListData.getValue("", null);
        assertEquals("result", "", result);
        assertNotNull("baseListData.values", getPrivateField(baseListData, "values"));
    }
    
    public void testGetValueWithAggressiveMocks2() throws Throwable {
        BaseListData baseListData = (BaseListData) Mockingbird.getProxyObject(BaseListData.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        ListItem listItem = (ListItem) Mockingbird.getProxyObject(ListItem.class);
        setPrivateField(baseListData, "values", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.containsKey(null), true);
        Mockingbird.setReturnValue(map.get(null), map2);
        Mockingbird.setReturnValue(map2.get(""), listItem);
        Mockingbird.setReturnValue(listItem.getValue(), "");
        Mockingbird.enterTestMode(BaseListData.class);
        String result = baseListData.getValue("", null);
        assertEquals("result", "", result);
        assertNotNull("baseListData.values", getPrivateField(baseListData, "values"));
    }
    
    public void testGetValueWithAggressiveMocks3() throws Throwable {
        BaseListData baseListData = (BaseListData) Mockingbird.getProxyObject(BaseListData.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(baseListData, "values", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.containsKey(null), false);
        Mockingbird.setReturnValue(map.isEmpty(), true);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(BaseListData.class);
        String result = baseListData.getValue("", null);
        assertEquals("result", "", result);
        assertNotNull("baseListData.values", getPrivateField(baseListData, "values"));
    }
    
    public void testGetValuesWithAggressiveMocks() throws Throwable {
        BaseListData baseListData = (BaseListData) Mockingbird.getProxyObject(BaseListData.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        setPrivateField(baseListData, "map", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.containsKey(null), false);
        Mockingbird.setReturnValue(map.isEmpty(), false);
        Mockingbird.setReturnValue(map.values(), collection);
        Mockingbird.setReturnValue(collection.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.enterTestMode(BaseListData.class);
        List result = baseListData.getValues(null);
        assertNull("result", result);
        assertNotNull("baseListData.map", getPrivateField(baseListData, "map"));
    }
    
    public void testGetValuesWithAggressiveMocks1() throws Throwable {
        BaseListData baseListData = (BaseListData) Mockingbird.getProxyObject(BaseListData.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(baseListData, "map", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.containsKey(null), true);
        Mockingbird.setReturnValue(map.get(null), null);
        Mockingbird.enterTestMode(BaseListData.class);
        List result = baseListData.getValues(null);
        assertNull("result", result);
        assertNotNull("baseListData.map", getPrivateField(baseListData, "map"));
    }
    
    public void testGetValuesWithAggressiveMocks2() throws Throwable {
        BaseListData baseListData = (BaseListData) Mockingbird.getProxyObject(BaseListData.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(baseListData, "map", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.containsKey(null), false);
        Mockingbird.setReturnValue(map.isEmpty(), true);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.enterTestMode(BaseListData.class);
        List result = baseListData.getValues(null);
        assertNotNull("result", result);
        assertNotNull("baseListData.map", getPrivateField(baseListData, "map"));
    }
    
    public void testIdComparatorCompareWithAggressiveMocks() throws Throwable {
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("org.mentawai.list.BaseListData$IdComparator"), true);
        ListItem listItem = (ListItem) Mockingbird.getProxyObject(ListItem.class);
        ListItem listItem2 = (ListItem) Mockingbird.getProxyObject(ListItem.class);
        NumberFormatException numberFormatException = (NumberFormatException) Mockingbird.getProxyObject(NumberFormatException.class);
        NumberFormatException numberFormatException2 = (NumberFormatException) Mockingbird.getProxyObject(NumberFormatException.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(listItem.getKey(), "");
        Mockingbird.setException(true, Integer.class, "parseInt", "(java.lang.String)int", numberFormatException, 1);
        Mockingbird.setReturnValue(listItem2.getKey(), "");
        Mockingbird.setException(true, Integer.class, "parseInt", "(java.lang.String)int", numberFormatException2, 1);
        Mockingbird.enterTestMode(Class.forName("org.mentawai.list.BaseListData$IdComparator"));
        int result = ((Number) callPrivateMethod("org.mentawai.list.BaseListData$IdComparator", "compare", new Class[] {Object.class, Object.class}, comparator, new Object[] {listItem, listItem2})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testIdComparatorCompareWithAggressiveMocks1() throws Throwable {
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("org.mentawai.list.BaseListData$IdComparator"), true);
        ListItem listItem = (ListItem) Mockingbird.getProxyObject(ListItem.class);
        ListItem listItem2 = (ListItem) Mockingbird.getProxyObject(ListItem.class);
        NumberFormatException numberFormatException = (NumberFormatException) Mockingbird.getProxyObject(NumberFormatException.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(listItem.getKey(), "");
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(listItem2.getKey(), "");
        Mockingbird.setException(true, Integer.class, "parseInt", "(java.lang.String)int", numberFormatException, 1);
        Mockingbird.enterTestMode(Class.forName("org.mentawai.list.BaseListData$IdComparator"));
        int result = ((Number) callPrivateMethod("org.mentawai.list.BaseListData$IdComparator", "compare", new Class[] {Object.class, Object.class}, comparator, new Object[] {listItem, listItem2})).intValue();
        assertEquals("result", 1, result);
    }
    
    public void testIdComparatorCompareWithAggressiveMocks2() throws Throwable {
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("org.mentawai.list.BaseListData$IdComparator"), true);
        ListItem listItem = (ListItem) Mockingbird.getProxyObject(ListItem.class);
        ListItem listItem2 = (ListItem) Mockingbird.getProxyObject(ListItem.class);
        NumberFormatException numberFormatException = (NumberFormatException) Mockingbird.getProxyObject(NumberFormatException.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(listItem.getKey(), "");
        Mockingbird.setException(true, Integer.class, "parseInt", "(java.lang.String)int", numberFormatException, 1);
        Mockingbird.setReturnValue(listItem2.getKey(), "");
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.enterTestMode(Class.forName("org.mentawai.list.BaseListData$IdComparator"));
        int result = ((Number) callPrivateMethod("org.mentawai.list.BaseListData$IdComparator", "compare", new Class[] {Object.class, Object.class}, comparator, new Object[] {listItem, listItem2})).intValue();
        assertEquals("result", -2, result);
    }
    
    public void testLoadFileToListWithAggressiveMocks() throws Throwable {
        storeStaticField(BaseListData.class, "SEP");
        storeStaticField(BaseListData.class, "FULLDIR");
        BaseListData baseListData = (BaseListData) Mockingbird.getProxyObject(BaseListData.class, true);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        setPrivateField(baseListData, "listDir", "");
        setPrivateField(baseListData, "listname", "");
        setPrivateField(BaseListData.class, "FULLDIR", "");
        setPrivateField(BaseListData.class, "SEP", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, locale, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileInputStream.class));
        Mockingbird.replaceObjectForRecording(InputStreamReader.class, "<init>(java.io.InputStream)", Mockingbird.getProxyObject(InputStreamReader.class));
        BufferedReader bufferedReader = (BufferedReader) Mockingbird.getProxyObject(BufferedReader.class);
        Mockingbird.replaceObjectForRecording(BufferedReader.class, "<init>(java.io.Reader)", bufferedReader);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        Mockingbird.setReturnValue(false, bufferedReader, "readLine", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(arrayList.add(""), false);
        Mockingbird.setReturnValue(false, bufferedReader, "readLine", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(arrayList.add(""), false);
        Mockingbird.setReturnValue(false, bufferedReader, "readLine", "()java.lang.String", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, bufferedReader, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(BaseListData.class);
        List result = (List) callPrivateMethod("org.mentawai.list.BaseListData", "loadFileToList", new Class[] {Locale.class}, baseListData, new Object[] {locale});
        assertNotNull("result", result);
    }
    
    public void testLoadI18NWithAggressiveMocks() throws Throwable {
        storeStaticField(BaseListData.class, "SEP");
        BaseListData baseListData = (BaseListData) Mockingbird.getProxyObject(BaseListData.class, true);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        I18N i18N = (I18N) Mockingbird.getProxyObject(I18N.class);
        setPrivateField(baseListData, "listDir", "");
        setPrivateField(baseListData, "listname", "");
        setPrivateField(BaseListData.class, "SEP", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, locale, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, I18NMap.class, "getI18N", "(java.lang.String)org.mentawai.i18n.I18N", i18N, 1);
        Mockingbird.enterTestMode(BaseListData.class);
        I18N result = (I18N) callPrivateMethod("org.mentawai.list.BaseListData", "loadI18N", new Class[] {Locale.class}, baseListData, new Object[] {locale});
        assertNotNull("result", result);
    }
    
    public void testSizeWithAggressiveMocks() throws Throwable {
        BaseListData baseListData = (BaseListData) Mockingbird.getProxyObject(BaseListData.class, true);
        setPrivateField(baseListData, "size", new Integer(0));
        Mockingbird.enterTestMode(BaseListData.class);
        int result = baseListData.size();
        assertEquals("result", 0, result);
    }
    
    public void testSortWithAggressiveMocks() throws Throwable {
        BaseListData baseListData = (BaseListData) Mockingbird.getProxyObject(BaseListData.class, true);
        Mockingbird.enterTestMode(BaseListData.class);
        baseListData.sort(null, 0);
        assertNull("baseListData.getName()", baseListData.getName());
    }
    
    public void testSortWithAggressiveMocks1() throws Throwable {
        BaseListData baseListData = (BaseListData) Mockingbird.getProxyObject(BaseListData.class, true);
        Mockingbird.enterRecordingMode();
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("org.mentawai.list.BaseListData$IdComparator"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.list.BaseListData$IdComparator"), "<init>()", comparator);
        Mockingbird.setReturnValue(true, Collections.class, "sort", "(java.util.List,java.util.Comparator)void", new Object[] {null, comparator}, null, 1);
        Mockingbird.enterTestMode(BaseListData.class);
        baseListData.sort(null, 1);
        assertNull("baseListData.getName()", baseListData.getName());
    }
    
    public void testSortWithAggressiveMocks2() throws Throwable {
        BaseListData baseListData = (BaseListData) Mockingbird.getProxyObject(BaseListData.class, true);
        Mockingbird.enterRecordingMode();
        StringComparator stringComparator = (StringComparator) Mockingbird.getProxyObject(Class.forName("org.mentawai.list.BaseListData$ValueComparator"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.list.BaseListData$ValueComparator"), "<init>()", stringComparator);
        Mockingbird.setReturnValue(true, Collections.class, "sort", "(java.util.List,java.util.Comparator)void", new Object[] {null, stringComparator}, null, 1);
        Mockingbird.enterTestMode(BaseListData.class);
        baseListData.sort(null, 2);
        assertNull("baseListData.getName()", baseListData.getName());
    }
    
    public void testSortWithAggressiveMocks3() throws Throwable {
        BaseListData baseListData = (BaseListData) Mockingbird.getProxyObject(BaseListData.class, true);
        Mockingbird.enterRecordingMode();
        StringComparator stringComparator = (StringComparator) Mockingbird.getProxyObject(Class.forName("org.mentawai.list.BaseListData$StringIdComparator"));
        Mockingbird.replaceObjectForRecording(Class.forName("org.mentawai.list.BaseListData$StringIdComparator"), "<init>()", stringComparator);
        Mockingbird.setReturnValue(true, Collections.class, "sort", "(java.util.List,java.util.Comparator)void", new Object[] {null, stringComparator}, null, 1);
        Mockingbird.enterTestMode(BaseListData.class);
        baseListData.sort(null, 4);
        assertNull("baseListData.getName()", baseListData.getName());
    }
    
    public void testStringIdComparatorCompareWithAggressiveMocks() throws Throwable {
        StringComparator stringComparator = (StringComparator) Mockingbird.getProxyObject(Class.forName("org.mentawai.list.BaseListData$StringIdComparator"), true);
        ListItem listItem = (ListItem) Mockingbird.getProxyObject(ListItem.class);
        ListItem listItem2 = (ListItem) Mockingbird.getProxyObject(ListItem.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(listItem.getKey(), "");
        Mockingbird.setReturnValue(listItem2.getKey(), null);
        Mockingbird.enterTestMode(Class.forName("org.mentawai.list.BaseListData$StringIdComparator"));
        int result = ((Number) callPrivateMethod("org.mentawai.list.BaseListData$StringIdComparator", "compare", new Class[] {Object.class, Object.class}, stringComparator, new Object[] {listItem, listItem2})).intValue();
        assertEquals("result", 1, result);
    }
    
    public void testValueComparatorCompareWithAggressiveMocks() throws Throwable {
        StringComparator stringComparator = (StringComparator) Mockingbird.getProxyObject(Class.forName("org.mentawai.list.BaseListData$ValueComparator"), true);
        ListItem listItem = (ListItem) Mockingbird.getProxyObject(ListItem.class);
        ListItem listItem2 = (ListItem) Mockingbird.getProxyObject(ListItem.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(listItem.getValue(), null);
        Mockingbird.setReturnValue(listItem2.getValue(), null);
        Mockingbird.enterTestMode(Class.forName("org.mentawai.list.BaseListData$ValueComparator"));
        int result = ((Number) callPrivateMethod("org.mentawai.list.BaseListData$ValueComparator", "compare", new Class[] {Object.class, Object.class}, stringComparator, new Object[] {listItem, listItem2})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testConstructorThrowsIOException() throws Throwable {
        try {
            new BaseListData("testBaseListDataListname", 100);
            fail("Expected IOException to be thrown");
        } catch (IOException ex) {
            assertEquals("ex.getClass()", IOException.class, ex.getClass());
            assertThrownBy(BaseListData.class, ex);
        }
    }
    
    public void testConstructorThrowsIOException1() throws Throwable {
        try {
            new BaseListData("testBaseListDataListname");
            fail("Expected IOException to be thrown");
        } catch (IOException ex) {
            assertEquals("ex.getClass()", IOException.class, ex.getClass());
            assertThrownBy(BaseListData.class, ex);
        }
    }
    
    public void testConstructorThrowsIOException2() throws Throwable {
        try {
            new BaseListData("testBaseListDataListname", 100, "testBaseListDataListDir");
            fail("Expected IOException to be thrown");
        } catch (IOException ex) {
            assertEquals("ex.getClass()", IOException.class, ex.getClass());
            assertThrownBy(BaseListData.class, ex);
        }
    }
    
    public void testConstructorThrowsIOException3() throws Throwable {
        try {
            new BaseListData("testBaseListDataListname", 100, "testBaseListDataListDir");
            fail("Expected IOException to be thrown");
        } catch (IOException ex) {
            assertEquals("ex.getClass()", IOException.class, ex.getClass());
            assertThrownBy(BaseListData.class, ex);
        }
    }
    
    public void testLoadFileToListThrowsIOExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(BaseListData.class, "SEP");
        storeStaticField(BaseListData.class, "FULLDIR");
        BaseListData baseListData = (BaseListData) Mockingbird.getProxyObject(BaseListData.class, true);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        setPrivateField(baseListData, "listDir", "");
        setPrivateField(baseListData, "listname", "");
        setPrivateField(BaseListData.class, "FULLDIR", "");
        setPrivateField(BaseListData.class, "SEP", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, locale, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(IOException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(IOException.class));
        Mockingbird.enterTestMode(BaseListData.class);
        try {
            callPrivateMethod("org.mentawai.list.BaseListData", "loadFileToList", new Class[] {Locale.class}, baseListData, new Object[] {locale});
            fail("Expected IOException to be thrown");
        } catch (IOException ex) {
            assertEquals("baseListData.getName()", "", baseListData.getName());
        }
    }
    
    public void testLoadFileToListThrowsIOExceptionWithAggressiveMocks1() throws Throwable {
        storeStaticField(BaseListData.class, "SEP");
        storeStaticField(BaseListData.class, "FULLDIR");
        BaseListData baseListData = (BaseListData) Mockingbird.getProxyObject(BaseListData.class, true);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        setPrivateField(baseListData, "listDir", "");
        setPrivateField(baseListData, "listname", "");
        setPrivateField(BaseListData.class, "FULLDIR", "");
        setPrivateField(BaseListData.class, "SEP", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, locale, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(IOException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(IOException.class));
        Mockingbird.enterTestMode(BaseListData.class);
        try {
            callPrivateMethod("org.mentawai.list.BaseListData", "loadFileToList", new Class[] {Locale.class}, baseListData, new Object[] {locale});
            fail("Expected IOException to be thrown");
        } catch (IOException ex) {
            assertEquals("baseListData.getName()", "", baseListData.getName());
        }
    }
    
    public void testLoadI18NThrowsIOExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(BaseListData.class, "SEP");
        BaseListData baseListData = (BaseListData) Mockingbird.getProxyObject(BaseListData.class, true);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        setPrivateField(baseListData, "listDir", "");
        setPrivateField(baseListData, "listname", "");
        setPrivateField(BaseListData.class, "SEP", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, locale, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, I18NMap.class, "getI18N", "(java.lang.String)org.mentawai.i18n.I18N", null, 1);
        Mockingbird.setReturnValue(false, locale, "getLanguage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, I18NMap.class, "getI18N", "(java.lang.String)org.mentawai.i18n.I18N", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(IOException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(IOException.class));
        Mockingbird.enterTestMode(BaseListData.class);
        try {
            callPrivateMethod("org.mentawai.list.BaseListData", "loadI18N", new Class[] {Locale.class}, baseListData, new Object[] {locale});
            fail("Expected IOException to be thrown");
        } catch (IOException ex) {
            assertEquals("baseListData.getName()", "", baseListData.getName());
        }
    }
}

