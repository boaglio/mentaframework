/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:12:49 PM
 * Time to generate: 00:41.730 seconds
 *
 */

package org.mentawai.list;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.File;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import javax.sql.DataSource;
import org.mentawai.ajaxtag.AjaxtagConstraints;
import org.mentawai.db.ConnectionHandler;
import org.mentawai.db.DataSourceConnectionHandler;
import org.mentawai.i18n.LocaleManager;
import org.mentawai.util.InjectionUtils;

public class ListManagerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ListManager.class;
    }
    
    public void testConstructor() throws Throwable {
        new ListManager();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAddList() throws Throwable {
        ListManager.addList(new SimpleListData());
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testAddList1() throws Throwable {
        DBListData list = new DBListData("testListManagerName", "testListManagerKeyColumn", "testListManagerValueColumn", "testListManagerTableName", "testListManagerOrderByColumn");
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        Mockingbird.enterTestMode(ListManager.class);
        ListManager.addList(list, connHandler);
        assertEquals("list.noI18nData.getName()", "testListManagerName", ((SimpleListData) getPrivateField(list, "noI18nData")).getName());
    }
    
    public void testConvert() throws Throwable {
        SimpleListData result = (SimpleListData) ListManager.convert(new ArrayList(100), "testListManagerKeyProperty", "testListManagerValueProperty");
        assertEquals("result.getName()", "", result.getName());
    }
    
    public void testConvert1() throws Throwable {
        Enum[] enums = new Enum[2];
        enums[0] = AjaxtagConstraints.STRING;
        enums[1] = AjaxtagConstraints.FORM;
        SimpleListData result = (SimpleListData) ListManager.convert("testListManagerListName", enums, false);
        assertEquals("result.getName()", "testListManagerListName", result.getName());
    }
    
    public void testConvert2() throws Throwable {
        SimpleListData result = (SimpleListData) ListManager.convert(new HashMap(100, 100.0F));
        assertEquals("result.getName()", "", result.getName());
    }
    
    public void testConvert3() throws Throwable {
        Map data = new HashMap(100, 100.0F);
        data.put(new Integer(35), "");
        SimpleListData result = (SimpleListData) ListManager.convert("testListManagerListName", data);
        assertEquals("result.getName()", "testListManagerListName", result.getName());
    }
    
    public void testConvert4() throws Throwable {
        SimpleListData result = (SimpleListData) ListManager.convert("testListManagerListName", new HashMap(100, 100.0F));
        assertEquals("result.getName()", "testListManagerListName", result.getName());
    }
    
    public void testConvert5() throws Throwable {
        Enum[] enums = new Enum[0];
        SimpleListData result = (SimpleListData) ListManager.convert("testListManagerListName", enums, false);
        assertEquals("result.getName()", "testListManagerListName", result.getName());
    }
    
    public void testConvert6() throws Throwable {
        Enum[] enums = new Enum[1];
        enums[0] = AjaxtagConstraints.ERROR;
        I18nListData result = (I18nListData) ListManager.convert("testListManagerListName", enums, true);
        assertEquals("result.getName()", "testListManagerListName", result.getName());
    }
    
    public void testConvert7() throws Throwable {
        Enum[] enums = new Enum[0];
        I18nListData result = (I18nListData) ListManager.convert("testListManagerListName", enums, true);
        assertEquals("result.getName()", "testListManagerListName", result.getName());
    }
    
    public void testConvert8() throws Throwable {
        Collection data = new ArrayList(100);
        data.add(new Integer(1));
        SimpleListData result = (SimpleListData) ListManager.convert("testListManagerListName", data);
        assertEquals("result.getName()", "testListManagerListName", result.getName());
    }
    
    public void testConvert9() throws Throwable {
        Collection data = new ArrayList(100);
        data.add(new ListDataItem("testListManagerId", "testListManagerValue"));
        SimpleListData result = (SimpleListData) ListManager.convert("testListManagerListName", data);
        assertEquals("result.getName()", "testListManagerListName", result.getName());
    }
    
    public void testConvert10() throws Throwable {
        SimpleListData result = (SimpleListData) ListManager.convert("testListManagerListName", new ArrayList(100));
        assertEquals("result.getName()", "testListManagerListName", result.getName());
    }
    
    public void testConvert11() throws Throwable {
        Collection data = new ArrayList(100);
        data.add(new ListDataItem(100, "testListManagerValue"));
        SimpleListData result = (SimpleListData) ListManager.convert(data);
        assertEquals("result.getName()", "", result.getName());
    }
    
    public void testConvert12() throws Throwable {
        SimpleListData result = (SimpleListData) ListManager.convert("testListManagerListName", new ArrayList(100), "testListManagerKeyProperty", "testListManagerValueProperty");
        assertEquals("result.getName()", "testListManagerListName", result.getName());
    }
    
    public void testGetList() throws Throwable {
        ListData list = new DBListData("testString", "testListManagerKeyColumn", "testListManagerValueColumn", "testListManagerTableName", "testListManagerOrderByColumn");
        ListManager.addList(list);
        ListManager.getList("testString");
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 2 assertions
    }
    
    public void testGetLists() throws Throwable {
        ListManager.getLists();
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 2 assertions
    }
    
    public void testGetValue() throws Throwable {
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        ListData dBListData = (ListData) Mockingbird.getProxyObject(ListData.class);
        Mockingbird.setReturnValue(true, dBListData.getValue("testListManagerParam1", loc), "testString");
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", dBListData, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", dBListData, 1);
        Mockingbird.enterTestMode(ListManager.class);
        String result = ListManager.getValue("testListManagerListName", "testListManagerId", loc);
        assertEquals("result", "testString", result);
    }
    
    public void testGetValue1() throws Throwable {
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(ListManager.getList("testString"), null);
        Mockingbird.enterTestMode(ListManager.class);
        String result = ListManager.getValue("testListManagerListName", "testListManagerId", loc);
        assertNull("result", result);
    }
    
    public void testGetValue2() throws Throwable {
        String result = ListManager.getValue(null, 100);
        assertNull("result", result);
    }
    
    public void testGetValue3() throws Throwable {
        Locale loc = Locale.PRC;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(ListManager.getValue("testString", "0", loc), "!null!");
        Mockingbird.enterTestMode(ListManager.class);
        String result = ListManager.getValue("testString", 0, loc);
        assertEquals("result", "!null!", result);
    }
    
    public void testGetValue4() throws Throwable {
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(ListManager.getValue("testString", "0", loc), null);
        Mockingbird.enterTestMode(ListManager.class);
        String result = ListManager.getValue("testListManagerListName", 100, loc);
        assertNull("result", result);
    }
    
    public void testGetValue5() throws Throwable {
        Mockingbird.enterRecordingMode();
        ListData localizedListData = (ListData) Mockingbird.getProxyObject(ListData.class);
        Mockingbird.setReturnValue(ListManager.getList("testString"), localizedListData);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.setReturnValue(LocaleManager.getDefaultLocale(), locale);
        Mockingbird.setReturnValue(localizedListData.getValue("testString", locale), null);
        Mockingbird.enterTestMode(ListManager.class);
        String result = ListManager.getValue("testString", "testString");
        assertNull("result", result);
    }
    
    public void testGetValue6() throws Throwable {
        Mockingbird.enterRecordingMode();
        Object value = ((DBListData) Mockingbird.getProxyObject(DBListData.class)).getValue("testListManagerParam1", null);
        Mockingbird.setReturnValue(true, value, "testString");
        Mockingbird.enterTestMode(ListManager.class);
        ListManager.getValue(" ", "testListManagerId");
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testGetValue7() throws Throwable {
        String result = ListManager.getValue("", "testListManagerId");
        assertNull("result", result);
    }
    
    public void testGetValue8() throws Throwable {
        String result = ListManager.getValue("testListManagerListName", "testListManagerId");
        assertNull("result", result);
    }
    
    public void testInit() throws Throwable {
        ListManager.init();
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testInit1() throws Throwable {
        storeStaticField(ListManager.class, "FULLDIR");
        storeStaticField(ListManager.class, "SEP");
        storeStaticField(ListManager.class, "lists");
        storeStaticField(ListManager.class, "LIST_DIR");
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        File[] files = new File[2];
        File file = (File) Mockingbird.getProxyObject(File.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        ListManager.LIST_DIR = "";
        setPrivateField(ListManager.class, "FULLDIR", "");
        setPrivateField(ListManager.class, "SEP", "");
        setPrivateField(ListManager.class, "lists", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replace", "(char,char)java.lang.String", "", 1);
        files[0] = file;
        files[1] = file2;
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replace", "(char,char)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file3);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file3, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file3, "listFiles", "()java.io.File[]", new Object[] {}, files, 1);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "endsWith", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(-1), 1);
        Mockingbird.setReturnValue(map.get(""), null);
        Mockingbird.replaceObjectForRecording(BaseListData.class, "<init>(java.lang.String,int,java.lang.String)", Mockingbird.getProxyObject(BaseListData.class));
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, file2, "isDirectory", "()boolean", boolean2, 1);
        Mockingbird.enterTestMode(ListManager.class);
        ListManager.init();
        assertNotNull("ListManager.lists", getPrivateField(ListManager.class, "lists"));
    }
    
    public void testInit2() throws Throwable {
        storeStaticField(ListManager.class, "FULLDIR");
        storeStaticField(ListManager.class, "SEP");
        storeStaticField(ListManager.class, "lists");
        storeStaticField(ListManager.class, "LIST_DIR");
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        File[] files = new File[2];
        File file = (File) Mockingbird.getProxyObject(File.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        ListManager.LIST_DIR = "";
        setPrivateField(ListManager.class, "FULLDIR", "");
        setPrivateField(ListManager.class, "SEP", "");
        setPrivateField(ListManager.class, "lists", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replace", "(char,char)java.lang.String", "", 1);
        files[0] = file;
        files[1] = file2;
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replace", "(char,char)java.lang.String", "AA", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file3);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file3, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file3, "listFiles", "()java.io.File[]", new Object[] {}, files, 1);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, "", "endsWith", "(java.lang.String)boolean", new Object[] {".i18n"}, boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(-1), 1);
        Mockingbird.setReturnValue(map.get(""), null);
        Mockingbird.replaceObjectForRecording(BaseListData.class, "<init>(java.lang.String,int,java.lang.String)", Mockingbird.getProxyObject(BaseListData.class));
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, file2, "isDirectory", "()boolean", boolean2, 1);
        Mockingbird.enterTestMode(ListManager.class);
        ListManager.init();
        assertNotNull("ListManager.lists", getPrivateField(ListManager.class, "lists"));
    }
    
    public void testInit3() throws Throwable {
        storeStaticField(ListManager.class, "FULLDIR");
        storeStaticField(ListManager.class, "SEP");
        storeStaticField(ListManager.class, "lists");
        storeStaticField(ListManager.class, "LIST_DIR");
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        File[] files = new File[2];
        File file = (File) Mockingbird.getProxyObject(File.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        ListManager.LIST_DIR = "";
        setPrivateField(ListManager.class, "FULLDIR", "");
        setPrivateField(ListManager.class, "SEP", "");
        setPrivateField(ListManager.class, "lists", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replace", "(char,char)java.lang.String", "", 1);
        files[0] = file;
        files[1] = file2;
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replace", "(char,char)java.lang.String", "AA", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file3);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file3, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file3, "listFiles", "()java.io.File[]", new Object[] {}, files, 1);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "endsWith", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(map.get(""), null);
        Mockingbird.replaceObjectForRecording(BaseListData.class, "<init>(java.lang.String,int,java.lang.String)", Mockingbird.getProxyObject(BaseListData.class));
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, file2, "isDirectory", "()boolean", boolean2, 1);
        Mockingbird.enterTestMode(ListManager.class);
        ListManager.init();
        assertNotNull("ListManager.lists", getPrivateField(ListManager.class, "lists"));
    }
    
    public void testInit4() throws Throwable {
        storeStaticField(ListManager.class, "FULLDIR");
        storeStaticField(ListManager.class, "SEP");
        storeStaticField(ListManager.class, "LIST_DIR");
        File[] files = new File[2];
        File file = (File) Mockingbird.getProxyObject(File.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        ListManager.LIST_DIR = "";
        setPrivateField(ListManager.class, "FULLDIR", "");
        setPrivateField(ListManager.class, "SEP", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replace", "(char,char)java.lang.String", "", 1);
        files[0] = file;
        files[1] = file2;
        Mockingbird.setReturnValue(false, "", "replace", "(char,char)java.lang.String", new Object[] {new Integer(47), new Character('\u0000')}, "AA", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file3);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file3, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file3, "listFiles", "()java.io.File[]", new Object[] {}, files, 1);
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "endsWith", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, file2, "isDirectory", "()boolean", boolean2, 1);
        Mockingbird.enterTestMode(ListManager.class);
        ListManager.init();
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testInit5() throws Throwable {
        storeStaticField(ListManager.class, "FULLDIR");
        storeStaticField(ListManager.class, "SEP");
        storeStaticField(ListManager.class, "lists");
        storeStaticField(ListManager.class, "LIST_DIR");
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        File[] files = new File[2];
        File file = (File) Mockingbird.getProxyObject(File.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        ListManager.LIST_DIR = "";
        setPrivateField(ListManager.class, "FULLDIR", "");
        setPrivateField(ListManager.class, "SEP", "");
        setPrivateField(ListManager.class, "lists", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replace", "(char,char)java.lang.String", "", 1);
        files[0] = file;
        files[1] = file2;
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replace", "(char,char)java.lang.String", "AA", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file3);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file3, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file3, "listFiles", "()java.io.File[]", new Object[] {}, files, 1);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "endsWith", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(map.get(""), obj);
        Mockingbird.setReturnValue(false, file2, "isDirectory", "()boolean", boolean2, 1);
        Mockingbird.enterTestMode(ListManager.class);
        ListManager.init();
        assertNotNull("ListManager.lists", getPrivateField(ListManager.class, "lists"));
    }
    
    public void testSetListDir() throws Throwable {
        ListManager.setListDir("testListManagerListDir");
        assertEquals("ListManager.LIST_DIR", "testListManagerListDir", ListManager.LIST_DIR);
    }
    
    public void testAddListThrowsNullPointerException() throws Throwable {
        try {
            ListManager.addList(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 3 assertions
        }
    }
    
    public void testAddListThrowsNullPointerException1() throws Throwable {
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        DBListData list = new DBListData("testListManagerName", "testListManagerKeyColumn", "testListManagerValueColumn", "testListManagerLocaleColumn", "testListManagerTableName", "testListManagerOrderByColumn");
        Mockingbird.enterRecordingMode();
        list.load(connHandler);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(ListManager.class);
        try {
            ListManager.addList(list, connHandler);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testConvertThrowsNullPointerException() throws Throwable {
        try {
            ListManager.convert((Collection) null, "testListManagerKeyProperty", "testListManagerValueProperty");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ListManager.class, ex);
        }
    }
    
    public void testConvertThrowsNullPointerException1() throws Throwable {
        Enum[] enums = new Enum[2];
        enums[0] = AjaxtagConstraints.STRING;
        try {
            ListManager.convert("testListManagerListName", enums, true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ListManager.class, ex);
        }
    }
    
    public void testConvertThrowsNullPointerException2() throws Throwable {
        try {
            ListManager.convert("testListManagerListName", null, "testListManagerKeyProperty", "testListManagerValueProperty");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ListManager.class, ex);
        }
    }
    
    public void testConvertThrowsNullPointerException3() throws Throwable {
        Enum[] enums = new Enum[4];
        enums[0] = AjaxtagConstraints.ERROR;
        try {
            ListManager.convert("testListManagerListName", enums, false);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ListManager.class, ex);
        }
    }
    
    public void testConvertThrowsNullPointerException4() throws Throwable {
        Enum[] enums = new Enum[2];
        try {
            ListManager.convert("testListManagerListName", enums, false);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ListManager.class, ex);
        }
    }
    
    public void testConvertThrowsNullPointerException5() throws Throwable {
        Enum[] enums = new Enum[5];
        try {
            ListManager.convert("testListManagerListName", enums, true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ListManager.class, ex);
        }
    }
    
    public void testConvertThrowsNullPointerException6() throws Throwable {
        try {
            ListManager.convert("testListManagerListName", (Enum[]) null, true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ListManager.class, ex);
        }
    }
    
    public void testConvertThrowsNullPointerException7() throws Throwable {
        try {
            ListManager.convert("testListManagerListName", (Enum[]) null, false);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ListManager.class, ex);
        }
    }
    
    public void testConvertThrowsNullPointerException8() throws Throwable {
        Collection data = new ArrayList(100);
        data.add(new ListDataItem("testListManagerId", "testListManagerValue"));
        data.add(null);
        try {
            ListManager.convert("testListManagerListName", data);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ListManager.class, ex);
            assertEquals("(ArrayList) data.size()", 2, data.size());
        }
    }
    
    public void testConvertThrowsNullPointerException9() throws Throwable {
        Collection data = new ArrayList(100);
        data.add(null);
        try {
            ListManager.convert("testListManagerListName", data);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ListManager.class, ex);
            assertEquals("(ArrayList) data.size()", 1, data.size());
        }
    }
    
    public void testConvertThrowsNullPointerException10() throws Throwable {
        try {
            ListManager.convert("testListManagerListName", (Collection) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ListManager.class, ex);
        }
    }
    
    public void testConvertThrowsRuntimeException() throws Throwable {
        Collection data = new ArrayList(100);
        data.add("");
        try {
            ListManager.convert("testListManagerListName", data, "testListManagerKeyProperty", "testListManagerValueProperty");
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertEquals("ex.getMessage()", "Erro generating list: testListManagerListName / testListManagerKeyProperty / testListManagerValueProperty", ex.getMessage());
            assertThrownBy(ListManager.class, ex);
            assertEquals("(ArrayList) data.size()", 1, data.size());
        }
    }
    
    public void testConvertThrowsRuntimeException1() throws Throwable {
        Collection data = new ArrayList(100);
        data.add(new Integer(0));
        try {
            ListManager.convert("testListManagerListName", data, "", "testListManagerValueProperty");
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertEquals("ex.getMessage()", "Erro generating list: testListManagerListName /  / testListManagerValueProperty", ex.getMessage());
            assertThrownBy(ListManager.class, ex);
            assertEquals("(ArrayList) data.size()", 1, data.size());
        }
    }
    
    public void testConvertThrowsRuntimeException2() throws Throwable {
        Map data = new HashMap(100, 100.0F);
        data.put(null, "testString");
        try {
            ListManager.convert(data);
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertEquals("ex.getMessage()", "Erro generating list: ", ex.getMessage());
            assertThrownBy(ListManager.class, ex);
        }
    }
    
    public void testConvertThrowsRuntimeException3() throws Throwable {
        try {
            ListManager.convert("testListManagerListName", (Map) null);
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertEquals("ex.getMessage()", "Erro generating list: testListManagerListName", ex.getMessage());
            assertThrownBy(ListManager.class, ex);
        }
    }
    
    public void testConvertThrowsRuntimeException4() throws Throwable {
        Map data = new HashMap(100, 100.0F);
        data.put(new Object(), "");
        data.put("", null);
        try {
            ListManager.convert("testListManagerListName", data);
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertEquals("ex.getMessage()", "Erro generating list: testListManagerListName", ex.getMessage());
            assertThrownBy(ListManager.class, ex);
            assertEquals("(HashMap) data.size()", 2, data.size());
        }
    }
    
    public void testConvertThrowsRuntimeException5() throws Throwable {
        Map data = new HashMap(100, 100.0F);
        data.put(new Integer(35), null);
        try {
            ListManager.convert("testListManagerListName", data);
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertEquals("ex.getMessage()", "Erro generating list: testListManagerListName", ex.getMessage());
            assertThrownBy(ListManager.class, ex);
            assertEquals("(HashMap) data.size()", 1, data.size());
        }
    }
    
    public void testConvertThrowsRuntimeException6() throws Throwable {
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Field field = (Field) Mockingbird.getProxyObject(Field.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(SimpleListData.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(SimpleListData.class));
        Mockingbird.setReturnValue(collection.isEmpty(), false);
        Mockingbird.setReturnValue(collection.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), obj);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", null, 1);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "getField", "(java.lang.Class,java.lang.String)java.lang.reflect.Field", field, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Throwable.class), "printStackTrace", "()void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(RuntimeException.class, "<init>(java.lang.String,java.lang.Throwable)", Mockingbird.getProxyObject(RuntimeException.class));
        Mockingbird.enterTestMode(ListManager.class);
        try {
            ListManager.convert("", collection, "", "");
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testConvertThrowsRuntimeException7() throws Throwable {
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Method method = (Method) Mockingbird.getProxyObject(Method.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(SimpleListData.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(SimpleListData.class));
        Mockingbird.setReturnValue(collection.isEmpty(), false);
        Mockingbird.setReturnValue(collection.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), obj);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToGet", "(java.lang.Class,java.lang.String)java.lang.reflect.Method", method, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        RuntimeException runtimeException = (RuntimeException) Mockingbird.getProxyObject(RuntimeException.class);
        Mockingbird.replaceObjectForRecording(RuntimeException.class, "<init>(java.lang.String)", runtimeException);
        Mockingbird.setReturnValue(false, runtimeException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(RuntimeException.class, "<init>(java.lang.String,java.lang.Throwable)", Mockingbird.getProxyObject(RuntimeException.class));
        Mockingbird.enterTestMode(ListManager.class);
        try {
            ListManager.convert("", collection, "", "");
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetValueThrowsIllegalStateException() throws Throwable {
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        ListData dBListData = (ListData) Mockingbird.getProxyObject(ListData.class);
        Mockingbird.setReturnValue(ListManager.getList("testString"), dBListData);
        Mockingbird.setException(dBListData.getValue("testString", loc), (Throwable) Mockingbird.getProxyObject(IllegalStateException.class));
        Mockingbird.enterTestMode(ListManager.class);
        try {
            ListManager.getValue("testString", "testString", loc);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testSetListDirThrowsNullPointerException() throws Throwable {
        try {
            ListManager.setListDir(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ListManager.class, ex);
            assertEquals("ListManager.LIST_DIR", "testListManagerListDir", ListManager.LIST_DIR);
        }
    }
}

