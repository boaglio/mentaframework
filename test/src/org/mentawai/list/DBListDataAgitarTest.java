/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:14:55 PM
 * Time to generate: 02:58.991 seconds
 *
 */

package org.mentawai.list;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.agitar.lib.mockingbird.MockingbirdSystem;
import java.io.PrintStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.StringTokenizer;
import javax.sql.DataSource;
import org.agitar.mock.naming.MockContext;
import org.mentawai.db.ConnectionHandler;
import org.mentawai.db.DataSourceConnectionHandler;

public class DBListDataAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return DBListData.class;
    }
    
    public void testConstructor() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        assertFalse("dBListData.isLocalized()", dBListData.isLocalized());
        assertEquals("dBListData.getName()", "testDBListDataName", dBListData.getName());
        assertEquals("dBListData.keyColumn", "testDBListDataKeyColumn", getPrivateField(dBListData, "keyColumn"));
        assertNull("dBListData.where", getPrivateField(dBListData, "where"));
        assertEquals("dBListData.orderByColumn", "testDBListDataOrderByColumn", getPrivateField(dBListData, "orderByColumn"));
        assertNull("dBListData.thread", getPrivateField(dBListData, "thread"));
        assertEquals("dBListData.valueColumn", "testDBListDataValueColumn", getPrivateField(dBListData, "valueColumn"));
        assertEquals("dBListData.tableName", "testDBListDataTableName", getPrivateField(dBListData, "tableName"));
        assertNull("dBListData.localeColumn", getPrivateField(dBListData, "localeColumn"));
    }
    
    public void testConstructor1() throws Throwable {
        DBListData dBListData = new DBListData("rfrom ", "testString", "testString", "testString", "testString", "testString");
        assertTrue("dBListData.isLocalized()", dBListData.isLocalized());
        assertEquals("dBListData.getName()", "rfrom ", dBListData.getName());
        assertEquals("dBListData.keyColumn", "testString", getPrivateField(dBListData, "keyColumn"));
        assertNull("dBListData.where", getPrivateField(dBListData, "where"));
        assertEquals("dBListData.orderByColumn", "testString", getPrivateField(dBListData, "orderByColumn"));
        assertNull("dBListData.thread", getPrivateField(dBListData, "thread"));
        assertEquals("dBListData.valueColumn", "testString", getPrivateField(dBListData, "valueColumn"));
        assertEquals("dBListData.tableName", "testString", getPrivateField(dBListData, "tableName"));
        assertEquals("dBListData.localeColumn", "testString", getPrivateField(dBListData, "localeColumn"));
    }
    
    public void testBuildSQL() throws Throwable {
        DBListData dBListData = new DBListData("where ", "testString", null, ",", "testString", "testString");
        String result = dBListData.buildSQL(false);
        assertEquals("result", "select testString,null from testString  order by testString", result);
    }
    
    public void testBuildSQL1() throws Throwable {
        DBListData dBListData = new DBListData("testString", "W&", "testString", "testString", "testString", "method getLocaleFromString returned null for: ");
        String result = dBListData.buildSQL(true);
        assertEquals("result", "select W&,testString,testString from testString  order by method getLocaleFromString returned null for: ", result);
    }
    
    public void testBuildSQL2() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        dBListData.setWhere("testDBListDataWhere");
        String result = dBListData.buildSQL(true);
        assertEquals("result", "select testDBListDataKeyColumn,testDBListDataValueColumn,null from testDBListDataTableName where testDBListDataWhere order by testDBListDataOrderByColumn", result);
    }
    
    public void testBuildSQL3() throws Throwable {
        DBListData dBListData = new DBListData("testString", "testString", "x", " order by ", "ad locale: ", "testString");
        dBListData.setWhere("testDBListDataWhere");
        String result = dBListData.buildSQL(false);
        assertEquals("result", "select testString,x from ad locale:  where testDBListDataWhere order by testString", result);
    }
    
    public void testCheckList() throws Throwable {
        DBListData dBListData = new DBListData("testString", "testString", "", "testString", "testString", "");
        callPrivateMethod("org.mentawai.list.DBListData", "checkList", new Class[] {Object.class}, dBListData, new Object[] {"testString"});
        assertEquals("dBListData.getName()", "testString", dBListData.getName());
    }
    
    public void testGetLocaleFromString() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        Locale result = dBListData.getLocaleFromString("testDBListDataLoc");
        assertEquals("result.getDisplayName()", "testdblistdataloc", result.getDisplayName());
    }
    
    public void testGetLocaleFromString1() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        dBListData.run();
        Locale result = dBListData.getLocaleFromString("whe_e");
        assertEquals("result.getDisplayName()", "whe (E)", result.getDisplayName());
    }
    
    public void testGetLocaleFromStringWithAggressiveMocks() throws Throwable {
        DBListData dBListData = (DBListData) Mockingbird.getProxyObject(DBListData.class, true);
        Mockingbird.enterRecordingMode();
        StringTokenizer stringTokenizer = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer);
        Mockingbird.setReturnValue(false, stringTokenizer, "countTokens", "()int", new Object[] {}, new Integer(3), 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.replaceObjectForRecording(Locale.class, "<init>(java.lang.String,java.lang.String,java.lang.String)", Mockingbird.getProxyObject(Locale.class));
        Mockingbird.enterTestMode(DBListData.class);
        Locale result = dBListData.getLocaleFromString("");
    }
    
    public void testGetName() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataLocaleColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        String result = dBListData.getName();
        assertEquals("result", "testDBListDataName", result);
    }
    
    public void testGetValue() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "from ", "testString", "testString", "testString");
        dBListData.setWhere("testString");
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement = conn.prepareStatement("select from ,testString from testString where testString order by testString");
        Mockingbird.setReturnValue(statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "testString");
        Mockingbird.setReturnValue(resultSet.getString(2), "\u00158\u0003\u0014\u0013hj");
        ((SimpleListData) Mockingbird.getProxyObject(SimpleListData.class)).add("testDBListDataParam1", "testDBListDataParam2");
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.load(conn);
        String result = dBListData.getValue(100, Locale.KOREAN);
        assertNull("result", result);
        assertEquals("dBListData.noI18nData.getName()", "testDBListDataName", ((SimpleListData) getPrivateField(dBListData, "noI18nData")).getName());
    }
    
    public void testGetValue1() throws Throwable {
        Locale loc = Locale.CHINESE;
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        dBListData.run();
        dBListData.run();
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Object statement = ((Connection) Mockingbird.getProxyObject(Connection.class)).prepareStatement("select ,selct  from List is not loaded:I  where testString order by testString");
        Mockingbird.setReturnValue(true, statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.refresh(connHandler);
        String result = dBListData.getValue("testDBListDataKey", loc);
        assertNull("result", result);
        assertEquals("dBListData.noI18nData.getName()", "testDBListDataName", ((SimpleListData) getPrivateField(dBListData, "noI18nData")).getName());
    }
    
    public void testGetValue2() throws Throwable {
        Locale loc = Locale.UK;
        DBListData dBListData = new DBListData("testString", "testString", "x", " order by ", "ad locale: ", "testString");
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement = conn.prepareStatement("select testString,x, order by  from ad locale:   order by testString");
        Mockingbird.setReturnValue(statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.load(conn);
        String result = dBListData.getValue("testDBListDataKey", loc);
        assertNull("result", result);
        assertEquals("dBListData.data.getName()", "testString", ((LocalizedListData) getPrivateField(dBListData, "data")).getName());
    }
    
    public void testGetValues() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        Locale loc = dBListData.getLocaleFromString("testDBListDataLoc");
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        DBListData dBListData2 = new DBListData("testDBListDataName1", "testDBListDataKeyColumn1", "testDBListDataValueColumn1", "testDBListDataTableName1", "testDBListDataOrderByColumn1");
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Object statement = ((Connection) Mockingbird.getProxyObject(Connection.class)).prepareStatement("select  order by ,testString from abcdeKfghijklmnopqrstuvwxyz  order by testString");
        Mockingbird.setReturnValue(true, statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "1");
        Mockingbird.setReturnValue(resultSet.getString(2), "testString");
        SimpleListData simpleListData = (SimpleListData) Mockingbird.getProxyObject(SimpleListData.class);
        simpleListData.add("testDBListDataParam1", "testDBListDataParam2");
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData2.refresh(connHandler);
        dBListData2.run();
        Mockingbird.enterRecordingMode();
        List linkedList = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.setReturnValue(true, simpleListData.getValues(loc), linkedList);
        Mockingbird.enterTestMode(DBListData.class);
        List result = dBListData2.getValues(loc);
        assertSame("result", linkedList, result);
    }
    
    public void testGetValues2() throws Throwable {
        Locale loc = Locale.JAPANESE;
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Object statement = ((Connection) Mockingbird.getProxyObject(Connection.class)).prepareStatement("select testString,testString from testString  order by testString");
        Mockingbird.setReturnValue(true, statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.refresh(connHandler);
        LinkedList result = (LinkedList) dBListData.getValues(loc);
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testIsLocalized() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        boolean result = dBListData.isLocalized();
        assertFalse("result", result);
    }
    
    public void testIsLocalized1() throws Throwable {
        DBListData dBListData = new DBListData("testString", "testString", "testString", "Ba locale: ", "1", "testString");
        boolean result = dBListData.isLocalized();
        assertTrue("result", result);
    }
    
    public void testLoad() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testString", "  ", "testString", "J", "testString");
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        Mockingbird.enterRecordingMode();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.setReturnValue(connHandler.getConnection(), connection);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement = connection.prepareStatement("select testString,  ,testString from J  order by testString");
        Mockingbird.setReturnValue(statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        connHandler.release(connection);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.load(connHandler);
        assertEquals("dBListData.data.getName()", "testDBListDataName", ((LocalizedListData) getPrivateField(dBListData, "data")).getName());
        assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
    }
    
    public void testLoad1() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Object statement = ((Connection) Mockingbird.getProxyObject(Connection.class)).prepareStatement("testDBListDataParam1");
        Mockingbird.setReturnValue(true, statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(100), "testString");
        Mockingbird.setReturnValue(resultSet.getString(1000), "`AL%<0");
        ((SimpleListData) Mockingbird.getProxyObject(SimpleListData.class)).add("testDBListDataParam1", "testDBListDataParam2");
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.load(connHandler);
        assertEquals("dBListData.noI18nData.getName()", "testDBListDataName", ((SimpleListData) getPrivateField(dBListData, "noI18nData")).getName());
        assertNull("dBListData.data", getPrivateField(dBListData, "data"));
    }
    
    public void testLoad2() throws Throwable {
        DBListData dBListData = new DBListData("testString", "testString", "testString", "testString", "", "Unabwle to refresh list!");
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement = conn.prepareStatement("select testString,testString,testString from   order by Unabwle to refresh list!");
        Mockingbird.setReturnValue(statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.load(conn);
        assertEquals("dBListData.data.getName()", "testString", ((LocalizedListData) getPrivateField(dBListData, "data")).getName());
        assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
    }
    
    public void testLoad3() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testString", "testString", "testString", null);
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement = conn.prepareStatement("select testString,testString from testString  order by null");
        Mockingbird.setReturnValue(statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "IOGHOEFmBs@c/[w~2lY4o");
        Mockingbird.setReturnValue(resultSet.getString(2), "testString");
        ((SimpleListData) Mockingbird.getProxyObject(SimpleListData.class)).add("testDBListDataParam1", "testDBListDataParam2");
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.load(conn);
        assertEquals("dBListData.noI18nData.getName()", "testDBListDataName", ((SimpleListData) getPrivateField(dBListData, "noI18nData")).getName());
        assertNull("dBListData.data", getPrivateField(dBListData, "data"));
    }
    
    public void testLoad4() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testString", "testString", "testString", "testString");
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement = conn.prepareStatement("select testString,testString from testString  order by testString");
        Mockingbird.setReturnValue(statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.load(conn);
        assertEquals("dBListData.noI18nData.getName()", "testDBListDataName", ((SimpleListData) getPrivateField(dBListData, "noI18nData")).getName());
        assertNull("dBListData.data", getPrivateField(dBListData, "data"));
    }
    
    public void testLoad5() throws Throwable {
        DBListData dBListData = new DBListData("List is not loaded: ", "testString", "testString", "testString", "", "testString");
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement = conn.prepareStatement("select testString,testString,testString from   order by testString");
        Mockingbird.setReturnValue(statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "testString");
        Mockingbird.setReturnValue(resultSet.getString(2), "testString");
        Mockingbird.setReturnValue(resultSet.getString(3), "testString");
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        StringTokenizer stringTokenizer = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer);
        Mockingbird.setReturnValue(false, stringTokenizer, "countTokens", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "testString", 1);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.replaceObjectForRecording(Locale.class, "<init>(java.lang.String)", locale);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        ((LocalizedListData) Mockingbird.getProxyObject(LocalizedListData.class)).add("testString", "testString", locale);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.load(conn);
        assertEquals("dBListData.data.getName()", "List is not loaded: ", ((LocalizedListData) getPrivateField(dBListData, "data")).getName());
        assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
    }
    
    public void testLoad6() throws Throwable {
        DBListData dBListData = new DBListData(null, "\f(]yvk19C[\r8b#R\"d/\\]^p)$?'Qp%eGX", "", null, "testString", "testString");
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement = conn.prepareStatement("select \f(]yvk19C[\r8b#R\"d/\\]^p)$?'Qp%eGX,,null from testString  order by testString");
        Mockingbird.setReturnValue(statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "testString");
        Mockingbird.setReturnValue(resultSet.getString(2), "testString");
        Mockingbird.setReturnValue(resultSet.getString(3), "testString");
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        StringTokenizer stringTokenizer = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer);
        Mockingbird.setReturnValue(false, stringTokenizer, "countTokens", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "testString", 1);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.replaceObjectForRecording(Locale.class, "<init>(java.lang.String)", locale);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        LocalizedListData localizedListData = (LocalizedListData) Mockingbird.getProxyObject(LocalizedListData.class);
        localizedListData.add("testString", "testString", locale);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "nKCbk]XEXsvnc");
        Mockingbird.setReturnValue(resultSet.getString(2), "testString");
        Mockingbird.setReturnValue(resultSet.getString(3), "testString");
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", locale, 1);
        localizedListData.add("nKCbk]XEXsvnc", "testString", locale);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.load(conn);
        assertNull("dBListData.data.getName()", ((LocalizedListData) getPrivateField(dBListData, "data")).getName());
        assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
    }
    
    public void testLoadWithAggressiveMocks() throws Throwable {
        DBListData dBListData = (DBListData) Mockingbird.getProxyObject(DBListData.class, true);
        ConnectionHandler connectionHandler = (ConnectionHandler) Mockingbird.getProxyObject(ConnectionHandler.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(dBListData, "isLocalized", Boolean.FALSE);
        setPrivateField(dBListData, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(connectionHandler.getConnection(), connection);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        SimpleListData simpleListData = (SimpleListData) Mockingbird.getProxyObject(SimpleListData.class);
        Mockingbird.replaceObjectForRecording(SimpleListData.class, "<init>(java.lang.String)", simpleListData);
        Mockingbird.setReturnValue(dBListData.buildSQL(false), "");
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getString(2), "");
        Mockingbird.setReturnValue(false, simpleListData, "add", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getString(2), "");
        Mockingbird.setReturnValue(false, simpleListData, "add", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        connectionHandler.release(connection);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.load(connectionHandler);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRefresh() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testString", "testString", "testString", "");
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement = conn.prepareStatement("select testString,testString from testString  order by ");
        Mockingbird.setReturnValue(statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "testString");
        Mockingbird.setReturnValue(resultSet.getString(2), "testString");
        ((SimpleListData) Mockingbird.getProxyObject(SimpleListData.class)).add("testDBListDataParam1", "testDBListDataParam2");
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.refresh(conn);
        assertEquals("dBListData.noI18nData.getName()", "testDBListDataName", ((SimpleListData) getPrivateField(dBListData, "noI18nData")).getName());
        assertNull("dBListData.data", getPrivateField(dBListData, "data"));
    }
    
    public void testRefresh1() throws Throwable {
        DBListData dBListData = new DBListData("testString", "testString", "x", " order by ", "ad locale: ", "testString");
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement = conn.prepareStatement("select testString,x, order by  from ad locale:   order by testString");
        Mockingbird.setReturnValue(statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.load(conn);
        dBListData.setWhere("testString");
        Connection conn2 = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement2 = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement2 = conn2.prepareStatement("select testString,x, order by  from ad locale:  where testString order by testString");
        Mockingbird.setReturnValue(statement2, preparedStatement2);
        ResultSet resultSet2 = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement2.executeQuery(), resultSet2);
        Mockingbird.setReturnValue(resultSet2.next(), true);
        Mockingbird.setReturnValue(resultSet2.getString(1), "testString");
        Mockingbird.setReturnValue(resultSet2.getString(2), "testString");
        Mockingbird.setReturnValue(resultSet2.getString(3), "testString");
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        StringTokenizer stringTokenizer = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer);
        Mockingbird.setReturnValue(false, stringTokenizer, "countTokens", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "testString", 1);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.replaceObjectForRecording(Locale.class, "<init>(java.lang.String)", locale);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        ((LocalizedListData) Mockingbird.getProxyObject(LocalizedListData.class)).add("testString", "testString", locale);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet2.next(), false);
        resultSet2.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement2.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.refresh(conn2);
        assertEquals("dBListData.data.getName()", "testString", ((LocalizedListData) getPrivateField(dBListData, "data")).getName());
        assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
    }
    
    public void testRefresh2() throws Throwable {
        DBListData dBListData = new DBListData("testString", "testString", null, "method getLocaleFromString returned null for: ", "", "testString");
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement = conn.prepareStatement("select testString,null,method getLocaleFromString returned null for:  from   order by testString");
        Mockingbird.setReturnValue(statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "testString");
        Mockingbird.setReturnValue(resultSet.getString(2), "testString");
        Mockingbird.setReturnValue(resultSet.getString(3), "testString");
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        StringTokenizer stringTokenizer = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer);
        Mockingbird.setReturnValue(false, stringTokenizer, "countTokens", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "testString", 1);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.replaceObjectForRecording(Locale.class, "<init>(java.lang.String)", locale);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        LocalizedListData localizedListData = (LocalizedListData) Mockingbird.getProxyObject(LocalizedListData.class);
        localizedListData.add("testString", "testString", locale);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "testString");
        Mockingbird.setReturnValue(resultSet.getString(2), "testString");
        Mockingbird.setReturnValue(resultSet.getString(3), ".)\"(V[Ps.McT]N\n(?9C08w8Wz7@Iy{_mh=RM>");
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        StringTokenizer stringTokenizer2 = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer2);
        Mockingbird.setReturnValue(false, stringTokenizer2, "countTokens", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, stringTokenizer2, "nextToken", "()java.lang.String", new Object[] {}, ".)\"(V[Ps.McT]N\n(?9C08w8Wz7@Iy{", 1);
        Mockingbird.setReturnValue(false, stringTokenizer2, "nextToken", "()java.lang.String", new Object[] {}, "mh=RM>", 1);
        Locale locale2 = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.replaceObjectForRecording(Locale.class, "<init>(java.lang.String,java.lang.String)", locale2);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        localizedListData.add("testString", "testString", locale2);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "#XA2vRKCXwsjK=.Yz3J");
        Mockingbird.setReturnValue(resultSet.getString(2), "testString");
        Mockingbird.setReturnValue(resultSet.getString(3), "testString");
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", locale, 1);
        localizedListData.add("#XA2vRKCXwsjK=.Yz3J", "testString", locale);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getString(2), "testString");
        Mockingbird.setReturnValue(resultSet.getString(3), "testString");
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", locale, 1);
        localizedListData.add("", "testString", locale);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.refresh(conn);
        assertEquals("dBListData.data.getName()", "testString", ((LocalizedListData) getPrivateField(dBListData, "data")).getName());
        assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
    }
    
    public void testRefresh3() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Object statement = ((Connection) Mockingbird.getProxyObject(Connection.class)).prepareStatement("select testString,testString from ^ where testString order by testString");
        Mockingbird.setReturnValue(true, statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "B}cK#-,O18Tv,x;AfvuVA*1f~0sxxlsZ");
        Mockingbird.setReturnValue(resultSet.getString(2), "testString");
        ((SimpleListData) Mockingbird.getProxyObject(SimpleListData.class)).add("testDBListDataParam1", "testDBListDataParam2");
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.refresh(connHandler);
        assertEquals("dBListData.noI18nData.getName()", "testDBListDataName", ((SimpleListData) getPrivateField(dBListData, "noI18nData")).getName());
        assertNull("dBListData.data", getPrivateField(dBListData, "data"));
    }
    
    public void testRefresh4() throws Throwable {
        DBListData dBListData = new DBListData("testString", "testString", "where ", "testString", "testString", "SLf?2JRNaQ.sw--nF\nsIAV +O0%ty1^J7l*c");
        dBListData.stopAutoRefresh();
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Object statement = ((Connection) Mockingbird.getProxyObject(Connection.class)).prepareStatement("select testString,where ,testString from testString  order by SLf?2JRNaQ.sw--nF\nsIAV +O0%ty1^J7l*c");
        Mockingbird.setReturnValue(true, statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.refresh(connHandler);
        assertEquals("dBListData.data.getName()", "testString", ((LocalizedListData) getPrivateField(dBListData, "data")).getName());
        assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
    }
    
    public void testRun() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        dBListData.startAutoRefresh(null, -100L);
        dBListData.run();
        assertNull("dBListData.connHandler", getPrivateField(dBListData, "connHandler"));
        assertNull("dBListData.data", getPrivateField(dBListData, "data"));
        assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
    }
    
    public void testRun1() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        dBListData.run();
        assertNull("dBListData.connHandler", getPrivateField(dBListData, "connHandler"));
        assertNull("dBListData.data", getPrivateField(dBListData, "data"));
        assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
    }
    
    public void testRunWithAggressiveMocks() throws Throwable {
        DBListData dBListData = (DBListData) Mockingbird.getProxyObject(DBListData.class, true);
        ConnectionHandler connectionHandler = (ConnectionHandler) Mockingbird.getProxyObject(ConnectionHandler.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        InterruptedException interruptedException = (InterruptedException) Mockingbird.getProxyObject(InterruptedException.class);
        setPrivateField(dBListData, "connHandler", connectionHandler);
        setPrivateField(dBListData, "bThread", Boolean.TRUE);
        setPrivateField(dBListData, "threadTime", new Long(0L));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(0L)}, null, 1);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.err = printStream;
        Mockingbird.setReturnValue(connectionHandler.getConnection(), null);
        dBListData.refresh((Connection) null);
        Mockingbird.setNormalReturnForVoid();
        connectionHandler.release(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(0L)}, null, 1);
        Mockingbird.setReturnValue(connectionHandler.getConnection(), null);
        dBListData.refresh((Connection) null);
        Mockingbird.setNormalReturnForVoid();
        connectionHandler.release(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(0L)}, null, 1);
        dBListData.refresh(connectionHandler);
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", new Object[] {"Unable to refresh list!"}, null, 1);
        Mockingbird.setReturnValue(false, sQLException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(0L)}, null, 1);
        dBListData.refresh(connectionHandler);
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", new Object[] {"Unable to refresh list!"}, null, 1);
        Mockingbird.setReturnValue(false, sQLException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setException(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(0L)}, interruptedException, 1);
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.run();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetWhere() throws Throwable {
        DBListData dBListData = new DBListData("testString", "testString", "testString", "Ba locale: ", "1", "testString");
        dBListData.setWhere(null);
        assertNull("dBListData.where", getPrivateField(dBListData, "where"));
    }
    
    public void testSetWhere1() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        dBListData.setWhere("");
        assertNull("dBListData.where", getPrivateField(dBListData, "where"));
    }
    
    public void testSetWhere2() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        dBListData.setWhere("where\u001F\u001E\u001EPHmx})bJ\u1663}g4\r>F\u001F \u001C\r\r\u001F\u001F\u000B\u000B\u001C\t\u001D\n\t");
        assertEquals("dBListData.where", "where\u001F\u001E\u001EPHmx})bJ\u1663}g4\r>F", getPrivateField(dBListData, "where"));
    }
    
    public void testSetWhere3() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        dBListData.setWhere("testDBListDataWhere");
        assertEquals("dBListData.where", "where testDBListDataWhere", getPrivateField(dBListData, "where"));
    }
    
    public void testSize() throws Throwable {
        DBListData dBListData = new DBListData("testString", "testString", "x", " order by ", "ad locale: ", "testString");
        dBListData.setWhere("testString");
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement = conn.prepareStatement("select testString,x, order by  from ad locale:  where testString order by testString");
        Mockingbird.setReturnValue(statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "testString");
        Mockingbird.setReturnValue(resultSet.getString(2), "testString");
        Mockingbird.setReturnValue(resultSet.getString(3), "testString");
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        StringTokenizer stringTokenizer = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer);
        Mockingbird.setReturnValue(false, stringTokenizer, "countTokens", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "testString", 1);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.replaceObjectForRecording(Locale.class, "<init>(java.lang.String)", locale);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        LocalizedListData localizedListData = (LocalizedListData) Mockingbird.getProxyObject(LocalizedListData.class);
        localizedListData.add("testString", "testString", locale);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.refresh(conn);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, localizedListData.size(), 1);
        Mockingbird.enterTestMode(DBListData.class);
        int result = dBListData.size();
        assertEquals("result", 1, result);
        assertEquals("dBListData.data.getName()", "testString", ((LocalizedListData) getPrivateField(dBListData, "data")).getName());
    }
    
    public void testSize1() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        dBListData.run();
        dBListData.run();
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Object statement = ((Connection) Mockingbird.getProxyObject(Connection.class)).prepareStatement("select ,selct  from List is not loaded:I  where testString order by testString");
        Mockingbird.setReturnValue(true, statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.refresh(connHandler);
        int result = dBListData.size();
        assertEquals("result", 0, result);
        assertEquals("dBListData.noI18nData.getName()", "testDBListDataName", ((SimpleListData) getPrivateField(dBListData, "noI18nData")).getName());
    }
    
    public void testStopAutoRefresh() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        dBListData.stopAutoRefresh();
        assertNull("dBListData.connHandler", getPrivateField(dBListData, "connHandler"));
        assertFalse("dBListData.bThread", ((Boolean) getPrivateField(dBListData, "bThread")).booleanValue());
        assertNull("dBListData.thread", getPrivateField(dBListData, "thread"));
    }
    
    public void testCheckListThrowsIllegalStateException() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        try {
            callPrivateMethod("org.mentawai.list.DBListData", "checkList", new Class[] {Object.class}, dBListData, new Object[] {null});
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "List is not loaded: testDBListDataName", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
        }
    }
    
    public void testGetLocaleFromStringThrowsIllegalArgumentException() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        try {
            dBListData.getLocaleFromString("");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Bad locale: ", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
        }
    }
    
    public void testGetLocaleFromStringThrowsNullPointerException() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        try {
            dBListData.getLocaleFromString(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(StringTokenizer.class, ex);
        }
    }
    
    public void testGetValueThrowsIllegalStateException() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataLocaleColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        try {
            dBListData.getValue(100, Locale.TAIWAN);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "List is not loaded: testDBListDataName", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
        }
    }
    
    public void testGetValueThrowsIllegalStateException1() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        try {
            dBListData.getValue(100, Locale.ITALIAN);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "List is not loaded: testDBListDataName", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
        }
    }
    
    public void testGetValueThrowsIllegalStateException2() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        try {
            dBListData.getValue("testDBListDataKey", Locale.ITALY);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "List is not loaded: testDBListDataName", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
        }
    }
    
    public void testGetValueThrowsIllegalStateException3() throws Throwable {
        DBListData dBListData = new DBListData("testString", "Bad loca>e: ", "testString", "select /", "testString", "testString");
        try {
            dBListData.getValue("testDBListDataKey", Locale.ITALY);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "List is not loaded: testString", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
        }
    }
    
    public void testGetValuesThrowsIllegalStateException() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        try {
            dBListData.getValues(Locale.FRANCE);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "List is not loaded: testDBListDataName", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
        }
    }
    
    public void testGetValuesThrowsIllegalStateException1() throws Throwable {
        DBListData dBListData = new DBListData(" order by ", "testString", "testString", "testString", "select", "testString");
        try {
            dBListData.getValues(Locale.ENGLISH);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "List is not loaded:  order by ", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
        }
    }
    
    public void testLoadThrowsNullPointerException() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Object statement = ((Connection) Mockingbird.getProxyObject(Connection.class)).prepareStatement("testDBListDataParam1");
        Mockingbird.setReturnValue(true, statement, preparedStatement);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), null);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        try {
            dBListData.load(connHandler);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
        }
    }
    
    public void testLoadThrowsNullPointerException1() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataLocaleColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        try {
            dBListData.load((ConnectionHandler) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
        }
    }
    
    public void testLoadThrowsNullPointerException2() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testString", "testString", "^", "testString");
        dBListData.setWhere("testString");
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement = conn.prepareStatement("select testString,testString from ^ where testString order by testString");
        Mockingbird.setReturnValue(statement, preparedStatement);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), null);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        try {
            dBListData.load(conn);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
        }
    }
    
    public void testLoadThrowsNullPointerException3() throws Throwable {
        DBListData dBListData = new DBListData(" order by ", "testString", "testString", "testString", "select", "testString");
        try {
            dBListData.load((Connection) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
        }
    }
    
    public void testLoadThrowsNullPointerException4() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "from ", "testString", "testString", "testString");
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement statement = conn.prepareStatement("select from ,testString from testString  order by testString");
        Mockingbird.setReturnValue(statement, null);
        Mockingbird.enterTestMode(DBListData.class);
        try {
            dBListData.load(conn);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
        }
    }
    
    public void testLoadThrowsNullPointerException5() throws Throwable {
        DBListData dBListData = new DBListData("ftd&kC%^k>gKlZi;HJFYqFe(Ek{w|Im", "testString", "testString", "2", "where ", "testString");
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement = conn.prepareStatement("select testString,testString,2 from where   order by testString");
        Mockingbird.setReturnValue(statement, preparedStatement);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), null);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        try {
            dBListData.load(conn);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
        }
    }
    
    public void testLoadThrowsNullPointerException6() throws Throwable {
        DBListData dBListData = new DBListData(" order by ", "testString", "testString", "testString", "select", "testString");
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement statement = conn.prepareStatement("select testString,testString,testString from select  order by testString");
        Mockingbird.setReturnValue(statement, null);
        Mockingbird.enterTestMode(DBListData.class);
        try {
            dBListData.load(conn);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
        }
    }
    
    public void testLoadThrowsNullPointerException7() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        try {
            dBListData.load((Connection) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
        }
    }
    
    public void testLoadThrowsSQLException() throws Throwable {
        DBListData dBListData = new DBListData("testString", "from ", "testString", "testString", "testString");
        DataSourceConnectionHandler connHandler = (DataSourceConnectionHandler) Mockingbird.getProxyObject(DataSourceConnectionHandler.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(connHandler.getConnection(), (Throwable) Mockingbird.getProxyObject(SQLException.class));
        connHandler.release(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        try {
            dBListData.load(connHandler);
            fail("Expected SQLException to be thrown");
        } catch (SQLException ex) {
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
        }
    }
    
    public void testLoadThrowsThrowableWithAggressiveMocks() throws Throwable {
        DBListData dBListData = (DBListData) Mockingbird.getProxyObject(DBListData.class, true);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(dBListData, "isLocalized", Boolean.FALSE);
        setPrivateField(dBListData, "name", "");
        SimpleListData simpleListData = (SimpleListData) Mockingbird.getProxyObject(SimpleListData.class);
        Mockingbird.replaceObjectForRecording(SimpleListData.class, "<init>(java.lang.String)", simpleListData);
        Mockingbird.setReturnValue(dBListData.buildSQL(false), "");
        Mockingbird.setReturnValue(false, connection, "prepareStatement", "(java.lang.String)java.sql.PreparedStatement", preparedStatement, 1);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getString(2), "");
        Mockingbird.setReturnValue(false, simpleListData, "add", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getString(2), "");
        Mockingbird.setReturnValue(false, simpleListData, "add", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setException(resultSet.getString(2), sQLException);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        preparedStatement.close();
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(SQLException.class));
        Mockingbird.enterTestMode(DBListData.class);
        try {
            dBListData.load(connection);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testRefreshThrowsIllegalArgumentException() throws Throwable {
        DBListData dBListData = new DBListData("  t", "   ", "testString", "testString", "testString", "testString");
        DBListData dBListData2 = new DBListData("testString", "testString", null, "testString", "o\u0010\u0017E\u0016`8#\u000EU\t:\u0000\u00023\u0013/C\u000F5;\u0006WP\u000E\u001CDXhLWI'\rZL", "sj[8=\nc8TPJMmaBRP}+x_[&[V6clw\n");
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement = conn.prepareStatement("select testString,null,testString from o\u0010\u0017E\u0016`8#\u000EU\t:\u0000\u00023\u0013/C\u000F5;\u0006WP\u000E\u001CDXhLWI'\rZL  order by sj[8=\nc8TPJMmaBRP}+x_[&[V6clw\n");
        Mockingbird.setReturnValue(statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData2.refresh(conn);
        DBListData dBListData3 = new DBListData("testDBListDataName", "testString", "testString", "testString", "testString");
        DBListData dBListData4 = new DBListData("testString", "testString", "x", " order by ", "ad locale: ", "testString");
        Connection conn2 = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement2 = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement2 = conn2.prepareStatement("select testString,x, order by  from ad locale:   order by testString");
        Mockingbird.setReturnValue(statement2, preparedStatement2);
        ResultSet resultSet2 = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement2.executeQuery(), resultSet2);
        Mockingbird.setReturnValue(resultSet2.next(), false);
        resultSet2.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement2.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData4.load(conn2);
        dBListData4.setWhere("testString");
        Connection conn3 = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement3 = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement3 = conn3.prepareStatement("select testString,x, order by  from ad locale:  where testString order by testString");
        Mockingbird.setReturnValue(statement3, preparedStatement3);
        ResultSet resultSet3 = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement3.executeQuery(), resultSet3);
        Mockingbird.setReturnValue(resultSet3.next(), true);
        Mockingbird.setReturnValue(resultSet3.getString(1), "testString");
        Mockingbird.setReturnValue(resultSet3.getString(2), "testString");
        Mockingbird.setReturnValue(resultSet3.getString(3), "testString");
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        StringTokenizer stringTokenizer = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer);
        Mockingbird.setReturnValue(false, stringTokenizer, "countTokens", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "testString", 1);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.replaceObjectForRecording(Locale.class, "<init>(java.lang.String)", locale);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        ((LocalizedListData) Mockingbird.getProxyObject(LocalizedListData.class)).add("testString", "testString", locale);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet3.next(), false);
        resultSet3.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement3.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData4.refresh(conn3);
        DBListData dBListData5 = new DBListData("testDBListDataName1", "testString", "testString", "testString", null);
        Connection conn4 = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement4 = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement4 = conn4.prepareStatement("select testString,testString from testString  order by null");
        Mockingbird.setReturnValue(statement4, preparedStatement4);
        ResultSet resultSet4 = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement4.executeQuery(), resultSet4);
        Mockingbird.setReturnValue(resultSet4.next(), true);
        Mockingbird.setReturnValue(resultSet4.getString(1), "IOGHOEFmBs@c/[w~2lY4o");
        Mockingbird.setReturnValue(resultSet4.getString(2), "testString");
        ((SimpleListData) Mockingbird.getProxyObject(SimpleListData.class)).add("testDBListDataParam1", "testDBListDataParam2");
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet4.next(), false);
        resultSet4.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement4.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData5.load(conn4);
        MockContext.bindAll("java:comp/env/testString", Mockingbird.getProxyObject(DataSource.class));
        ConnectionHandler connHandler = (ConnectionHandler) callPrivateMethod("org.mentawai.db.JNDIConnectionHandler", "<init>", new Class[] {String.class}, null, new Object[] {"testString"});
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement5 = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Object statement5 = ((Connection) Mockingbird.getProxyObject(Connection.class)).prepareStatement("select testString,testString from testString  order by testString");
        Mockingbird.setReturnValue(true, statement5, preparedStatement5);
        ResultSet resultSet5 = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement5.executeQuery(), resultSet5);
        Mockingbird.setReturnValue(resultSet5.next(), false);
        resultSet5.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement5.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData3.refresh(connHandler);
        Connection conn5 = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement6 = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement6 = conn5.prepareStatement("select testString,testString from testString  order by testString");
        Mockingbird.setReturnValue(statement6, preparedStatement6);
        ResultSet resultSet6 = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement6.executeQuery(), resultSet6);
        Mockingbird.setReturnValue(resultSet6.next(), false);
        resultSet6.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement6.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData3.load(conn5);
        DBListData dBListData6 = new DBListData("testString", "testString", "testString", "testString", "testString", "testString");
        dBListData6.setWhere("testString");
        Connection conn6 = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement7 = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement7 = conn6.prepareStatement("select testString,testString,testString from testString where testString order by testString");
        Mockingbird.setReturnValue(statement7, preparedStatement7);
        ResultSet resultSet7 = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement7.executeQuery(), resultSet7);
        Mockingbird.setReturnValue(resultSet7.next(), true);
        Mockingbird.setReturnValue(resultSet7.getString(1), "\";A;4&->{!4<Bzv.\rM5fGgRVt(.:Y'8{\rk7ih\n]");
        Mockingbird.setReturnValue(resultSet7.getString(2), "");
        Mockingbird.setReturnValue(resultSet7.getString(3), "testString");
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap2, "get", "(java.lang.Object)java.lang.Object", null, 1);
        StringTokenizer stringTokenizer2 = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer2);
        Mockingbird.setReturnValue(false, stringTokenizer2, "countTokens", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, stringTokenizer2, "nextToken", "()java.lang.String", new Object[] {}, "testString", 1);
        Locale locale2 = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.replaceObjectForRecording(Locale.class, "<init>(java.lang.String)", locale2);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        ((LocalizedListData) Mockingbird.getProxyObject(LocalizedListData.class)).add("\";A;4&->{!4<Bzv.\rM5fGgRVt(.:Y'8{\rk7ih\n]", "", locale2);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet7.next(), false);
        resultSet7.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement7.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData6.load(conn6);
        dBListData6.getValue(100, null);
        Connection conn7 = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement8 = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement8 = conn7.prepareStatement("select    ,testString,testString from testString  order by testString");
        Mockingbird.setReturnValue(statement8, preparedStatement8);
        ResultSet resultSet8 = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement8.executeQuery(), resultSet8);
        Mockingbird.setReturnValue(resultSet8.next(), true);
        Mockingbird.setReturnValue(resultSet8.getString(1), "`(EcJ~CA7_Yjfd)50(`x'l4\nRkBkHM");
        Mockingbird.setReturnValue(resultSet8.getString(2), "testString");
        Mockingbird.setReturnValue(resultSet8.getString(3), "Y3j5(joHfBz|Dq");
        HashMap hashMap3 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap3, "get", "(java.lang.Object)java.lang.Object", null, 1);
        StringTokenizer stringTokenizer3 = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer3);
        Mockingbird.setReturnValue(false, stringTokenizer3, "countTokens", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, stringTokenizer3, "nextToken", "()java.lang.String", new Object[] {}, "Y3j5(joHfBz|Dq", 1);
        Locale locale3 = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.replaceObjectForRecording(Locale.class, "<init>(java.lang.String)", locale3);
        Mockingbird.setReturnValue(false, hashMap3, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        ((LocalizedListData) Mockingbird.getProxyObject(LocalizedListData.class)).add("`(EcJ~CA7_Yjfd)50(`x'l4\nRkBkHM", "testString", locale3);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet8.next(), true);
        Mockingbird.setReturnValue(resultSet8.getString(1), "");
        Mockingbird.setReturnValue(resultSet8.getString(2), "testString");
        Mockingbird.setReturnValue(resultSet8.getString(3), "");
        Mockingbird.setReturnValue(false, hashMap3, "get", "(java.lang.Object)java.lang.Object", null, 1);
        StringTokenizer stringTokenizer4 = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer4);
        Mockingbird.setReturnValue(false, stringTokenizer4, "countTokens", "()int", new Object[] {}, new Integer(0), 1);
        resultSet8.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement8.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        try {
            dBListData.refresh(conn7);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Bad locale: ", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
        }
    }
    
    public void testRefreshThrowsIllegalArgumentException1() throws Throwable {
        DataSource ds = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        DBListData dBListData = new DBListData("testString", "testString", null, "method getLocaleFromString returned null for: ", "", "testString");
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement = conn.prepareStatement("select testString,null,method getLocaleFromString returned null for:  from   order by testString");
        Mockingbird.setReturnValue(statement, preparedStatement);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), resultSet);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "testString");
        Mockingbird.setReturnValue(resultSet.getString(2), "testString");
        Mockingbird.setReturnValue(resultSet.getString(3), "testString");
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        StringTokenizer stringTokenizer = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer);
        Mockingbird.setReturnValue(false, stringTokenizer, "countTokens", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "testString", 1);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.replaceObjectForRecording(Locale.class, "<init>(java.lang.String)", locale);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        LocalizedListData localizedListData = (LocalizedListData) Mockingbird.getProxyObject(LocalizedListData.class);
        localizedListData.add("testString", "testString", locale);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "testString");
        Mockingbird.setReturnValue(resultSet.getString(2), "testString");
        Mockingbird.setReturnValue(resultSet.getString(3), ".)\"(V[Ps.McT]N\n(?9C08w8Wz7@Iy{_mh=RM>");
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        StringTokenizer stringTokenizer2 = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer2);
        Mockingbird.setReturnValue(false, stringTokenizer2, "countTokens", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, stringTokenizer2, "nextToken", "()java.lang.String", new Object[] {}, ".)\"(V[Ps.McT]N\n(?9C08w8Wz7@Iy{", 1);
        Mockingbird.setReturnValue(false, stringTokenizer2, "nextToken", "()java.lang.String", new Object[] {}, "mh=RM>", 1);
        Locale locale2 = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.replaceObjectForRecording(Locale.class, "<init>(java.lang.String,java.lang.String)", locale2);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        localizedListData.add("testString", "testString", locale2);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "#XA2vRKCXwsjK=.Yz3J");
        Mockingbird.setReturnValue(resultSet.getString(2), "testString");
        Mockingbird.setReturnValue(resultSet.getString(3), "testString");
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", locale, 1);
        localizedListData.add("#XA2vRKCXwsjK=.Yz3J", "testString", locale);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getString(2), "testString");
        Mockingbird.setReturnValue(resultSet.getString(3), "testString");
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", locale, 1);
        localizedListData.add("", "testString", locale);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(resultSet.next(), false);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.refresh(conn);
        ConnectionHandler connHandler = new DataSourceConnectionHandler(ds);
        Mockingbird.enterRecordingMode();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.setReturnValue(connHandler.getConnection(), connection);
        PreparedStatement preparedStatement2 = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        PreparedStatement statement2 = connection.prepareStatement("select testString,null,method getLocaleFromString returned null for:  from   order by testString");
        Mockingbird.setReturnValue(statement2, preparedStatement2);
        ResultSet resultSet2 = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Mockingbird.setReturnValue(preparedStatement2.executeQuery(), resultSet2);
        Mockingbird.setReturnValue(resultSet2.next(), true);
        Mockingbird.setReturnValue(resultSet2.getString(1), "testString");
        Mockingbird.setReturnValue(resultSet2.getString(2), ";[a?4}dMUv=q3|i9\f&ZM7|\n\\\"'");
        Mockingbird.setReturnValue(resultSet2.getString(3), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(HashMap.class), "get", "(java.lang.Object)java.lang.Object", null, 1);
        StringTokenizer stringTokenizer3 = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer3);
        Mockingbird.setReturnValue(false, stringTokenizer3, "countTokens", "()int", new Object[] {}, new Integer(0), 1);
        resultSet2.close();
        Mockingbird.setNormalReturnForVoid();
        preparedStatement2.close();
        Mockingbird.setNormalReturnForVoid();
        connHandler.release(connection);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        try {
            dBListData.refresh(connHandler);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Bad locale: ", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertEquals("dBListData.data.getName()", "testString", ((LocalizedListData) getPrivateField(dBListData, "data")).getName());
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
        }
    }
    
    public void testRefreshThrowsNullPointerException() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        try {
            dBListData.refresh((Connection) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
        }
    }
    
    public void testRefreshThrowsNullPointerException1() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        MockContext.bindAll("java:comp/env/testString", Mockingbird.getProxyObject(DataSource.class));
        ConnectionHandler connHandler = (ConnectionHandler) callPrivateMethod("org.mentawai.db.JNDIConnectionHandler", "<init>", new Class[] {String.class}, null, new Object[] {"testString"});
        Mockingbird.enterRecordingMode();
        PreparedStatement preparedStatement = (PreparedStatement) Mockingbird.getProxyObject(PreparedStatement.class);
        Object statement = ((Connection) Mockingbird.getProxyObject(Connection.class)).prepareStatement("select testString,testString from =jU.lhF  order by null");
        Mockingbird.setReturnValue(true, statement, preparedStatement);
        Mockingbird.setReturnValue(preparedStatement.executeQuery(), null);
        preparedStatement.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBListData.class);
        try {
            dBListData.refresh(connHandler);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
        }
    }
    
    public void testRefreshThrowsNullPointerException2() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName1", "testDBListDataOrderByColumn");
        Mockingbird.enterTestMode(DBListData.class);
        try {
            dBListData.refresh((ConnectionHandler) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
        }
    }
    
    public void testRunThrowsNullPointerException() throws Throwable {
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        DBListData dBListData = (DBListData) Mockingbird.getProxyObject(DBListData.class);
        Mockingbird.enterRecordingMode();
        dBListData.stopAutoRefresh();
        Mockingbird.setNormalReturnForVoid();
        Thread thread = (Thread) Mockingbird.getProxyObject(Thread.class);
        Mockingbird.replaceObjectForRecording(Thread.class, "<init>(java.lang.Runnable)", thread);
        Mockingbird.setReturnValue(false, thread, "start", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(DBListData.class);
        dBListData.startAutoRefresh(connHandler, 100L);
        Mockingbird.enterRecordingMode();
        dBListData.refresh(connHandler);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(DBListData.class);
        try {
            dBListData.run();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("dBListData.connHandler", connHandler, getPrivateField(dBListData, "connHandler"));
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
        }
    }
    
    public void testSizeThrowsIllegalStateException() throws Throwable {
        DBListData dBListData = new DBListData("testDBListDataName", "testDBListDataKeyColumn", "testDBListDataValueColumn", "testDBListDataTableName", "testDBListDataOrderByColumn");
        try {
            dBListData.size();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "List is not loaded: testDBListDataName", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
        }
    }
    
    public void testSizeThrowsIllegalStateException1() throws Throwable {
        DBListData dBListData = new DBListData("testString", "testString", "from ", "", "testString", "testString");
        try {
            dBListData.size();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "List is not loaded: testString", ex.getMessage());
            assertThrownBy(DBListData.class, ex);
            assertNull("dBListData.data", getPrivateField(dBListData, "data"));
            assertNull("dBListData.noI18nData", getPrivateField(dBListData, "noI18nData"));
        }
    }
}

