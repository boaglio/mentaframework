/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:12:36 PM
 * Time to generate: 00:16.136 seconds
 *
 */

package org.mentawai.ioc;

import com.agitar.lib.junit.AgitarTestCase;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScopeComponentAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ScopeComponent.class;
    }
    
    public void testConstructor() throws Throwable {
        List initValues = new ArrayList(100);
        Map props = new HashMap(100, 100.0F);
        ScopeComponent scopeComponent = new ScopeComponent(Integer.class, initValues, props, 100);
        assertNull("scopeComponent.cache", getPrivateField(scopeComponent, "cache"));
        assertNull("scopeComponent.constructor", getPrivateField(scopeComponent, "constructor"));
        assertEquals("scopeComponent.getScope()", 100, scopeComponent.getScope());
        assertSame("scopeComponent.props", props, getPrivateField(scopeComponent, "props"));
        assertEquals("scopeComponent.klass", Integer.class, getPrivateField(scopeComponent, "klass"));
        assertSame("scopeComponent.initValues", initValues, getPrivateField(scopeComponent, "initValues"));
    }
    
    public void testConstructor1() throws Throwable {
        ScopeComponent scopeComponent = new ScopeComponent(Object.class, 100);
        assertNull("scopeComponent.cache", getPrivateField(scopeComponent, "cache"));
        assertNull("scopeComponent.constructor", getPrivateField(scopeComponent, "constructor"));
        assertEquals("scopeComponent.getScope()", 100, scopeComponent.getScope());
        assertNull("scopeComponent.props", getPrivateField(scopeComponent, "props"));
        assertNull("scopeComponent.initValues", getPrivateField(scopeComponent, "initValues"));
        assertEquals("scopeComponent.klass", Object.class, getPrivateField(scopeComponent, "klass"));
    }
    
    public void testConstructor2() throws Throwable {
        Map props = new HashMap(100, 100.0F);
        ScopeComponent scopeComponent = new ScopeComponent(Integer.class, props, 100);
        assertNull("scopeComponent.cache", getPrivateField(scopeComponent, "cache"));
        assertNull("scopeComponent.constructor", getPrivateField(scopeComponent, "constructor"));
        assertEquals("scopeComponent.getScope()", 100, scopeComponent.getScope());
        assertSame("scopeComponent.props", props, getPrivateField(scopeComponent, "props"));
        assertEquals("scopeComponent.klass", Integer.class, getPrivateField(scopeComponent, "klass"));
        assertNull("scopeComponent.initValues", getPrivateField(scopeComponent, "initValues"));
    }
    
    public void testConstructor3() throws Throwable {
        List initValues = new ArrayList(100);
        ScopeComponent scopeComponent = new ScopeComponent(Integer.class, initValues, 100);
        assertNull("scopeComponent.cache", getPrivateField(scopeComponent, "cache"));
        assertNull("scopeComponent.constructor", getPrivateField(scopeComponent, "constructor"));
        assertEquals("scopeComponent.getScope()", 100, scopeComponent.getScope());
        assertNull("scopeComponent.props", getPrivateField(scopeComponent, "props"));
        assertEquals("scopeComponent.klass", Integer.class, getPrivateField(scopeComponent, "klass"));
        assertSame("scopeComponent.initValues", initValues, getPrivateField(scopeComponent, "initValues"));
    }
    
    public void testGetScope() throws Throwable {
        int result = new ScopeComponent(Integer.class, 100).getScope();
        assertEquals("result", 100, result);
    }
    
    public void testGetScope1() throws Throwable {
        int result = new ScopeComponent(Object.class, 0).getScope();
        assertEquals("result", 0, result);
    }
}

