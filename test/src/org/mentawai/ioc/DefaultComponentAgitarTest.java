/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:11:32 PM
 * Time to generate: 01:10.442 seconds
 *
 */

package org.mentawai.ioc;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.mentawai.util.FindMethod;

public class DefaultComponentAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return DefaultComponent.class;
    }
    
    public void testConstructor() throws Throwable {
        List initValues = new ArrayList(100);
        Map props = new HashMap(100, 100.0F);
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class, initValues, props);
        assertNull("defaultComponent.cache", getPrivateField(defaultComponent, "cache"));
        assertNull("defaultComponent.constructor", getPrivateField(defaultComponent, "constructor"));
        assertSame("defaultComponent.props", props, getPrivateField(defaultComponent, "props"));
        assertSame("defaultComponent.initValues", initValues, getPrivateField(defaultComponent, "initValues"));
        assertEquals("defaultComponent.klass", Integer.class, getPrivateField(defaultComponent, "klass"));
    }
    
    public void testConstructor1() throws Throwable {
        Map props = new HashMap(100, 100.0F);
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class, props);
        assertNull("defaultComponent.cache", getPrivateField(defaultComponent, "cache"));
        assertNull("defaultComponent.constructor", getPrivateField(defaultComponent, "constructor"));
        assertSame("defaultComponent.props", props, getPrivateField(defaultComponent, "props"));
        assertNull("defaultComponent.initValues", getPrivateField(defaultComponent, "initValues"));
        assertEquals("defaultComponent.klass", Integer.class, getPrivateField(defaultComponent, "klass"));
    }
    
    public void testConstructor2() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class);
        assertNull("defaultComponent.cache", getPrivateField(defaultComponent, "cache"));
        assertNull("defaultComponent.constructor", getPrivateField(defaultComponent, "constructor"));
        assertNull("defaultComponent.props", getPrivateField(defaultComponent, "props"));
        assertEquals("defaultComponent.klass", Integer.class, getPrivateField(defaultComponent, "klass"));
        assertNull("defaultComponent.initValues", getPrivateField(defaultComponent, "initValues"));
    }
    
    public void testConstructor3() throws Throwable {
        List initValues = new ArrayList(100);
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class, initValues);
        assertNull("defaultComponent.cache", getPrivateField(defaultComponent, "cache"));
        assertNull("defaultComponent.constructor", getPrivateField(defaultComponent, "constructor"));
        assertNull("defaultComponent.props", getPrivateField(defaultComponent, "props"));
        assertSame("defaultComponent.initValues", initValues, getPrivateField(defaultComponent, "initValues"));
        assertEquals("defaultComponent.klass", Integer.class, getPrivateField(defaultComponent, "klass"));
    }
    
    public void testAddInitValue() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Object.class);
        DefaultComponent result = defaultComponent.addInitValue("");
        assertEquals("defaultComponent.initValues.size()", 1, ((Collection) getPrivateField(defaultComponent, "initValues")).size());
        assertSame("result", defaultComponent, result);
    }
    
    public void testAddInitValue1() throws Throwable {
        DefaultComponent defaultComponent = (DefaultComponent) Mockingbird.getProxyObject(DefaultComponent.class);
        defaultComponent.addInitValue(new Object());
        Mockingbird.enterTestMode(DefaultComponent.class);
        DefaultComponent result = defaultComponent.addInitValue("");
        assertSame("result", defaultComponent, result);
        assertEquals("defaultComponent.initValues.size()", 2, ((Collection) getPrivateField(defaultComponent, "initValues")).size());
    }
    
    public void testAddInitValues() throws Throwable {
        List values = new ArrayList(100);
        DefaultComponent defaultComponent = new DefaultComponent(Object.class, new ArrayList(1000), new HashMap(100, 100.0F));
        DefaultComponent result = defaultComponent.addInitValues(values);
        assertSame("result", defaultComponent, result);
    }
    
    public void testAddInitValues1() throws Throwable {
        DefaultComponent scopeComponent = new ScopeComponent(Integer.class, new HashMap(100, 100.0F), 100);
        List values = new ArrayList(100);
        values.add("");
        DefaultComponent result = scopeComponent.addInitValues(values);
        assertSame("result", scopeComponent, result);
        assertEquals("(ScopeComponent) scopeComponent.initValues.size()", 1, ((Collection) getPrivateField(scopeComponent, "initValues")).size());
    }
    
    public void testAddProperties() throws Throwable {
        Map map = new HashMap(100, 100.0F);
        DefaultComponent scopeComponent = new ScopeComponent(Integer.class, new HashMap(1000, 1000.0F), 100);
        DefaultComponent result = scopeComponent.addProperties(map);
        assertSame("result", scopeComponent, result);
    }
    
    public void testAddProperties1() throws Throwable {
        Map map = new HashMap(100, 100.0F);
        map.put("", "");
        DefaultComponent scopeComponent = new ScopeComponent(Integer.class, 100);
        DefaultComponent result = scopeComponent.addProperties(map);
        assertSame("result", scopeComponent, result);
        assertEquals("(ScopeComponent) scopeComponent.cache.size()", 0, ((Map) getPrivateField(scopeComponent, "cache")).size());
        assertEquals("(ScopeComponent) scopeComponent.props.size()", 1, ((Map) getPrivateField(scopeComponent, "props")).size());
    }
    
    public void testAddProperty() throws Throwable {
        List initValues = new ArrayList(100);
        Map props = new HashMap(100, 100.0F);
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class, initValues, props);
        DefaultComponent result = defaultComponent.addProperty("testDefaultComponentName", new Integer(0));
        assertSame("defaultComponent.props", props, getPrivateField(defaultComponent, "props"));
        Object actual = ((Map) getPrivateField(defaultComponent, "props")).get("testDefaultComponentName");
        assertEquals("defaultComponent.props.get(\"testDefaultComponentName\")", new Integer(0), actual);
        assertSame("result", defaultComponent, result);
    }
    
    public void testAddProperty1() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Object.class);
        DefaultComponent result = defaultComponent.addProperty("testDefaultComponentName", "");
        assertEquals("defaultComponent.props.size()", 1, ((Map) getPrivateField(defaultComponent, "props")).size());
        assertEquals("defaultComponent.cache.size()", 0, ((Map) getPrivateField(defaultComponent, "cache")).size());
        assertSame("result", defaultComponent, result);
    }
    
    public void testGetClasses() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class);
        Class[] result = (Class[]) callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getClasses", new Class[] {List.class}, defaultComponent, new Object[] {new ArrayList(100)});
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetClasses1() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class);
        List arrayList = new ArrayList(100);
        arrayList.add(new Integer(33));
        Class[] result = (Class[]) callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getClasses", new Class[] {List.class}, defaultComponent, new Object[] {arrayList});
        assertEquals("result.length", 1, result.length);
        assertEquals("(Class[]) result[0]", Integer.class, ((Class[]) result)[0]);
    }
    
    public void testGetClasses2() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class);
        List arrayList = new ArrayList(100);
        arrayList.add(null);
        Class[] result = (Class[]) callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getClasses", new Class[] {List.class}, defaultComponent, new Object[] {arrayList});
        assertEquals("result.length", 1, result.length);
        assertNull("(Class[]) result[0]", ((Class[]) result)[0]);
    }
    
    public void testGetClasses3() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class);
        List arrayList = new ArrayList(100);
        arrayList.add(null);
        arrayList.add(new Integer(33));
        Class[] result = (Class[]) callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getClasses", new Class[] {List.class}, defaultComponent, new Object[] {arrayList});
        assertEquals("result.length", 2, result.length);
        assertNull("(Class[]) result[0]", ((Class[]) result)[0]);
    }
    
    public void testGetField() throws Throwable {
        Field result = DefaultComponent.getField("testString", "testDefaultComponentName");
        assertNull("result", result);
    }
    
    public void testGetField1() throws Throwable {
        Field result = DefaultComponent.getField(new Object(), "testDefaultComponentName");
        assertNull("result", result);
    }
    
    public void testGetInstance() throws Throwable {
        Map props = new HashMap(100, 100.0F);
        DefaultComponent defaultComponent = new DefaultComponent(Object.class, new ArrayList(100), props);
        Object result = defaultComponent.getInstance();
        assertNotNull("result", result);
        assertSame("defaultComponent.props", props, getPrivateField(defaultComponent, "props"));
        assertEquals("defaultComponent.klass", Object.class, getPrivateField(defaultComponent, "klass"));
    }
    
    public void testGetInstance1() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(String.class);
        String result = (String) defaultComponent.getInstance();
        assertEquals("result", "", result);
        assertEquals("defaultComponent.klass", String.class, getPrivateField(defaultComponent, "klass"));
    }
    
    public void testGetPrimitiveFrom() throws Throwable {
        Class result = DefaultComponent.getPrimitiveFrom(Boolean.FALSE);
        assertEquals("result", boolean.class, result);
    }
    
    public void testGetPrimitiveFrom1() throws Throwable {
        Class result = DefaultComponent.getPrimitiveFrom(new Float(1.0F));
        assertEquals("result", float.class, result);
    }
    
    public void testGetPrimitiveFrom2() throws Throwable {
        Class result = DefaultComponent.getPrimitiveFrom(new Double(0.0));
        assertEquals("result", double.class, result);
    }
    
    public void testGetPrimitiveFrom3() throws Throwable {
        Class result = DefaultComponent.getPrimitiveFrom(new Integer(0));
        assertEquals("result", int.class, result);
    }
    
    public void testGetPrimitiveFrom4() throws Throwable {
        Class result = DefaultComponent.getPrimitiveFrom(new Long(0L));
        assertEquals("result", long.class, result);
    }
    
    public void testGetPrimitiveFrom5() throws Throwable {
        Class result = DefaultComponent.getPrimitiveFrom(new Byte((byte)0));
        assertEquals("result", byte.class, result);
    }
    
    public void testGetPrimitiveFrom6() throws Throwable {
        Class result = DefaultComponent.getPrimitiveFrom(new Short((short)0));
        assertEquals("result", short.class, result);
    }
    
    public void testGetPrimitiveFrom7() throws Throwable {
        DefaultComponent w = (DefaultComponent) Mockingbird.getProxyObject(DefaultComponent.class);
        w.addInitValue(Boolean.FALSE);
        Mockingbird.enterTestMode(DefaultComponent.class);
        Class result = DefaultComponent.getPrimitiveFrom(w);
        assertNull("result", result);
    }
    
    public void testGetPrimitiveFrom8() throws Throwable {
        Class result = DefaultComponent.getPrimitiveFrom(new Character('\u001F'));
        assertEquals("result", char.class, result);
    }
    
    public void testGetValue() throws Throwable {
        ScopeComponent scopeComponent = new ScopeComponent(Object.class, new ArrayList(100), 100);
        DefaultComponent defaultComponent = new DefaultComponent(Object.class, new ArrayList(1000), new HashMap(100, 100.0F));
        Object result = callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValue", new Class[] {Object.class}, defaultComponent, new Object[] {scopeComponent});
        assertNotNull("result", result);
    }
    
    public void testGetValue1() throws Throwable {
        DefaultComponent defaultComponent = (DefaultComponent) Mockingbird.getProxyObject(DefaultComponent.class);
        defaultComponent.addInitValue(new Object());
        ScopeComponent scopeComponent = new ScopeComponent(Object.class, new HashMap(100, 100.0F), 100);
        Mockingbird.enterTestMode(DefaultComponent.class);
        Object result = callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValue", new Class[] {Object.class}, defaultComponent, new Object[] {scopeComponent});
        assertNotNull("result", result);
    }
    
    public void testGetValue2() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class);
        Integer integer = new Integer(31);
        Integer result = (Integer) callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValue", new Class[] {Object.class}, defaultComponent, new Object[] {integer});
        assertSame("result", integer, result);
    }
    
    public void testGetValue3() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class, new HashMap(100, 100.0F));
        Object result = callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValue", new Class[] {Object.class}, defaultComponent, new Object[] {null});
        assertNull("result", result);
    }
    
    public void testGetValue4() throws Throwable {
        DefaultComponent defaultComponent = (DefaultComponent) Mockingbird.getProxyObject(DefaultComponent.class);
        defaultComponent.addProperties(new HashMap(100, 100.0F));
        Mockingbird.enterTestMode(DefaultComponent.class);
        Short short2 = new Short((short)0);
        Short result = (Short) callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValue", new Class[] {Object.class}, defaultComponent, new Object[] {short2});
        assertSame("result", short2, result);
    }
    
    public void testGetValues() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Object.class);
        List arrayList = new ArrayList(100);
        arrayList.add("");
        Object[] result = (Object[]) callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValues", new Class[] {List.class}, defaultComponent, new Object[] {arrayList});
        assertEquals("result.length", 1, result.length);
        assertEquals("(Object[]) result[0]", "", ((Object[]) result)[0]);
    }
    
    public void testGetValues1() throws Throwable {
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        scopeComponent.addInitValue("");
        List arrayList = new ArrayList(100);
        Mockingbird.enterTestMode(DefaultComponent.class);
        Object[] result = (Object[]) callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValues", new Class[] {List.class}, scopeComponent, new Object[] {arrayList});
        assertEquals("result.length", 0, result.length);
    }
    
    public void testAddInitValuesThrowsNullPointerException() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class);
        try {
            defaultComponent.addInitValues(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertNull("defaultComponent.initValues", getPrivateField(defaultComponent, "initValues"));
        }
    }
    
    public void testAddPropertiesThrowsClassCastException() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Object.class);
        Map map = new HashMap(100, 100.0F);
        map.put(new Integer(70), "1");
        try {
            defaultComponent.addProperties(map);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(DefaultComponent.class, ex);
            assertNull("defaultComponent.cache", getPrivateField(defaultComponent, "cache"));
            assertNull("defaultComponent.props", getPrivateField(defaultComponent, "props"));
            assertEquals("(HashMap) map.size()", 1, map.size());
        }
    }
    
    public void testAddPropertiesThrowsClassCastException1() throws Throwable {
        Map map = new HashMap(1000, 100.0F);
        map.put("", new Integer(71));
        map.put(new Integer(11), "");
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class);
        try {
            defaultComponent.addProperties(map);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("defaultComponent.props.size()", 1, ((Map) getPrivateField(defaultComponent, "props")).size());
            assertEquals("defaultComponent.cache.size()", 0, ((Map) getPrivateField(defaultComponent, "cache")).size());
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("(HashMap) map.size()", 2, map.size());
        }
    }
    
    public void testAddPropertiesThrowsNullPointerException() throws Throwable {
        DefaultComponent defaultComponent = (DefaultComponent) Mockingbird.getProxyObject(DefaultComponent.class);
        defaultComponent.addProperty("testDefaultComponentName", new Integer(78));
        Mockingbird.enterTestMode(DefaultComponent.class);
        try {
            defaultComponent.addProperties(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("defaultComponent.cache.size()", 0, ((Map) getPrivateField(defaultComponent, "cache")).size());
            assertEquals("defaultComponent.props.size()", 1, ((Map) getPrivateField(defaultComponent, "props")).size());
        }
    }
    
    public void testGetClassesThrowsNullPointerException() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getClasses", new Class[] {List.class}, defaultComponent, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
        }
    }
    
    public void testGetFieldThrowsNullPointerException() throws Throwable {
        try {
            DefaultComponent.getField(null, "testDefaultComponentName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
        }
    }
    
    public void testGetFieldThrowsNullPointerException1() throws Throwable {
        try {
            DefaultComponent.getField("", null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
        }
    }
    
    public void testGetInstanceThrowsInstantiationException() throws Throwable {
        List initValues = new ArrayList(100);
        DefaultComponent defaultComponent = new DefaultComponent(Object.class, initValues);
        defaultComponent.addProperty("testDefaultComponentName", "");
        defaultComponent.addInitValues(new ArrayList(1000));
        try {
            defaultComponent.getInstance();
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection: testDefaultComponentName", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("defaultComponent.cache.size()", 0, ((Map) getPrivateField(defaultComponent, "cache")).size());
            assertEquals("defaultComponent.props.size()", 1, ((Map) getPrivateField(defaultComponent, "props")).size());
            assertEquals("defaultComponent.klass", Object.class, getPrivateField(defaultComponent, "klass"));
            assertNull("defaultComponent.constructor", getPrivateField(defaultComponent, "constructor"));
            assertSame("defaultComponent.initValues", initValues, getPrivateField(defaultComponent, "initValues"));
        }
    }
    
    public void testGetInstanceThrowsInstantiationException1() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Object.class);
        defaultComponent.addProperty("testDefaultComponentName", "");
        try {
            defaultComponent.getInstance();
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection: testDefaultComponentName", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("defaultComponent.cache.size()", 0, ((Map) getPrivateField(defaultComponent, "cache")).size());
            assertEquals("defaultComponent.props.size()", 1, ((Map) getPrivateField(defaultComponent, "props")).size());
            assertEquals("defaultComponent.klass", Object.class, getPrivateField(defaultComponent, "klass"));
            assertNull("defaultComponent.constructor", getPrivateField(defaultComponent, "constructor"));
            assertNull("defaultComponent.initValues", getPrivateField(defaultComponent, "initValues"));
        }
    }
    
    public void testGetInstanceThrowsInstantiationException2() throws Throwable {
        List initValues = new ArrayList(100);
        DefaultComponent scopeComponent = new ScopeComponent(Integer.class, initValues, 100);
        try {
            scopeComponent.getInstance();
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Cannot create instance from class: class java.lang.Integer", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("(ScopeComponent) scopeComponent.klass", Integer.class, getPrivateField(scopeComponent, "klass"));
            assertNull("(ScopeComponent) scopeComponent.cache", getPrivateField(scopeComponent, "cache"));
            assertNull("(ScopeComponent) scopeComponent.constructor", getPrivateField(scopeComponent, "constructor"));
            assertNull("(ScopeComponent) scopeComponent.props", getPrivateField(scopeComponent, "props"));
            assertSame("(ScopeComponent) scopeComponent.initValues", initValues, getPrivateField(scopeComponent, "initValues"));
        }
    }
    
    public void testGetInstanceThrowsInstantiationException3() throws Throwable {
        List initValues = new ArrayList(100);
        initValues.add("");
        Map props = new HashMap(100, 100.0F);
        DefaultComponent defaultComponent = new DefaultComponent(Object.class, initValues, props);
        try {
            defaultComponent.getInstance();
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Cannot find a constructor for class: class java.lang.Object", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertNull("defaultComponent.constructor", getPrivateField(defaultComponent, "constructor"));
            assertSame("defaultComponent.initValues", initValues, getPrivateField(defaultComponent, "initValues"));
            assertEquals("defaultComponent.klass", Object.class, getPrivateField(defaultComponent, "klass"));
            assertNull("defaultComponent.cache", getPrivateField(defaultComponent, "cache"));
            assertSame("defaultComponent.props", props, getPrivateField(defaultComponent, "props"));
        }
    }
    
    public void testGetInstanceThrowsInstantiationException4() throws Throwable {
        Map props = new HashMap(100, 100.0F);
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class, null, props);
        try {
            defaultComponent.getInstance();
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Cannot create instance from class: class java.lang.Integer", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("defaultComponent.klass", Integer.class, getPrivateField(defaultComponent, "klass"));
            assertNull("defaultComponent.cache", getPrivateField(defaultComponent, "cache"));
            assertNull("defaultComponent.constructor", getPrivateField(defaultComponent, "constructor"));
            assertSame("defaultComponent.props", props, getPrivateField(defaultComponent, "props"));
            assertNull("defaultComponent.initValues", getPrivateField(defaultComponent, "initValues"));
        }
    }
    
    public void testGetInstanceThrowsInstantiationException5() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class);
        List values = new ArrayList(100);
        values.add("");
        defaultComponent.addInitValues(values);
        defaultComponent.addInitValue(null);
        try {
            defaultComponent.getInstance();
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Cannot find a constructor for class: class java.lang.Integer", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertNull("defaultComponent.constructor", getPrivateField(defaultComponent, "constructor"));
            assertEquals("defaultComponent.initValues.size()", 2, ((Collection) getPrivateField(defaultComponent, "initValues")).size());
            assertEquals("defaultComponent.klass", Integer.class, getPrivateField(defaultComponent, "klass"));
            assertNull("defaultComponent.cache", getPrivateField(defaultComponent, "cache"));
            assertNull("defaultComponent.props", getPrivateField(defaultComponent, "props"));
        }
    }
    
    public void testGetInstanceThrowsInstantiationException6() throws Throwable {
        List initValues = new ArrayList(100);
        DefaultComponent defaultComponent = new DefaultComponent(Object.class, initValues);
        Map map = new HashMap(100, 100.0F);
        map.put("testString", new Integer(0));
        defaultComponent.addProperties(map);
        try {
            defaultComponent.getInstance();
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection: testString", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("defaultComponent.cache.size()", 0, ((Map) getPrivateField(defaultComponent, "cache")).size());
            assertEquals("defaultComponent.props.size()", 1, ((Map) getPrivateField(defaultComponent, "props")).size());
            assertEquals("defaultComponent.klass", Object.class, getPrivateField(defaultComponent, "klass"));
            assertNull("defaultComponent.constructor", getPrivateField(defaultComponent, "constructor"));
            assertSame("defaultComponent.initValues", initValues, getPrivateField(defaultComponent, "initValues"));
        }
    }
    
    public void testGetInstanceThrowsInstantiationException7() throws Throwable {
        DefaultComponent scopeComponent = new ScopeComponent(Object.class, 100);
        Map map = new HashMap(100, 100.0F);
        map.put("Cannot find a constructor for classy: ", new Integer(-2));
        scopeComponent.addProperties(map);
        try {
            scopeComponent.getInstance();
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection: Cannot find a constructor for classy: ", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("(ScopeComponent) scopeComponent.cache.size()", 0, ((Map) getPrivateField(scopeComponent, "cache")).size());
            assertEquals("(ScopeComponent) scopeComponent.props.size()", 1, ((Map) getPrivateField(scopeComponent, "props")).size());
            assertEquals("(ScopeComponent) scopeComponent.klass", Object.class, getPrivateField(scopeComponent, "klass"));
            assertNull("(ScopeComponent) scopeComponent.constructor", getPrivateField(scopeComponent, "constructor"));
            assertNull("(ScopeComponent) scopeComponent.initValues", getPrivateField(scopeComponent, "initValues"));
        }
    }
    
    public void testGetInstanceThrowsInstantiationException8() throws Throwable {
        Map props = new HashMap(100, 100.0F);
        props.put("", "testString");
        List initValues = new ArrayList(100);
        DefaultComponent defaultComponent = new DefaultComponent(Object.class, initValues, props);
        try {
            defaultComponent.getInstance();
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection: ", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertSame("defaultComponent.props", props, getPrivateField(defaultComponent, "props"));
            assertEquals("defaultComponent.klass", Object.class, getPrivateField(defaultComponent, "klass"));
            assertNull("defaultComponent.cache", getPrivateField(defaultComponent, "cache"));
            assertNull("defaultComponent.constructor", getPrivateField(defaultComponent, "constructor"));
            assertSame("defaultComponent.initValues", initValues, getPrivateField(defaultComponent, "initValues"));
        }
    }
    
    public void testGetInstanceThrowsInstantiationException9() throws Throwable {
        Map props = new HashMap(100, 100.0F);
        DefaultComponent scopeComponent = new ScopeComponent(String.class, props, 100);
        scopeComponent.addProperty("testDefaultComponentName", "");
        scopeComponent.addInitValue("");
        try {
            scopeComponent.getInstance();
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection: testDefaultComponentName", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertNull("(ScopeComponent) scopeComponent.cache", getPrivateField(scopeComponent, "cache"));
            Object actual = ((Constructor) getPrivateField(scopeComponent, "constructor")).getDeclaringClass();
            assertEquals("(ScopeComponent) scopeComponent.constructor.getDeclaringClass()", String.class, actual);
            assertSame("(ScopeComponent) scopeComponent.props", props, getPrivateField(scopeComponent, "props"));
            assertEquals("(ScopeComponent) scopeComponent.initValues.size()", 1, ((Collection) getPrivateField(scopeComponent, "initValues")).size());
            assertEquals("(ScopeComponent) scopeComponent.klass", String.class, getPrivateField(scopeComponent, "klass"));
        }
    }
    
    public void testGetInstanceThrowsInstantiationException10() throws Throwable {
        Map props = new HashMap(100, 100.0F);
        props.put("testString", "2 \u0000");
        List initValues = new ArrayList(100);
        DefaultComponent defaultComponent = new DefaultComponent(Object.class, initValues, props);
        try {
            defaultComponent.getInstance();
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection: testString", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertNull("defaultComponent.cache", getPrivateField(defaultComponent, "cache"));
            assertSame("defaultComponent.props", props, getPrivateField(defaultComponent, "props"));
            assertEquals("defaultComponent.klass", Object.class, getPrivateField(defaultComponent, "klass"));
            assertNull("defaultComponent.constructor", getPrivateField(defaultComponent, "constructor"));
            assertSame("defaultComponent.initValues", initValues, getPrivateField(defaultComponent, "initValues"));
        }
    }
    
    public void testGetInstanceThrowsInstantiationException11() throws Throwable {
        DefaultComponent scopeComponent = new ScopeComponent(Integer.class, 100);
        scopeComponent.addInitValue("testString");
        try {
            scopeComponent.getInstance();
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Cannot create instance from constructor: public java.lang.Integer(java.lang.String) throws java.lang.NumberFormatException", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            Object actual = ((Constructor) getPrivateField(scopeComponent, "constructor")).getDeclaringClass();
            assertEquals("(ScopeComponent) scopeComponent.constructor.getDeclaringClass()", Integer.class, actual);
            assertEquals("(ScopeComponent) scopeComponent.initValues.size()", 1, ((Collection) getPrivateField(scopeComponent, "initValues")).size());
            assertEquals("(ScopeComponent) scopeComponent.klass", Integer.class, getPrivateField(scopeComponent, "klass"));
            assertNull("(ScopeComponent) scopeComponent.cache", getPrivateField(scopeComponent, "cache"));
            assertNull("(ScopeComponent) scopeComponent.props", getPrivateField(scopeComponent, "props"));
        }
    }
    
    public void testGetInstanceThrowsInstantiationException12() throws Throwable {
        Map props = new HashMap(100, 100.0F);
        DefaultComponent scopeComponent = new ScopeComponent(Object.class, props, 100);
        scopeComponent.addProperty("testDefaultComponentName", null);
        try {
            scopeComponent.getInstance();
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection: testDefaultComponentName", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertNull("(ScopeComponent) scopeComponent.cache", getPrivateField(scopeComponent, "cache"));
            assertSame("(ScopeComponent) scopeComponent.props", props, getPrivateField(scopeComponent, "props"));
            assertEquals("(ScopeComponent) scopeComponent.klass", Object.class, getPrivateField(scopeComponent, "klass"));
            assertNull("(ScopeComponent) scopeComponent.constructor", getPrivateField(scopeComponent, "constructor"));
            assertNull("(ScopeComponent) scopeComponent.initValues", getPrivateField(scopeComponent, "initValues"));
        }
    }
    
    public void testGetInstanceThrowsInstantiationException13() throws Throwable {
        DefaultComponent defaultComponent = (DefaultComponent) Mockingbird.getProxyObject(DefaultComponent.class);
        defaultComponent.addInitValue(null);
        Mockingbird.enterTestMode(DefaultComponent.class);
        try {
            defaultComponent.getInstance();
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Cannot find a constructor for class: null", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertNull("defaultComponent.constructor", getPrivateField(defaultComponent, "constructor"));
            assertEquals("defaultComponent.initValues.size()", 1, ((Collection) getPrivateField(defaultComponent, "initValues")).size());
            assertNull("defaultComponent.klass", getPrivateField(defaultComponent, "klass"));
            assertNull("defaultComponent.cache", getPrivateField(defaultComponent, "cache"));
            assertNull("defaultComponent.props", getPrivateField(defaultComponent, "props"));
        }
    }
    
    public void testGetInstanceThrowsNullPointerException() throws Throwable {
        Map props = new HashMap(100, 100.0F);
        props.put("testString", new ApplicationComponent("testDefaultComponentKey"));
        DefaultComponent defaultComponent = new DefaultComponent(Object.class, null, props);
        try {
            defaultComponent.getInstance();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ApplicationComponent.class, ex);
            assertSame("defaultComponent.props", props, getPrivateField(defaultComponent, "props"));
            assertEquals("defaultComponent.klass", Object.class, getPrivateField(defaultComponent, "klass"));
            assertNull("defaultComponent.cache", getPrivateField(defaultComponent, "cache"));
            assertNull("defaultComponent.constructor", getPrivateField(defaultComponent, "constructor"));
            assertNull("defaultComponent.initValues", getPrivateField(defaultComponent, "initValues"));
        }
    }
    
    public void testGetValueThrowsInstantiationException() throws Throwable {
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        scopeComponent.addProperty("testDefaultComponentName", "");
        Map props = new HashMap(100, 100.0F);
        props.put("\n", new Object());
        DefaultComponent defaultComponent = new DefaultComponent(Object.class, props);
        Mockingbird.enterTestMode(DefaultComponent.class);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValue", new Class[] {Object.class}, scopeComponent, new Object[] {defaultComponent});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection: \n", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
        }
    }
    
    public void testGetValueThrowsInstantiationException1() throws Throwable {
        Map map = new HashMap(100, 100.0F);
        DefaultComponent defaultComponent = (DefaultComponent) Mockingbird.getProxyObject(DefaultComponent.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(defaultComponent.addProperty("testDefaultComponentParam1", ""), defaultComponent);
        Mockingbird.setReturnValue(true, defaultComponent.addProperty("testDefaultComponentParam11", null), defaultComponent);
        Mockingbird.setReturnValue(defaultComponent.addProperty("testDefaultComponentParam12", new Integer(0)), defaultComponent);
        Mockingbird.enterTestMode(DefaultComponent.class);
        defaultComponent.addProperties(map);
        Map props = new HashMap(1000, 1000.0F);
        props.put(",2", new Integer(52));
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValue", new Class[] {Object.class}, defaultComponent, new Object[] {new DefaultComponent(Object.class, props)});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection: ,2", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
        }
    }
    
    public void testGetValueThrowsInstantiationException2() throws Throwable {
        List initValues = new ArrayList(100);
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class, initValues, new HashMap(100, 100.0F));
        defaultComponent.addInitValue("");
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValue", new Class[] {Object.class}, defaultComponent, new Object[] {defaultComponent});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            Object actual = ((Constructor) getPrivateField(defaultComponent, "constructor")).getDeclaringClass();
            assertEquals("defaultComponent.constructor.getDeclaringClass()", Integer.class, actual);
            assertEquals("ex.getMessage()", "Cannot create instance from constructor: public java.lang.Integer(java.lang.String) throws java.lang.NumberFormatException", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
        }
    }
    
    public void testGetValueThrowsInstantiationException3() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class, new ArrayList(100));
        defaultComponent.addInitValue(null);
        DefaultComponent scopeComponent = new ScopeComponent(Object.class, 100);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValue", new Class[] {Object.class}, scopeComponent, new Object[] {defaultComponent});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Cannot find a constructor for class: class java.lang.Integer", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
        }
    }
    
    public void testGetValueThrowsInstantiationException4() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Object.class, new ArrayList(100));
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        scopeComponent.addProperty("testDefaultComponentName", "");
        defaultComponent.addInitValue(new HashMap(100, 100.0F));
        defaultComponent.addInitValues(new ArrayList(1000));
        Mockingbird.enterTestMode(DefaultComponent.class);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValue", new Class[] {Object.class}, scopeComponent, new Object[] {defaultComponent});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Cannot find a constructor for class: class java.lang.Object", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
        }
    }
    
    public void testGetValueThrowsInstantiationException5() throws Throwable {
        DefaultComponent defaultComponent = (DefaultComponent) Mockingbird.getProxyObject(DefaultComponent.class);
        defaultComponent.addInitValue(new Integer(13));
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(scopeComponent.getInstance(), (Throwable) Mockingbird.getProxyObject(InstantiationException.class));
        Mockingbird.enterTestMode(DefaultComponent.class);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValue", new Class[] {Object.class}, defaultComponent, new Object[] {scopeComponent});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetValueThrowsNullPointerException() throws Throwable {
        DefaultComponent scopeComponent = new ScopeComponent(String.class, new ArrayList(100), 100);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValue", new Class[] {Object.class}, scopeComponent, new Object[] {new SessionComponent()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SessionComponent.class, ex);
        }
    }
    
    public void testGetValuesThrowsInstantiationException() throws Throwable {
        List initValues = new ArrayList(100);
        DefaultComponent defaultComponent = new DefaultComponent(Object.class, initValues, new HashMap(100, 100.0F));
        defaultComponent.addInitValue("testString");
        DefaultComponent defaultComponent2 = new DefaultComponent(Object.class, new ArrayList(1000));
        List arrayList = new ArrayList(0);
        arrayList.add(new Object());
        arrayList.add(defaultComponent);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValues", new Class[] {List.class}, defaultComponent2, new Object[] {arrayList});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Cannot find a constructor for class: class java.lang.Object", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("(ArrayList) arrayList.size()", 2, arrayList.size());
        }
    }
    
    public void testGetValuesThrowsInstantiationException1() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class, new ArrayList(100));
        defaultComponent.addInitValue(null);
        defaultComponent.addProperty("testDefaultComponentName", null);
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        scopeComponent.addProperties(new HashMap(100, 100.0F));
        List arrayList = new ArrayList(1000);
        arrayList.add("testString");
        arrayList.add(defaultComponent);
        Mockingbird.enterTestMode(DefaultComponent.class);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValues", new Class[] {List.class}, scopeComponent, new Object[] {arrayList});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Cannot find a constructor for class: class java.lang.Integer", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("(ArrayList) arrayList.size()", 2, arrayList.size());
        }
    }
    
    public void testGetValuesThrowsInstantiationException2() throws Throwable {
        DefaultComponent defaultComponent = (DefaultComponent) Mockingbird.getProxyObject(DefaultComponent.class);
        defaultComponent.addProperty("testDefaultComponentName", null);
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        scopeComponent.addProperties(new HashMap(100, 100.0F));
        List arrayList = new ArrayList(100);
        arrayList.add("testString");
        arrayList.add(defaultComponent);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(defaultComponent.getInstance(), (Throwable) Mockingbird.getProxyObject(InstantiationException.class));
        Mockingbird.enterTestMode(DefaultComponent.class);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValues", new Class[] {List.class}, scopeComponent, new Object[] {arrayList});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("(ArrayList) arrayList.size()", 2, arrayList.size());
        }
    }
    
    public void testGetValuesThrowsInstantiationException3() throws Throwable {
        List values = new ArrayList(100);
        values.add(new Object());
        DefaultComponent defaultComponent = new DefaultComponent(Object.class);
        defaultComponent.addInitValues(values);
        defaultComponent.addProperties(new HashMap(100, 100.0F));
        Map map = new HashMap(1000, 1000.0F);
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(scopeComponent.addProperty("testDefaultComponentParam1", ""), scopeComponent);
        Mockingbird.enterTestMode(DefaultComponent.class);
        scopeComponent.addProperties(map);
        List arrayList = new ArrayList(1000);
        arrayList.add(defaultComponent);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValues", new Class[] {List.class}, scopeComponent, new Object[] {arrayList});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Cannot find a constructor for class: class java.lang.Object", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
        }
    }
    
    public void testGetValuesThrowsInstantiationException4() throws Throwable {
        DefaultComponent defaultComponent = (DefaultComponent) Mockingbird.getProxyObject(DefaultComponent.class);
        defaultComponent.addInitValue("");
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, arrayList, "size", "()int", new Object[] {}, new Integer(51), 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, new Integer(46), 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, new Integer(-32), 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, new Integer(32), 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "testString", 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "testString", 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "lSt", 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, scopeComponent, 1);
        Mockingbird.setException(scopeComponent.getInstance(), (Throwable) Mockingbird.getProxyObject(InstantiationException.class));
        Mockingbird.enterTestMode(DefaultComponent.class);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValues", new Class[] {List.class}, defaultComponent, new Object[] {arrayList});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("arrayList.size()", 0, arrayList.size());
        }
    }
    
    public void testGetValuesThrowsInstantiationException5() throws Throwable {
        List values = new ArrayList(100);
        DefaultComponent defaultComponent = (DefaultComponent) Mockingbird.getProxyObject(DefaultComponent.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(defaultComponent.addInitValue("testString"), defaultComponent);
        Mockingbird.setReturnValue(true, defaultComponent.addInitValue(null), defaultComponent);
        Mockingbird.setReturnValue(defaultComponent.addInitValue("testString"), defaultComponent);
        Mockingbird.setReturnValue(defaultComponent.addInitValue(""), defaultComponent);
        Mockingbird.enterTestMode(DefaultComponent.class);
        defaultComponent.addInitValues(values);
        List arrayList = new ArrayList(1000);
        arrayList.add(new DefaultComponent(Integer.class, new ArrayList(0)));
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValues", new Class[] {List.class}, defaultComponent, new Object[] {arrayList});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Cannot create instance from class: class java.lang.Integer", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
        }
    }
    
    public void testGetValuesThrowsInstantiationException6() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class, new ArrayList(100));
        defaultComponent.addInitValue("");
        defaultComponent.addInitValue(null);
        defaultComponent.addProperty("testDefaultComponentName", null);
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        scopeComponent.addProperties(new HashMap(100, 100.0F));
        List arrayList = new ArrayList(1000);
        arrayList.add(defaultComponent);
        Mockingbird.enterTestMode(DefaultComponent.class);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValues", new Class[] {List.class}, scopeComponent, new Object[] {arrayList});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Cannot find a constructor for class: class java.lang.Integer", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
        }
    }
    
    public void testGetValuesThrowsNullPointerException() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Object.class);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, arrayList, "size", "()int", new Object[] {}, new Integer(9), 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, new Integer(34), 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, new Integer(-2), 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        SessionComponent sessionComponent = (SessionComponent) Mockingbird.getProxyObject(SessionComponent.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, sessionComponent, 1);
        Mockingbird.setException(sessionComponent.getInstance(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(DefaultComponent.class);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValues", new Class[] {List.class}, defaultComponent, new Object[] {arrayList});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("arrayList.size()", 0, arrayList.size());
        }
    }
    
    public void testGetValuesThrowsNullPointerException1() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Object.class);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "getValues", new Class[] {List.class}, defaultComponent, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
        }
    }
    
    public void testSetValueThrowsInstantiationException() throws Throwable {
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        scopeComponent.addProperty("testDefaultComponentName", "");
        Mockingbird.enterTestMode(DefaultComponent.class);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "setValue", new Class[] {Object.class, String.class, Object.class}, scopeComponent, new Object[] {"", " ", ""});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection:  ", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("scopeComponent.cache.size()", 0, ((Map) getPrivateField(scopeComponent, "cache")).size());
            assertNull("scopeComponent.klass", getPrivateField(scopeComponent, "klass"));
        }
    }
    
    public void testSetValueThrowsInstantiationException1() throws Throwable {
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        scopeComponent.addProperty("testDefaultComponentName", "testString");
        scopeComponent.addInitValue(new Integer(0));
        Mockingbird.enterTestMode(DefaultComponent.class);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "setValue", new Class[] {Object.class, String.class, Object.class}, scopeComponent, new Object[] {null, " ", "testString"});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection:  ", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("scopeComponent.cache.size()", 0, ((Map) getPrivateField(scopeComponent, "cache")).size());
            assertNull("scopeComponent.klass", getPrivateField(scopeComponent, "klass"));
        }
    }
    
    public void testSetValueThrowsInstantiationException2() throws Throwable {
        DefaultComponent defaultComponent = new DefaultComponent(Integer.class, new ArrayList(100));
        Map map = new HashMap(100, 100.0F);
        map.put("testString", "");
        defaultComponent.addProperties(map);
        defaultComponent.addProperties(new HashMap(1000, 1000.0F));
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "setValue", new Class[] {Object.class, String.class, Object.class}, defaultComponent, new Object[] {null, " ", new Byte((byte)0)});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection:  ", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("defaultComponent.cache.size()", 0, ((Map) getPrivateField(defaultComponent, "cache")).size());
            assertEquals("defaultComponent.klass", Integer.class, getPrivateField(defaultComponent, "klass"));
        }
    }
    
    public void testSetValueThrowsInstantiationException3() throws Throwable {
        DefaultComponent defaultComponent = (DefaultComponent) Mockingbird.getProxyObject(DefaultComponent.class);
        defaultComponent.addProperty("testDefaultComponentName", "lt");
        List values = new ArrayList(100);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(defaultComponent.addInitValue("testString"), defaultComponent);
        Mockingbird.setReturnValue(true, defaultComponent.addInitValue(null), defaultComponent);
        Mockingbird.setReturnValue(defaultComponent.addInitValue("testString"), defaultComponent);
        Mockingbird.setReturnValue(defaultComponent.addInitValue(""), defaultComponent);
        Mockingbird.enterTestMode(DefaultComponent.class);
        defaultComponent.addInitValues(values);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "setValue", new Class[] {Object.class, String.class, Object.class}, defaultComponent, new Object[] {"", " ", Boolean.FALSE});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection:  ", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("defaultComponent.cache.size()", 0, ((Map) getPrivateField(defaultComponent, "cache")).size());
            assertNull("defaultComponent.klass", getPrivateField(defaultComponent, "klass"));
        }
    }
    
    public void testSetValueThrowsInstantiationException4() throws Throwable {
        DefaultComponent scopeComponent = new ScopeComponent(Integer.class, new HashMap(100, 100.0F), 100);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "setValue", new Class[] {Object.class, String.class, Object.class}, scopeComponent, new Object[] {"", "2C", "testString"});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection: 2C", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertNull("(ScopeComponent) scopeComponent.cache", getPrivateField(scopeComponent, "cache"));
            assertEquals("(ScopeComponent) scopeComponent.klass", Integer.class, getPrivateField(scopeComponent, "klass"));
        }
    }
    
    public void testSetValueThrowsInstantiationException5() throws Throwable {
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        scopeComponent.addInitValue("");
        Mockingbird.enterTestMode(DefaultComponent.class);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "setValue", new Class[] {Object.class, String.class, Object.class}, scopeComponent, new Object[] {" 1", " ", ""});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection:  ", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertNull("scopeComponent.cache", getPrivateField(scopeComponent, "cache"));
            assertNull("scopeComponent.klass", getPrivateField(scopeComponent, "klass"));
        }
    }
    
    public void testSetValueThrowsInstantiationException6() throws Throwable {
        Object obj = new Object();
        DefaultComponent scopeComponent = new ScopeComponent(String.class, 100);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "setValue", new Class[] {Object.class, String.class, Object.class}, scopeComponent, new Object[] {obj, "", obj});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection: ", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertNull("(ScopeComponent) scopeComponent.cache", getPrivateField(scopeComponent, "cache"));
            assertEquals("(ScopeComponent) scopeComponent.klass", String.class, getPrivateField(scopeComponent, "klass"));
        }
    }
    
    public void testSetValueThrowsInstantiationException7() throws Throwable {
        DefaultComponent defaultComponent = (DefaultComponent) Mockingbird.getProxyObject(DefaultComponent.class);
        defaultComponent.addProperty("testDefaultComponentName", new Integer(100));
        defaultComponent.addProperties(new HashMap(100, 100.0F));
        Mockingbird.enterTestMode(DefaultComponent.class);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "setValue", new Class[] {Object.class, String.class, Object.class}, defaultComponent, new Object[] {new Integer(0), "2C", ""});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection: 2C", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("defaultComponent.cache.size()", 0, ((Map) getPrivateField(defaultComponent, "cache")).size());
            assertNull("defaultComponent.klass", getPrivateField(defaultComponent, "klass"));
        }
    }
    
    public void testSetValueThrowsInstantiationException8() throws Throwable {
        DefaultComponent defaultComponent = (DefaultComponent) Mockingbird.getProxyObject(DefaultComponent.class);
        defaultComponent.addProperty("testDefaultComponentName", "testString");
        List values = new ArrayList(100);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(defaultComponent.addInitValue("testString"), defaultComponent);
        Mockingbird.setReturnValue(defaultComponent.addInitValue("testString"), defaultComponent);
        Mockingbird.setReturnValue(true, defaultComponent.addInitValue(null), defaultComponent);
        Mockingbird.enterTestMode(DefaultComponent.class);
        defaultComponent.addInitValues(values);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "setValue", new Class[] {Object.class, String.class, Object.class}, defaultComponent, new Object[] {null, "2C", "testString"});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection: 2C", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("defaultComponent.cache.size()", 0, ((Map) getPrivateField(defaultComponent, "cache")).size());
            assertNull("defaultComponent.klass", getPrivateField(defaultComponent, "klass"));
        }
    }
    
    public void testSetValueThrowsInstantiationException9() throws Throwable {
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        scopeComponent.addProperty("testDefaultComponentName", "");
        Mockingbird.enterTestMode(DefaultComponent.class);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "setValue", new Class[] {Object.class, String.class, Object.class}, scopeComponent, new Object[] {"", " ", new Float(0.0F)});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection:  ", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("scopeComponent.cache.size()", 0, ((Map) getPrivateField(scopeComponent, "cache")).size());
            assertNull("scopeComponent.klass", getPrivateField(scopeComponent, "klass"));
        }
    }
    
    public void testSetValueThrowsInstantiationException10() throws Throwable {
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        scopeComponent.addProperty("testDefaultComponentName", "");
        Mockingbird.enterTestMode(DefaultComponent.class);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "setValue", new Class[] {Object.class, String.class, Object.class}, scopeComponent, new Object[] {"", "testDefaultComponentName", new Float(0.0F)});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection: testDefaultComponentName", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("scopeComponent.cache.size()", 0, ((Map) getPrivateField(scopeComponent, "cache")).size());
            assertNull("scopeComponent.klass", getPrivateField(scopeComponent, "klass"));
        }
    }
    
    public void testSetValueThrowsInstantiationException11() throws Throwable {
        DefaultComponent scopeComponent = new ScopeComponent(Integer.class, new ArrayList(100), 100);
        Map map = new HashMap(100, 100.0F);
        map.put("testString", "");
        scopeComponent.addProperties(map);
        scopeComponent.addInitValue("4'2");
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "setValue", new Class[] {Object.class, String.class, Object.class}, scopeComponent, new Object[] {" /  ", " ", new Integer(-2)});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection:  ", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("(ScopeComponent) scopeComponent.cache.size()", 0, ((Map) getPrivateField(scopeComponent, "cache")).size());
            assertEquals("(ScopeComponent) scopeComponent.klass", Integer.class, getPrivateField(scopeComponent, "klass"));
        }
    }
    
    public void testSetValueThrowsInstantiationException12() throws Throwable {
        DefaultComponent defaultComponent = (DefaultComponent) Mockingbird.getProxyObject(DefaultComponent.class);
        defaultComponent.addProperty("testDefaultComponentName", "lt");
        List values = new ArrayList(100);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(defaultComponent.addInitValue("testString"), defaultComponent);
        Mockingbird.setReturnValue(true, defaultComponent.addInitValue(null), defaultComponent);
        Mockingbird.setReturnValue(defaultComponent.addInitValue("testString"), defaultComponent);
        Mockingbird.setReturnValue(defaultComponent.addInitValue(""), defaultComponent);
        Mockingbird.enterTestMode(DefaultComponent.class);
        defaultComponent.addInitValues(values);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "setValue", new Class[] {Object.class, String.class, Object.class}, defaultComponent, new Object[] {null, " ", new Integer(31)});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection:  ", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("defaultComponent.cache.size()", 0, ((Map) getPrivateField(defaultComponent, "cache")).size());
            assertNull("defaultComponent.klass", getPrivateField(defaultComponent, "klass"));
        }
    }
    
    public void testSetValueThrowsInstantiationException13() throws Throwable {
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        scopeComponent.addProperty("testDefaultComponentName", "");
        Mockingbird.enterTestMode(DefaultComponent.class);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "setValue", new Class[] {Object.class, String.class, Object.class}, scopeComponent, new Object[] {"testString", " ", new Character('\u0012')});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection:  ", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("scopeComponent.cache.size()", 0, ((Map) getPrivateField(scopeComponent, "cache")).size());
            assertNull("scopeComponent.klass", getPrivateField(scopeComponent, "klass"));
        }
    }
    
    public void testSetValueThrowsInstantiationException14() throws Throwable {
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        scopeComponent.addProperty("testDefaultComponentName", "");
        Mockingbird.enterTestMode(DefaultComponent.class);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "setValue", new Class[] {Object.class, String.class, Object.class}, scopeComponent, new Object[] {null, "testDefaultComponentName", new Integer(0)});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("ex.getMessage()", "Error trying to set a property with reflection: testDefaultComponentName", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("scopeComponent.cache.size()", 0, ((Map) getPrivateField(scopeComponent, "cache")).size());
            assertNull("scopeComponent.klass", getPrivateField(scopeComponent, "klass"));
        }
    }
    
    public void testSetValueThrowsInstantiationExceptionWithAggressiveMocks() throws Throwable {
        DefaultComponent defaultComponent = (DefaultComponent) Mockingbird.getProxyObject(DefaultComponent.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        NoSuchMethodException noSuchMethodException = (NoSuchMethodException) Mockingbird.getProxyObject(NoSuchMethodException.class);
        setPrivateField(defaultComponent, "cache", map);
        setPrivateField(defaultComponent, "klass", Mockingbird.getProxyObject(Class.class));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, "AA", "substring", "(int,int)java.lang.String", new Object[] {new Integer(0), new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toUpperCase", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setException(true, FindMethod.class, "getMethod", "(java.lang.Class,java.lang.String,java.lang.Class[])java.lang.reflect.Method", noSuchMethodException, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(InstantiationException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(InstantiationException.class));
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(InstantiationException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(InstantiationException.class));
        Mockingbird.enterTestMode(DefaultComponent.class);
        try {
            callPrivateMethod("org.mentawai.ioc.DefaultComponent", "setValue", new Class[] {Object.class, String.class, Object.class}, defaultComponent, new Object[] {obj, "AA", boolean2});
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertNotNull("defaultComponent.cache", getPrivateField(defaultComponent, "cache"));
            assertEquals("defaultComponent.klass", String.class, getPrivateField(defaultComponent, "klass"));
        }
    }
}

