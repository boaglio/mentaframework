/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:10:50 PM
 * Time to generate: 00:28.087 seconds
 *
 */

package org.mentawai.ioc;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Map;
import org.mentawai.log.Debug;
import org.mentawai.util.InjectionUtils;

public class DependencyAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return Dependency.class;
    }
    
    public void testConstructor() throws Throwable {
        Dependency dependency = new Dependency(Integer.class, "testDependencyTarget", "testDependencySource");
        assertEquals("dependency.getTarget()", "testDependencyTarget", dependency.getTarget());
        assertEquals("dependency.getDependencyClass()", Integer.class, dependency.getDependencyClass());
        assertEquals("dependency.getSource()", "testDependencySource", dependency.getSource());
        assertEquals("dependency.cache.size()", 0, ((Map) getPrivateField(dependency, "cache")).size());
        assertEquals("dependency.received.size()", 0, ((Map) getPrivateField(dependency, "received")).size());
    }
    
    public void testConstructor1() throws Throwable {
        Dependency dependency = new Dependency(Integer.class, "testDependencyTarget");
        assertEquals("dependency.getDependencyClass()", Integer.class, dependency.getDependencyClass());
        assertEquals("dependency.getTarget()", "testDependencyTarget", dependency.getTarget());
        assertEquals("dependency.getSource()", "testDependencyTarget", dependency.getSource());
        assertEquals("dependency.received.size()", 0, ((Map) getPrivateField(dependency, "received")).size());
        assertEquals("dependency.cache.size()", 0, ((Map) getPrivateField(dependency, "cache")).size());
    }
    
    public void testEquals() throws Throwable {
        Dependency dependency = new Dependency(Integer.class, "testString", "testDependencySource");
        boolean result = dependency.equals(new Dependency(Integer.class, "testString", "testDependencySource1"));
        assertFalse("result", result);
    }
    
    public void testEquals1() throws Throwable {
        boolean result = new Dependency(Object.class, "testDependencyTarget", "testDependencySource").equals(new Dependency(Integer.class, "testDependencyTarget1", "testDependencySource1"));
        assertFalse("result", result);
    }
    
    public void testEquals2() throws Throwable {
        Dependency dependency = new Dependency(Integer.class, "testDependencyTarget", "testDependencySource");
        boolean result = dependency.equals(new Dependency(Integer.class, "testDependencyTarget1"));
        assertFalse("result", result);
    }
    
    public void testEquals3() throws Throwable {
        Dependency dependency = new Dependency(Integer.class, "testString", "testString");
        boolean result = dependency.equals(new Dependency(Integer.class, "testString", "testString"));
        assertTrue("result", result);
    }
    
    public void testEquals4() throws Throwable {
        boolean result = new Dependency(String.class, "testDependencyTarget", "testDependencySource").equals(Boolean.TRUE);
        assertFalse("result", result);
    }
    
    public void testGetDependencyClass() throws Throwable {
        Class result = new Dependency(String.class, "testDependencyTarget", "testDependencySource").getDependencyClass();
        assertSame("result", String.class, result);
    }
    
    public void testGetMethodOrField() throws Throwable {
        Dependency dependency = new Dependency(Integer.class, "testDependencyTarget", "testDependencySource");
        Object result = dependency.getMethodOrField(String.class, false);
        assertEquals("dependency.cache.size()", 1, ((Map) getPrivateField(dependency, "cache")).size());
        assertNull("dependency.cache.get(\"java.lang.String\")", ((Map) getPrivateField(dependency, "cache")).get("java.lang.String"));
        assertNull("result", result);
    }
    
    public void testGetMethodOrField1() throws Throwable {
        Dependency dependency = new Dependency(Integer.class, "testDependencyTarget", "testDependencySource");
        dependency.source("testDependencySource");
        Object result = dependency.getMethodOrField(Integer.class, true);
        assertEquals("dependency.cache.size()", 1, ((Map) getPrivateField(dependency, "cache")).size());
        assertNull("dependency.cache.get(\"java.lang.Integer\")", ((Map) getPrivateField(dependency, "cache")).get("java.lang.Integer"));
        assertNull("result", result);
    }
    
    public void testGetMethodOrFieldWithAggressiveMocks() throws Throwable {
        storeStaticField(Debug.class, "ENABLED");
        Dependency dependency = (Dependency) Mockingbird.getProxyObject(Dependency.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(dependency, "target", "");
        setPrivateField(dependency, "klass", null);
        setPrivateField(dependency, "cache", map);
        Debug.isEnabled() = false;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToInject", "(java.lang.Class,java.lang.String,java.lang.Class)java.lang.reflect.Method", null, 1);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findFieldToInject", "(java.lang.Class,java.lang.String,java.lang.Class)java.lang.reflect.Field", null, 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(Dependency.class);
        Object result = dependency.getMethodOrField(Class.forName("com.sun.corba.se.spi.activation.NoSuchEndPoint"), true);
        assertNull("result", result);
        assertNull("dependency.getDependencyClass()", dependency.getDependencyClass());
        assertNotNull("dependency.cache", getPrivateField(dependency, "cache"));
    }
    
    public void testGetMethodOrFieldWithAggressiveMocks1() throws Throwable {
        storeStaticField(Debug.class, "ENABLED");
        Dependency dependency = (Dependency) Mockingbird.getProxyObject(Dependency.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(dependency, "target", "");
        setPrivateField(dependency, "klass", Class.forName("com.sun.corba.se.spi.activation.NoSuchEndPoint"));
        setPrivateField(dependency, "cache", map);
        Debug.isEnabled() = true;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToInject", "(java.lang.Class,java.lang.String,java.lang.Class)java.lang.reflect.Method", null, 1);
        Mockingbird.setReturnValue(true, Debug.class, "log", "(java.lang.String[])void", null, 1);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findFieldToInject", "(java.lang.Class,java.lang.String,java.lang.Class)java.lang.reflect.Field", null, 1);
        Mockingbird.setReturnValue(true, Debug.class, "log", "(java.lang.String[])void", null, 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(Dependency.class);
        Object result = dependency.getMethodOrField(Class.forName("com.sun.corba.se.spi.activation.NoSuchEndPoint"), true);
        assertNull("result", result);
        assertEquals("dependency.getDependencyClass()", Class.forName("com.sun.corba.se.spi.activation.NoSuchEndPoint"), dependency.getDependencyClass());
        assertNotNull("dependency.cache", getPrivateField(dependency, "cache"));
    }
    
    public void testGetMethodOrFieldWithAggressiveMocks2() throws Throwable {
        storeStaticField(Debug.class, "ENABLED");
        Dependency dependency = (Dependency) Mockingbird.getProxyObject(Dependency.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Method method = (Method) Mockingbird.getProxyObject(Method.class);
        setPrivateField(dependency, "target", "");
        setPrivateField(dependency, "klass", Class.forName("com.sun.corba.se.spi.activation.NoSuchEndPoint"));
        setPrivateField(dependency, "cache", map);
        Debug.isEnabled() = true;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToInject", "(java.lang.Class,java.lang.String,java.lang.Class)java.lang.reflect.Method", method, 1);
        Mockingbird.setReturnValue(true, Debug.class, "log", "(java.lang.String[])void", null, 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(Dependency.class);
        Object result = dependency.getMethodOrField(Class.forName("com.sun.corba.se.spi.activation.NoSuchEndPoint"), false);
        assertEquals("result.getDeclaringClass()", String.class, ((Method) result).getDeclaringClass());
        assertEquals("dependency.getDependencyClass()", Class.forName("com.sun.corba.se.spi.activation.NoSuchEndPoint"), dependency.getDependencyClass());
        assertNotNull("dependency.cache", getPrivateField(dependency, "cache"));
    }
    
    public void testGetMethodOrFieldWithAggressiveMocks3() throws Throwable {
        Dependency dependency = (Dependency) Mockingbird.getProxyObject(Dependency.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        setPrivateField(dependency, "cache", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj, 1);
        Mockingbird.enterTestMode(Dependency.class);
        Object result = dependency.getMethodOrField(Class.forName("com.sun.corba.se.spi.activation.NoSuchEndPoint"), false);
        assertNotNull("result", result);
        assertNull("dependency.getDependencyClass()", dependency.getDependencyClass());
        assertNotNull("dependency.cache", getPrivateField(dependency, "cache"));
    }
    
    public void testGetMethodOrFieldWithAggressiveMocks4() throws Throwable {
        storeStaticField(Debug.class, "ENABLED");
        Dependency dependency = (Dependency) Mockingbird.getProxyObject(Dependency.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Field field = (Field) Mockingbird.getProxyObject(Field.class);
        setPrivateField(dependency, "target", "");
        setPrivateField(dependency, "klass", Class.forName("com.sun.corba.se.spi.activation.NoSuchEndPoint"));
        setPrivateField(dependency, "cache", map);
        Debug.isEnabled() = true;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findMethodToInject", "(java.lang.Class,java.lang.String,java.lang.Class)java.lang.reflect.Method", null, 1);
        Mockingbird.setReturnValue(true, Debug.class, "log", "(java.lang.String[])void", null, 1);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "findFieldToInject", "(java.lang.Class,java.lang.String,java.lang.Class)java.lang.reflect.Field", field, 1);
        Mockingbird.setReturnValue(true, Debug.class, "log", "(java.lang.String[])void", null, 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(Dependency.class);
        Object result = dependency.getMethodOrField(Class.forName("com.sun.corba.se.spi.activation.NoSuchEndPoint"), true);
        assertEquals("result.getDeclaringClass()", Integer.class, ((Field) result).getDeclaringClass());
        assertEquals("dependency.getDependencyClass()", Class.forName("com.sun.corba.se.spi.activation.NoSuchEndPoint"), dependency.getDependencyClass());
        assertNotNull("dependency.cache", getPrivateField(dependency, "cache"));
    }
    
    public void testGetSource() throws Throwable {
        String result = new Dependency(Integer.class, "testDependencyTarget", "testDependencySource").getSource();
        assertEquals("result", "testDependencySource", result);
    }
    
    public void testGetTarget() throws Throwable {
        String result = new Dependency(Integer.class, "testDependencyTarget", "testDependencySource").getTarget();
        assertEquals("result", "testDependencyTarget", result);
    }
    
    public void testHasAlreadyReceived() throws Throwable {
        Dependency dependency = new Dependency(Integer.class, "testDependencyTarget", "testDependencySource");
        dependency.source("testDependencySource");
        boolean result = dependency.hasAlreadyReceived(Integer.class);
        assertFalse("result", result);
        assertEquals("dependency.received.size()", 0, ((Map) getPrivateField(dependency, "received")).size());
    }
    
    public void testHasAlreadyReceived1() throws Throwable {
        Dependency dependency = new Dependency(Integer.class, "testDependencyTarget", "testDependencySource");
        dependency.setAlreadyReceived(new Integer(0));
        boolean result = dependency.hasAlreadyReceived(new Integer(0));
        assertTrue("result", result);
        assertEquals("dependency.received.size()", 1, ((Map) getPrivateField(dependency, "received")).size());
    }
    
    public void testHasAlreadyReceivedWithAggressiveMocks() throws Throwable {
        Dependency dependency = (Dependency) Mockingbird.getProxyObject(Dependency.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(dependency, "received", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.containsKey(null), false);
        Mockingbird.enterTestMode(Dependency.class);
        boolean result = dependency.hasAlreadyReceived(null);
        assertFalse("result", result);
        assertNotNull("dependency.received", getPrivateField(dependency, "received"));
    }
    
    public void testHashCode() throws Throwable {
        Dependency dependency = new Dependency(Object.class, "testDependencyTarget", "testDependencySource");
        dependency.hashCode();
        assertEquals("dependency.getTarget()", "testDependencyTarget", dependency.getTarget());
        assertEquals("dependency.getSource()", "testDependencySource", dependency.getSource());
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testSetAlreadyReceived() throws Throwable {
        Dependency dependency = new Dependency(Integer.class, "testDependencyTarget");
        dependency.setAlreadyReceived("");
        assertEquals("dependency.received.size()", 1, ((Map) getPrivateField(dependency, "received")).size());
        assertNull("dependency.received.get(\"\")", ((Map) getPrivateField(dependency, "received")).get(""));
    }
    
    public void testSetAlreadyReceivedWithAggressiveMocks() throws Throwable {
        Dependency dependency = (Dependency) Mockingbird.getProxyObject(Dependency.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(dependency, "received", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(Dependency.class);
        dependency.setAlreadyReceived(null);
        assertNotNull("dependency.received", getPrivateField(dependency, "received"));
    }
    
    public void testSource() throws Throwable {
        Dependency dependency = new Dependency(Object.class, "testDependencyTarget", "testDependencySource");
        Dependency result = dependency.source("testDependencySource");
        assertSame("result", dependency, result);
        assertEquals("dependency.getSource()", "testDependencySource", dependency.getSource());
    }
    
    public void testToString() throws Throwable {
        String result = new Dependency(Integer.class, "testDependencyTarget", "testDependencySource").toString();
        assertEquals("result", "Dependency: class=class java.lang.Integer target=testDependencyTarget source=testDependencySource", result);
    }
    
    public void testEqualsThrowsNullPointerException() throws Throwable {
        try {
            new Dependency(Integer.class, "testDependencyTarget").equals(new Dependency(null, "testDependencyTarget", "testDependencySource"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Dependency.class, ex);
        }
    }
    
    public void testEqualsThrowsNullPointerException1() throws Throwable {
        Dependency dependency = new Dependency(Object.class, "testString", "testDependencySource");
        try {
            dependency.equals(new Dependency(Object.class, "testString", null));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Dependency.class, ex);
        }
    }
    
    public void testEqualsThrowsNullPointerException2() throws Throwable {
        Dependency obj = new Dependency(String.class, null, "testDependencySource");
        try {
            new Dependency(String.class, "testString", "testDependencySource1").equals(obj);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Dependency.class, ex);
        }
    }
    
    public void testGetMethodOrFieldThrowsNullPointerException() throws Throwable {
        Dependency dependency = new Dependency(Integer.class, "testDependencyTarget");
        try {
            dependency.getMethodOrField(null, true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Dependency.class, ex);
            assertEquals("dependency.cache.size()", 0, ((Map) getPrivateField(dependency, "cache")).size());
            assertEquals("dependency.getDependencyClass()", Integer.class, dependency.getDependencyClass());
        }
    }
    
    public void testGetMethodOrFieldThrowsStringIndexOutOfBoundsException() throws Throwable {
        Dependency dependency = new Dependency(Integer.class, "", "testDependencySource");
        try {
            dependency.getMethodOrField(Integer.class, true);
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "String index out of range: 1", ex.getMessage());
            assertThrownBy(String.class, ex);
            assertEquals("dependency.cache.size()", 0, ((Map) getPrivateField(dependency, "cache")).size());
            assertEquals("dependency.getDependencyClass()", Integer.class, dependency.getDependencyClass());
        }
    }
    
    public void testHashCodeThrowsNullPointerException() throws Throwable {
        Dependency dependency = new Dependency(null, "testDependencyTarget");
        try {
            dependency.hashCode();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Dependency.class, ex);
            assertEquals("dependency.getTarget()", "testDependencyTarget", dependency.getTarget());
            assertEquals("dependency.getSource()", "testDependencyTarget", dependency.getSource());
        }
    }
}

