/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:29:41 PM
 * Time to generate: 00:34.905 seconds
 *
 */

package org.mentawai.action;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.mentawai.authorization.AuthorizationManager;
import org.mentawai.authorization.Group;
import org.mentawai.core.ApplicationContext;
import org.mentawai.core.Context;
import org.mentawai.core.MapContext;
import org.mentawai.core.CookieContext;
import org.mentawai.core.SessionContext;

public class BaseLoginActionAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return BaseLoginAction.class;
    }
    
    public void testGetUserGroups() throws Throwable {
        HttpSession session = (HttpSession) Mockingbird.getProxyObject(HttpSession.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.getAttribute("testBaseLoginActionParam1"), null);
        Mockingbird.enterTestMode(BaseLoginAction.class);
        List result = BaseLoginAction.getUserGroups(session);
        assertNull("result", result);
    }
    
    public void testGetUserGroups1() throws Throwable {
        HttpSession session = (HttpSession) Mockingbird.getProxyObject(HttpSession.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.getAttribute("groups"), Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.enterTestMode(BaseLoginAction.class);
        ArrayList result = (ArrayList) BaseLoginAction.getUserGroups(session);
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetUserGroups2() throws Throwable {
        List result = BaseLoginAction.getUserGroups(new MapContext());
        assertNull("result", result);
    }
    
    public void testGetUserGroups3() throws Throwable {
        SessionContext session = (SessionContext) Mockingbird.getProxyObject(SessionContext.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.getAttribute("groups"), Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.enterTestMode(BaseLoginAction.class);
        ArrayList result = (ArrayList) BaseLoginAction.getUserGroups(session);
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetUserGroupsWithAggressiveMocks() throws Throwable {
        BaseLoginAction baseLoginAction = (BaseLoginAction) Mockingbird.getProxyObject(BaseLoginAction.class, true);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        setPrivateField(baseLoginAction, "session", context);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(context.getAttribute("groups"), null);
        Mockingbird.enterTestMode(BaseLoginAction.class);
        List result = baseLoginAction.getUserGroups();
        assertNull("result", result);
    }
    
    public void testGetUserLocale() throws Throwable {
        ApplicationContext session = (ApplicationContext) Mockingbird.getProxyObject(ApplicationContext.class);
        Mockingbird.enterRecordingMode();
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.setReturnValue(session.getAttribute("locale"), locale);
        Mockingbird.enterTestMode(BaseLoginAction.class);
        Locale result = BaseLoginAction.getUserLocale(session);
        assertSame("result", locale, result);
    }
    
    public void testGetUserLocale1() throws Throwable {
        Locale result = BaseLoginAction.getUserLocale(new MapContext(new HashMap(100, 100.0F)));
        assertNull("result", result);
    }
    
    public void testGetUserLocale2() throws Throwable {
        HttpSession session = (HttpSession) Mockingbird.getProxyObject(HttpSession.class);
        Mockingbird.enterRecordingMode();
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.setReturnValue(session.getAttribute("locale"), locale);
        Mockingbird.enterTestMode(BaseLoginAction.class);
        Locale result = BaseLoginAction.getUserLocale(session);
        assertSame("result", locale, result);
    }
    
    public void testGetUserLocale3() throws Throwable {
        HttpSession session = (HttpSession) Mockingbird.getProxyObject(HttpSession.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.getAttribute("testBaseLoginActionParam1"), null);
        Mockingbird.enterTestMode(BaseLoginAction.class);
        Locale result = BaseLoginAction.getUserLocale(session);
        assertNull("result", result);
    }
    
    public void testGetUserLocaleWithAggressiveMocks() throws Throwable {
        BaseLoginAction baseLoginAction = (BaseLoginAction) Mockingbird.getProxyObject(BaseLoginAction.class, true);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        setPrivateField(baseLoginAction, "session", context);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(context.getAttribute("locale"), null);
        Mockingbird.enterTestMode(BaseLoginAction.class);
        Locale result = baseLoginAction.getUserLocale();
        assertNull("result", result);
    }
    
    public void testGetUserSession() throws Throwable {
        Context session = (ApplicationContext) Mockingbird.getProxyObject(ApplicationContext.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.getAttribute("user"), "");
        Mockingbird.enterTestMode(BaseLoginAction.class);
        String result = (String) BaseLoginAction.getUserSession(session);
        assertEquals("result", "", result);
    }
    
    public void testGetUserSession1() throws Throwable {
        Object result = BaseLoginAction.getUserSession(new MapContext(new HashMap(100, 100.0F)));
        assertNull("result", result);
    }
    
    public void testGetUserSession2() throws Throwable {
        HttpSession session = (HttpSession) Mockingbird.getProxyObject(HttpSession.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.getAttribute("testBaseLoginActionParam1"), null);
        Mockingbird.enterTestMode(BaseLoginAction.class);
        Object result = BaseLoginAction.getUserSession(session);
        assertNull("result", result);
    }
    
    public void testGetUserSession3() throws Throwable {
        HttpSession session = (HttpSession) Mockingbird.getProxyObject(HttpSession.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.getAttribute("user"), "testString");
        Mockingbird.enterTestMode(BaseLoginAction.class);
        String result = (String) BaseLoginAction.getUserSession(session);
        assertEquals("result", "testString", result);
    }
    
    public void testGetUserSessionWithAggressiveMocks() throws Throwable {
        BaseLoginAction baseLoginAction = (BaseLoginAction) Mockingbird.getProxyObject(BaseLoginAction.class, true);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        setPrivateField(baseLoginAction, "session", context);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(context.getAttribute("user"), null);
        Mockingbird.enterTestMode(BaseLoginAction.class);
        Object result = baseLoginAction.getUserSession();
        assertNull("result", result);
    }
    
    public void testIsLogged() throws Throwable {
        HttpSession session = (HttpSession) Mockingbird.getProxyObject(HttpSession.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.getAttribute("testBaseLoginActionParam1"), null);
        Mockingbird.enterTestMode(BaseLoginAction.class);
        boolean result = BaseLoginAction.isLogged(session);
        assertFalse("result", result);
    }
    
    public void testIsLogged1() throws Throwable {
        HttpSession session = (HttpSession) Mockingbird.getProxyObject(HttpSession.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.getAttribute("user"), session);
        Mockingbird.enterTestMode(BaseLoginAction.class);
        boolean result = BaseLoginAction.isLogged(session);
        assertTrue("result", result);
    }
    
    public void testIsLogged2() throws Throwable {
        boolean result = BaseLoginAction.isLogged(new MapContext(new HashMap(100, 100.0F)));
        assertFalse("result", result);
    }
    
    public void testIsLogged3() throws Throwable {
        SessionContext session = (SessionContext) Mockingbird.getProxyObject(SessionContext.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.hasAttribute("user"), true);
        Mockingbird.enterTestMode(BaseLoginAction.class);
        boolean result = BaseLoginAction.isLogged(session);
        assertTrue("result", result);
    }
    
    public void testIsLoggedWithAggressiveMocks() throws Throwable {
        BaseLoginAction baseLoginAction = (BaseLoginAction) Mockingbird.getProxyObject(BaseLoginAction.class, true);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        setPrivateField(baseLoginAction, "session", context);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(context.hasAttribute("user"), false);
        Mockingbird.enterTestMode(BaseLoginAction.class);
        boolean result = baseLoginAction.isLogged();
        assertFalse("result", result);
    }
    
    public void testSetUserGroup() throws Throwable {
        ApplicationContext session = (ApplicationContext) Mockingbird.getProxyObject(ApplicationContext.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.hasAttribute("user"), true);
        session.setAttribute("groups", null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(BaseLoginAction.class);
        BaseLoginAction.setUserGroup("testString", session);
        assertNull("session.getServletContext()", session.getServletContext());
    }
    
    public void testSetUserGroup1() throws Throwable {
        Group group = (Group) Mockingbird.getProxyObject(Group.class);
        ApplicationContext session = (ApplicationContext) Mockingbird.getProxyObject(ApplicationContext.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.hasAttribute("user"), true);
        Mockingbird.setReturnValue(group.getName(), "Not a string or a permission: ");
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        session.setAttribute("testBaseLoginActionParam1", arrayList);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(BaseLoginAction.class);
        BaseLoginAction.setUserGroup(group, session);
        assertNull("session.getServletContext()", session.getServletContext());
    }
    
    public void testSetUserGroup2() throws Throwable {
        BaseLoginAction.setUserGroup(100, new MapContext(new HashMap(100, 100.0F)));
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetUserGroupWithAggressiveMocks() throws Throwable {
        BaseLoginAction baseLoginAction = (BaseLoginAction) Mockingbird.getProxyObject(BaseLoginAction.class, true);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        setPrivateField(baseLoginAction, "session", context);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(context.hasAttribute("user"), true);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        context.setAttribute("groups", arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(BaseLoginAction.class);
        baseLoginAction.setUserGroup("");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetUserGroupWithAggressiveMocks1() throws Throwable {
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        Group group = (Group) Mockingbird.getProxyObject(Group.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(AuthorizationManager.getGroup(0), group);
        Mockingbird.enterNormalMode();
        group.setName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(context.hasAttribute("user"), true);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        context.setAttribute("groups", arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(BaseLoginAction.class);
        BaseLoginAction.setUserGroup(0, context);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetUserGroups() throws Throwable {
        ArrayList groups = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        ApplicationContext session = (ApplicationContext) Mockingbird.getProxyObject(ApplicationContext.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.hasAttribute("user"), true);
        Mockingbird.setReturnValue(false, groups, "size", "()int", new Object[] {}, new Integer(3), 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, groups, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", new Object[] {"testString"}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", new Object[] {"testString"}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        session.setAttribute("groups", arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(BaseLoginAction.class);
        BaseLoginAction.setUserGroups(groups, session);
        assertEquals("groups.size()", 0, groups.size());
        assertNull("session.getServletContext()", session.getServletContext());
    }
    
    public void testSetUserGroups1() throws Throwable {
        ArrayList groups = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        ApplicationContext session = (ApplicationContext) Mockingbird.getProxyObject(ApplicationContext.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.hasAttribute("user"), true);
        Mockingbird.setReturnValue(false, groups, "size", "()int", new Object[] {}, new Integer(7), 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, groups, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Group group = (Group) Mockingbird.getProxyObject(Group.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, group, 1);
        Mockingbird.setReturnValue(group.getName(), "testString");
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", new Object[] {"testString"}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Group group2 = (Group) Mockingbird.getProxyObject(Group.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, group2, 1);
        Mockingbird.setReturnValue(group2.getName(), "testString");
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", new Object[] {"testString"}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Group group3 = (Group) Mockingbird.getProxyObject(Group.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, group3, 1);
        Mockingbird.setReturnValue(group3.getName(), "");
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", new Object[] {""}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Group group4 = (Group) Mockingbird.getProxyObject(Group.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, group4, 1);
        Mockingbird.setReturnValue(group4.getName(), "testString");
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", new Object[] {"testString"}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Group group5 = (Group) Mockingbird.getProxyObject(Group.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, group5, 1);
        Mockingbird.setReturnValue(group5.getName(), "testString");
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", new Object[] {"testString"}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", new Object[] {"testString"}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        session.setAttribute("groups", arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(BaseLoginAction.class);
        BaseLoginAction.setUserGroups(groups, session);
        assertEquals("groups.size()", 0, groups.size());
        assertNull("session.getServletContext()", session.getServletContext());
    }
    
    public void testSetUserGroups2() throws Throwable {
        ArrayList groups = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        ApplicationContext session = (ApplicationContext) Mockingbird.getProxyObject(ApplicationContext.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.hasAttribute("user"), true);
        Mockingbird.setReturnValue(false, groups, "size", "()int", new Object[] {}, new Integer(2), 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, groups, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "testString", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", new Object[] {"testString"}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Integer integer = new Integer(10);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, integer, 1);
        Mockingbird.setReturnValue(false, integer, "intValue", "()int", new Object[] {}, new Integer(10), 1);
        Mockingbird.setReturnValue(AuthorizationManager.getGroup(10), null);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        session.setAttribute("groups", arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(BaseLoginAction.class);
        BaseLoginAction.setUserGroups(groups, session);
        assertEquals("groups.size()", 0, groups.size());
        assertNull("session.getServletContext()", session.getServletContext());
    }
    
    public void testSetUserGroups3() throws Throwable {
        ArrayList groups = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        SessionContext session = (SessionContext) Mockingbird.getProxyObject(SessionContext.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.hasAttribute("user"), true);
        Mockingbird.setReturnValue(false, groups, "size", "()int", new Object[] {}, new Integer(11), 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, groups, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Integer integer = new Integer(2);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, integer, 1);
        Mockingbird.setReturnValue(false, integer, "intValue", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(AuthorizationManager.getGroup(2), null);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Integer integer2 = new Integer(100);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, integer2, 1);
        Mockingbird.setReturnValue(false, integer2, "intValue", "()int", new Object[] {}, new Integer(100), 1);
        Mockingbird.setReturnValue(AuthorizationManager.getGroup(100), null);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Integer integer3 = new Integer(0);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, integer3, 1);
        Mockingbird.setReturnValue(false, integer3, "intValue", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(AuthorizationManager.getGroup(0), null);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Integer integer4 = new Integer(32);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, integer4, 1);
        Mockingbird.setReturnValue(false, integer4, "intValue", "()int", new Object[] {}, new Integer(32), 1);
        Mockingbird.setReturnValue(AuthorizationManager.getGroup(32), null);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Integer integer5 = new Integer(-2);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, integer5, 1);
        Mockingbird.setReturnValue(false, integer5, "intValue", "()int", new Object[] {}, new Integer(-2), 1);
        Mockingbird.setReturnValue(AuthorizationManager.getGroup(-2), null);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Integer integer6 = new Integer(19);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, integer6, 1);
        Mockingbird.setReturnValue(false, integer6, "intValue", "()int", new Object[] {}, new Integer(19), 1);
        Mockingbird.setReturnValue(AuthorizationManager.getGroup(19), null);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Integer integer7 = new Integer(-11);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, integer7, 1);
        Mockingbird.setReturnValue(false, integer7, "intValue", "()int", new Object[] {}, new Integer(-11), 1);
        Mockingbird.setReturnValue(AuthorizationManager.getGroup(-11), null);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Integer integer8 = new Integer(0);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, integer8, 1);
        Mockingbird.setReturnValue(false, integer8, "intValue", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(AuthorizationManager.getGroup(0), null);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Integer integer9 = new Integer(46);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, integer9, 1);
        Mockingbird.setReturnValue(false, integer9, "intValue", "()int", new Object[] {}, new Integer(46), 1);
        Mockingbird.setReturnValue(AuthorizationManager.getGroup(46), null);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Integer integer10 = new Integer(-32);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, integer10, 1);
        Mockingbird.setReturnValue(false, integer10, "intValue", "()int", new Object[] {}, new Integer(-32), 1);
        Mockingbird.setReturnValue(AuthorizationManager.getGroup(-32), null);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Integer integer11 = new Integer(0);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, integer11, 1);
        Mockingbird.setReturnValue(false, integer11, "intValue", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(AuthorizationManager.getGroup(0), null);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        session.setAttribute("groups", arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(BaseLoginAction.class);
        BaseLoginAction.setUserGroups(groups, session);
        assertEquals("groups.size()", 0, groups.size());
        assertNull("session.getSession()", session.getSession());
    }
    
    public void testSetUserGroups4() throws Throwable {
        ArrayList groups = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        ApplicationContext session = (ApplicationContext) Mockingbird.getProxyObject(ApplicationContext.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.hasAttribute("user"), true);
        Mockingbird.setReturnValue(false, groups, "size", "()int", new Object[] {}, new Integer(4), 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, groups, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", new Object[] {""}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, Mockingbird.getProxyObject(Object.class), 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", new Object[] {""}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", new Object[] {""}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        session.setAttribute("groups", arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(BaseLoginAction.class);
        BaseLoginAction.setUserGroups(groups, session);
        assertEquals("groups.size()", 0, groups.size());
        assertNull("session.getServletContext()", session.getServletContext());
    }
    
    public void testSetUserGroups5() throws Throwable {
        List groups = new ArrayList(100);
        groups.add("testString");
        SessionContext session = (SessionContext) Mockingbird.getProxyObject(SessionContext.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.hasAttribute("user"), true);
        session.setAttribute("testBaseLoginActionParam1", null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(BaseLoginAction.class);
        BaseLoginAction.setUserGroups(groups, session);
        assertEquals("(ArrayList) groups.size()", 1, groups.size());
        assertNull("session.getSession()", session.getSession());
    }
    
    public void testSetUserGroups6() throws Throwable {
        ArrayList groups = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        ApplicationContext session = (ApplicationContext) Mockingbird.getProxyObject(ApplicationContext.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.hasAttribute("user"), true);
        Mockingbird.setReturnValue(false, groups, "size", "()int", new Object[] {}, new Integer(0), 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, groups, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        session.setAttribute("groups", arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(BaseLoginAction.class);
        BaseLoginAction.setUserGroups(groups, session);
        assertEquals("groups.size()", 0, groups.size());
        assertNull("session.getServletContext()", session.getServletContext());
    }
    
    public void testSetUserGroups7() throws Throwable {
        SessionContext session = (SessionContext) Mockingbird.getProxyObject(SessionContext.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.hasAttribute("user"), true);
        session.setAttribute("groups", null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(BaseLoginAction.class);
        BaseLoginAction.setUserGroups("indx", session);
        assertNull("session.getSession()", session.getSession());
    }
    
    public void testSetUserGroups8() throws Throwable {
        String[] groups = new String[0];
        ApplicationContext session = (ApplicationContext) Mockingbird.getProxyObject(ApplicationContext.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.hasAttribute("user"), true);
        session.setAttribute("testBaseLoginActionParam1", null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(BaseLoginAction.class);
        BaseLoginAction.setUserGroups(session, groups);
        assertNull("session.getServletContext()", session.getServletContext());
    }
    
    public void testSetUserGroupsWithAggressiveMocks() throws Throwable {
        BaseLoginAction baseLoginAction = (BaseLoginAction) Mockingbird.getProxyObject(BaseLoginAction.class, true);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Group group = (Group) Mockingbird.getProxyObject(Group.class);
        Group group2 = (Group) Mockingbird.getProxyObject(Group.class);
        Group group3 = (Group) Mockingbird.getProxyObject(Group.class);
        Group group4 = (Group) Mockingbird.getProxyObject(Group.class);
        setPrivateField(baseLoginAction, "session", context);
        group.setName("");
        group2.setName("");
        group3.setName("");
        group4.setName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(context.hasAttribute("user"), true);
        Mockingbird.setReturnValue(list.size(), 0);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), new Integer(0));
        Mockingbird.setReturnValue(AuthorizationManager.getGroup(0), null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), new Integer(0));
        Mockingbird.setReturnValue(AuthorizationManager.getGroup(0), null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), group);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), group2);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), new Integer(0));
        Mockingbird.setReturnValue(AuthorizationManager.getGroup(0), group3);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), new Integer(0));
        Mockingbird.setReturnValue(AuthorizationManager.getGroup(0), group4);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        context.setAttribute("groups", arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(BaseLoginAction.class);
        baseLoginAction.setUserGroups(list);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetUserGroupsWithAggressiveMocks1() throws Throwable {
        BaseLoginAction baseLoginAction = (BaseLoginAction) Mockingbird.getProxyObject(BaseLoginAction.class, true);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        setPrivateField(baseLoginAction, "session", context);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(context.hasAttribute("user"), true);
        StringTokenizer stringTokenizer = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer);
        Mockingbird.setReturnValue(false, stringTokenizer, "countTokens", "()int", new Object[] {}, new Integer(0), 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, stringTokenizer, "hasMoreTokens", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "", 1);
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "hasMoreTokens", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "hasMoreTokens", "()boolean", new Object[] {}, boolean3, 1);
        context.setAttribute("groups", arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(BaseLoginAction.class);
        baseLoginAction.setUserGroups("");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetUserGroupsWithAggressiveMocks2() throws Throwable {
        BaseLoginAction baseLoginAction = (BaseLoginAction) Mockingbird.getProxyObject(BaseLoginAction.class, true);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        String[] strings = new String[2];
        setPrivateField(baseLoginAction, "session", context);
        strings[0] = "";
        strings[1] = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(context.hasAttribute("user"), true);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        context.setAttribute("groups", arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(BaseLoginAction.class);
        baseLoginAction.setUserGroups(strings);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetUserLocale() throws Throwable {
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        SessionContext session = (SessionContext) Mockingbird.getProxyObject(SessionContext.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.hasAttribute("user"), true);
        session.setAttribute("locale", loc);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(BaseLoginAction.class);
        BaseLoginAction.setUserLocale(loc, session);
        assertNull("session.getSession()", session.getSession());
    }
    
    public void testSetUserLocale1() throws Throwable {
        Context session = new ApplicationContext((ServletContext) Mockingbird.getProxyObject(ServletContext.class));
        Mockingbird.enterRecordingMode();
        BaseLoginAction.setUserLocale((Locale) null, session);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(BaseLoginAction.class);
        BaseLoginAction.setUserLocale("testBaseLoginActionLoc", session);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetUserLocale2() throws Throwable {
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        Mockingbird.enterRecordingMode();
        StringTokenizer stringTokenizer = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer);
        Mockingbird.setReturnValue(false, stringTokenizer, "countTokens", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "countTokens", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "countTokens", "()int", new Object[] {}, new Integer(3), 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.replaceObjectForRecording(Locale.class, "<init>(java.lang.String,java.lang.String,java.lang.String)", locale);
        Mockingbird.setReturnValue(context.hasAttribute("user"), true);
        context.setAttribute("locale", locale);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(BaseLoginAction.class);
        BaseLoginAction.setUserLocale("", context);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetUserLocaleWithAggressiveMocks() throws Throwable {
        BaseLoginAction baseLoginAction = (BaseLoginAction) Mockingbird.getProxyObject(BaseLoginAction.class, true);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        setPrivateField(baseLoginAction, "session", context);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(context.hasAttribute("user"), true);
        context.setAttribute("locale", null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(BaseLoginAction.class);
        baseLoginAction.setUserLocale((Locale) null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetUserLocaleWithAggressiveMocks1() throws Throwable {
        BaseLoginAction baseLoginAction = (BaseLoginAction) Mockingbird.getProxyObject(BaseLoginAction.class, true);
        Mockingbird.enterRecordingMode();
        StringTokenizer stringTokenizer = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer);
        setPrivateField(baseLoginAction, "session", null);
        Mockingbird.setReturnValue(false, stringTokenizer, "countTokens", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "countTokens", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.replaceObjectForRecording(Locale.class, "<init>(java.lang.String,java.lang.String)", locale);
        BaseLoginAction.setUserLocale(locale, null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(BaseLoginAction.class);
        baseLoginAction.setUserLocale("");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetUserSession() throws Throwable {
        Context session = new MapContext();
        BaseLoginAction.setUserSession("  b", session);
        assertEquals("(ContextMap) session.values.size()", 1, ((Map) getPrivateField(session, "values")).size());
        assertEquals("(ContextMap) session.values.get(\"user\")", "  b", ((Map) getPrivateField(session, "values")).get("user"));
    }
    
    public void testSetUserSessionWithAggressiveMocks() throws Throwable {
        BaseLoginAction baseLoginAction = (BaseLoginAction) Mockingbird.getProxyObject(BaseLoginAction.class, true);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        setPrivateField(baseLoginAction, "session", context);
        Mockingbird.enterRecordingMode();
        context.reset();
        Mockingbird.setNormalReturnForVoid();
        context.setAttribute("user", null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(BaseLoginAction.class);
        baseLoginAction.setUserSession(null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetUserGroupsThrowsClassCastException() throws Throwable {
        HttpSession session = (HttpSession) Mockingbird.getProxyObject(HttpSession.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.getAttribute("groups"), "testString");
        Mockingbird.enterTestMode(BaseLoginAction.class);
        try {
            BaseLoginAction.getUserGroups(session);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testGetUserGroupsThrowsClassCastException1() throws Throwable {
        ApplicationContext session = (ApplicationContext) Mockingbird.getProxyObject(ApplicationContext.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.getAttribute("groups"), "testString");
        Mockingbird.enterTestMode(BaseLoginAction.class);
        try {
            BaseLoginAction.getUserGroups(session);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(BaseLoginAction.class, ex);
            assertNull("session.getServletContext()", session.getServletContext());
        }
    }
    
    public void testGetUserGroupsThrowsNullPointerException() throws Throwable {
        try {
            BaseLoginAction.getUserGroups((HttpSession) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testGetUserGroupsThrowsNullPointerException1() throws Throwable {
        Context session = new ApplicationContext(null);
        try {
            BaseLoginAction.getUserGroups(session);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testGetUserLocaleThrowsClassCastException() throws Throwable {
        ApplicationContext session = (ApplicationContext) Mockingbird.getProxyObject(ApplicationContext.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.getAttribute("locale"), "testString");
        Mockingbird.enterTestMode(BaseLoginAction.class);
        try {
            BaseLoginAction.getUserLocale(session);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(BaseLoginAction.class, ex);
            assertNull("session.getServletContext()", session.getServletContext());
        }
    }
    
    public void testGetUserLocaleThrowsNullPointerException() throws Throwable {
        Context session = new CookieContext((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class), (HttpServletResponse) Mockingbird.getProxyObject(HttpServletResponse.class));
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(session.getAttribute("locale"), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(BaseLoginAction.class);
        try {
            BaseLoginAction.getUserLocale(session);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetUserLocaleThrowsNullPointerException1() throws Throwable {
        try {
            BaseLoginAction.getUserLocale((HttpSession) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testGetUserSessionThrowsNullPointerException() throws Throwable {
        try {
            BaseLoginAction.getUserSession((Context) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testGetUserSessionThrowsNullPointerException1() throws Throwable {
        try {
            BaseLoginAction.getUserSession((HttpSession) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testIsLoggedThrowsNullPointerException() throws Throwable {
        try {
            BaseLoginAction.isLogged((HttpSession) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testIsLoggedThrowsNullPointerException1() throws Throwable {
        try {
            BaseLoginAction.isLogged((Context) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testSetUserGroupThrowsIllegalStateException() throws Throwable {
        Context session = new MapContext(new HashMap(100, 100.0F));
        try {
            BaseLoginAction.setUserGroup("testBaseLoginActionGroup", session);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Tried to set user groups, but there is no user in the session!", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testSetUserGroupThrowsIllegalStateException1() throws Throwable {
        String[] permissions = new String[3];
        permissions[0] = "testString";
        permissions[1] = "testString";
        permissions[2] = "7ZkbY4-2Wg!;q\n+[fH]pr|?Qf{j:mS&";
        Context session = new MapContext(new HashMap(100, 100.0F));
        try {
            BaseLoginAction.setUserGroup(new Group("testBaseLoginActionName", permissions), session);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Tried to set user groups, but there is no user in the session!", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testSetUserGroupThrowsNullPointerException() throws Throwable {
        Context session = new SessionContext((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class), (HttpServletResponse) Mockingbird.getProxyObject(HttpServletResponse.class));
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(session.hasAttribute("user"), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(BaseLoginAction.class);
        try {
            BaseLoginAction.setUserGroup("testBaseLoginActionGroup", session);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testSetUserGroupThrowsNullPointerException1() throws Throwable {
        try {
            BaseLoginAction.setUserGroup(new Group("testBaseLoginActionName", new HashSet(100, 100.0F)), null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testSetUserGroupThrowsNullPointerException2() throws Throwable {
        SessionContext session = (SessionContext) Mockingbird.getProxyObject(SessionContext.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(session.hasAttribute("user"), true);
        Mockingbird.enterTestMode(BaseLoginAction.class);
        try {
            BaseLoginAction.setUserGroup((Group) null, session);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
            assertNull("session.getSession()", session.getSession());
        }
    }
    
    public void testSetUserGroupsThrowsIllegalStateException() throws Throwable {
        List groups = new ArrayList(100);
        Context session = new MapContext();
        try {
            BaseLoginAction.setUserGroups(groups, session);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Tried to set user groups, but there is no user in the session!", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
            assertEquals("(ArrayList) groups.size()", 0, groups.size());
        }
    }
    
    public void testSetUserGroupsThrowsIllegalStateException1() throws Throwable {
        Context session = new MapContext();
        try {
            BaseLoginAction.setUserGroups("testBaseLoginActionGroups", session);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Tried to set user groups, but there is no user in the session!", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testSetUserGroupsThrowsIllegalStateException2() throws Throwable {
        String[] groups = new String[3];
        Context session = new MapContext();
        try {
            BaseLoginAction.setUserGroups(session, groups);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Tried to set user groups, but there is no user in the session!", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testSetUserGroupsThrowsNullPointerException() throws Throwable {
        List groups = new ArrayList(100);
        Context session = new SessionContext((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class), (HttpServletResponse) Mockingbird.getProxyObject(HttpServletResponse.class));
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(session.hasAttribute("user"), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(BaseLoginAction.class);
        try {
            BaseLoginAction.setUserGroups(groups, session);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("(ArrayList) groups.size()", 0, groups.size());
        }
    }
    
    public void testSetUserGroupsThrowsNullPointerException1() throws Throwable {
        Context session = new SessionContext((HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class), (HttpServletResponse) Mockingbird.getProxyObject(HttpServletResponse.class));
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(session.hasAttribute("user"), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(BaseLoginAction.class);
        try {
            BaseLoginAction.setUserGroups("testBaseLoginActionGroups", session);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testSetUserGroupsThrowsNullPointerException2() throws Throwable {
        String[] groups = new String[3];
        try {
            BaseLoginAction.setUserGroups((Context) null, groups);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testSetUserLocaleThrowsIllegalArgumentException() throws Throwable {
        try {
            BaseLoginAction.setUserLocale("", new MapContext());
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Bad locale: ", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testSetUserLocaleThrowsIllegalStateException() throws Throwable {
        Context session = new MapContext();
        try {
            BaseLoginAction.setUserLocale(Locale.FRENCH, session);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Tried to set user locale, but there is no user in the session!", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testSetUserLocaleThrowsIllegalStateException1() throws Throwable {
        try {
            BaseLoginAction.setUserLocale("testBaseLoginActionLoc", new MapContext());
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Tried to set user locale, but there is no user in the session!", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testSetUserLocaleThrowsNullPointerException() throws Throwable {
        HttpSession session = (HttpSession) Mockingbird.getProxyObject(HttpSession.class);
        Mockingbird.enterRecordingMode();
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.setReturnValue(session.getAttribute("locale"), loc);
        Mockingbird.enterTestMode(BaseLoginAction.class);
        BaseLoginAction.getUserLocale(session);
        try {
            BaseLoginAction.setUserLocale(loc, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BaseLoginAction.class, ex);
        }
    }
    
    public void testSetUserLocaleThrowsNullPointerException1() throws Throwable {
        Context session = new CookieContext(null, (HttpServletResponse) Mockingbird.getProxyObject(HttpServletResponse.class));
        Mockingbird.enterTestMode(BaseLoginAction.class);
        try {
            BaseLoginAction.setUserLocale("testBaseLoginActionLoc", session);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CookieContext.class, ex);
        }
    }
    
    public void testSetUserLocaleThrowsNullPointerException2() throws Throwable {
        try {
            BaseLoginAction.setUserLocale((String) null, new MapContext());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(StringTokenizer.class, ex);
        }
    }
}

