/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 5:48:29 PM
 * Time to generate: 00:34.325 seconds
 *
 */

package org.mentawai.template;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import javax.servlet.GenericServlet;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.agitar.mock.servlet.MockHttpServletRequest;
import org.agitar.mock.servlet.MockHttpServletResponse;
import org.agitar.mock.servlet.MockServletContext;

public class TemplateServletAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return TemplateServlet.class;
    }
    
    public void testDoGetWithAggressiveMocks() throws Throwable {
        TemplateServlet templateServlet = (TemplateServlet) Mockingbird.getProxyObject(TemplateServlet.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(TemplateServlet.extractPagePath(null), "");
        Mockingbird.setReturnValue(false, templateServlet, "createTemplateManager", "()org.mentawai.template.TemplateManager", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(templateServlet.getServletContext(), null);
        Mockingbird.setReturnValue(false, templateServlet, "processTemplate", "(java.lang.String,org.mentawai.template.TemplateManager,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.ServletContext)void", null, 1);
        Mockingbird.enterTestMode(TemplateServlet.class);
        templateServlet.doGet(null, null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testDoPostWithAggressiveMocks() throws Throwable {
        TemplateServlet templateServlet = (TemplateServlet) Mockingbird.getProxyObject(TemplateServlet.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(TemplateServlet.extractPagePath(null), "");
        Mockingbird.setReturnValue(false, templateServlet, "createTemplateManager", "()org.mentawai.template.TemplateManager", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(templateServlet.getServletContext(), null);
        Mockingbird.setReturnValue(false, templateServlet, "processTemplate", "(java.lang.String,org.mentawai.template.TemplateManager,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.ServletContext)void", null, 1);
        Mockingbird.enterTestMode(TemplateServlet.class);
        templateServlet.doPost(null, null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testExecuteListener() throws Throwable {
        ServletContext application = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest request = mockServletContext.createHttpServletRequest("testTemplateServletParam1");
        HttpServletResponse response = mockServletContext.createHttpServletResponse();
        Page page = new Page("testTemplateServletView", (Class) null);
        Mockingbird.enterTestMode(TemplateServlet.class);
        TemplateServlet.executeListener(page, request, response, application);
        assertEquals("(MockHttpServletResponse) response", "text/html; charset=UTF-8", ((MockHttpServletResponse) response).getContentType());
        assertEquals("(MockHttpServletResponse) response", "UTF-8", ((MockHttpServletResponse) response).getCharacterEncoding());
    }
    
    public void testExtractPagePath() throws Throwable {
        HttpServletRequest request = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(request.getServletPath(), "3/=Gk*2.;c`0[Ecde\"UTYa?");
        Mockingbird.enterTestMode(TemplateServlet.class);
        String result = TemplateServlet.extractPagePath(request);
        assertEquals("result", "3/=Gk*2", result);
    }
    
    public void testGetTemplateManager() throws Throwable {
        TemplateServlet.getTemplateManager();
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testProcessRequestWithAggressiveMocks() throws Throwable {
        TemplateServlet templateServlet = (TemplateServlet) Mockingbird.getProxyObject(TemplateServlet.class, true);
        ServletConfig servletConfig = (ServletConfig) Mockingbird.getProxyObject(ServletConfig.class);
        HttpServletRequest httpServletRequest = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        HttpServletResponse httpServletResponse = (HttpServletResponse) Mockingbird.getProxyObject(HttpServletResponse.class);
        TemplateManager templateManager = (TemplateManager) Mockingbird.getProxyObject(TemplateManager.class);
        Page page = (Page) Mockingbird.getProxyObject(Page.class);
        setPrivateField(templateServlet, "config", servletConfig);
        TemplateServlet.setTemplateManager(templateManager);
        page.setPath("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(httpServletRequest.getServletPath(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "lastIndexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(servletConfig.getServletContext(), null);
        Mockingbird.setReturnValue(false, templateManager, "getPageForPath", "(java.lang.String)org.mentawai.template.Page", page, 1);
        templateServlet.putPageInResponse(page, httpServletRequest, httpServletResponse, null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, TemplateServlet.class, "executeListener", "(org.mentawai.template.Page,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.ServletContext)void", null, 1);
        Mockingbird.setReturnValue(httpServletResponse.isCommitted(), false);
        Mockingbird.setReturnValue(false, templateServlet, "showPage", "(org.mentawai.template.Page,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.ServletContext)void", null, 1);
        Mockingbird.enterTestMode(TemplateServlet.class);
        templateServlet.processRequest(httpServletRequest, httpServletResponse);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetTemplateManager() throws Throwable {
        TemplateServlet.setTemplateManager(null);
        assertNull("TemplateServlet.getTemplateManager()", TemplateServlet.getTemplateManager());
    }
    
    public void testCreateTemplateManagerThrowsTemplateExceptionWithAggressiveMocks() throws Throwable {
        TemplateServlet templateServlet = (TemplateServlet) Mockingbird.getProxyObject(TemplateServlet.class, true);
        ServletConfig servletConfig = (ServletConfig) Mockingbird.getProxyObject(ServletConfig.class);
        setPrivateField(templateServlet, "config", servletConfig);
        TemplateServlet.setTemplateManager(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, servletConfig, "getInitParameter", "(java.lang.String)java.lang.String", "com.sun.corba.se.spi.activation.LocatorPackage.ServerLocationPerORBHolder", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Throwable.class), "printStackTrace", "()void", null, 1);
        Mockingbird.replaceObjectForRecording(TemplateException.class, "<init>(java.lang.Throwable)", Mockingbird.getProxyObject(TemplateException.class));
        Mockingbird.enterTestMode(TemplateServlet.class);
        try {
            callPrivateMethod("org.mentawai.template.TemplateServlet", "createTemplateManager", new Class[] {}, templateServlet, new Object[] {});
            fail("Expected TemplateException to be thrown");
        } catch (TemplateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testCreateTemplateManagerThrowsTemplateExceptionWithAggressiveMocks1() throws Throwable {
        TemplateServlet templateServlet = (TemplateServlet) Mockingbird.getProxyObject(TemplateServlet.class, true);
        ServletConfig servletConfig = (ServletConfig) Mockingbird.getProxyObject(ServletConfig.class);
        setPrivateField(templateServlet, "config", servletConfig);
        TemplateServlet.setTemplateManager(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, servletConfig, "getInitParameter", "(java.lang.String)java.lang.String", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Throwable.class), "printStackTrace", "()void", null, 1);
        Mockingbird.replaceObjectForRecording(TemplateException.class, "<init>(java.lang.Throwable)", Mockingbird.getProxyObject(TemplateException.class));
        Mockingbird.enterTestMode(TemplateServlet.class);
        try {
            callPrivateMethod("org.mentawai.template.TemplateServlet", "createTemplateManager", new Class[] {}, templateServlet, new Object[] {});
            fail("Expected TemplateException to be thrown");
        } catch (TemplateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testCreateTemplateManagerThrowsTemplateExceptionWithAggressiveMocks2() throws Throwable {
        TemplateServlet templateServlet = (TemplateServlet) Mockingbird.getProxyObject(TemplateServlet.class, true);
        ServletConfig servletConfig = (ServletConfig) Mockingbird.getProxyObject(ServletConfig.class);
        setPrivateField(templateServlet, "config", servletConfig);
        TemplateServlet.setTemplateManager(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, servletConfig, "getInitParameter", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Throwable.class), "printStackTrace", "()void", null, 1);
        Mockingbird.replaceObjectForRecording(TemplateException.class, "<init>(java.lang.Throwable)", Mockingbird.getProxyObject(TemplateException.class));
        Mockingbird.enterTestMode(TemplateServlet.class);
        try {
            callPrivateMethod("org.mentawai.template.TemplateServlet", "createTemplateManager", new Class[] {}, templateServlet, new Object[] {});
            fail("Expected TemplateException to be thrown");
        } catch (TemplateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testDoGetThrowsTemplateException() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest request = mockServletContext.createHttpServletRequest("testTemplateServletParam1");
        HttpServletResponse response = mockServletContext.createHttpServletResponse();
        TemplateServlet jspTemplateServlet = new JspTemplateServlet();
        try {
            jspTemplateServlet.doGet(request, response);
            fail("Expected TemplateException to be thrown");
        } catch (TemplateException ex) {
            assertEquals("(MockHttpServletResponse) response", "text/html; charset=UTF-8", ((MockHttpServletResponse) response).getContentType());
            assertEquals("(MockHttpServletResponse) response", "UTF-8", ((MockHttpServletResponse) response).getCharacterEncoding());
            assertEquals("ex.getMessage()", "String index out of range: -1", ex.getMessage());
            assertThrownBy(String.class, ex);
            assertEquals("ex.getCause().getMessage()", "String index out of range: -1", ex.getCause().getMessage());
            assertEquals("(MockHttpServletResponse) response.getContentType()", "text/html; charset=UTF-8", ((MockHttpServletResponse) response).getContentType());
        }
    }
    
    public void testDoPostThrowsTemplateException() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest request = mockServletContext.createHttpServletRequest("testTemplateServletParam1");
        HttpServletResponse response = mockServletContext.createHttpServletResponse();
        TemplateServlet jspTemplateServlet = new JspTemplateServlet();
        try {
            jspTemplateServlet.doPost(request, response);
            fail("Expected TemplateException to be thrown");
        } catch (TemplateException ex) {
            assertEquals("(MockHttpServletResponse) response", "text/html; charset=UTF-8", ((MockHttpServletResponse) response).getContentType());
            assertEquals("(MockHttpServletResponse) response", "UTF-8", ((MockHttpServletResponse) response).getCharacterEncoding());
            assertEquals("ex.getMessage()", "String index out of range: -1", ex.getMessage());
            assertThrownBy(String.class, ex);
            assertEquals("ex.getCause().getMessage()", "String index out of range: -1", ex.getCause().getMessage());
            assertEquals("(MockHttpServletResponse) response.getContentType()", "text/html; charset=UTF-8", ((MockHttpServletResponse) response).getContentType());
        }
    }
    
    public void testDoPostThrowsTemplateException1() throws Throwable {
        TemplateServlet jspTemplateServlet = new JspTemplateServlet();
        HttpServletRequest request = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        HttpServletResponse response = (HttpServletResponse) Mockingbird.getProxyObject(HttpServletResponse.class);
        Mockingbird.enterRecordingMode();
        jspTemplateServlet.processRequest(request, response);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(TemplateException.class));
        Mockingbird.enterTestMode(TemplateServlet.class);
        try {
            jspTemplateServlet.doPost(request, response);
            fail("Expected TemplateException to be thrown");
        } catch (TemplateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testExecuteListenerThrowsClassCastException() throws Throwable {
        ServletContext application = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest request = mockServletContext.createHttpServletRequest("testTemplateServletParam1");
        HttpServletResponse response = mockServletContext.createHttpServletResponse();
        Page page = new Page("testTemplateServletView", Object.class);
        Mockingbird.enterTestMode(TemplateServlet.class);
        try {
            TemplateServlet.executeListener(page, request, response, application);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("(MockHttpServletResponse) response", "text/html; charset=UTF-8", ((MockHttpServletResponse) response).getContentType());
            assertEquals("(MockHttpServletResponse) response", "UTF-8", ((MockHttpServletResponse) response).getCharacterEncoding());
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(TemplateServlet.class, ex);
        }
    }
    
    public void testExecuteListenerThrowsInstantiationException() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest request = mockServletContext.createHttpServletRequest("testTemplateServletParam1");
        HttpServletResponse response = mockServletContext.createHttpServletResponse();
        Page page = new Page("testTemplateServletView", Integer.class);
        ServletContext application = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        Mockingbird.enterTestMode(TemplateServlet.class);
        try {
            TemplateServlet.executeListener(page, request, response, application);
            fail("Expected InstantiationException to be thrown");
        } catch (InstantiationException ex) {
            assertEquals("(MockHttpServletResponse) response", "text/html; charset=UTF-8", ((MockHttpServletResponse) response).getContentType());
            assertEquals("(MockHttpServletResponse) response", "UTF-8", ((MockHttpServletResponse) response).getCharacterEncoding());
            assertEquals("ex.getMessage()", "java.lang.Integer", ex.getMessage());
            assertThrownBy(Class.class, ex);
        }
    }
    
    public void testExecuteListenerThrowsNullPointerException() throws Throwable {
        ServletContext application = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest request = mockServletContext.createHttpServletRequest("testTemplateServletParam1");
        HttpServletResponse response = mockServletContext.createHttpServletResponse();
        Mockingbird.enterTestMode(TemplateServlet.class);
        try {
            TemplateServlet.executeListener(null, request, response, application);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("(MockHttpServletResponse) response", "text/html; charset=UTF-8", ((MockHttpServletResponse) response).getContentType());
            assertEquals("(MockHttpServletResponse) response", "UTF-8", ((MockHttpServletResponse) response).getCharacterEncoding());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(TemplateServlet.class, ex);
        }
    }
    
    public void testExtractPagePathThrowsNullPointerException() throws Throwable {
        HttpServletRequest request = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(request.getServletPath(), null);
        Mockingbird.enterTestMode(TemplateServlet.class);
        try {
            TemplateServlet.extractPagePath(request);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(TemplateServlet.class, ex);
        }
    }
    
    public void testExtractPagePathThrowsStringIndexOutOfBoundsException() throws Throwable {
        HttpServletRequest request = new MockServletContext().createHttpServletRequest("testTemplateServletParam1");
        try {
            TemplateServlet.extractPagePath(request);
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "String index out of range: -1", ex.getMessage());
            assertThrownBy(String.class, ex);
            assertEquals("(MockHttpServletRequest) request.getServerName()", "localhost", ((MockHttpServletRequest) request).getServerName());
        }
    }
    
    public void testProcessRequestThrowsTemplateException() throws Throwable {
        HttpServletRequest request = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        TemplateServlet jspTemplateServlet = new JspTemplateServlet();
        HttpServletResponse response = new MockServletContext().createHttpServletResponse();
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(TemplateServlet.extractPagePath(request), "\\");
        Mockingbird.enterTestMode(TemplateServlet.class);
        try {
            jspTemplateServlet.processRequest(request, response);
            fail("Expected TemplateException to be thrown");
        } catch (TemplateException ex) {
            assertEquals("(MockHttpServletResponse) response", "text/html; charset=UTF-8", ((MockHttpServletResponse) response).getContentType());
            assertEquals("(MockHttpServletResponse) response", "UTF-8", ((MockHttpServletResponse) response).getCharacterEncoding());
            assertEquals("ex.getMessage()", "java.lang.NullPointerException", ex.getMessage());
            assertThrownBy(GenericServlet.class, ex);
            assertNull("ex.getCause().getMessage()", ex.getCause().getMessage());
            assertEquals("(MockHttpServletResponse) response.getContentType()", "text/html; charset=UTF-8", ((MockHttpServletResponse) response).getContentType());
        }
    }
    
    public void testProcessRequestThrowsTemplateException1() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest request = mockServletContext.createHttpServletRequest("testTemplateServletParam1");
        HttpServletResponse response = mockServletContext.createHttpServletResponse();
        TemplateServlet jspTemplateServlet = new JspTemplateServlet();
        try {
            jspTemplateServlet.processRequest(request, response);
            fail("Expected TemplateException to be thrown");
        } catch (TemplateException ex) {
            assertEquals("(MockHttpServletResponse) response", "text/html; charset=UTF-8", ((MockHttpServletResponse) response).getContentType());
            assertEquals("(MockHttpServletResponse) response", "UTF-8", ((MockHttpServletResponse) response).getCharacterEncoding());
            assertEquals("ex.getMessage()", "String index out of range: -1", ex.getMessage());
            assertThrownBy(String.class, ex);
            assertEquals("ex.getCause().getMessage()", "String index out of range: -1", ex.getCause().getMessage());
            assertEquals("(MockHttpServletResponse) response.getContentType()", "text/html; charset=UTF-8", ((MockHttpServletResponse) response).getContentType());
        }
    }
    
    public void testProcessTemplateThrowsNullPointerException() throws Throwable {
        ServletContext application = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        TemplateServlet jspTemplateServlet = new JspTemplateServlet();
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest request = mockServletContext.createHttpServletRequest("testTemplateServletParam1");
        HttpServletResponse response = mockServletContext.createHttpServletResponse();
        Mockingbird.enterTestMode(TemplateServlet.class);
        try {
            jspTemplateServlet.processTemplate("testTemplateServletPath", null, request, response, application);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("(MockHttpServletResponse) response", "text/html; charset=UTF-8", ((MockHttpServletResponse) response).getContentType());
            assertEquals("(MockHttpServletResponse) response", "UTF-8", ((MockHttpServletResponse) response).getCharacterEncoding());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(TemplateServlet.class, ex);
            assertEquals("(MockHttpServletResponse) response.getContentType()", "text/html; charset=UTF-8", ((MockHttpServletResponse) response).getContentType());
        }
    }
    
    public void testProcessTemplateThrowsTemplateException() throws Throwable {
        MockServletContext mockServletContext = new MockServletContext();
        HttpServletRequest request = mockServletContext.createHttpServletRequest("testTemplateServletParam1");
        HttpServletResponse response = mockServletContext.createHttpServletResponse();
        ServletContext application = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        TemplateServlet jspTemplateServlet = new JspTemplateServlet();
        TemplateManager manager = (TemplateManager) Mockingbird.getProxyObject(TemplateManager.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(manager.getPageForPath("testString"), null);
        Mockingbird.enterTestMode(TemplateServlet.class);
        try {
            jspTemplateServlet.processTemplate("testString", manager, request, response, application);
            fail("Expected TemplateException to be thrown");
        } catch (TemplateException ex) {
            assertEquals("(MockHttpServletResponse) response", "text/html; charset=UTF-8", ((MockHttpServletResponse) response).getContentType());
            assertEquals("(MockHttpServletResponse) response", "UTF-8", ((MockHttpServletResponse) response).getCharacterEncoding());
            assertEquals("ex.getMessage()", "testString not found!", ex.getMessage());
            assertThrownBy(TemplateServlet.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("(MockHttpServletResponse) response.getContentType()", "text/html; charset=UTF-8", ((MockHttpServletResponse) response).getContentType());
        }
    }
    
    public void testProcessTemplateThrowsTemplateExceptionWithAggressiveMocks() throws Throwable {
        TemplateServlet templateServlet = (TemplateServlet) Mockingbird.getProxyObject(TemplateServlet.class, true);
        TemplateManager templateManager = (TemplateManager) Mockingbird.getProxyObject(TemplateManager.class);
        Page page = (Page) Mockingbird.getProxyObject(Page.class);
        Exception ex2 = (Exception) Mockingbird.getProxyObject(Exception.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(templateManager.getPageForPath(""), page);
        Mockingbird.enterNormalMode();
        page.setPath("");
        Mockingbird.enterRecordingMode();
        templateServlet.putPageInResponse(page, null, null, null);
        Mockingbird.setExceptionForVoid(ex2);
        Mockingbird.setReturnValue(false, ex2, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.replaceObjectForRecording(TemplateException.class, "<init>(java.lang.Throwable)", Mockingbird.getProxyObject(TemplateException.class));
        Mockingbird.enterTestMode(TemplateServlet.class);
        try {
            templateServlet.processTemplate("", templateManager, null, null, null);
            fail("Expected TemplateException to be thrown");
        } catch (TemplateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
}

