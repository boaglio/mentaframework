/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 5:49:28 PM
 * Time to generate: 00:16.638 seconds
 *
 */

package org.mentawai.template;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletContext;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.agitar.mock.servlet.MockHttpServletResponse;
import org.agitar.mock.servlet.MockServletContext;

public class JspTemplateServletAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return JspTemplateServlet.class;
    }
    
    public void testConstructor() throws Throwable {
        new JspTemplateServlet();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testPutPageInResponse() throws Throwable {
        HttpServletResponse response = ((MockServletContext) Mockingbird.getProxyObject(MockServletContext.class)).createHttpServletResponse();
        JspTemplateServlet jspTemplateServlet = new JspTemplateServlet();
        ServletContext application = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        Page page = new Page("testJspTemplateServletPath", "testJspTemplateServletView");
        HttpServletRequest request = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterRecordingMode();
        request.setAttribute("testJspTemplateServletParam1", page);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JspTemplateServlet.class);
        jspTemplateServlet.putPageInResponse(page, request, response, application);
        assertEquals("(MockHttpServletResponse) response", "text/html; charset=UTF-8", ((MockHttpServletResponse) response).getContentType());
        assertEquals("(MockHttpServletResponse) response", "UTF-8", ((MockHttpServletResponse) response).getCharacterEncoding());
    }
    
    public void testShowPage() throws Throwable {
        JspTemplateServlet jspTemplateServlet = new JspTemplateServlet();
        Page page = new Page("", Integer.class);
        ServletContext application = (ServletContext) Mockingbird.getProxyObject(ServletContext.class);
        HttpServletRequest request = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        HttpServletResponse response = (HttpServletResponse) Mockingbird.getProxyObject(HttpServletResponse.class);
        Mockingbird.enterRecordingMode();
        RequestDispatcher requestDispatcher = (RequestDispatcher) Mockingbird.getProxyObject(RequestDispatcher.class);
        Mockingbird.setReturnValue(application.getRequestDispatcher("/"), requestDispatcher);
        callPrivateMethod("javax.servlet.RequestDispatcher", "forward", new Class[] {ServletRequest.class, ServletResponse.class}, requestDispatcher, new Object[] {request, response});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JspTemplateServlet.class);
        jspTemplateServlet.showPage(page, request, response, application);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testShowPageThrowsNullPointerException() throws Throwable {
        Page page = new Page("testJspTemplateServletView", Integer.class);
        HttpServletResponse response = ((MockServletContext) Mockingbird.getProxyObject(MockServletContext.class)).createHttpServletResponse();
        JspTemplateServlet jspTemplateServlet = new JspTemplateServlet();
        HttpServletRequest request = (HttpServletRequest) Mockingbird.getProxyObject(HttpServletRequest.class);
        Mockingbird.enterTestMode(JspTemplateServlet.class);
        try {
            jspTemplateServlet.showPage(page, request, response, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("(MockHttpServletResponse) response", "text/html; charset=UTF-8", ((MockHttpServletResponse) response).getContentType());
            assertEquals("(MockHttpServletResponse) response", "UTF-8", ((MockHttpServletResponse) response).getCharacterEncoding());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JspTemplateServlet.class, ex);
        }
    }
}

