/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 5:48:29 PM
 * Time to generate: 00:13.818 seconds
 *
 */

package org.mentawai.template;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;

public class TemplateManagerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return TemplateManager.class;
    }
    
    public void testAddWithAggressiveMocks() throws Throwable {
        TemplateManager templateManager = (TemplateManager) Mockingbird.getProxyObject(TemplateManager.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Page page = (Page) Mockingbird.getProxyObject(Page.class);
        setPrivateField(templateManager, "pages", map);
        page.setPath("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "startsWith", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(TemplateManager.class);
        templateManager.add(page);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testFindPageForPathWithAggressiveMocks() throws Throwable {
        TemplateManager templateManager = (TemplateManager) Mockingbird.getProxyObject(TemplateManager.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Page page = (Page) Mockingbird.getProxyObject(Page.class);
        Page page2 = (Page) Mockingbird.getProxyObject(Page.class);
        setPrivateField(templateManager, "pages", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.values(), collection);
        Mockingbird.enterNormalMode();
        page.setPath("");
        page2.setPath("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(collection.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), page);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "matches", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), page2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "matches", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(TemplateManager.class);
        Page result = (Page) callPrivateMethod("org.mentawai.template.TemplateManager", "findPageForPath", new Class[] {String.class, boolean.class}, templateManager, new Object[] {"", Boolean.TRUE});
        assertNull("result", result);
    }
    
    public void testGetPageForPathWithAggressiveMocks() throws Throwable {
        TemplateManager templateManager = (TemplateManager) Mockingbird.getProxyObject(TemplateManager.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Page page = (Page) Mockingbird.getProxyObject(Page.class);
        setPrivateField(templateManager, "pages", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "startsWith", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", page, 1);
        Mockingbird.enterTestMode(TemplateManager.class);
        Page result = templateManager.getPageForPath("");
        assertNull("result.getPath()", result.getPath());
    }
    
    public void testGetPageForPathWithAggressiveMocks1() throws Throwable {
        TemplateManager templateManager = (TemplateManager) Mockingbird.getProxyObject(TemplateManager.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Page page = (Page) Mockingbird.getProxyObject(Page.class);
        Page page2 = (Page) Mockingbird.getProxyObject(Page.class);
        Page page3 = (Page) Mockingbird.getProxyObject(Page.class);
        setPrivateField(templateManager, "pages", map);
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "startsWith", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.enterNormalMode();
        page.setPath("");
        page2.setPath("");
        page3.setPath("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(map.values(), collection);
        Mockingbird.setReturnValue(collection.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), page);
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "matches", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), page2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "matches", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), page3);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "matches", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.enterTestMode(TemplateManager.class);
        Page result = templateManager.getPageForPath("AA");
        assertEquals("result.getPath()", "", result.getPath());
    }
    
    public void testGetPagesWithAggressiveMocks() throws Throwable {
        TemplateManager templateManager = (TemplateManager) Mockingbird.getProxyObject(TemplateManager.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(templateManager, "pages", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.values(), null);
        Mockingbird.enterTestMode(TemplateManager.class);
        Collection result = templateManager.getPages();
        assertNull("result", result);
    }
    
    public void testReconfigurePagesWithAggressiveMocks() throws Throwable {
        TemplateManager templateManager = (TemplateManager) Mockingbird.getProxyObject(TemplateManager.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(templateManager, "pages", map);
        Mockingbird.enterRecordingMode();
        map.clear();
        Mockingbird.setNormalReturnForVoid();
        templateManager.configurePages();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(TemplateManager.class);
        templateManager.reconfigurePages();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAddThrowsTemplateExceptionWithAggressiveMocks() throws Throwable {
        TemplateManager templateManager = (TemplateManager) Mockingbird.getProxyObject(TemplateManager.class, true);
        Page page = (Page) Mockingbird.getProxyObject(Page.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(TemplateException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(TemplateException.class));
        Mockingbird.enterNormalMode();
        page.setPath(null);
        Mockingbird.enterTestMode(TemplateManager.class);
        try {
            templateManager.add(page);
            fail("Expected TemplateException to be thrown");
        } catch (TemplateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddThrowsTemplateExceptionWithAggressiveMocks1() throws Throwable {
        TemplateManager templateManager = (TemplateManager) Mockingbird.getProxyObject(TemplateManager.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Page page = (Page) Mockingbird.getProxyObject(Page.class);
        Page page2 = (Page) Mockingbird.getProxyObject(Page.class);
        setPrivateField(templateManager, "pages", map);
        page.setPath("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "startsWith", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", page2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(TemplateException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(TemplateException.class));
        Mockingbird.enterTestMode(TemplateManager.class);
        try {
            templateManager.add(page);
            fail("Expected TemplateException to be thrown");
        } catch (TemplateException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
}

