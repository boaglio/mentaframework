/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:47:42 PM
 * Time to generate: 00:25.033 seconds
 *
 */

package org.mentawai.ajax.renderer;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Locale;
import org.mentawai.util.InjectionUtils;

public class BeanCollectionAjaxRendererAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return BeanCollectionAjaxRenderer.class;
    }
    
    public void testConstructor() throws Throwable {
        String[] attrsAttrs = new String[2];
        String[] subTagsAttrs = new String[2];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer(subTagsAttrs, attrsAttrs);
        assertSame("beanCollectionAjaxRenderer.subTagsAttrs", subTagsAttrs, getPrivateField(beanCollectionAjaxRenderer, "subTagsAttrs"));
        assertEquals("beanCollectionAjaxRenderer.child", "child", getPrivateField(beanCollectionAjaxRenderer, "child"));
        assertSame("beanCollectionAjaxRenderer.attrsAttrs", attrsAttrs, getPrivateField(beanCollectionAjaxRenderer, "attrsAttrs"));
        assertEquals("beanCollectionAjaxRenderer.root", "father", getPrivateField(beanCollectionAjaxRenderer, "root"));
    }
    
    public void testConstructor1() throws Throwable {
        String[] subTagsAttrs = new String[0];
        String[] attrsAttrs = new String[2];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, attrsAttrs);
        assertSame("beanCollectionAjaxRenderer.subTagsAttrs", subTagsAttrs, getPrivateField(beanCollectionAjaxRenderer, "subTagsAttrs"));
        assertEquals("beanCollectionAjaxRenderer.child", "testBeanCollectionAjaxRendererChildTag", getPrivateField(beanCollectionAjaxRenderer, "child"));
        assertSame("beanCollectionAjaxRenderer.attrsAttrs", attrsAttrs, getPrivateField(beanCollectionAjaxRenderer, "attrsAttrs"));
        assertEquals("beanCollectionAjaxRenderer.root", "testBeanCollectionAjaxRendererRootTag", getPrivateField(beanCollectionAjaxRenderer, "root"));
    }
    
    public void testUserConstructor() throws Throwable {
        Object obj = callPrivateMethod("org.mentawai.ajax.renderer.BeanCollectionAjaxRenderer$User", "<init>", new Class[] {String.class, String.class, String.class}, null, new Object[] {"testUserName", "testUserUsername", "testUserEmail"});
        Object actual = callPrivateMethod("org.mentawai.ajax.renderer.BeanCollectionAjaxRenderer$User", "getEmail", new Class[] {}, obj, new Object[] {});
        assertEquals("(Object) obj.getEmail()", "testUserEmail", actual);
    }
    
    public void testEncode() throws Throwable {
        String[] attrsAttrs = new String[2];
        String[] subTagsAttrs = new String[0];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, attrsAttrs);
        String result = beanCollectionAjaxRenderer.encode(new ArrayList(100), Locale.FRANCE, true);
        assertEquals("result", "<testBeanCollectionAjaxRendererRootTag>\n</testBeanCollectionAjaxRendererRootTag>\n", result);
    }
    
    public void testEncode1() throws Throwable {
        Locale loc = Locale.ITALIAN;
        String[] subTagsAttrs = new String[0];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, null);
        Collection obj = new ArrayList(100);
        String result = beanCollectionAjaxRenderer.encode(obj, loc, obj.add("testString"));
        assertEquals("result", "<testBeanCollectionAjaxRendererRootTag>\n   <testBeanCollectionAjaxRendererChildTag >\n   </testBeanCollectionAjaxRendererChildTag>\n</testBeanCollectionAjaxRendererRootTag>\n", result);
    }
    
    public void testEncode2() throws Throwable {
        Locale loc = Locale.SIMPLIFIED_CHINESE;
        String[] subTagsAttrs = new String[0];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, null);
        Collection obj = new ArrayList(100);
        obj.add(new Integer(32));
        String result = beanCollectionAjaxRenderer.encode(obj, loc, false);
        assertEquals("result", "<testBeanCollectionAjaxRendererRootTag><testBeanCollectionAjaxRendererChildTag ></testBeanCollectionAjaxRendererChildTag></testBeanCollectionAjaxRendererRootTag>", result);
    }
    
    public void testEncode3() throws Throwable {
        String[] subTagsAttrs = new String[1];
        String[] attrsAttrs = new String[3];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, attrsAttrs);
        Locale loc = new Locale("testBeanCollectionAjaxRendererParam1", "testBeanCollectionAjaxRendererParam2", "testBeanCollectionAjaxRendererParam3");
        String result = beanCollectionAjaxRenderer.encode(new ArrayList(100), loc, false);
        assertEquals("result", "<testBeanCollectionAjaxRendererRootTag></testBeanCollectionAjaxRendererRootTag>", result);
    }
    
    public void testEncode4() throws Throwable {
        Locale loc = new Locale("testBeanCollectionAjaxRendererParam1", "testBeanCollectionAjaxRendererParam2", "testBeanCollectionAjaxRendererParam3");
        String[] attrsAttrs = new String[0];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", null, attrsAttrs);
        Collection obj = new ArrayList(100);
        String result = beanCollectionAjaxRenderer.encode(obj, loc, obj.add("1 "));
        assertEquals("result", "<testBeanCollectionAjaxRendererRootTag>\n   <testBeanCollectionAjaxRendererChildTag>\n   </testBeanCollectionAjaxRendererChildTag>\n</testBeanCollectionAjaxRendererRootTag>\n", result);
    }
    
    public void testEncode5() throws Throwable {
        String[] subTagsAttrs = new String[0];
        String[] attrsAttrs = new String[0];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, attrsAttrs);
        Collection obj = new ArrayList(100);
        String result = beanCollectionAjaxRenderer.encode(obj, Locale.ITALIAN, obj.add(""));
        assertEquals("result", "<testBeanCollectionAjaxRendererRootTag>\n   <testBeanCollectionAjaxRendererChildTag>\n   </testBeanCollectionAjaxRendererChildTag>\n</testBeanCollectionAjaxRendererRootTag>\n", result);
    }
    
    public void testEncode6() throws Throwable {
        String[] subTagsAttrs = new String[0];
        String[] attrsAttrs = new String[0];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, attrsAttrs);
        Collection obj = new ArrayList(100);
        obj.add("");
        String result = beanCollectionAjaxRenderer.encode(obj, Locale.CHINESE, false);
        assertEquals("result", "<testBeanCollectionAjaxRendererRootTag><testBeanCollectionAjaxRendererChildTag></testBeanCollectionAjaxRendererChildTag></testBeanCollectionAjaxRendererRootTag>", result);
    }
    
    public void testEncode7() throws Throwable {
        Locale loc = Locale.GERMAN;
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", null, null);
        Collection obj = new ArrayList(100);
        boolean pretty = obj.add(Mockingbird.getProxyObject(Object.class));
        Mockingbird.enterTestMode(BeanCollectionAjaxRenderer.class);
        String result = beanCollectionAjaxRenderer.encode(obj, loc, pretty);
        assertEquals("result", "<testBeanCollectionAjaxRendererRootTag>\n   <testBeanCollectionAjaxRendererChildTag >\n   </testBeanCollectionAjaxRendererChildTag>\n</testBeanCollectionAjaxRendererRootTag>\n", result);
    }
    
    public void testEncode8() throws Throwable {
        Locale loc = Locale.GERMAN;
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", null, null);
        Collection obj = new ArrayList(100);
        obj.add(Mockingbird.getProxyObject(Object.class));
        Mockingbird.enterTestMode(BeanCollectionAjaxRenderer.class);
        String result = beanCollectionAjaxRenderer.encode(obj, loc, false);
        assertEquals("result", "<testBeanCollectionAjaxRendererRootTag><testBeanCollectionAjaxRendererChildTag ></testBeanCollectionAjaxRendererChildTag></testBeanCollectionAjaxRendererRootTag>", result);
    }
    
    public void testGetContentType() throws Throwable {
        String[] attrsAttrs = new String[2];
        String[] subTagsAttrs = new String[0];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, attrsAttrs);
        String result = beanCollectionAjaxRenderer.getContentType();
        assertEquals("result", "text/xml", result);
    }
    
    public void testMain() throws Throwable {
        String[] args = new String[0];
        BeanCollectionAjaxRenderer.main(args);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testPrintCR() throws Throwable {
        String[] subTagsAttrs = new String[2];
        String[] attrsAttrs = new String[2];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer(subTagsAttrs, attrsAttrs);
        StringBuilder stringBuilder = new StringBuilder("testBeanCollectionAjaxRendererParam1");
        stringBuilder.insert(0, ' ');
        callPrivateMethod("org.mentawai.ajax.renderer.BeanCollectionAjaxRenderer", "printCR", new Class[] {StringBuilder.class, boolean.class}, beanCollectionAjaxRenderer, new Object[] {stringBuilder, Boolean.FALSE});
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 37, actual);
    }
    
    public void testPrintCR1() throws Throwable {
        String[] subTagsAttrs = new String[2];
        String[] attrsAttrs = new String[2];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer(subTagsAttrs, attrsAttrs);
        StringBuilder stringBuilder = new StringBuilder("testBeanCollectionAjaxRendererParam1");
        stringBuilder.insert(0, ' ');
        callPrivateMethod("org.mentawai.ajax.renderer.BeanCollectionAjaxRenderer", "printCR", new Class[] {StringBuilder.class, boolean.class}, beanCollectionAjaxRenderer, new Object[] {stringBuilder, Boolean.TRUE});
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 38, actual);
    }
    
    public void testPrintTab() throws Throwable {
        String[] subTagsAttrs = new String[1];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer(subTagsAttrs, null);
        StringBuilder stringBuilder = new StringBuilder(100);
        callPrivateMethod("org.mentawai.ajax.renderer.BeanCollectionAjaxRenderer", "printTab", new Class[] {StringBuilder.class, boolean.class, int.class}, beanCollectionAjaxRenderer, new Object[] {stringBuilder, Boolean.TRUE, new Integer(0)});
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 0, actual);
    }
    
    public void testPrintTab1() throws Throwable {
        String[] subTagsAttrs = new String[1];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer(subTagsAttrs, null);
        StringBuilder stringBuilder = new StringBuilder(100);
        callPrivateMethod("org.mentawai.ajax.renderer.BeanCollectionAjaxRenderer", "printTab", new Class[] {StringBuilder.class, boolean.class, int.class}, beanCollectionAjaxRenderer, new Object[] {stringBuilder, Boolean.FALSE, new Integer(100)});
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 0, actual);
    }
    
    public void testPrintTab2() throws Throwable {
        String[] subTagsAttrs = new String[1];
        String[] attrsAttrs = new String[1];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer(subTagsAttrs, attrsAttrs);
        StringBuilder stringBuilder = new StringBuilder(100);
        callPrivateMethod("org.mentawai.ajax.renderer.BeanCollectionAjaxRenderer", "printTab", new Class[] {StringBuilder.class, boolean.class, int.class}, beanCollectionAjaxRenderer, new Object[] {stringBuilder, Boolean.TRUE, new Integer(100)});
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 300, actual);
    }
    
    public void testUserGetEmailWithAggressiveMocks() throws Throwable {
        Object obj = Mockingbird.getProxyObject(Class.forName("org.mentawai.ajax.renderer.BeanCollectionAjaxRenderer$User"), true);
        setPrivateField(obj, "email", "");
        Mockingbird.enterTestMode(Class.forName("org.mentawai.ajax.renderer.BeanCollectionAjaxRenderer$User"));
        String result = (String) callPrivateMethod("org.mentawai.ajax.renderer.BeanCollectionAjaxRenderer$User", "getEmail", new Class[] {}, obj, new Object[] {});
        assertEquals("result", "", result);
    }
    
    public void testUserGetNameWithAggressiveMocks() throws Throwable {
        Object obj = Mockingbird.getProxyObject(Class.forName("org.mentawai.ajax.renderer.BeanCollectionAjaxRenderer$User"), true);
        setPrivateField(obj, "name", "");
        Mockingbird.enterTestMode(Class.forName("org.mentawai.ajax.renderer.BeanCollectionAjaxRenderer$User"));
        String result = (String) callPrivateMethod("org.mentawai.ajax.renderer.BeanCollectionAjaxRenderer$User", "getName", new Class[] {}, obj, new Object[] {});
        assertEquals("result", "", result);
    }
    
    public void testUserGetUsernameWithAggressiveMocks() throws Throwable {
        Object obj = Mockingbird.getProxyObject(Class.forName("org.mentawai.ajax.renderer.BeanCollectionAjaxRenderer$User"), true);
        setPrivateField(obj, "username", "");
        Mockingbird.enterTestMode(Class.forName("org.mentawai.ajax.renderer.BeanCollectionAjaxRenderer$User"));
        String result = (String) callPrivateMethod("org.mentawai.ajax.renderer.BeanCollectionAjaxRenderer$User", "getUsername", new Class[] {}, obj, new Object[] {});
        assertEquals("result", "", result);
    }
    
    public void testEncodeThrowsException() throws Throwable {
        String[] subTagsAttrs = new String[1];
        String[] attrsAttrs = new String[0];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, attrsAttrs);
        Collection obj = new ArrayList(100);
        obj.add("v\n");
        try {
            beanCollectionAjaxRenderer.encode(obj, Locale.GERMAN, false);
            fail("Expected Exception to be thrown");
        } catch (Exception ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(InjectionUtils.class, ex);
        }
    }
    
    public void testEncodeThrowsException1() throws Throwable {
        String[] subTagsAttrs = new String[1];
        String[] attrsAttrs = new String[3];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, attrsAttrs);
        Locale loc = new Locale("testBeanCollectionAjaxRendererParam1", "testBeanCollectionAjaxRendererParam2", "testBeanCollectionAjaxRendererParam3");
        Collection obj = new ArrayList(100);
        try {
            beanCollectionAjaxRenderer.encode(obj, loc, obj.add("1 "));
            fail("Expected Exception to be thrown");
        } catch (Exception ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(InjectionUtils.class, ex);
        }
    }
    
    public void testEncodeThrowsException2() throws Throwable {
        String[] subTagsAttrs = new String[1];
        String[] attrsAttrs = new String[3];
        attrsAttrs[0] = "testString";
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, attrsAttrs);
        Locale loc = new Locale("testBeanCollectionAjaxRendererParam1", "testBeanCollectionAjaxRendererParam2", "testBeanCollectionAjaxRendererParam3");
        Collection obj = new ArrayList(100);
        try {
            beanCollectionAjaxRenderer.encode(obj, loc, obj.add("1 "));
            fail("Expected Exception to be thrown");
        } catch (Exception ex) {
            assertEquals("ex.getMessage()", "Cannot find method to get: class java.lang.String / testString", ex.getMessage());
            assertThrownBy(BeanCollectionAjaxRenderer.class, ex);
        }
    }
    
    public void testEncodeThrowsException3() throws Throwable {
        String[] subTagsAttrs = new String[1];
        subTagsAttrs[0] = "mc 0<P.SL;nQfRQO.4UXwr${Pjc\ta";
        String[] attrsAttrs = new String[0];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, attrsAttrs);
        Collection obj = new ArrayList(100);
        obj.add("v\n");
        try {
            beanCollectionAjaxRenderer.encode(obj, Locale.GERMAN, false);
            fail("Expected Exception to be thrown");
        } catch (Exception ex) {
            assertEquals("ex.getMessage()", "Cannot find method to get: class java.lang.String / mc 0<P.SL;nQfRQO.4UXwr${Pjc\ta", ex.getMessage());
            assertThrownBy(BeanCollectionAjaxRenderer.class, ex);
        }
    }
    
    public void testEncodeThrowsException4() throws Throwable {
        String[] subTagsAttrs = new String[4];
        subTagsAttrs[0] = "<lt";
        String[] attrsAttrs = new String[0];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, attrsAttrs);
        Collection obj = new ArrayList(100);
        try {
            beanCollectionAjaxRenderer.encode(obj, Locale.KOREA, obj.add(new Integer(2)));
            fail("Expected Exception to be thrown");
        } catch (Exception ex) {
            assertEquals("ex.getMessage()", "Cannot find method to get: class java.lang.Integer / <lt", ex.getMessage());
            assertThrownBy(BeanCollectionAjaxRenderer.class, ex);
        }
    }
    
    public void testEncodeThrowsException5() throws Throwable {
        String[] subTagsAttrs = new String[3];
        String[] attrsAttrs = new String[2];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, attrsAttrs);
        Collection obj = new ArrayList(100);
        obj.add("");
        try {
            beanCollectionAjaxRenderer.encode(obj, Locale.SIMPLIFIED_CHINESE, false);
            fail("Expected Exception to be thrown");
        } catch (Exception ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(InjectionUtils.class, ex);
        }
    }
    
    public void testEncodeThrowsException6() throws Throwable {
        Locale loc = Locale.ITALIAN;
        String[] subTagsAttrs = new String[1];
        subTagsAttrs[0] = "testString";
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, null);
        Collection obj = new ArrayList(100);
        try {
            beanCollectionAjaxRenderer.encode(obj, loc, obj.add(""));
            fail("Expected Exception to be thrown");
        } catch (Exception ex) {
            assertEquals("ex.getMessage()", "Cannot find method to get: class java.lang.String / testString", ex.getMessage());
            assertThrownBy(BeanCollectionAjaxRenderer.class, ex);
        }
    }
    
    public void testEncodeThrowsException7() throws Throwable {
        String[] subTagsAttrs = new String[3];
        String[] attrsAttrs = new String[2];
        attrsAttrs[0] = "=\"";
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, attrsAttrs);
        Collection obj = new ArrayList(100);
        obj.add("");
        try {
            beanCollectionAjaxRenderer.encode(obj, Locale.SIMPLIFIED_CHINESE, false);
            fail("Expected Exception to be thrown");
        } catch (Exception ex) {
            assertEquals("ex.getMessage()", "Cannot find method to get: class java.lang.String / =\"", ex.getMessage());
            assertThrownBy(BeanCollectionAjaxRenderer.class, ex);
        }
    }
    
    public void testEncodeThrowsException8() throws Throwable {
        Locale loc = Locale.ITALIAN;
        String[] subTagsAttrs = new String[1];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, null);
        Collection obj = new ArrayList(100);
        try {
            beanCollectionAjaxRenderer.encode(obj, loc, obj.add(""));
            fail("Expected Exception to be thrown");
        } catch (Exception ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(InjectionUtils.class, ex);
        }
    }
    
    public void testEncodeThrowsException9() throws Throwable {
        Locale loc = Locale.CANADA;
        String[] subTagsAttrs = new String[1];
        subTagsAttrs[0] = "testString";
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, null);
        Collection obj = new ArrayList(100);
        obj.add("az");
        try {
            beanCollectionAjaxRenderer.encode(obj, loc, false);
            fail("Expected Exception to be thrown");
        } catch (Exception ex) {
            assertEquals("ex.getMessage()", "Cannot find method to get: class java.lang.String / testString", ex.getMessage());
            assertThrownBy(BeanCollectionAjaxRenderer.class, ex);
        }
    }
    
    public void testEncodeThrowsException10() throws Throwable {
        Locale loc = Locale.CANADA;
        String[] subTagsAttrs = new String[1];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, null);
        Collection obj = new ArrayList(100);
        obj.add("az");
        try {
            beanCollectionAjaxRenderer.encode(obj, loc, false);
            fail("Expected Exception to be thrown");
        } catch (Exception ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(InjectionUtils.class, ex);
        }
    }
    
    public void testEncodeThrowsIllegalArgumentException() throws Throwable {
        String[] subTagsAttrs = new String[1];
        String[] attrsAttrs = new String[3];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, attrsAttrs);
        Locale loc = new Locale("testBeanCollectionAjaxRendererParam1", "testBeanCollectionAjaxRendererParam2", "testBeanCollectionAjaxRendererParam3");
        try {
            beanCollectionAjaxRenderer.encode("testString", loc, true);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Object is not a Collection: testString", ex.getMessage());
            assertThrownBy(BeanCollectionAjaxRenderer.class, ex);
        }
    }
    
    public void testEncodeThrowsNullPointerException() throws Throwable {
        String[] subTagsAttrs = new String[1];
        String[] attrsAttrs = new String[0];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, attrsAttrs);
        Collection obj = new ArrayList(100);
        try {
            beanCollectionAjaxRenderer.encode(obj, Locale.FRANCE, obj.add("testString"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(InjectionUtils.class, ex);
        }
    }
    
    public void testEncodeThrowsNullPointerException1() throws Throwable {
        Locale loc = Locale.SIMPLIFIED_CHINESE;
        String[] subTagsAttrs = new String[0];
        String[] attrsAttrs = new String[0];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer("testBeanCollectionAjaxRendererRootTag", "testBeanCollectionAjaxRendererChildTag", subTagsAttrs, attrsAttrs);
        Collection obj = new ArrayList(100);
        try {
            beanCollectionAjaxRenderer.encode(obj, loc, obj.add(null));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BeanCollectionAjaxRenderer.class, ex);
        }
    }
    
    public void testPrintTabThrowsNullPointerException() throws Throwable {
        String[] subTagsAttrs = new String[1];
        String[] attrsAttrs = new String[1];
        BeanCollectionAjaxRenderer beanCollectionAjaxRenderer = new BeanCollectionAjaxRenderer(subTagsAttrs, attrsAttrs);
        try {
            callPrivateMethod("org.mentawai.ajax.renderer.BeanCollectionAjaxRenderer", "printTab", new Class[] {StringBuilder.class, boolean.class, int.class}, beanCollectionAjaxRenderer, new Object[] {null, Boolean.TRUE, new Integer(100)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BeanCollectionAjaxRenderer.class, ex);
        }
    }
}

