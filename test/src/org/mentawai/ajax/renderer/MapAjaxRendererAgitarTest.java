/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:48:51 PM
 * Time to generate: 00:19.304 seconds
 *
 */

package org.mentawai.ajax.renderer;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.jdom.Attribute;
import org.jdom.Element;
import org.jdom.IllegalNameException;

public class MapAjaxRendererAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MapAjaxRenderer.class;
    }
    
    public void testConstructor() throws Throwable {
        MapAjaxRenderer mapAjaxRenderer = new MapAjaxRenderer();
        assertEquals("mapAjaxRenderer.root", "map", getPrivateField(mapAjaxRenderer, "root"));
        assertEquals("mapAjaxRenderer.child", "entry", getPrivateField(mapAjaxRenderer, "child"));
        assertEquals("mapAjaxRenderer.key", "key", getPrivateField(mapAjaxRenderer, "key"));
    }
    
    public void testConstructor1() throws Throwable {
        MapAjaxRenderer mapAjaxRenderer = new MapAjaxRenderer("testMapAjaxRendererRoot", "testMapAjaxRendererChild", "testMapAjaxRendererKey");
        assertEquals("mapAjaxRenderer.root", "testMapAjaxRendererRoot", getPrivateField(mapAjaxRenderer, "root"));
        assertEquals("mapAjaxRenderer.child", "testMapAjaxRendererChild", getPrivateField(mapAjaxRenderer, "child"));
        assertEquals("mapAjaxRenderer.key", "testMapAjaxRendererKey", getPrivateField(mapAjaxRenderer, "key"));
    }
    
    public void testEncode() throws Throwable {
        MapAjaxRenderer mapAjaxRenderer = new MapAjaxRenderer("testMapAjaxRendererRoot", "testMapAjaxRendererChild", "testMapAjaxRendererKey");
        Map obj = new HashMap(100, 100.0F);
        obj.put("", "testString");
        String result = mapAjaxRenderer.encode(obj, Locale.ENGLISH, true);
        assertEquals("result", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<testMapAjaxRendererRoot>\r\n  <testMapAjaxRendererChild testMapAjaxRendererKey=\"\">testString</testMapAjaxRendererChild>\r\n</testMapAjaxRendererRoot>\r\n\r\n", result);
    }
    
    public void testEncode1() throws Throwable {
        MapAjaxRenderer mapAjaxRenderer = new MapAjaxRenderer("testMapAjaxRendererRoot", "testMapAjaxRendererChild", "testMapAjaxRendererKey");
        String result = mapAjaxRenderer.encode(new HashMap(100, 100.0F), Locale.GERMANY, true);
        assertEquals("result", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<testMapAjaxRendererRoot />\r\n\r\n", result);
    }
    
    public void testGetContentType() throws Throwable {
        MapAjaxRenderer mapAjaxRenderer = new MapAjaxRenderer("testMapAjaxRendererRoot", "testMapAjaxRendererChild", "testMapAjaxRendererKey");
        String result = mapAjaxRenderer.getContentType();
        assertEquals("result", "text/xml", result);
    }
    
    public void testMain() throws Throwable {
        String[] args = new String[1];
        MapAjaxRenderer.main(args);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testEncodeThrowsIllegalArgumentException() throws Throwable {
        MapAjaxRenderer mapAjaxRenderer = new MapAjaxRenderer("testMapAjaxRendererRoot", "testMapAjaxRendererChild", "testMapAjaxRendererKey");
        try {
            mapAjaxRenderer.encode("testString", Locale.ENGLISH, true);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Value is not a Map: testString", ex.getMessage());
            assertThrownBy(MapAjaxRenderer.class, ex);
        }
    }
    
    public void testEncodeThrowsIllegalNameException() throws Throwable {
        Map obj = new HashMap(100, 100.0F);
        obj.put("", "");
        try {
            new MapAjaxRenderer("testMapAjaxRendererRoot", "testMapAjaxRendererChild", "").encode(obj, Locale.FRENCH, true);
            fail("Expected IllegalNameException to be thrown");
        } catch (IllegalNameException ex) {
            assertEquals("ex.getMessage()", "The name \"\" is not legal for JDOM/XML attributes: XML names cannot be null or empty.", ex.getMessage());
            assertThrownBy(Attribute.class, ex);
            assertEquals("exIllegalNameException.CVS_ID", "@(#) $RCSfile: IllegalNameException.java,v $ $Revision: 1.13 $ $Date: 2004/02/06 09:28:30 $ $Name: jdom_1_0 $", getPrivateField(IllegalNameException.class, "CVS_ID"));
        }
    }
    
    public void testEncodeThrowsIllegalNameException1() throws Throwable {
        try {
            new MapAjaxRenderer("", "testMapAjaxRendererChild", "testMapAjaxRendererKey").encode(new HashMap(100, 100.0F), Locale.ITALIAN, true);
            fail("Expected IllegalNameException to be thrown");
        } catch (IllegalNameException ex) {
            assertEquals("ex.getMessage()", "The name \"\" is not legal for JDOM/XML elements: XML names cannot be null or empty.", ex.getMessage());
            assertThrownBy(Element.class, ex);
            assertEquals("exIllegalNameException.CVS_ID", "@(#) $RCSfile: IllegalNameException.java,v $ $Revision: 1.13 $ $Date: 2004/02/06 09:28:30 $ $Name: jdom_1_0 $", getPrivateField(IllegalNameException.class, "CVS_ID"));
        }
    }
    
    public void testEncodeThrowsIllegalNameException2() throws Throwable {
        MapAjaxRenderer mapAjaxRenderer = new MapAjaxRenderer("testMapAjaxRendererRoot", "", "testMapAjaxRendererKey");
        HashMap obj = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, obj, "entrySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.enterTestMode(MapAjaxRenderer.class);
        try {
            mapAjaxRenderer.encode(obj, loc, true);
            fail("Expected IllegalNameException to be thrown");
        } catch (IllegalNameException ex) {
            assertEquals("ex.getMessage()", "The name \"\" is not legal for JDOM/XML elements: XML names cannot be null or empty.", ex.getMessage());
            assertThrownBy(Element.class, ex);
            assertEquals("exIllegalNameException.CVS_ID", "@(#) $RCSfile: IllegalNameException.java,v $ $Revision: 1.13 $ $Date: 2004/02/06 09:28:30 $ $Name: jdom_1_0 $", getPrivateField(IllegalNameException.class, "CVS_ID"));
        }
    }
    
    public void testEncodeThrowsNullPointerException() throws Throwable {
        MapAjaxRenderer mapAjaxRenderer = new MapAjaxRenderer("testMapAjaxRendererRoot", "testMapAjaxRendererChild", "testMapAjaxRendererKey");
        Locale loc = Locale.TRADITIONAL_CHINESE;
        Map obj = new HashMap(100, 100.0F);
        obj.put(null, new Integer(0));
        try {
            mapAjaxRenderer.encode(obj, loc, true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MapAjaxRenderer.class, ex);
        }
    }
    
    public void testEncodeThrowsNullPointerException1() throws Throwable {
        MapAjaxRenderer mapAjaxRenderer = new MapAjaxRenderer("testMapAjaxRendererRoot", "testMapAjaxRendererChild", "testMapAjaxRendererKey");
        Map obj = new HashMap(100, 100.0F);
        obj.put("", null);
        try {
            mapAjaxRenderer.encode(obj, Locale.CANADA_FRENCH, true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MapAjaxRenderer.class, ex);
        }
    }
}

