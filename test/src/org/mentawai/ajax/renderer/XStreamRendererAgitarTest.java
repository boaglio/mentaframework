/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:49:10 PM
 * Time to generate: 00:20.860 seconds
 *
 */

package org.mentawai.ajax.renderer;

import com.agitar.lib.junit.AgitarTestCase;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.converters.ConversionException;
import com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker;
import com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider;
import com.thoughtworks.xstream.io.HierarchicalStreamDriver;
import com.thoughtworks.xstream.io.xml.XppDriver;
import java.util.Locale;
import java.util.Map;

public class XStreamRendererAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return XStreamRenderer.class;
    }
    
    public void testConstructor() throws Throwable {
        XStream xstream = new XStream(new Sun14ReflectionProvider(), new XppDriver());
        XStreamRenderer xStreamRenderer = new XStreamRenderer(xstream);
        assertSame("xStreamRenderer.xstream", xstream, getPrivateField(xStreamRenderer, "xstream"));
    }
    
    public void testConstructor1() throws Throwable {
        XStreamRenderer xStreamRenderer = new XStreamRenderer();
        assertNotNull("xStreamRenderer.xstream.getConverterLookup()", ((XStream) getPrivateField(xStreamRenderer, "xstream")).getConverterLookup());
    }
    
    public void testEncode() throws Throwable {
        XStreamRenderer xStreamRenderer = new XStreamRenderer();
        String result = xStreamRenderer.encode(new Integer(0), Locale.ITALIAN, true);
        assertEquals("result", "<int>0</int>", result);
        assertNotNull("xStreamRenderer.xstream.getConverterLookup()", ((XStream) getPrivateField(xStreamRenderer, "xstream")).getConverterLookup());
    }
    
    public void testGetContentType() throws Throwable {
        String result = new XStreamRenderer().getContentType();
        assertEquals("result", "text/xml", result);
    }
    
    public void testEncodeThrowsConversionException() throws Throwable {
        XStreamRenderer obj = new XStreamRenderer();
        try {
            obj.encode(obj, null, true);
            fail("Expected ConversionException to be thrown");
        } catch (ConversionException ex) {
            assertEquals("ex.getMessage()", "Cannot marshal the XStream instance in action\n---- Debugging information ----\n-------------------------------", ex.getMessage());
            assertThrownBy(SelfStreamingInstanceChecker.class, ex);
            assertEquals("ex.stuff.size()", 0, ((Map) getPrivateField(ex, "stuff")).size());
            assertNull("ex.getCause()", ex.getCause());
            assertNull("ex.getCause()", ex.getCause());
            assertNotNull("obj.xstream.getConverterLookup()", ((XStream) getPrivateField(obj, "xstream")).getConverterLookup());
        }
    }
    
    public void testEncodeThrowsNullPointerException() throws Throwable {
        XStream xstream = new XStream((HierarchicalStreamDriver) null);
        Locale obj = Locale.ITALY;
        XStreamRenderer xStreamRenderer = new XStreamRenderer(xstream);
        try {
            xStreamRenderer.encode(obj, Locale.TAIWAN, true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(XStream.class, ex);
            assertSame("xStreamRenderer.xstream", xstream, getPrivateField(xStreamRenderer, "xstream"));
        }
    }
}

