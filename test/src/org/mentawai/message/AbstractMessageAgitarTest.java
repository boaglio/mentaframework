/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:11:35 PM
 * Time to generate: 00:24.949 seconds
 *
 */

package org.mentawai.message;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.mentawai.list.ListData;
import org.mentawai.list.ListManager;

public class AbstractMessageAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return AbstractMessage.class;
    }
    
    public void testGetContext() throws Throwable {
        MessageContext context = new ClassMessageContext("testString");
        MessageContext result = new DefaultMessage("testAbstractMessageId", context).getContext();
        assertSame("result", context, result);
    }
    
    public void testGetId() throws Throwable {
        String result = new DefaultMessage(100, new ClassMessageContext("testString")).getId();
        assertEquals("result", "100", result);
    }
    
    public void testGetText() throws Throwable {
        MessageContext context = new FileMessageContext("testAbstractMessageFile");
        String[] strings = new String[3];
        Map tokens = new HashMap(100, 100.0F);
        tokens.put("testString", "testString");
        AbstractMessage defaultMessage = new DefaultMessage("testAbstractMessageId", context, tokens, strings);
        String result = defaultMessage.getText(Locale.FRENCH);
        assertEquals("result", "testAbstractMessageId", result);
        assertEquals("(DefaultMessage) defaultMessageAbstractMessage.I18N_PATTERN.pattern()", "\\!([^\\!]+)\\!", ((Pattern) getPrivateField(AbstractMessage.class, "I18N_PATTERN")).pattern());
        assertEquals("(DefaultMessage) defaultMessageAbstractMessage.PARAM_PATTERN.pattern()", "\\{([0-9]+)\\}", ((Pattern) getPrivateField(AbstractMessage.class, "PARAM_PATTERN")).pattern());
        assertEquals("(DefaultMessage) defaultMessageAbstractMessage.PATTERN.pattern()", "\\@([^\\@]+)\\@", ((Pattern) getPrivateField(AbstractMessage.class, "PATTERN")).pattern());
        assertSame("(DefaultMessage) defaultMessage.tokens", tokens, ((DefaultMessage) defaultMessage).tokens);
        assertSame("(DefaultMessage) defaultMessage.context", context, ((DefaultMessage) defaultMessage).context);
    }
    
    public void testGetText1() throws Throwable {
        Map tokens = new HashMap(100, 100.0F);
        tokens.put("testString", "testString");
        MessageContext context = new FileMessageContext("testAbstractMessageFile");
        AbstractMessage defaultMessage = new DefaultMessage("testAbstractMessageId", context, tokens);
        String result = defaultMessage.getText(Locale.SIMPLIFIED_CHINESE);
        assertEquals("result", "testAbstractMessageId", result);
        assertEquals("(DefaultMessage) defaultMessageAbstractMessage.I18N_PATTERN.pattern()", "\\!([^\\!]+)\\!", ((Pattern) getPrivateField(AbstractMessage.class, "I18N_PATTERN")).pattern());
        assertEquals("(DefaultMessage) defaultMessageAbstractMessage.PATTERN.pattern()", "\\@([^\\@]+)\\@", ((Pattern) getPrivateField(AbstractMessage.class, "PATTERN")).pattern());
        assertSame("(DefaultMessage) defaultMessage.tokens", tokens, ((DefaultMessage) defaultMessage).tokens);
        assertSame("(DefaultMessage) defaultMessage.context", context, ((DefaultMessage) defaultMessage).context);
    }
    
    public void testGetText2() throws Throwable {
        Map tokens = new HashMap(100, 100.0F);
        String[] strings = new String[1];
        MessageContext context = new FileMessageContext("testAbstractMessageFile", "testAbstractMessageDir");
        AbstractMessage defaultMessage = new DefaultMessage("testAbstractMessageId", context, tokens, strings);
        String result = defaultMessage.getText(Locale.JAPANESE);
        assertEquals("result", "testAbstractMessageId", result);
        assertEquals("(DefaultMessage) defaultMessageAbstractMessage.I18N_PATTERN.pattern()", "\\!([^\\!]+)\\!", ((Pattern) getPrivateField(AbstractMessage.class, "I18N_PATTERN")).pattern());
        assertEquals("(DefaultMessage) defaultMessageAbstractMessage.PARAM_PATTERN.pattern()", "\\{([0-9]+)\\}", ((Pattern) getPrivateField(AbstractMessage.class, "PARAM_PATTERN")).pattern());
        assertEquals("(DefaultMessage) defaultMessageAbstractMessage.PATTERN.pattern()", "\\@([^\\@]+)\\@", ((Pattern) getPrivateField(AbstractMessage.class, "PATTERN")).pattern());
        assertSame("(DefaultMessage) defaultMessage.tokens", tokens, ((DefaultMessage) defaultMessage).tokens);
        assertSame("(DefaultMessage) defaultMessage.context", context, ((DefaultMessage) defaultMessage).context);
    }
    
    public void testGetText3() throws Throwable {
        String[] strings = new String[0];
        Map tokens = new HashMap(100, 100.0F);
        MessageContext context = new FileMessageContext("testAbstractMessageFile");
        AbstractMessage defaultMessage = new DefaultMessage("testAbstractMessageId", context, tokens, strings);
        String result = defaultMessage.getText(Locale.CHINESE);
        assertEquals("result", "testAbstractMessageId", result);
        assertEquals("(DefaultMessage) defaultMessageAbstractMessage.I18N_PATTERN.pattern()", "\\!([^\\!]+)\\!", ((Pattern) getPrivateField(AbstractMessage.class, "I18N_PATTERN")).pattern());
        assertEquals("(DefaultMessage) defaultMessageAbstractMessage.PATTERN.pattern()", "\\@([^\\@]+)\\@", ((Pattern) getPrivateField(AbstractMessage.class, "PATTERN")).pattern());
        assertSame("(DefaultMessage) defaultMessage.tokens", tokens, ((DefaultMessage) defaultMessage).tokens);
        assertSame("(DefaultMessage) defaultMessage.context", context, ((DefaultMessage) defaultMessage).context);
    }
    
    public void testGetText4() throws Throwable {
        MessageContext context = new FileMessageContext("testAbstractMessageFile", "testAbstractMessageDir");
        AbstractMessage defaultMessage = new DefaultMessage(100, context);
        String result = defaultMessage.getText(Locale.KOREAN);
        assertEquals("result", "100", result);
        assertEquals("(DefaultMessage) defaultMessageAbstractMessage.I18N_PATTERN.pattern()", "\\!([^\\!]+)\\!", ((Pattern) getPrivateField(AbstractMessage.class, "I18N_PATTERN")).pattern());
        assertEquals("(DefaultMessage) defaultMessageAbstractMessage.PATTERN.pattern()", "\\@([^\\@]+)\\@", ((Pattern) getPrivateField(AbstractMessage.class, "PATTERN")).pattern());
        assertSame("(DefaultMessage) defaultMessage.context", context, ((DefaultMessage) defaultMessage).context);
    }
    
    public void testGetText5() throws Throwable {
        Map tokens = new HashMap(100, 100.0F);
        MessageContext context = new FileMessageContext("testAbstractMessageFile", "testAbstractMessageDir");
        AbstractMessage defaultMessage = new DefaultMessage("\\!([^\\!]+)\\!", context, tokens);
        String result = defaultMessage.getText(Locale.ITALIAN);
        assertEquals("result", "\\!([^\\!]+)\\!", result);
        assertEquals("(DefaultMessage) defaultMessageAbstractMessage.I18N_PATTERN.pattern()", "\\!([^\\!]+)\\!", ((Pattern) getPrivateField(AbstractMessage.class, "I18N_PATTERN")).pattern());
        assertEquals("(DefaultMessage) defaultMessageAbstractMessage.PATTERN.pattern()", "\\@([^\\@]+)\\@", ((Pattern) getPrivateField(AbstractMessage.class, "PATTERN")).pattern());
        assertSame("(DefaultMessage) defaultMessage.tokens", tokens, ((DefaultMessage) defaultMessage).tokens);
        assertSame("(DefaultMessage) defaultMessage.context", context, ((DefaultMessage) defaultMessage).context);
    }
    
    public void testGetText6() throws Throwable {
        MessageContext context = new FileMessageContext("testAbstractMessageFile", "testAbstractMessageDir");
        Map tokens = new IdentityHashMap();
        AbstractMessage defaultMessage = new DefaultMessage(100, context, tokens);
        String result = defaultMessage.getText(Locale.JAPANESE);
        assertEquals("result", "100", result);
        assertEquals("(DefaultMessage) defaultMessageAbstractMessage.I18N_PATTERN.pattern()", "\\!([^\\!]+)\\!", ((Pattern) getPrivateField(AbstractMessage.class, "I18N_PATTERN")).pattern());
        assertEquals("(DefaultMessage) defaultMessageAbstractMessage.PATTERN.pattern()", "\\@([^\\@]+)\\@", ((Pattern) getPrivateField(AbstractMessage.class, "PATTERN")).pattern());
        assertSame("(DefaultMessage) defaultMessage.tokens", tokens, ((DefaultMessage) defaultMessage).tokens);
        assertSame("(DefaultMessage) defaultMessage.context", context, ((DefaultMessage) defaultMessage).context);
    }
    
    public void testGetText7() throws Throwable {
        MessageContext context = new FileMessageContext("testAbstractMessageFile");
        AbstractMessage defaultMessage = new DefaultMessage("\\!([^\\!]+)\\!", context);
        String result = defaultMessage.getText(Locale.SIMPLIFIED_CHINESE);
        assertEquals("result", "\\!([^\\!]+)\\!", result);
        assertEquals("(DefaultMessage) defaultMessageAbstractMessage.I18N_PATTERN.pattern()", "\\!([^\\!]+)\\!", ((Pattern) getPrivateField(AbstractMessage.class, "I18N_PATTERN")).pattern());
        assertEquals("(DefaultMessage) defaultMessageAbstractMessage.PATTERN.pattern()", "\\@([^\\@]+)\\@", ((Pattern) getPrivateField(AbstractMessage.class, "PATTERN")).pattern());
        assertSame("(DefaultMessage) defaultMessage.context", context, ((DefaultMessage) defaultMessage).context);
    }
    
    public void testGetTextWithAggressiveMocks() throws Throwable {
        storeStaticField(AbstractMessage.class, "PATTERN");
        storeStaticField(AbstractMessage.class, "I18N_PATTERN");
        storeStaticField(AbstractMessage.class, "PARAM_PATTERN");
        AbstractMessage abstractMessage = (AbstractMessage) Mockingbird.getProxyObject(AbstractMessage.class, true);
        String[] strings = new String[1];
        MessageContext messageContext = (MessageContext) Mockingbird.getProxyObject(MessageContext.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Pattern pattern = (Pattern) Mockingbird.getProxyObject(Pattern.class);
        Pattern pattern2 = (Pattern) Mockingbird.getProxyObject(Pattern.class);
        Pattern pattern3 = (Pattern) Mockingbird.getProxyObject(Pattern.class);
        Matcher matcher = (Matcher) Mockingbird.getProxyObject(Matcher.class);
        NumberFormatException numberFormatException = (NumberFormatException) Mockingbird.getProxyObject(NumberFormatException.class);
        Matcher matcher2 = (Matcher) Mockingbird.getProxyObject(Matcher.class);
        ListData listData = (ListData) Mockingbird.getProxyObject(ListData.class);
        ListData listData2 = (ListData) Mockingbird.getProxyObject(ListData.class);
        ListData listData3 = (ListData) Mockingbird.getProxyObject(ListData.class);
        ListData listData4 = (ListData) Mockingbird.getProxyObject(ListData.class);
        Matcher matcher3 = (Matcher) Mockingbird.getProxyObject(Matcher.class);
        abstractMessage.id = "";
        abstractMessage.params = strings;
        abstractMessage.context = messageContext;
        abstractMessage.setTokens(map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, messageContext, "getMessage", "(java.lang.String,java.util.Locale)java.lang.String", "", 1);
        strings[0] = "";
        setPrivateField(AbstractMessage.class, "PARAM_PATTERN", pattern);
        setPrivateField(AbstractMessage.class, "PATTERN", pattern2);
        setPrivateField(AbstractMessage.class, "I18N_PATTERN", pattern3);
        Mockingbird.setReturnValue(false, pattern, "matcher", "(java.lang.CharSequence)java.util.regex.Matcher", matcher, 1);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, matcher, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, matcher, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, matcher, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        Mockingbird.setException(true, Integer.class, "parseInt", "(java.lang.String)int", numberFormatException, 1);
        Mockingbird.setReturnValue(false, matcher, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replaceFirst", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, matcher, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replaceFirst", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, matcher, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        Mockingbird.setException(true, Integer.class, "parseInt", "(java.lang.String)int", numberFormatException, 1);
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, matcher, "find", "()boolean", new Object[] {}, boolean3, 1);
        Mockingbird.setReturnValue(false, pattern2, "matcher", "(java.lang.CharSequence)java.util.regex.Matcher", matcher2, 1);
        Mockingbird.setReturnValue(false, matcher2, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher2, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        StringTokenizer stringTokenizer = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer);
        Mockingbird.setReturnValue(false, stringTokenizer, "countTokens", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(true, ListManager.class, "getList", "(java.lang.String)org.mentawai.list.ListData", listData, 1);
        Mockingbird.setReturnValue(false, listData, "getValue", "(java.lang.String,java.util.Locale)java.lang.String", null, 1);
        Mockingbird.setReturnValue(false, matcher2, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher2, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        StringTokenizer stringTokenizer2 = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer2);
        Mockingbird.setReturnValue(false, stringTokenizer2, "countTokens", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, stringTokenizer2, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, stringTokenizer2, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(true, ListManager.class, "getList", "(java.lang.String)org.mentawai.list.ListData", listData2, 1);
        Mockingbird.setReturnValue(false, listData2, "getValue", "(java.lang.String,java.util.Locale)java.lang.String", null, 1);
        Mockingbird.setReturnValue(false, matcher2, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher2, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        StringTokenizer stringTokenizer3 = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer3);
        Mockingbird.setReturnValue(false, stringTokenizer3, "countTokens", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, stringTokenizer3, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, stringTokenizer3, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(true, ListManager.class, "getList", "(java.lang.String)org.mentawai.list.ListData", null, 1);
        Mockingbird.setReturnValue(false, matcher2, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher2, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        StringTokenizer stringTokenizer4 = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer4);
        Mockingbird.setReturnValue(false, stringTokenizer4, "countTokens", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, stringTokenizer4, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, stringTokenizer4, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(true, ListManager.class, "getList", "(java.lang.String)org.mentawai.list.ListData", null, 1);
        Mockingbird.setReturnValue(false, matcher2, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher2, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        StringTokenizer stringTokenizer5 = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer5);
        Mockingbird.setReturnValue(false, stringTokenizer5, "countTokens", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, matcher2, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher2, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        StringTokenizer stringTokenizer6 = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer6);
        Mockingbird.setReturnValue(false, stringTokenizer6, "countTokens", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, stringTokenizer6, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, stringTokenizer6, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(true, ListManager.class, "getList", "(java.lang.String)org.mentawai.list.ListData", listData3, 1);
        Mockingbird.setReturnValue(false, listData3, "getValue", "(java.lang.String,java.util.Locale)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replaceFirst", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, matcher2, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher2, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        StringTokenizer stringTokenizer7 = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer7);
        Mockingbird.setReturnValue(false, stringTokenizer7, "countTokens", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, stringTokenizer7, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, stringTokenizer7, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(true, ListManager.class, "getList", "(java.lang.String)org.mentawai.list.ListData", listData4, 1);
        Mockingbird.setReturnValue(false, listData4, "getValue", "(java.lang.String,java.util.Locale)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replaceFirst", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, matcher2, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher2, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        StringTokenizer stringTokenizer8 = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer8);
        Mockingbird.setReturnValue(false, stringTokenizer8, "countTokens", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, matcher2, "find", "()boolean", new Object[] {}, boolean3, 1);
        Mockingbird.setReturnValue(false, pattern3, "matcher", "(java.lang.CharSequence)java.util.regex.Matcher", matcher3, 1);
        Mockingbird.setReturnValue(false, matcher3, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher3, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(false, messageContext, "getMessage", "(java.lang.String,java.util.Locale)java.lang.String", null, 1);
        Mockingbird.setReturnValue(false, matcher3, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher3, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(false, messageContext, "getMessage", "(java.lang.String,java.util.Locale)java.lang.String", null, 1);
        Mockingbird.setReturnValue(false, matcher3, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher3, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(false, messageContext, "getMessage", "(java.lang.String,java.util.Locale)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, matcher3, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher3, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(false, messageContext, "getMessage", "(java.lang.String,java.util.Locale)java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replaceFirst", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, matcher3, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher3, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(false, messageContext, "getMessage", "(java.lang.String,java.util.Locale)java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replaceFirst", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, matcher3, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher3, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(false, messageContext, "getMessage", "(java.lang.String,java.util.Locale)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, matcher3, "find", "()boolean", new Object[] {}, boolean3, 1);
        Mockingbird.setReturnValue(map.isEmpty(), true);
        Mockingbird.enterTestMode(AbstractMessage.class);
        String result = abstractMessage.getText(null);
        assertEquals("result", "", result);
    }
    
    public void testGetTextWithAggressiveMocks1() throws Throwable {
        AbstractMessage abstractMessage = (AbstractMessage) Mockingbird.getProxyObject(AbstractMessage.class, true);
        MessageContext messageContext = (MessageContext) Mockingbird.getProxyObject(MessageContext.class);
        abstractMessage.context = messageContext;
        abstractMessage.id = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, messageContext, "getMessage", "(java.lang.String,java.util.Locale)java.lang.String", null, 1);
        Mockingbird.enterTestMode(AbstractMessage.class);
        String result = abstractMessage.getText(null);
        assertNull("result", result);
    }
    
    public void testGetTextWithAggressiveMocks2() throws Throwable {
        storeStaticField(AbstractMessage.class, "PATTERN");
        storeStaticField(AbstractMessage.class, "I18N_PATTERN");
        AbstractMessage abstractMessage = (AbstractMessage) Mockingbird.getProxyObject(AbstractMessage.class, true);
        MessageContext messageContext = (MessageContext) Mockingbird.getProxyObject(MessageContext.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Pattern pattern = (Pattern) Mockingbird.getProxyObject(Pattern.class);
        Pattern pattern2 = (Pattern) Mockingbird.getProxyObject(Pattern.class);
        Matcher matcher = (Matcher) Mockingbird.getProxyObject(Matcher.class);
        ListData listData = (ListData) Mockingbird.getProxyObject(ListData.class);
        ListData listData2 = (ListData) Mockingbird.getProxyObject(ListData.class);
        ListData listData3 = (ListData) Mockingbird.getProxyObject(ListData.class);
        ListData listData4 = (ListData) Mockingbird.getProxyObject(ListData.class);
        Matcher matcher2 = (Matcher) Mockingbird.getProxyObject(Matcher.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        abstractMessage.id = "";
        abstractMessage.params = null;
        abstractMessage.context = messageContext;
        abstractMessage.setTokens(map);
        abstractMessage.setTokenMarker("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, messageContext, "getMessage", "(java.lang.String,java.util.Locale)java.lang.String", "", 1);
        setPrivateField(AbstractMessage.class, "PATTERN", pattern);
        setPrivateField(AbstractMessage.class, "I18N_PATTERN", pattern2);
        Mockingbird.setReturnValue(false, pattern, "matcher", "(java.lang.CharSequence)java.util.regex.Matcher", matcher, 1);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, matcher, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        StringTokenizer stringTokenizer = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer);
        Mockingbird.setReturnValue(false, stringTokenizer, "countTokens", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, stringTokenizer, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(true, ListManager.class, "getList", "(java.lang.String)org.mentawai.list.ListData", listData, 1);
        Mockingbird.setReturnValue(false, listData, "getValue", "(java.lang.String,java.util.Locale)java.lang.String", null, 1);
        Mockingbird.setReturnValue(false, matcher, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        StringTokenizer stringTokenizer2 = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer2);
        Mockingbird.setReturnValue(false, stringTokenizer2, "countTokens", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, stringTokenizer2, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, stringTokenizer2, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(true, ListManager.class, "getList", "(java.lang.String)org.mentawai.list.ListData", listData2, 1);
        Mockingbird.setReturnValue(false, listData2, "getValue", "(java.lang.String,java.util.Locale)java.lang.String", null, 1);
        Mockingbird.setReturnValue(false, matcher, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        StringTokenizer stringTokenizer3 = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer3);
        Mockingbird.setReturnValue(false, stringTokenizer3, "countTokens", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, stringTokenizer3, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, stringTokenizer3, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(true, ListManager.class, "getList", "(java.lang.String)org.mentawai.list.ListData", null, 1);
        Mockingbird.setReturnValue(false, matcher, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        StringTokenizer stringTokenizer4 = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer4);
        Mockingbird.setReturnValue(false, stringTokenizer4, "countTokens", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, stringTokenizer4, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, stringTokenizer4, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(true, ListManager.class, "getList", "(java.lang.String)org.mentawai.list.ListData", null, 1);
        Mockingbird.setReturnValue(false, matcher, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        StringTokenizer stringTokenizer5 = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer5);
        Mockingbird.setReturnValue(false, stringTokenizer5, "countTokens", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, matcher, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        StringTokenizer stringTokenizer6 = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer6);
        Mockingbird.setReturnValue(false, stringTokenizer6, "countTokens", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, matcher, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        StringTokenizer stringTokenizer7 = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer7);
        Mockingbird.setReturnValue(false, stringTokenizer7, "countTokens", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, stringTokenizer7, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, stringTokenizer7, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(true, ListManager.class, "getList", "(java.lang.String)org.mentawai.list.ListData", listData3, 1);
        Mockingbird.setReturnValue(false, listData3, "getValue", "(java.lang.String,java.util.Locale)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replaceFirst", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, matcher, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        StringTokenizer stringTokenizer8 = (StringTokenizer) Mockingbird.getProxyObject(StringTokenizer.class);
        Mockingbird.replaceObjectForRecording(StringTokenizer.class, "<init>(java.lang.String,java.lang.String)", stringTokenizer8);
        Mockingbird.setReturnValue(false, stringTokenizer8, "countTokens", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, stringTokenizer8, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, stringTokenizer8, "nextToken", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(true, ListManager.class, "getList", "(java.lang.String)org.mentawai.list.ListData", listData4, 1);
        Mockingbird.setReturnValue(false, listData4, "getValue", "(java.lang.String,java.util.Locale)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replaceFirst", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, matcher, "find", "()boolean", new Object[] {}, boolean3, 1);
        Mockingbird.setReturnValue(false, pattern2, "matcher", "(java.lang.CharSequence)java.util.regex.Matcher", matcher2, 1);
        Mockingbird.setReturnValue(false, matcher2, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher2, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(false, messageContext, "getMessage", "(java.lang.String,java.util.Locale)java.lang.String", null, 1);
        Mockingbird.setReturnValue(false, matcher2, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher2, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(false, messageContext, "getMessage", "(java.lang.String,java.util.Locale)java.lang.String", null, 1);
        Mockingbird.setReturnValue(false, matcher2, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher2, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(false, messageContext, "getMessage", "(java.lang.String,java.util.Locale)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, matcher2, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher2, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(false, messageContext, "getMessage", "(java.lang.String,java.util.Locale)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, matcher2, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher2, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(false, messageContext, "getMessage", "(java.lang.String,java.util.Locale)java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replaceFirst", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, matcher2, "find", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, matcher2, "group", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(false, messageContext, "getMessage", "(java.lang.String,java.util.Locale)java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replaceFirst", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, matcher2, "find", "()boolean", new Object[] {}, boolean3, 1);
        Mockingbird.setReturnValue(map.isEmpty(), false);
        Mockingbird.setReturnValue(map.keySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "indexOf", "(java.lang.String)int", new Integer(-2), 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "indexOf", "(java.lang.String)int", new Integer(-2), 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(AbstractMessage.class);
        String result = abstractMessage.getText(null);
        assertEquals("result", "", result);
    }
    
    public void testSetTokenMarker() throws Throwable {
        AbstractMessage defaultMessage = new DefaultMessage(100, new ClassMessageContext("testString"));
        defaultMessage.setTokenMarker("testAbstractMessageTokenMarker");
        assertEquals("(DefaultMessage) defaultMessage.tokenMarker", "testAbstractMessageTokenMarker", ((DefaultMessage) defaultMessage).tokenMarker);
    }
    
    public void testSetTokens() throws Throwable {
        Map tokens = new HashMap(100, 100.0F);
        AbstractMessage defaultMessage = new DefaultMessage(100, (MessageContext) null, new Hashtable(100, 100.0F));
        defaultMessage.setTokens(tokens);
        assertSame("(DefaultMessage) defaultMessage.tokens", tokens, ((DefaultMessage) defaultMessage).tokens);
    }
    
    public void testToString() throws Throwable {
        AbstractMessage defaultMessage = new DefaultMessage(100, new ClasspathMessageContext("testAbstractMessageResource"));
        String result = defaultMessage.toString();
        assertEquals("result", "Message: ID[100] CONTEXT[testAbstractMessageResource]", result);
    }
    
    public void testGetTextThrowsClassCastException() throws Throwable {
        MessageContext context = new FileMessageContext("testAbstractMessageFile");
        AbstractMessage defaultMessage = new DefaultMessage(100, context, new IdentityHashMap(100));
        Map tokens = new HashMap(100, 100.0F);
        tokens.put(new Integer(49), new Integer(-2));
        defaultMessage.setTokens(tokens);
        try {
            defaultMessage.getText(Locale.US);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(AbstractMessage.class, ex);
            assertEquals("(DefaultMessage) defaultMessageAbstractMessage.I18N_PATTERN.pattern()", "\\!([^\\!]+)\\!", ((Pattern) getPrivateField(AbstractMessage.class, "I18N_PATTERN")).pattern());
            assertEquals("(DefaultMessage) defaultMessageAbstractMessage.PATTERN.pattern()", "\\@([^\\@]+)\\@", ((Pattern) getPrivateField(AbstractMessage.class, "PATTERN")).pattern());
            assertSame("(DefaultMessage) defaultMessage.tokens", tokens, ((DefaultMessage) defaultMessage).tokens);
            assertSame("(DefaultMessage) defaultMessage.context", context, ((DefaultMessage) defaultMessage).context);
            assertEquals("(DefaultMessage) defaultMessageAbstractMessage.PARAM_PATTERN.pattern()", "\\{([0-9]+)\\}", ((Pattern) getPrivateField(AbstractMessage.class, "PARAM_PATTERN")).pattern());
        }
    }
    
    public void testGetTextThrowsNullPointerException() throws Throwable {
        MessageContext context = new ClasspathMessageContext("testAbstractMessageResource");
        AbstractMessage defaultMessage = new DefaultMessage(100, context);
        try {
            defaultMessage.getText(Locale.FRENCH);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertSame("(DefaultMessage) defaultMessage.context", context, ((DefaultMessage) defaultMessage).context);
            assertEquals("(DefaultMessage) defaultMessageAbstractMessage.I18N_PATTERN.pattern()", "\\!([^\\!]+)\\!", ((Pattern) getPrivateField(AbstractMessage.class, "I18N_PATTERN")).pattern());
            assertEquals("(DefaultMessage) defaultMessageAbstractMessage.PARAM_PATTERN.pattern()", "\\{([0-9]+)\\}", ((Pattern) getPrivateField(AbstractMessage.class, "PARAM_PATTERN")).pattern());
            assertEquals("(DefaultMessage) defaultMessageAbstractMessage.PATTERN.pattern()", "\\@([^\\@]+)\\@", ((Pattern) getPrivateField(AbstractMessage.class, "PATTERN")).pattern());
            assertNull("(DefaultMessage) defaultMessage.tokens", ((DefaultMessage) defaultMessage).tokens);
        }
    }
}

