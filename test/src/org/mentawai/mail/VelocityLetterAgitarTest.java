/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:12:08 PM
 * Time to generate: 01:04.595 seconds
 *
 */

package org.mentawai.mail;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;
import org.mentawai.core.ApplicationManager;
import org.mentawai.i18n.LocaleManager;

public class VelocityLetterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return VelocityLetter.class;
    }
    
    public void testConstructor() throws Throwable {
        storeStaticField(VelocityLetter.class, "ve");
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(VelocityContext.class, "<init>()", Mockingbird.getProxyObject(VelocityContext.class));
        setPrivateField(VelocityLetter.class, "ve", null);
        Mockingbird.enterNormalMode();
        ApplicationManager.setRealPath("");
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        VelocityEngine velocityEngine = (VelocityEngine) Mockingbird.getProxyObject(VelocityEngine.class);
        Mockingbird.replaceObjectForRecording(VelocityEngine.class, "<init>()", velocityEngine);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", null, 1);
        velocityEngine.init(properties);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode();
        VelocityLetter velocityLetter = new VelocityLetter("");
        assertNotNull("velocityLetter.cacheSubject", getPrivateField(velocityLetter, "cacheSubject"));
        assertNotNull("velocityLetter.cache", getPrivateField(velocityLetter, "cache"));
        assertEquals("velocityLetter.dir", "letters", getPrivateField(velocityLetter, "dir"));
        assertNotNull("velocityLetterVelocityLetter.ve", getPrivateField(VelocityLetter.class, "ve"));
        assertNotNull("velocityLetter.vc", getPrivateField(velocityLetter, "vc"));
        assertEquals("velocityLetter.filename", "", getPrivateField(velocityLetter, "filename"));
    }
    
    public void testGetSubjectWithAggressiveMocks() throws Throwable {
        VelocityLetter velocityLetter = (VelocityLetter) Mockingbird.getProxyObject(VelocityLetter.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(velocityLetter, "cacheSubject", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(LocaleManager.getDefaultLocale(), null);
        Mockingbird.setReturnValue(map.get(null), "");
        Mockingbird.enterTestMode(VelocityLetter.class);
        String result = velocityLetter.getSubject();
        assertEquals("result", "", result);
        assertNotNull("velocityLetter.cacheSubject", getPrivateField(velocityLetter, "cacheSubject"));
    }
    
    public void testGetSubjectWithAggressiveMocks1() throws Throwable {
        storeStaticField(VelocityLetter.class, "SEP");
        VelocityLetter velocityLetter = (VelocityLetter) Mockingbird.getProxyObject(VelocityLetter.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(velocityLetter, "dir", "");
        setPrivateField(velocityLetter, "filename", "");
        setPrivateField(velocityLetter, "cacheSubject", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(null), null);
        Mockingbird.enterNormalMode();
        ApplicationManager.setRealPath("");
        setPrivateField(VelocityLetter.class, "SEP", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(FileInputStream.class));
        Mockingbird.replaceObjectForRecording(InputStreamReader.class, "<init>(java.io.InputStream)", Mockingbird.getProxyObject(InputStreamReader.class));
        BufferedReader bufferedReader = (BufferedReader) Mockingbird.getProxyObject(BufferedReader.class);
        Mockingbird.replaceObjectForRecording(BufferedReader.class, "<init>(java.io.Reader)", bufferedReader);
        Mockingbird.setReturnValue(false, bufferedReader, "readLine", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(VelocityLetter.class);
        String result = velocityLetter.getSubject(null);
        assertEquals("result", "", result);
        assertNotNull("velocityLetter.cacheSubject", getPrivateField(velocityLetter, "cacheSubject"));
    }
    
    public void testGetTextWithAggressiveMocks() throws Throwable {
        VelocityLetter velocityLetter = (VelocityLetter) Mockingbird.getProxyObject(VelocityLetter.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Template template = (Template) Mockingbird.getProxyObject(Template.class);
        setPrivateField(velocityLetter, "cache", map);
        setPrivateField(velocityLetter, "vc", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(LocaleManager.getDefaultLocale(), null);
        Mockingbird.setReturnValue(map.get(null), template);
        StringWriter stringWriter = (StringWriter) Mockingbird.getProxyObject(StringWriter.class);
        Mockingbird.replaceObjectForRecording(StringWriter.class, "<init>()", stringWriter);
        template.merge(null, stringWriter);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, stringWriter, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, velocityLetter, "cutFirstLine", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.enterTestMode(VelocityLetter.class);
        velocityLetter.getText();
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 3 assertions
    }
    
    public void testGetTextWithAggressiveMocks1() throws Throwable {
        storeStaticField(VelocityLetter.class, "ve");
        storeStaticField(VelocityLetter.class, "SEP");
        VelocityLetter velocityLetter = (VelocityLetter) Mockingbird.getProxyObject(VelocityLetter.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        VelocityEngine velocityEngine = (VelocityEngine) Mockingbird.getProxyObject(VelocityEngine.class);
        Template template = (Template) Mockingbird.getProxyObject(Template.class);
        setPrivateField(velocityLetter, "dir", "");
        setPrivateField(velocityLetter, "filename", "");
        setPrivateField(velocityLetter, "cache", map);
        setPrivateField(velocityLetter, "vc", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(null), null);
        setPrivateField(VelocityLetter.class, "SEP", "");
        setPrivateField(VelocityLetter.class, "ve", velocityEngine);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, velocityEngine, "getTemplate", "(java.lang.String)org.apache.velocity.Template", template, 1);
        Mockingbird.setReturnValue(map.put(null, template), null);
        StringWriter stringWriter = (StringWriter) Mockingbird.getProxyObject(StringWriter.class);
        Mockingbird.replaceObjectForRecording(StringWriter.class, "<init>()", stringWriter);
        template.merge(null, stringWriter);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, stringWriter, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, velocityLetter, "cutFirstLine", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.enterTestMode(VelocityLetter.class);
        String result = velocityLetter.getText(null);
        assertEquals("result", "", result);
        assertNotNull("velocityLetter.cache", getPrivateField(velocityLetter, "cache"));
        assertNotNull("velocityLetterVelocityLetter.ve", getPrivateField(VelocityLetter.class, "ve"));
    }
}

