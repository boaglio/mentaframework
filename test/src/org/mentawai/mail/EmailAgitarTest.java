/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:11:04 PM
 * Time to generate: 00:46.458 seconds
 *
 */

package org.mentawai.mail;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import javax.mail.Address;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Store;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import org.mentawai.util.StringUtils;

public class EmailAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return Email.class;
    }
    
    public void testAddBccWithAggressiveMocks() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        email.bccList = list;
        email.setCharset("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Email.class, "createInternetAddress", "(java.lang.String,java.lang.String,java.lang.String)javax.mail.internet.InternetAddress", null, 1);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.enterTestMode(Email.class);
        Email result = email.addBcc("");
        assertNotNull("result", result);
    }
    
    public void testAddCcWithAggressiveMocks() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        email.ccList = list;
        email.setCharset("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Email.class, "createInternetAddress", "(java.lang.String,java.lang.String,java.lang.String)javax.mail.internet.InternetAddress", null, 1);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.enterTestMode(Email.class);
        Email result = email.addCc("");
        assertNotNull("result", result);
    }
    
    public void testAddHeader() throws Throwable {
        Map map = new HashMap(100, 100.0F);
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(map);
        Mockingbird.enterTestMode(Email.class);
        htmlEmail.addHeader("testEmailName", "testEmailValue");
        assertSame("htmlEmail.headers", map, htmlEmail.headers);
    }
    
    public void testAddReplyToWithAggressiveMocks() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        email.replyList = list;
        email.setCharset("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Email.class, "createInternetAddress", "(java.lang.String,java.lang.String,java.lang.String)javax.mail.internet.InternetAddress", null, 1);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.enterTestMode(Email.class);
        Email result = email.addReplyTo("");
        assertNotNull("result", result);
    }
    
    public void testAddToWithAggressiveMocks() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        email.toList = list;
        email.setCharset("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Email.class, "createInternetAddress", "(java.lang.String,java.lang.String,java.lang.String)javax.mail.internet.InternetAddress", null, 1);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.enterTestMode(Email.class);
        Email result = email.addTo("");
        assertNotNull("result", result);
    }
    
    public void testCreateInternetAddress() throws Throwable {
        InternetAddress result = (InternetAddress) callPrivateMethod("org.mentawai.mail.Email", "createInternetAddress", new Class[] {String.class, String.class, String.class}, null, new Object[] {"()<>,;:\\\"[]@", "testEmailName", ""});
        assertEquals("result.getAddress()", "()<>,;:\\\"[]@", result.getAddress());
    }
    
    public void testCreateInternetAddress1() throws Throwable {
        InternetAddress result = (InternetAddress) callPrivateMethod("org.mentawai.mail.Email", "createInternetAddress", new Class[] {String.class, String.class, String.class}, null, new Object[] {"()<>,;:\\\"[]@", "testEmailName", "testEmailCharset"});
        assertEquals("result.getAddress()", "()<>,;:\\\"[]@", result.getAddress());
    }
    
    public void testGetMailSessionWithAggressiveMocks() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", Mockingbird.getProxyObject(Properties.class));
        Mockingbird.enterNormalMode();
        email.setMailSession(null);
        email.smtpPort = "";
        email.setHostName("");
        email.setDebug(false);
        email.bounceAddress = "";
        email.setAuthenticator(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperties", "()java.util.Properties", new Object[] {}, null, 1);
        Mockingbird.enterNormalMode();
        Email.setSSLConnection(false);
        Mockingbird.enterRecordingMode();
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>(java.util.Properties)", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.transport.protocol", "smtp"}, null, 1);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(Session.getInstance(properties, null), null);
        Mockingbird.enterTestMode(Email.class);
        Session result = email.getMailSession();
        assertNull("result", result);
    }
    
    public void testGetMailSessionWithAggressiveMocks1() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        Authenticator authenticator = (Authenticator) Mockingbird.getProxyObject(Authenticator.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", Mockingbird.getProxyObject(Properties.class));
        Mockingbird.enterNormalMode();
        email.setMailSession(null);
        email.setHostName("");
        email.setAuthenticator(authenticator);
        email.bounceAddress = "";
        email.setDebug(false);
        email.smtpPort = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperties", "()java.util.Properties", new Object[] {}, null, 1);
        Mockingbird.enterNormalMode();
        Email.setSSLConnection(false);
        Mockingbird.enterRecordingMode();
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>(java.util.Properties)", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.transport.protocol", "smtp"}, null, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, properties, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"mail.host"}, "", 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.smtp.auth", "true"}, null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(true, Session.class, "getInstance", "(java.util.Properties,javax.mail.Authenticator)javax.mail.Session", null, 1);
        Mockingbird.enterTestMode(Email.class);
        Session result = email.getMailSession();
        assertNull("result", result);
    }
    
    public void testGetMailSessionWithAggressiveMocks2() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        Authenticator authenticator = (Authenticator) Mockingbird.getProxyObject(Authenticator.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", Mockingbird.getProxyObject(Properties.class));
        Mockingbird.enterNormalMode();
        email.setMailSession(null);
        email.setHostName("");
        email.setAuthenticator(authenticator);
        email.bounceAddress = "";
        email.smtpPort = "";
        email.setDebug(false);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperties", "()java.util.Properties", new Object[] {}, null, 1);
        Mockingbird.enterNormalMode();
        Email.setSSLConnection(true);
        Email.setFactoryFallBack("");
        Mockingbird.enterRecordingMode();
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>(java.util.Properties)", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.transport.protocol", "smtp"}, null, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, properties, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"mail.host"}, "", 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.smtp.port", ""}, null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.smtp.auth", "true"}, null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", null, 1);
        Object[] objects = new Object[] {"mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory"};
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", objects, null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(true, Session.class, "getInstance", "(java.util.Properties,javax.mail.Authenticator)javax.mail.Session", null, 1);
        Mockingbird.enterTestMode(Email.class);
        Session result = email.getMailSession();
        assertNull("result", result);
    }
    
    public void testGetMailSessionWithAggressiveMocks3() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", Mockingbird.getProxyObject(Properties.class));
        AccessControlException accessControlException = (AccessControlException) Mockingbird.getProxyObject(AccessControlException.class);
        Mockingbird.enterNormalMode();
        email.setMailSession(null);
        email.setHostName("");
        email.setAuthenticator(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperties", "()java.util.Properties", new Object[] {}, null, 1);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>(java.util.Properties)", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.transport.protocol", "smtp"}, null, 1);
        Mockingbird.setException(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", accessControlException, 1);
        Mockingbird.setReturnValue(false, accessControlException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(Session.getInstance(properties, null), null);
        Mockingbird.enterTestMode(Email.class);
        Session result = email.getMailSession();
        assertNull("result", result);
    }
    
    public void testGetMailSessionWithAggressiveMocks4() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        Authenticator authenticator = (Authenticator) Mockingbird.getProxyObject(Authenticator.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", Mockingbird.getProxyObject(Properties.class));
        Mockingbird.enterNormalMode();
        email.setMailSession(null);
        email.setHostName("");
        email.setAuthenticator(authenticator);
        email.bounceAddress = null;
        email.smtpPort = "";
        email.setDebug(false);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperties", "()java.util.Properties", new Object[] {}, null, 1);
        Mockingbird.enterNormalMode();
        Email.setSSLConnection(true);
        Email.setFactoryFallBack("");
        Mockingbird.enterRecordingMode();
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>(java.util.Properties)", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.transport.protocol", "smtp"}, null, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, properties, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"mail.host"}, "", 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.smtp.auth", "true"}, null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", null, 1);
        Object[] objects = new Object[] {"mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory"};
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", objects, null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.smtp.socketFactory.fallback", ""}, null, 1);
        Mockingbird.setReturnValue(true, Session.class, "getInstance", "(java.util.Properties,javax.mail.Authenticator)javax.mail.Session", null, 1);
        Mockingbird.enterTestMode(Email.class);
        Session result = email.getMailSession();
        assertNull("result", result);
    }
    
    public void testGetMailSessionWithAggressiveMocks5() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        email.setMailSession((Session) Mockingbird.getProxyObject(Session.class));
        Mockingbird.enterTestMode(Email.class);
        Session result = email.getMailSession();
        assertNull("result.getProperties()", result.getProperties());
    }
    
    public void testGetSentDate() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        htmlEmail.setBounceAddress("testEmailEmail");
        Mockingbird.enterTestMode(Email.class);
        Date result = htmlEmail.getSentDate();
        assertNotNull("result", result);
    }
    
    public void testGetSentDateWithAggressiveMocks() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        email.setSentDate((Date) Mockingbird.getProxyObject(Date.class));
        Mockingbird.enterTestMode(Email.class);
        Date result = email.getSentDate();
        assertNotNull("result", result);
    }
    
    public void testSendWithAggressiveMocks() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        InternetAddress internetAddress = new InternetAddress();
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", Mockingbird.getProxyObject(Properties.class));
        AccessControlException accessControlException = (AccessControlException) Mockingbird.getProxyObject(AccessControlException.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Date date = (Date) Mockingbird.getProxyObject(Date.class);
        Mockingbird.enterNormalMode();
        email.setMailSession(null);
        email.setHostName("");
        email.setAuthenticator(null);
        email.subject = "";
        email.content = null;
        email.setContent(mimeMultipart);
        email.fromAddress = internetAddress;
        email.toList = list;
        email.ccList = list2;
        email.bccList = list3;
        email.replyList = list4;
        email.headers = map;
        email.popBeforeSmtp = false;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperties", "()java.util.Properties", new Object[] {}, null, 1);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>(java.util.Properties)", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.transport.protocol", "smtp"}, null, 1);
        Mockingbird.setException(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", accessControlException, 1);
        Mockingbird.setReturnValue(false, accessControlException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(Session.getInstance(properties, null), null);
        MimeMessage mimeMessage = (MimeMessage) Mockingbird.getProxyObject(MimeMessage.class);
        Mockingbird.replaceObjectForRecording(MimeMessage.class, "<init>(javax.mail.Session)", mimeMessage);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setContent", "(javax.mail.Multipart)void", null, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setFrom", "(javax.mail.Address)void", null, 1);
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(false, list, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list2, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list3, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list4, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(map.size(), 1);
        Mockingbird.setReturnValue(map.keySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(mimeMessage.getSentDate(), date);
        Transport.send(mimeMessage);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Email.class);
        email.send();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSendWithAggressiveMocks1() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        InternetAddress internetAddress = new InternetAddress();
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", Mockingbird.getProxyObject(Properties.class));
        AccessControlException accessControlException = (AccessControlException) Mockingbird.getProxyObject(AccessControlException.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Date date = (Date) Mockingbird.getProxyObject(Date.class);
        Mockingbird.enterNormalMode();
        email.setMailSession(null);
        email.setHostName("");
        email.setAuthenticator(null);
        email.setCharset("");
        email.subject = "";
        email.content = null;
        email.setContent(mimeMultipart);
        email.fromAddress = internetAddress;
        email.toList = list;
        email.ccList = list2;
        email.bccList = list3;
        email.replyList = list4;
        email.headers = map;
        email.popBeforeSmtp = false;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperties", "()java.util.Properties", new Object[] {}, null, 1);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>(java.util.Properties)", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.transport.protocol", "smtp"}, null, 1);
        Mockingbird.setException(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", accessControlException, 1);
        Mockingbird.setReturnValue(false, accessControlException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(Session.getInstance(properties, null), null);
        MimeMessage mimeMessage = (MimeMessage) Mockingbird.getProxyObject(MimeMessage.class);
        Mockingbird.replaceObjectForRecording(MimeMessage.class, "<init>(javax.mail.Session)", mimeMessage);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setSubject", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setContent", "(javax.mail.Multipart)void", null, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setFrom", "(javax.mail.Address)void", null, 1);
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(false, list, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list2, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list3, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list4, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(map.size(), 1);
        Mockingbird.setReturnValue(map.keySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(mimeMessage.getSentDate(), date);
        Transport.send(mimeMessage);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Email.class);
        email.send();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSendWithAggressiveMocks2() throws Throwable {
        storeStaticField(Message.RecipientType.class, "BCC");
        storeStaticField(Message.RecipientType.class, "CC");
        storeStaticField(Message.RecipientType.class, "TO");
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        InternetAddress internetAddress = new InternetAddress();
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", Mockingbird.getProxyObject(Properties.class));
        AccessControlException accessControlException = (AccessControlException) Mockingbird.getProxyObject(AccessControlException.class);
        Address[] internetAddresss = new InternetAddress[0];
        Address[] internetAddresss2 = new InternetAddress[0];
        Address[] internetAddresss3 = new InternetAddress[0];
        Address[] internetAddresss4 = new InternetAddress[0];
        Mockingbird.enterNormalMode();
        email.setMailSession(null);
        email.setHostName("");
        email.setAuthenticator(null);
        email.setCharset("");
        email.subject = "";
        email.content = null;
        email.setContent(null);
        email.fromAddress = internetAddress;
        email.toList = list;
        email.ccList = list2;
        email.bccList = list3;
        email.replyList = list4;
        email.headers = map;
        email.setSentDate(null);
        email.popBeforeSmtp = false;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperties", "()java.util.Properties", new Object[] {}, null, 1);
        setPrivateField(Message.RecipientType.class, "TO", null);
        setPrivateField(Message.RecipientType.class, "CC", null);
        setPrivateField(Message.RecipientType.class, "BCC", null);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>(java.util.Properties)", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.transport.protocol", "smtp"}, null, 1);
        Mockingbird.setException(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", accessControlException, 1);
        Mockingbird.setReturnValue(false, accessControlException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(Session.getInstance(properties, null), null);
        MimeMessage mimeMessage = (MimeMessage) Mockingbird.getProxyObject(MimeMessage.class);
        Mockingbird.replaceObjectForRecording(MimeMessage.class, "<init>(javax.mail.Session)", mimeMessage);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setSubject", "(java.lang.String)void", null, 1);
        mimeMessage.setContent("", "text/plain");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, mimeMessage, "setFrom", "(javax.mail.Address)void", null, 1);
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(false, list, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss, 1);
        mimeMessage.setRecipients(null, internetAddresss);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(false, list2, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss2, 1);
        mimeMessage.setRecipients(null, internetAddresss2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(false, list3, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss3, 1);
        mimeMessage.setRecipients(null, internetAddresss3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list4.size(), 1);
        Mockingbird.setReturnValue(false, list4, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss4, 1);
        mimeMessage.setReplyTo(internetAddresss4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, map, "size", "()int", new Integer(0), 1);
        Mockingbird.setReturnValue(mimeMessage.getSentDate(), null);
        Date date = (Date) Mockingbird.getProxyObject(Date.class);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", date);
        mimeMessage.setSentDate(date);
        Mockingbird.setNormalReturnForVoid();
        Transport.send(mimeMessage);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Email.class);
        email.send();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSendWithAggressiveMocks3() throws Throwable {
        storeStaticField(Message.RecipientType.class, "BCC");
        storeStaticField(Message.RecipientType.class, "CC");
        storeStaticField(Message.RecipientType.class, "TO");
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        InternetAddress internetAddress = new InternetAddress();
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", Mockingbird.getProxyObject(Properties.class));
        AccessControlException accessControlException = (AccessControlException) Mockingbird.getProxyObject(AccessControlException.class);
        Session session = (Session) Mockingbird.getProxyObject(Session.class);
        Address[] internetAddresss = new InternetAddress[0];
        Address[] internetAddresss2 = new InternetAddress[0];
        Address[] internetAddresss3 = new InternetAddress[0];
        Address[] internetAddresss4 = new InternetAddress[0];
        Store store = (Store) Mockingbird.getProxyObject(Store.class);
        Mockingbird.enterNormalMode();
        email.setMailSession(null);
        email.setHostName("");
        email.setAuthenticator(null);
        email.setCharset("");
        email.subject = "";
        email.content = null;
        email.setContent(null);
        email.fromAddress = internetAddress;
        email.toList = list;
        email.ccList = list2;
        email.bccList = list3;
        email.replyList = list4;
        email.headers = map;
        email.setSentDate(null);
        email.popBeforeSmtp = true;
        email.popHost = "";
        email.popUsername = "";
        email.popPassword = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperties", "()java.util.Properties", new Object[] {}, null, 1);
        setPrivateField(Message.RecipientType.class, "TO", null);
        setPrivateField(Message.RecipientType.class, "CC", null);
        setPrivateField(Message.RecipientType.class, "BCC", null);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>(java.util.Properties)", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.transport.protocol", "smtp"}, null, 1);
        Mockingbird.setException(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", accessControlException, 1);
        Mockingbird.setReturnValue(false, accessControlException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(Session.getInstance(properties, null), session);
        MimeMessage mimeMessage = (MimeMessage) Mockingbird.getProxyObject(MimeMessage.class);
        Mockingbird.replaceObjectForRecording(MimeMessage.class, "<init>(javax.mail.Session)", mimeMessage);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setSubject", "(java.lang.String)void", null, 1);
        mimeMessage.setContent("", "text/plain");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, mimeMessage, "setFrom", "(javax.mail.Address)void", null, 1);
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(false, list, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss, 1);
        mimeMessage.setRecipients(null, internetAddresss);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(false, list2, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss2, 1);
        mimeMessage.setRecipients(null, internetAddresss2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(false, list3, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss3, 1);
        mimeMessage.setRecipients(null, internetAddresss3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list4.size(), 1);
        Mockingbird.setReturnValue(false, list4, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss4, 1);
        mimeMessage.setReplyTo(internetAddresss4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, map, "size", "()int", new Integer(0), 1);
        Mockingbird.setReturnValue(mimeMessage.getSentDate(), null);
        Date date = (Date) Mockingbird.getProxyObject(Date.class);
        Mockingbird.replaceObjectForRecording(Date.class, "<init>()", date);
        mimeMessage.setSentDate(date);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(session.getStore("pop3"), store);
        Mockingbird.setReturnValue(false, store, "connect", "(java.lang.String,java.lang.String,java.lang.String)void", null, 1);
        Transport.send(mimeMessage);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Email.class);
        email.send();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSendWithAggressiveMocks4() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        InternetAddress internetAddress = new InternetAddress();
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", Mockingbird.getProxyObject(Properties.class));
        AccessControlException accessControlException = (AccessControlException) Mockingbird.getProxyObject(AccessControlException.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Date date = (Date) Mockingbird.getProxyObject(Date.class);
        Mockingbird.enterNormalMode();
        email.setMailSession(null);
        email.setHostName("");
        email.setAuthenticator(null);
        email.subject = "";
        email.setCharset("");
        email.content = null;
        email.setContent(mimeMultipart);
        email.fromAddress = internetAddress;
        email.toList = list;
        email.ccList = list2;
        email.bccList = list3;
        email.replyList = list4;
        email.headers = map;
        email.popBeforeSmtp = false;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperties", "()java.util.Properties", new Object[] {}, null, 1);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>(java.util.Properties)", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.transport.protocol", "smtp"}, null, 1);
        Mockingbird.setException(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", accessControlException, 1);
        Mockingbird.setReturnValue(false, accessControlException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(Session.getInstance(properties, null), null);
        MimeMessage mimeMessage = (MimeMessage) Mockingbird.getProxyObject(MimeMessage.class);
        Mockingbird.replaceObjectForRecording(MimeMessage.class, "<init>(javax.mail.Session)", mimeMessage);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setSubject", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setContent", "(javax.mail.Multipart)void", null, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setFrom", "(javax.mail.Address)void", null, 1);
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(false, list, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list2, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list3, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list4, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(map.size(), 1);
        Mockingbird.setReturnValue(map.keySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(mimeMessage.getSentDate(), date);
        Transport.send(mimeMessage);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Email.class);
        email.send();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSendWithAggressiveMocks5() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        Object obj = Mockingbird.getProxyObject(Object.class);
        InternetAddress internetAddress = new InternetAddress();
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", Mockingbird.getProxyObject(Properties.class));
        AccessControlException accessControlException = (AccessControlException) Mockingbird.getProxyObject(AccessControlException.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Date date = (Date) Mockingbird.getProxyObject(Date.class);
        Mockingbird.enterNormalMode();
        email.setMailSession(null);
        email.setHostName("");
        email.setAuthenticator(null);
        email.setCharset("");
        email.subject = "";
        email.content = obj;
        email.contentType = "";
        email.fromAddress = internetAddress;
        email.toList = list;
        email.ccList = list2;
        email.bccList = list3;
        email.replyList = list4;
        email.headers = map;
        email.popBeforeSmtp = false;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperties", "()java.util.Properties", new Object[] {}, null, 1);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>(java.util.Properties)", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.transport.protocol", "smtp"}, null, 1);
        Mockingbird.setException(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", accessControlException, 1);
        Mockingbird.setReturnValue(false, accessControlException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(Session.getInstance(properties, null), null);
        MimeMessage mimeMessage = (MimeMessage) Mockingbird.getProxyObject(MimeMessage.class);
        Mockingbird.replaceObjectForRecording(MimeMessage.class, "<init>(javax.mail.Session)", mimeMessage);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setSubject", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setContent", "(java.lang.Object,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setFrom", "(javax.mail.Address)void", null, 1);
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(false, list, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list2, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list3, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list4, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(map.size(), 1);
        Mockingbird.setReturnValue(map.keySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(mimeMessage.getSentDate(), date);
        Transport.send(mimeMessage);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Email.class);
        email.send();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSendWithAggressiveMocks6() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        InternetAddress internetAddress = new InternetAddress();
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", Mockingbird.getProxyObject(Properties.class));
        AccessControlException accessControlException = (AccessControlException) Mockingbird.getProxyObject(AccessControlException.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Date date = (Date) Mockingbird.getProxyObject(Date.class);
        Mockingbird.enterNormalMode();
        email.setMailSession(null);
        email.setHostName("");
        email.setAuthenticator(null);
        email.setCharset("");
        email.subject = "";
        email.content = null;
        email.setContent(null);
        email.fromAddress = internetAddress;
        email.toList = list;
        email.ccList = list2;
        email.bccList = list3;
        email.replyList = list4;
        email.headers = map;
        email.popBeforeSmtp = false;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperties", "()java.util.Properties", new Object[] {}, null, 1);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>(java.util.Properties)", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.transport.protocol", "smtp"}, null, 1);
        Mockingbird.setException(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", accessControlException, 1);
        Mockingbird.setReturnValue(false, accessControlException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(Session.getInstance(properties, null), null);
        MimeMessage mimeMessage = (MimeMessage) Mockingbird.getProxyObject(MimeMessage.class);
        Mockingbird.replaceObjectForRecording(MimeMessage.class, "<init>(javax.mail.Session)", mimeMessage);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setSubject", "(java.lang.String)void", null, 1);
        mimeMessage.setContent("", "text/plain");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, mimeMessage, "setFrom", "(javax.mail.Address)void", null, 1);
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(false, list, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list2, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list3, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list4, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(map.size(), 1);
        Mockingbird.setReturnValue(map.keySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(mimeMessage.getSentDate(), date);
        Transport.send(mimeMessage);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Email.class);
        email.send();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSendWithAggressiveMocks7() throws Throwable {
        storeStaticField(Message.RecipientType.class, "TO");
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        InternetAddress internetAddress = new InternetAddress();
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", Mockingbird.getProxyObject(Properties.class));
        AccessControlException accessControlException = (AccessControlException) Mockingbird.getProxyObject(AccessControlException.class);
        Address[] internetAddresss = new InternetAddress[0];
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Date date = (Date) Mockingbird.getProxyObject(Date.class);
        Mockingbird.enterNormalMode();
        email.setMailSession(null);
        email.setHostName("");
        email.setAuthenticator(null);
        email.setCharset("");
        email.subject = "";
        email.content = null;
        email.setContent(null);
        email.fromAddress = internetAddress;
        email.toList = list;
        email.ccList = list2;
        email.bccList = list3;
        email.replyList = list4;
        email.headers = map;
        email.popBeforeSmtp = false;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperties", "()java.util.Properties", new Object[] {}, null, 1);
        setPrivateField(Message.RecipientType.class, "TO", null);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>(java.util.Properties)", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.transport.protocol", "smtp"}, null, 1);
        Mockingbird.setException(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", accessControlException, 1);
        Mockingbird.setReturnValue(false, accessControlException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(Session.getInstance(properties, null), null);
        MimeMessage mimeMessage = (MimeMessage) Mockingbird.getProxyObject(MimeMessage.class);
        Mockingbird.replaceObjectForRecording(MimeMessage.class, "<init>(javax.mail.Session)", mimeMessage);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setSubject", "(java.lang.String)void", null, 1);
        mimeMessage.setContent("", "text/plain");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, mimeMessage, "setFrom", "(javax.mail.Address)void", null, 1);
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(false, list, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss, 1);
        mimeMessage.setRecipients(null, internetAddresss);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, list2, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list3, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list4, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(map.size(), 1);
        Mockingbird.setReturnValue(map.keySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(mimeMessage.getSentDate(), date);
        Transport.send(mimeMessage);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Email.class);
        email.send();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSendWithAggressiveMocks8() throws Throwable {
        storeStaticField(Message.RecipientType.class, "CC");
        storeStaticField(Message.RecipientType.class, "TO");
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        InternetAddress internetAddress = new InternetAddress();
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", Mockingbird.getProxyObject(Properties.class));
        AccessControlException accessControlException = (AccessControlException) Mockingbird.getProxyObject(AccessControlException.class);
        Address[] internetAddresss = new InternetAddress[0];
        Address[] internetAddresss2 = new InternetAddress[0];
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Date date = (Date) Mockingbird.getProxyObject(Date.class);
        Mockingbird.enterNormalMode();
        email.setMailSession(null);
        email.setHostName("");
        email.setAuthenticator(null);
        email.setCharset("");
        email.subject = "";
        email.content = null;
        email.setContent(null);
        email.fromAddress = internetAddress;
        email.toList = list;
        email.ccList = list2;
        email.bccList = list3;
        email.replyList = list4;
        email.headers = map;
        email.popBeforeSmtp = false;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperties", "()java.util.Properties", new Object[] {}, null, 1);
        setPrivateField(Message.RecipientType.class, "TO", null);
        setPrivateField(Message.RecipientType.class, "CC", null);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>(java.util.Properties)", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.transport.protocol", "smtp"}, null, 1);
        Mockingbird.setException(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", accessControlException, 1);
        Mockingbird.setReturnValue(false, accessControlException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(Session.getInstance(properties, null), null);
        MimeMessage mimeMessage = (MimeMessage) Mockingbird.getProxyObject(MimeMessage.class);
        Mockingbird.replaceObjectForRecording(MimeMessage.class, "<init>(javax.mail.Session)", mimeMessage);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setSubject", "(java.lang.String)void", null, 1);
        mimeMessage.setContent("", "text/plain");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, mimeMessage, "setFrom", "(javax.mail.Address)void", null, 1);
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(false, list, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss, 1);
        mimeMessage.setRecipients(null, internetAddresss);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(false, list2, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss2, 1);
        mimeMessage.setRecipients(null, internetAddresss2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, list3, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list4, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(map.size(), 1);
        Mockingbird.setReturnValue(map.keySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(mimeMessage.getSentDate(), date);
        Transport.send(mimeMessage);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Email.class);
        email.send();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSendWithAggressiveMocks9() throws Throwable {
        storeStaticField(Message.RecipientType.class, "BCC");
        storeStaticField(Message.RecipientType.class, "CC");
        storeStaticField(Message.RecipientType.class, "TO");
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        InternetAddress internetAddress = new InternetAddress();
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", Mockingbird.getProxyObject(Properties.class));
        AccessControlException accessControlException = (AccessControlException) Mockingbird.getProxyObject(AccessControlException.class);
        Address[] internetAddresss = new InternetAddress[0];
        Address[] internetAddresss2 = new InternetAddress[0];
        Address[] internetAddresss3 = new InternetAddress[0];
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Date date = (Date) Mockingbird.getProxyObject(Date.class);
        Mockingbird.enterNormalMode();
        email.setMailSession(null);
        email.setHostName("");
        email.setAuthenticator(null);
        email.setCharset("");
        email.subject = "";
        email.content = null;
        email.setContent(null);
        email.fromAddress = internetAddress;
        email.toList = list;
        email.ccList = list2;
        email.bccList = list3;
        email.replyList = list4;
        email.headers = map;
        email.popBeforeSmtp = false;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperties", "()java.util.Properties", new Object[] {}, null, 1);
        setPrivateField(Message.RecipientType.class, "TO", null);
        setPrivateField(Message.RecipientType.class, "CC", null);
        setPrivateField(Message.RecipientType.class, "BCC", null);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>(java.util.Properties)", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.transport.protocol", "smtp"}, null, 1);
        Mockingbird.setException(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", accessControlException, 1);
        Mockingbird.setReturnValue(false, accessControlException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(Session.getInstance(properties, null), null);
        MimeMessage mimeMessage = (MimeMessage) Mockingbird.getProxyObject(MimeMessage.class);
        Mockingbird.replaceObjectForRecording(MimeMessage.class, "<init>(javax.mail.Session)", mimeMessage);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setSubject", "(java.lang.String)void", null, 1);
        mimeMessage.setContent("", "text/plain");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, mimeMessage, "setFrom", "(javax.mail.Address)void", null, 1);
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(false, list, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss, 1);
        mimeMessage.setRecipients(null, internetAddresss);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(false, list2, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss2, 1);
        mimeMessage.setRecipients(null, internetAddresss2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(false, list3, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss3, 1);
        mimeMessage.setRecipients(null, internetAddresss3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, list4, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(map.size(), 1);
        Mockingbird.setReturnValue(map.keySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(mimeMessage.getSentDate(), date);
        Transport.send(mimeMessage);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Email.class);
        email.send();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSendWithAggressiveMocks10() throws Throwable {
        storeStaticField(Message.RecipientType.class, "BCC");
        storeStaticField(Message.RecipientType.class, "CC");
        storeStaticField(Message.RecipientType.class, "TO");
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        InternetAddress internetAddress = new InternetAddress();
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", Mockingbird.getProxyObject(Properties.class));
        AccessControlException accessControlException = (AccessControlException) Mockingbird.getProxyObject(AccessControlException.class);
        Address[] internetAddresss = new InternetAddress[0];
        Address[] internetAddresss2 = new InternetAddress[0];
        Address[] internetAddresss3 = new InternetAddress[0];
        Address[] internetAddresss4 = new InternetAddress[0];
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Date date = (Date) Mockingbird.getProxyObject(Date.class);
        Mockingbird.enterNormalMode();
        email.setMailSession(null);
        email.setHostName("");
        email.setAuthenticator(null);
        email.setCharset("");
        email.subject = "";
        email.content = null;
        email.setContent(null);
        email.fromAddress = internetAddress;
        email.toList = list;
        email.ccList = list2;
        email.bccList = list3;
        email.replyList = list4;
        email.headers = map;
        email.popBeforeSmtp = false;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperties", "()java.util.Properties", new Object[] {}, null, 1);
        setPrivateField(Message.RecipientType.class, "TO", null);
        setPrivateField(Message.RecipientType.class, "CC", null);
        setPrivateField(Message.RecipientType.class, "BCC", null);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>(java.util.Properties)", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.transport.protocol", "smtp"}, null, 1);
        Mockingbird.setException(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", accessControlException, 1);
        Mockingbird.setReturnValue(false, accessControlException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(Session.getInstance(properties, null), null);
        MimeMessage mimeMessage = (MimeMessage) Mockingbird.getProxyObject(MimeMessage.class);
        Mockingbird.replaceObjectForRecording(MimeMessage.class, "<init>(javax.mail.Session)", mimeMessage);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setSubject", "(java.lang.String)void", null, 1);
        mimeMessage.setContent("", "text/plain");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, mimeMessage, "setFrom", "(javax.mail.Address)void", null, 1);
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(false, list, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss, 1);
        mimeMessage.setRecipients(null, internetAddresss);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(false, list2, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss2, 1);
        mimeMessage.setRecipients(null, internetAddresss2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(false, list3, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss3, 1);
        mimeMessage.setRecipients(null, internetAddresss3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list4.size(), 1);
        Mockingbird.setReturnValue(false, list4, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss4, 1);
        mimeMessage.setReplyTo(internetAddresss4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(map.size(), 1);
        Mockingbird.setReturnValue(map.keySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(mimeMessage.getSentDate(), date);
        Transport.send(mimeMessage);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Email.class);
        email.send();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSendWithAggressiveMocks11() throws Throwable {
        storeStaticField(Message.RecipientType.class, "BCC");
        storeStaticField(Message.RecipientType.class, "CC");
        storeStaticField(Message.RecipientType.class, "TO");
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        InternetAddress internetAddress = new InternetAddress();
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", Mockingbird.getProxyObject(Properties.class));
        AccessControlException accessControlException = (AccessControlException) Mockingbird.getProxyObject(AccessControlException.class);
        Address[] internetAddresss = new InternetAddress[0];
        Address[] internetAddresss2 = new InternetAddress[0];
        Address[] internetAddresss3 = new InternetAddress[0];
        Address[] internetAddresss4 = new InternetAddress[0];
        Date date = (Date) Mockingbird.getProxyObject(Date.class);
        Mockingbird.enterNormalMode();
        email.setMailSession(null);
        email.setHostName("");
        email.setAuthenticator(null);
        email.setCharset("");
        email.subject = "";
        email.content = null;
        email.setContent(null);
        email.fromAddress = internetAddress;
        email.toList = list;
        email.ccList = list2;
        email.bccList = list3;
        email.replyList = list4;
        email.headers = map;
        email.popBeforeSmtp = false;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperties", "()java.util.Properties", new Object[] {}, null, 1);
        setPrivateField(Message.RecipientType.class, "TO", null);
        setPrivateField(Message.RecipientType.class, "CC", null);
        setPrivateField(Message.RecipientType.class, "BCC", null);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>(java.util.Properties)", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.transport.protocol", "smtp"}, null, 1);
        Mockingbird.setException(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", accessControlException, 1);
        Mockingbird.setReturnValue(false, accessControlException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(Session.getInstance(properties, null), null);
        MimeMessage mimeMessage = (MimeMessage) Mockingbird.getProxyObject(MimeMessage.class);
        Mockingbird.replaceObjectForRecording(MimeMessage.class, "<init>(javax.mail.Session)", mimeMessage);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setSubject", "(java.lang.String)void", null, 1);
        mimeMessage.setContent("", "text/plain");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, mimeMessage, "setFrom", "(javax.mail.Address)void", null, 1);
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(false, list, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss, 1);
        mimeMessage.setRecipients(null, internetAddresss);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(false, list2, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss2, 1);
        mimeMessage.setRecipients(null, internetAddresss2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(false, list3, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss3, 1);
        mimeMessage.setRecipients(null, internetAddresss3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list4.size(), 1);
        Mockingbird.setReturnValue(false, list4, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss4, 1);
        mimeMessage.setReplyTo(internetAddresss4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, map, "size", "()int", new Integer(0), 1);
        Mockingbird.setReturnValue(mimeMessage.getSentDate(), date);
        Transport.send(mimeMessage);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Email.class);
        email.send();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetAuthentication() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        htmlEmail.setBounceAddress("testEmailEmail");
        Mockingbird.enterRecordingMode();
        htmlEmail.setAuthenticator(null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(Email.class);
        htmlEmail.setAuthentication("testEmailUserName", "testEmailPassword");
        Object object = callPrivateMethod("javax.mail.Authenticator", "getDefaultUserName", new Class[] {}, htmlEmail.authenticator, new Object[] {});
        assertNull("htmlEmail.authenticator.getDefaultUserName()", object);
    }
    
    public void testSetBccWithAggressiveMocks() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(collection.isEmpty(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(java.util.Collection)", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.enterTestMode(Email.class);
        Email result = email.setBcc(collection);
        assertNotNull("result", result);
    }
    
    public void testSetBounceAddress() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        Mockingbird.enterTestMode(Email.class);
        HtmlEmail result = (HtmlEmail) htmlEmail.setBounceAddress("testEmailEmail");
        assertSame("result", htmlEmail, result);
        assertEquals("htmlEmail.bounceAddress", "testEmailEmail", htmlEmail.bounceAddress);
    }
    
    public void testSetCcWithAggressiveMocks() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(collection.isEmpty(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(java.util.Collection)", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.enterTestMode(Email.class);
        Email result = email.setCc(collection);
        assertNotNull("result", result);
    }
    
    public void testSetCharset() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        Mockingbird.enterTestMode(Email.class);
        htmlEmail.setCharset("testEmailNewCharset");
        assertEquals("htmlEmail.charset", "testEmailNewCharset", htmlEmail.charset);
    }
    
    public void testSetContent() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        MimeMultipart aMimeMultipart = new MimeMultipart();
        Mockingbird.enterTestMode(Email.class);
        htmlEmail.setContent(aMimeMultipart);
        assertSame("htmlEmail.emailBody", aMimeMultipart, htmlEmail.emailBody);
    }
    
    public void testSetContent1() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        Mockingbird.enterTestMode(Email.class);
        htmlEmail.setContent("testString", "testEmailAContentType");
        assertEquals("htmlEmail.content", "testString", htmlEmail.content);
        assertEquals("htmlEmail.contentType", "testEmailAContentType", htmlEmail.contentType);
    }
    
    public void testSetContent2() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        Mockingbird.enterTestMode(Email.class);
        htmlEmail.setContent(null, "; charset=\"cYtF)w[t2Bp@iNJ=VWBye4AhbJz2x");
        assertNull("htmlEmail.content", htmlEmail.content);
        assertEquals("htmlEmail.charset", "\"cYtF)w[t2Bp@iNJ=VWBye4AhbJz2x", htmlEmail.charset);
        assertEquals("htmlEmail.contentType", "; charset=\"cYtF)w[t2Bp@iNJ=VWBye4AhbJz2x", htmlEmail.contentType);
    }
    
    public void testSetContent3() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        Mockingbird.enterTestMode(Email.class);
        htmlEmail.setContent(null, "");
        assertNull("htmlEmail.content", htmlEmail.content);
        assertNull("htmlEmail.contentType", htmlEmail.contentType);
    }
    
    public void testSetContentWithAggressiveMocks() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(StringUtils.isNotEmpty(""), true);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toLowerCase", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toLowerCase", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String,int)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.enterTestMode(Email.class);
        email.setContent(null, "");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetDebug() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        Mockingbird.enterTestMode(Email.class);
        htmlEmail.setDebug(true);
        assertTrue("htmlEmail.debug", htmlEmail.debug);
    }
    
    public void testSetDefaultAuthentication() throws Throwable {
        Email.setDefaultAuthentication("testEmailUser", "testEmailPass");
        assertEquals("Email.def_password", "testEmailPass", getPrivateField(Email.class, "def_password"));
        assertEquals("Email.def_username", "testEmailUser", getPrivateField(Email.class, "def_username"));
    }
    
    public void testSetDefaultBounceAddress() throws Throwable {
        Email.setDefaultBounceAddress("testEmailEmail");
        assertEquals("Email.def_bounce_email", "testEmailEmail", getPrivateField(Email.class, "def_bounce_email"));
    }
    
    public void testSetDefaultCharset() throws Throwable {
        Email.setDefaultCharset("testEmailCharset");
        assertEquals("Email.def_charset", "testEmailCharset", getPrivateField(Email.class, "def_charset"));
    }
    
    public void testSetDefaultFrom() throws Throwable {
        Email.setDefaultFrom("testEmailEmail", "testEmailName");
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testSetDefaultFrom1() throws Throwable {
        Email.setDefaultFrom("()<>,;:\\\"[]@", "testEmailName");
        assertNotNull("Email.def_from", getPrivateField(Email.class, "def_from"));
    }
    
    public void testSetDefaultFrom2() throws Throwable {
        Email.setDefaultFrom("()<>,;:\\\"[]@", "testEmailName");
        assertNotNull("Email.def_from", getPrivateField(Email.class, "def_from"));
    }
    
    public void testSetDefaultFrom3() throws Throwable {
        Email.setDefaultFrom("testEmailEmail", "testEmailName");
        assertNotNull("Email.def_from", getPrivateField(Email.class, "def_from"));
    }
    
    public void testSetDefaultHostName() throws Throwable {
        Email.setDefaultHostName("testEmailHost");
        assertEquals("Email.def_hostname", "testEmailHost", getPrivateField(Email.class, "def_hostname"));
    }
    
    public void testSetDefaultPort() throws Throwable {
        Email.setDefaultPort(100);
        assertEquals("Email.def_port", "100", getPrivateField(Email.class, "def_port"));
    }
    
    public void testSetDefaultPort1() throws Throwable {
        Email.setDefaultPort("testEmailPort");
        assertEquals("Email.def_port", "testEmailPort", getPrivateField(Email.class, "def_port"));
    }
    
    public void testSetFactoryFallBack() throws Throwable {
        Email.setFactoryFallBack("testEmailActive");
        assertEquals("Email.factory_fallback", "testEmailActive", getPrivateField(Email.class, "factory_fallback"));
    }
    
    public void testSetFromWithAggressiveMocks() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        email.setCharset("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Email.class, "createInternetAddress", "(java.lang.String,java.lang.String,java.lang.String)javax.mail.internet.InternetAddress", null, 1);
        Mockingbird.enterTestMode(Email.class);
        Email result = email.setFrom("");
        assertNotNull("result", result);
    }
    
    public void testSetHeaders() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        Map map = new HashMap(1000, 1000.0F);
        map.put("testString", "testString");
        Mockingbird.enterTestMode(Email.class);
        htmlEmail.setHeaders(map);
        assertSame("htmlEmail.headers", map, htmlEmail.headers);
    }
    
    public void testSetHostName() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        htmlEmail.setSubject("testEmailASubject");
        Mockingbird.enterTestMode(Email.class);
        htmlEmail.setHostName("testEmailAHostName");
        assertEquals("htmlEmail.hostName", "testEmailAHostName", htmlEmail.hostName);
    }
    
    public void testSetMailSessionWithAggressiveMocks() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        Mockingbird.enterTestMode(Email.class);
        email.setMailSession(null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetPopBeforeSmtp() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        Mockingbird.enterTestMode(Email.class);
        htmlEmail.setPopBeforeSmtp(true, "testEmailNewPopHost", "testEmailNewPopUsername", "testEmailNewPopPassword");
        assertEquals("htmlEmail.popUsername", "testEmailNewPopUsername", htmlEmail.popUsername);
        assertTrue("htmlEmail.popBeforeSmtp", htmlEmail.popBeforeSmtp);
        assertEquals("htmlEmail.popHost", "testEmailNewPopHost", htmlEmail.popHost);
        assertEquals("htmlEmail.popPassword", "testEmailNewPopPassword", htmlEmail.popPassword);
    }
    
    public void testSetSSLConnection() throws Throwable {
        Email.setSSLConnection(true);
        assertTrue("Email.ssl_connection", ((Boolean) getPrivateField(Email.class, "ssl_connection")).booleanValue());
    }
    
    public void testSetSentDate() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        htmlEmail.setBounceAddress("testEmailEmail");
        Mockingbird.enterTestMode(Email.class);
        htmlEmail.setSentDate(null);
        assertNull("htmlEmail.sentDate", htmlEmail.sentDate);
    }
    
    public void testSetSmtpPort() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        htmlEmail.setSubject("testEmailASubject");
        Mockingbird.enterTestMode(Email.class);
        htmlEmail.setSmtpPort(1);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetSubject() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        Mockingbird.enterTestMode(Email.class);
        HtmlEmail result = (HtmlEmail) htmlEmail.setSubject("testEmailASubject");
        assertSame("result", htmlEmail, result);
        assertEquals("htmlEmail.subject", "testEmailASubject", htmlEmail.subject);
    }
    
    public void testSetToWithAggressiveMocks() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(collection.isEmpty(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(java.util.Collection)", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.enterTestMode(Email.class);
        Email result = email.setTo(collection);
        assertNotNull("result", result);
    }
    
    public void testToInternetAddressArrayWithAggressiveMocks() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        InternetAddress[] internetAddresss = new InternetAddress[0];
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, list, "toArray", "(java.lang.Object[])java.lang.Object[]", internetAddresss, 1);
        Mockingbird.enterTestMode(Email.class);
        InternetAddress[] result = email.toInternetAddressArray(list);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testAddBccThrowsEmailException() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(htmlEmail.addBcc("attachments", ""), (Throwable) Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(Email.class);
        try {
            htmlEmail.addBcc("attachments");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddBccThrowsEmailException1() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setContent(null, "; charset=\"cYtF)w[t2Bp@iNJ=VWBye4AhbJz2x");
        Mockingbird.enterRecordingMode();
        Object internetAddress = callPrivateMethod("org.mentawai.mail.Email", "createInternetAddress", new Class[] {String.class, String.class, String.class}, null, new Object[] {"", "testString", "\"cYtF)w[t2Bp@iNJ=VWBye4AhbJz2x"});
        Mockingbird.setException(internetAddress, (Throwable) Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(Email.class);
        try {
            htmlEmail.addBcc("", "testString");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddBccThrowsNullPointerException() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        htmlEmail.setCharset("testEmailNewCharset");
        htmlEmail.setSubject("testEmailASubject");
        Mockingbird.enterTestMode(Email.class);
        try {
            htmlEmail.addBcc("()<>,;:\\\"[]@", "testEmailName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Email.class, ex);
            assertNull("htmlEmail.bccList", htmlEmail.bccList);
        }
    }
    
    public void testAddCcThrowsEmailException() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setContent(null, "; charset=\"cYtF)w[t2Bp@iNJ=VWBye4AhbJz2x");
        Mockingbird.enterRecordingMode();
        Object internetAddress = callPrivateMethod("org.mentawai.mail.Email", "createInternetAddress", new Class[] {String.class, String.class, String.class}, null, new Object[] {"testString", "localost", "\"cYtF)w[t2Bp@iNJ=VWBye4AhbJz2x"});
        Mockingbird.setException(internetAddress, (Throwable) Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(Email.class);
        try {
            htmlEmail.addCc("testString", "localost");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddCcThrowsEmailException1() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(htmlEmail.addCc("testString", ""), (Throwable) Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(Email.class);
        try {
            htmlEmail.addCc("testString");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddHeaderThrowsIllegalArgumentException() throws Throwable {
        Map map = new HashMap(100, 100.0F);
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(map);
        Mockingbird.enterTestMode(Email.class);
        try {
            htmlEmail.addHeader("", "testEmailValue");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "name can not be null", ex.getMessage());
            assertThrownBy(Email.class, ex);
            assertSame("htmlEmail.headers", map, htmlEmail.headers);
        }
    }
    
    public void testAddHeaderThrowsIllegalArgumentException1() throws Throwable {
        Map map = new HashMap(100, 100.0F);
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(map);
        Mockingbird.enterTestMode(Email.class);
        try {
            htmlEmail.addHeader("testEmailName", "");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "value can not be null", ex.getMessage());
            assertThrownBy(Email.class, ex);
            assertSame("htmlEmail.headers", map, htmlEmail.headers);
        }
    }
    
    public void testAddReplyToThrowsEmailException() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(htmlEmail.addReplyTo("testString", ""), (Throwable) Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(Email.class);
        try {
            htmlEmail.addReplyTo("testString");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddReplyToThrowsEmailException1() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setContent(null, "; charset=\"cYtF)w[t2Bp@iNJ=VWBye4AhbJz2x");
        Mockingbird.enterRecordingMode();
        Object internetAddress = callPrivateMethod("org.mentawai.mail.Email", "createInternetAddress", new Class[] {String.class, String.class, String.class}, null, new Object[] {"testString", "Illegal routke-addr", "\"cYtF)w[t2Bp@iNJ=VWBye4AhbJz2x"});
        Mockingbird.setException(internetAddress, (Throwable) Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(Email.class);
        try {
            htmlEmail.addReplyTo("testString", "Illegal routke-addr");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddToThrowsEmailException() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setContent(null, "; charset=\"cYtF)w[t2Bp@iNJ=VWBye4AhbJz2x");
        Mockingbird.enterRecordingMode();
        Object internetAddress = callPrivateMethod("org.mentawai.mail.Email", "createInternetAddress", new Class[] {String.class, String.class, String.class}, null, new Object[] {"Missing local name", "us-a8cii", "\"cYtF)w[t2Bp@iNJ=VWBye4AhbJz2x"});
        Mockingbird.setException(internetAddress, (Throwable) Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(Email.class);
        try {
            htmlEmail.addTo("Missing local name", "us-a8cii");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddToThrowsEmailException1() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(htmlEmail.addTo("text/plan", ""), (Throwable) Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(Email.class);
        try {
            htmlEmail.addTo("text/plan");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testCreateInternetAddressThrowsEmailException() throws Throwable {
        try {
            callPrivateMethod("org.mentawai.mail.Email", "createInternetAddress", new Class[] {String.class, String.class, String.class}, null, new Object[] {"testEmailEmail", "", "testEmailCharset"});
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertEquals("ex.getMessage()", "javax.mail.internet.AddressException: Missing final '@domain' in string ``testEmailEmail''", ex.getMessage());
            assertThrownBy(InternetAddress.class, ex);
        }
    }
    
    public void testCreateInternetAddressThrowsEmailException1() throws Throwable {
        try {
            callPrivateMethod("org.mentawai.mail.Email", "createInternetAddress", new Class[] {String.class, String.class, String.class}, null, new Object[] {"testEmailEmail", "testEmailName", "testEmailCharset"});
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertEquals("ex.getMessage()", "javax.mail.internet.AddressException: Missing final '@domain' in string ``testEmailEmail''", ex.getMessage());
            assertThrownBy(InternetAddress.class, ex);
        }
    }
    
    public void testCreateInternetAddressThrowsEmailException2() throws Throwable {
        try {
            callPrivateMethod("org.mentawai.mail.Email", "createInternetAddress", new Class[] {String.class, String.class, String.class}, null, new Object[] {"testEmailEmail", "", ""});
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertEquals("ex.getMessage()", "javax.mail.internet.AddressException: Missing final '@domain' in string ``testEmailEmail''", ex.getMessage());
            assertThrownBy(InternetAddress.class, ex);
        }
    }
    
    public void testCreateInternetAddressThrowsEmailException3() throws Throwable {
        try {
            callPrivateMethod("org.mentawai.mail.Email", "createInternetAddress", new Class[] {String.class, String.class, String.class}, null, new Object[] {"testEmailEmail", "testEmailName", ""});
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertEquals("ex.getMessage()", "javax.mail.internet.AddressException: Missing final '@domain' in string ``testEmailEmail''", ex.getMessage());
            assertThrownBy(InternetAddress.class, ex);
        }
    }
    
    public void testGetMailSessionThrowsEmailException() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        Mockingbird.enterTestMode(Email.class);
        try {
            htmlEmail.getMailSession();
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertEquals("ex.getMessage()", "Cannot find valid hostname for mail session", ex.getMessage());
            assertThrownBy(Email.class, ex);
            assertNull("htmlEmail.hostName", htmlEmail.hostName);
            assertNull("htmlEmail.session", getPrivateField(htmlEmail, "session"));
        }
    }
    
    public void testSendThrowsEmailExceptionWithAggressiveMocks() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", Mockingbird.getProxyObject(Properties.class));
        AccessControlException accessControlException = (AccessControlException) Mockingbird.getProxyObject(AccessControlException.class);
        Mockingbird.enterNormalMode();
        email.setMailSession(null);
        email.setHostName("");
        email.setAuthenticator(null);
        email.setCharset("");
        email.subject = "";
        email.content = null;
        email.setContent(mimeMultipart);
        email.fromAddress = null;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperties", "()java.util.Properties", new Object[] {}, null, 1);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>(java.util.Properties)", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.transport.protocol", "smtp"}, null, 1);
        Mockingbird.setException(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", accessControlException, 1);
        Mockingbird.setReturnValue(false, accessControlException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(Session.getInstance(properties, null), null);
        MimeMessage mimeMessage = (MimeMessage) Mockingbird.getProxyObject(MimeMessage.class);
        Mockingbird.replaceObjectForRecording(MimeMessage.class, "<init>(javax.mail.Session)", mimeMessage);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setSubject", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setContent", "(javax.mail.Multipart)void", null, 1);
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(Email.class);
        try {
            email.send();
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testSendThrowsEmailExceptionWithAggressiveMocks1() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        InternetAddress internetAddress = new InternetAddress();
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", Mockingbird.getProxyObject(Properties.class));
        AccessControlException accessControlException = (AccessControlException) Mockingbird.getProxyObject(AccessControlException.class);
        Mockingbird.enterNormalMode();
        email.setMailSession(null);
        email.setHostName("");
        email.setAuthenticator(null);
        email.setCharset("");
        email.subject = "";
        email.content = null;
        email.setContent(mimeMultipart);
        email.fromAddress = internetAddress;
        email.toList = list;
        email.ccList = list2;
        email.bccList = list3;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperties", "()java.util.Properties", new Object[] {}, null, 1);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>(java.util.Properties)", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.transport.protocol", "smtp"}, null, 1);
        Mockingbird.setException(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", accessControlException, 1);
        Mockingbird.setReturnValue(false, accessControlException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(Session.getInstance(properties, null), null);
        MimeMessage mimeMessage = (MimeMessage) Mockingbird.getProxyObject(MimeMessage.class);
        Mockingbird.replaceObjectForRecording(MimeMessage.class, "<init>(javax.mail.Session)", mimeMessage);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setSubject", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setContent", "(javax.mail.Multipart)void", null, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setFrom", "(javax.mail.Address)void", null, 1);
        Mockingbird.setReturnValue(false, list, "size", "()int", new Integer(-3), 1);
        Mockingbird.setReturnValue(false, list2, "size", "()int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, list3, "size", "()int", new Integer(2), 1);
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(Email.class);
        try {
            email.send();
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testSendThrowsEmailExceptionWithAggressiveMocks2() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>()", Mockingbird.getProxyObject(Properties.class));
        AccessControlException accessControlException = (AccessControlException) Mockingbird.getProxyObject(AccessControlException.class);
        MessagingException messagingException = (MessagingException) Mockingbird.getProxyObject(MessagingException.class);
        Mockingbird.enterNormalMode();
        email.setMailSession(null);
        email.setHostName("");
        email.setAuthenticator(null);
        email.subject = "";
        email.setCharset("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperties", "()java.util.Properties", new Object[] {}, null, 1);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        Mockingbird.replaceObjectForRecording(Properties.class, "<init>(java.util.Properties)", properties);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"mail.transport.protocol", "smtp"}, null, 1);
        Mockingbird.setException(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", accessControlException, 1);
        Mockingbird.setReturnValue(false, accessControlException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(Session.getInstance(properties, null), null);
        MimeMessage mimeMessage = (MimeMessage) Mockingbird.getProxyObject(MimeMessage.class);
        Mockingbird.replaceObjectForRecording(MimeMessage.class, "<init>(javax.mail.Session)", mimeMessage);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setException(false, mimeMessage, "setSubject", "(java.lang.String,java.lang.String)void", messagingException, 1);
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.Throwable)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(Email.class);
        try {
            email.send();
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testSetBccThrowsEmailExceptionWithAggressiveMocks() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(Email.class);
        try {
            email.setBcc(null);
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testSetBccThrowsEmailExceptionWithAggressiveMocks1() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(collection.isEmpty(), true);
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(Email.class);
        try {
            email.setBcc(collection);
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testSetCcThrowsEmailExceptionWithAggressiveMocks() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(Email.class);
        try {
            email.setCc(null);
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testSetCcThrowsEmailExceptionWithAggressiveMocks1() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(collection.isEmpty(), true);
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(Email.class);
        try {
            email.setCc(collection);
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testSetFromThrowsEmailException() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(new HashMap(100, 100.0F));
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(htmlEmail.setFrom("testString", ""), (Throwable) Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(Email.class);
        try {
            htmlEmail.setFrom("testString");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testSetHeadersThrowsIllegalArgumentException() throws Throwable {
        Map map = new HashMap(100, 100.0F);
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(map);
        Map map2 = new HashMap(1000, 1000.0F);
        map2.put("", "testString");
        Mockingbird.enterTestMode(Email.class);
        try {
            htmlEmail.setHeaders(map2);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "name can not be null", ex.getMessage());
            assertThrownBy(Email.class, ex);
            assertSame("htmlEmail.headers", map, htmlEmail.headers);
            assertEquals("(HashMap) map2.size()", 1, map2.size());
        }
    }
    
    public void testSetHeadersThrowsIllegalArgumentException1() throws Throwable {
        Map map = new HashMap(100, 100.0F);
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHeaders(map);
        Map map2 = new HashMap(0, 1000.0F);
        map2.put("", "testString");
        map2.put("testString", "h\n");
        Mockingbird.enterTestMode(Email.class);
        try {
            htmlEmail.setHeaders(map2);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "name can not be null", ex.getMessage());
            assertThrownBy(Email.class, ex);
            assertSame("htmlEmail.headers", map, htmlEmail.headers);
            assertEquals("(HashMap) map2.size()", 2, map2.size());
        }
    }
    
    public void testSetHeadersThrowsIllegalArgumentExceptionWithAggressiveMocks() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.keySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.replaceObjectForRecording(IllegalArgumentException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(IllegalArgumentException.class));
        Mockingbird.enterTestMode(Email.class);
        try {
            email.setHeaders(map);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testSetSmtpPortThrowsIllegalArgumentException() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setSubject("testEmailASubject");
        Mockingbird.enterTestMode(Email.class);
        try {
            htmlEmail.setSmtpPort(0);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Cannot connect to a port number that is less than 1 ( 0 )", ex.getMessage());
            assertThrownBy(Email.class, ex);
            assertNull("htmlEmail.smtpPort", htmlEmail.smtpPort);
        }
    }
    
    public void testSetToThrowsEmailExceptionWithAggressiveMocks() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(Email.class);
        try {
            email.setTo(null);
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testSetToThrowsEmailExceptionWithAggressiveMocks1() throws Throwable {
        Email email = (Email) Mockingbird.getProxyObject(Email.class, true);
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(collection.isEmpty(), true);
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(Email.class);
        try {
            email.setTo(collection);
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
}

