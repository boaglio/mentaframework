/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:12:24 PM
 * Time to generate: 00:44.550 seconds
 *
 */

package org.mentawai.mail;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.URLDataSource;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMultipart;
import org.mentawai.util.StringUtils;

public class HtmlEmailAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return HtmlEmail.class;
    }
    
    public void testBuildNoAttachmentsWithAggressiveMocks() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class, true);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        MimeMultipart mimeMultipart2 = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.replaceObjectForRecording(MimeMultipart.class, "<init>(java.lang.String)", mimeMultipart2);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        setPrivateField(htmlEmail, "container", mimeMultipart);
        setPrivateField(htmlEmail, "initialized", Boolean.TRUE);
        setPrivateField(htmlEmail, "primaryBodyPart", mimeBodyPart);
        htmlEmail.text = "";
        htmlEmail.html = "";
        htmlEmail.charset = "";
        htmlEmail.inlineImages = list;
        mimeMultipart.setSubType("alternative");
        Mockingbird.setNormalReturnForVoid();
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, mimeBodyPart, "setContent", "(java.lang.Object,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(list.size(), 1);
        MimeBodyPart mimeBodyPart2 = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.replaceObjectForRecording(MimeBodyPart.class, "<init>()", mimeBodyPart2);
        mimeMultipart2.addBodyPart(mimeBodyPart2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, mimeBodyPart2, "setContent", "(java.lang.Object,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        mimeMultipart2.addBodyPart(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        mimeMultipart2.addBodyPart(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(list.size(), -1);
        Mockingbird.enterTestMode(HtmlEmail.class);
        callPrivateMethod("org.mentawai.mail.HtmlEmail", "buildNoAttachments", new Class[] {}, htmlEmail, new Object[] {});
        assertNull("htmlEmail.emailBody", htmlEmail.emailBody);
        assertTrue("htmlEmail.initialized", ((Boolean) getPrivateField(htmlEmail, "initialized")).booleanValue());
        assertNotNull("htmlEmail.inlineImages", htmlEmail.inlineImages);
        assertNotNull("htmlEmail.primaryBodyPart", getPrivateField(htmlEmail, "primaryBodyPart"));
        assertNotNull("htmlEmail.container", getPrivateField(htmlEmail, "container"));
    }
    
    public void testEmbedWithAggressiveMocks() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        URL uRL = (URL) Mockingbird.getProxyObject(URL.class);
        InputStream inputStream = (InputStream) Mockingbird.getProxyObject(InputStream.class);
        htmlEmail.inlineImages = list;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, uRL, "openStream", "()java.io.InputStream", new Object[] {}, inputStream, 1);
        Mockingbird.setReturnValue(false, inputStream, "close", "()void", new Object[] {}, null, 1);
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.replaceObjectForRecording(MimeBodyPart.class, "<init>()", mimeBodyPart);
        Mockingbird.replaceObjectForRecording(URLDataSource.class, "<init>(java.net.URL)", Mockingbird.getProxyObject(URLDataSource.class));
        DataHandler dataHandler = (DataHandler) Mockingbird.getProxyObject(DataHandler.class);
        Mockingbird.replaceObjectForRecording(DataHandler.class, "<init>(javax.activation.DataSource)", dataHandler);
        mimeBodyPart.setDataHandler(dataHandler);
        Mockingbird.setNormalReturnForVoid();
        mimeBodyPart.setFileName("");
        Mockingbird.setNormalReturnForVoid();
        mimeBodyPart.setDisposition("inline");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(RandomStringUtils.randomAlphabetic(10), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toLowerCase", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, mimeBodyPart, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(list.add(mimeBodyPart), false);
        Mockingbird.enterTestMode(HtmlEmail.class);
        String result = htmlEmail.embed(uRL, "");
        assertEquals("result", "", result);
        assertNotNull("htmlEmail.inlineImages", htmlEmail.inlineImages);
    }
    
    public void testSendWithAggressiveMocks() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        MimeBodyPart mimeBodyPart2 = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MimeBodyPart mimeBodyPart3 = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        MimeMultipart mimeMultipart2 = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        setPrivateField(htmlEmail, "boolHasAttachments", Boolean.FALSE);
        htmlEmail.text = "";
        htmlEmail.html = "";
        htmlEmail.charset = "";
        htmlEmail.inlineImages = list;
        setPrivateField(htmlEmail, "primaryBodyPart", mimeBodyPart);
        setPrivateField(htmlEmail, "subType", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart);
        MimeMultipart mimeMultipart3 = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.replaceObjectForRecording(MimeMultipart.class, "<init>(java.lang.String)", mimeMultipart3);
        mimeMultipart.setSubType("alternative");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(htmlEmail.getPrimaryBodyPart(), mimeBodyPart2);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, mimeBodyPart2, "setContent", "(java.lang.Object,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        mimeMultipart3.addBodyPart(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        mimeMultipart3.addBodyPart(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(list.size(), -1);
        Mockingbird.setReturnValue(htmlEmail.getPrimaryBodyPart(), mimeBodyPart3);
        Mockingbird.setException(mimeBodyPart3.getContent(), iOException);
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart2);
        Mockingbird.setReturnValue(false, mimeMultipart2, "setSubType", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(Email.class, "send", "()void", null, 1);
        Mockingbird.enterTestMode(HtmlEmail.class);
        htmlEmail.send();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSendWithAggressiveMocks1() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MimeBodyPart mimeBodyPart2 = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        MimeMultipart mimeMultipart2 = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        setPrivateField(htmlEmail, "boolHasAttachments", Boolean.TRUE);
        htmlEmail.text = "";
        htmlEmail.html = "";
        htmlEmail.charset = "";
        htmlEmail.inlineImages = list;
        setPrivateField(htmlEmail, "primaryBodyPart", mimeBodyPart);
        setPrivateField(htmlEmail, "subType", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart);
        MimeMultipart mimeMultipart3 = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.replaceObjectForRecording(MimeMultipart.class, "<init>(java.lang.String)", mimeMultipart3);
        mimeMultipart.setSubType("mixed");
        Mockingbird.setNormalReturnForVoid();
        MimeMultipart mimeMultipart4 = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.replaceObjectForRecording(MimeMultipart.class, "<init>(java.lang.String)", mimeMultipart4);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        MimeBodyPart mimeBodyPart3 = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.replaceObjectForRecording(MimeBodyPart.class, "<init>()", mimeBodyPart3);
        mimeMultipart4.addBodyPart(mimeBodyPart3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, mimeBodyPart3, "setContent", "(java.lang.Object,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(list.size(), -1);
        MimeBodyPart mimeBodyPart4 = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.replaceObjectForRecording(MimeBodyPart.class, "<init>()", mimeBodyPart4);
        mimeMultipart4.addBodyPart(mimeBodyPart4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, mimeBodyPart4, "setContent", "(java.lang.Object,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        mimeMultipart3.addBodyPart(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        mimeMultipart3.addBodyPart(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(htmlEmail.addPart(mimeMultipart4, 0), null);
        Mockingbird.setReturnValue(list.size(), -1);
        Mockingbird.setReturnValue(htmlEmail.getPrimaryBodyPart(), mimeBodyPart2);
        Mockingbird.setException(mimeBodyPart2.getContent(), iOException);
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart2);
        Mockingbird.setReturnValue(false, mimeMultipart2, "setSubType", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(Email.class, "send", "()void", null, 1);
        Mockingbird.enterTestMode(HtmlEmail.class);
        htmlEmail.send();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetHtmlMsg() throws Throwable {
        Collection aCollection = new ArrayList(100);
        aCollection.add("");
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setCc(aCollection);
        Mockingbird.enterTestMode(HtmlEmail.class);
        HtmlEmail result = htmlEmail.setHtmlMsg("testHtmlEmailAHtml");
        assertSame("result", htmlEmail, result);
        assertEquals("htmlEmail.html", "testHtmlEmailAHtml", htmlEmail.html);
    }
    
    public void testSetMsg() throws Throwable {
        Collection aCollection = new ArrayList(100);
        aCollection.add("");
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setCc(aCollection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(htmlEmail.setTextMsg("testHtmlEmailParam1"), htmlEmail);
        Mockingbird.setReturnValue(htmlEmail.setHtmlMsg("testHtmlEmailParam1"), htmlEmail);
        Mockingbird.enterTestMode(HtmlEmail.class);
        HtmlEmail result = (HtmlEmail) htmlEmail.setMsg("testHtmlEmailMsg");
        assertSame("result", htmlEmail, result);
        assertEquals("htmlEmail.text", "testHtmlEmailMsg", htmlEmail.text);
        assertEquals("htmlEmail.html", "<html><body><pre>testHtmlEmailMsg</pre></body></html>", htmlEmail.html);
    }
    
    public void testSetTextMsg() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setTextMsg("testHtmlEmailAText");
        Mockingbird.enterTestMode(HtmlEmail.class);
        HtmlEmail result = htmlEmail.setTextMsg("testHtmlEmailAText");
        assertSame("result", htmlEmail, result);
        assertEquals("htmlEmail.text", "testHtmlEmailAText", htmlEmail.text);
    }
    
    public void testBuildAttachmentsThrowsNullPointerException() throws Throwable {
        DataSource ds = new ByteArrayDataSource("testHtmlEmailData", "testHtmlEmailAType");
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        Mockingbird.enterRecordingMode();
        MultiPartEmail attach = htmlEmail.attach(ds, "testHtmlEmailParam2", "testHtmlEmailParam3", "testHtmlEmailParam4");
        Mockingbird.setReturnValue(attach, htmlEmail);
        Mockingbird.enterTestMode(HtmlEmail.class);
        htmlEmail.attach(ds, "testHtmlEmailName", "testHtmlEmailDescription");
        Mockingbird.enterRecordingMode();
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart);
        mimeMultipart.setSubType("mixed");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, htmlEmail.addPart((MimeMultipart) null, 100), htmlEmail);
        Mockingbird.enterTestMode(HtmlEmail.class);
        try {
            callPrivateMethod("org.mentawai.mail.HtmlEmail", "buildAttachments", new Class[] {}, htmlEmail, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HtmlEmail.class, ex);
            assertNotNull("htmlEmail.emailBody", htmlEmail.emailBody);
            assertTrue("htmlEmail.initialized", ((Boolean) getPrivateField(htmlEmail, "initialized")).booleanValue());
            assertNotNull("htmlEmail.container", getPrivateField(htmlEmail, "container"));
            assertNull("htmlEmail.inlineImages", htmlEmail.inlineImages);
        }
    }
    
    public void testBuildAttachmentsThrowsNullPointerException1() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHtmlMsg("testHtmlEmailAHtml");
        htmlEmail.setBounceAddress("testHtmlEmailEmail");
        Mockingbird.enterRecordingMode();
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart);
        mimeMultipart.setSubType("mixed");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, htmlEmail.addPart((MimeMultipart) null, 100), htmlEmail);
        Mockingbird.enterTestMode(HtmlEmail.class);
        try {
            callPrivateMethod("org.mentawai.mail.HtmlEmail", "buildAttachments", new Class[] {}, htmlEmail, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HtmlEmail.class, ex);
            assertNull("htmlEmail.emailBody", htmlEmail.emailBody);
            assertFalse("htmlEmail.initialized", ((Boolean) getPrivateField(htmlEmail, "initialized")).booleanValue());
            assertNull("htmlEmail.container", getPrivateField(htmlEmail, "container"));
            assertNull("htmlEmail.inlineImages", htmlEmail.inlineImages);
        }
    }
    
    public void testBuildAttachmentsThrowsNullPointerException2() throws Throwable {
        Collection aCollection = new ArrayList(100);
        boolean add = aCollection.add("");
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setCc(aCollection);
        htmlEmail.setBounceAddress("testHtmlEmailEmail");
        htmlEmail.setCharset("testHtmlEmailNewCharset");
        htmlEmail.setTextMsg("testHtmlEmailAText");
        htmlEmail.setHtmlMsg("testHtmlEmailAHtml");
        Mockingbird.enterRecordingMode();
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart);
        mimeMultipart.setSubType("mixed");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(add, htmlEmail.addPart((MimeMultipart) null, 100), htmlEmail);
        Mockingbird.enterTestMode(HtmlEmail.class);
        try {
            callPrivateMethod("org.mentawai.mail.HtmlEmail", "buildAttachments", new Class[] {}, htmlEmail, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HtmlEmail.class, ex);
            assertNull("htmlEmail.emailBody", htmlEmail.emailBody);
            assertFalse("htmlEmail.initialized", ((Boolean) getPrivateField(htmlEmail, "initialized")).booleanValue());
            assertNull("htmlEmail.container", getPrivateField(htmlEmail, "container"));
            assertNull("htmlEmail.inlineImages", htmlEmail.inlineImages);
        }
    }
    
    public void testBuildAttachmentsThrowsNullPointerException3() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setTextMsg("testHtmlEmailAText");
        htmlEmail.setSubject("testHtmlEmailASubject");
        Mockingbird.enterRecordingMode();
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart);
        mimeMultipart.setSubType("mixed");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, htmlEmail.addPart((MimeMultipart) null, 100), htmlEmail);
        Mockingbird.enterTestMode(HtmlEmail.class);
        try {
            callPrivateMethod("org.mentawai.mail.HtmlEmail", "buildAttachments", new Class[] {}, htmlEmail, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HtmlEmail.class, ex);
            assertNull("htmlEmail.emailBody", htmlEmail.emailBody);
            assertFalse("htmlEmail.initialized", ((Boolean) getPrivateField(htmlEmail, "initialized")).booleanValue());
            assertNull("htmlEmail.container", getPrivateField(htmlEmail, "container"));
            assertNull("htmlEmail.inlineImages", htmlEmail.inlineImages);
        }
    }
    
    public void testBuildNoAttachmentsThrowsNullPointerException() throws Throwable {
        Collection aCollection = new ArrayList(100);
        aCollection.add("testString");
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setTo(aCollection);
        htmlEmail.setCharset("testHtmlEmailNewCharset");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(htmlEmail.setTextMsg("mail.smtp.sockeFactory.class"), htmlEmail);
        Mockingbird.setReturnValue(htmlEmail.setHtmlMsg("testHtmlEmailParam1"), htmlEmail);
        Mockingbird.enterTestMode(HtmlEmail.class);
        htmlEmail.setMsg("mail.smtp.sockeFactory.class");
        Mockingbird.enterRecordingMode();
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart);
        mimeMultipart.addBodyPart(null, 100);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(HtmlEmail.class);
        MimeBodyPart primaryBodyPart = htmlEmail.getPrimaryBodyPart();
        htmlEmail.setHtmlMsg("testHtmlEmailParam11");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart);
        mimeMultipart.setSubType("alternative");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(htmlEmail.getPrimaryBodyPart(), primaryBodyPart);
        mimeMultipart.addBodyPart(null, 1000);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(HtmlEmail.class);
        try {
            callPrivateMethod("org.mentawai.mail.HtmlEmail", "buildNoAttachments", new Class[] {}, htmlEmail, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HtmlEmail.class, ex);
            assertNotNull("htmlEmail.emailBody", htmlEmail.emailBody);
            assertTrue("htmlEmail.initialized", ((Boolean) getPrivateField(htmlEmail, "initialized")).booleanValue());
            assertNull("htmlEmail.inlineImages", htmlEmail.inlineImages);
            assertSame("htmlEmail.primaryBodyPart", primaryBodyPart, getPrivateField(htmlEmail, "primaryBodyPart"));
            assertNotNull("htmlEmail.container", getPrivateField(htmlEmail, "container"));
        }
    }
    
    public void testBuildNoAttachmentsThrowsNullPointerException1() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHtmlMsg("testHtmlEmailAHtml");
        htmlEmail.setBounceAddress("testHtmlEmailEmail");
        htmlEmail.setCharset("testString");
        htmlEmail.setTextMsg("\u9F6F");
        DataSource ds = new ByteArrayDataSource("testHtmlEmailData", "testHtmlEmailAType");
        Mockingbird.enterRecordingMode();
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart);
        mimeMultipart.addBodyPart(null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(HtmlEmail.class);
        htmlEmail.attach(ds, "testHtmlEmailName", "testHtmlEmailDescription", "testHtmlEmailDisposition");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart);
        mimeMultipart.setSubType("alternative");
        Mockingbird.setNormalReturnForVoid();
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.setReturnValue(htmlEmail.getPrimaryBodyPart(), mimeBodyPart);
        mimeBodyPart.setContent("\u9F6F", "text/plain; charset=testString");
        Mockingbird.setNormalReturnForVoid();
        mimeMultipart.addBodyPart(null, 100);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(HtmlEmail.class);
        try {
            callPrivateMethod("org.mentawai.mail.HtmlEmail", "buildNoAttachments", new Class[] {}, htmlEmail, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HtmlEmail.class, ex);
            assertNull("htmlEmail.emailBody", htmlEmail.emailBody);
            assertFalse("htmlEmail.initialized", ((Boolean) getPrivateField(htmlEmail, "initialized")).booleanValue());
            assertNull("htmlEmail.primaryBodyPart", getPrivateField(htmlEmail, "primaryBodyPart"));
            assertNull("htmlEmail.container", getPrivateField(htmlEmail, "container"));
            assertNull("htmlEmail.inlineImages", htmlEmail.inlineImages);
        }
    }
    
    public void testBuildNoAttachmentsThrowsNullPointerException2() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHtmlMsg("testHtmlEmailAHtml");
        Mockingbird.enterRecordingMode();
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart);
        mimeMultipart.addBodyPart(null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(HtmlEmail.class);
        htmlEmail.attach((DataSource) null, "testHtmlEmailName", "testHtmlEmailDescription", "testHtmlEmailDisposition");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart);
        mimeMultipart.addBodyPart(null, 100);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(HtmlEmail.class);
        MimeBodyPart primaryBodyPart = htmlEmail.getPrimaryBodyPart();
        htmlEmail.setBounceAddress("testHtmlEmailEmail");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart);
        mimeMultipart.setSubType("alternative");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(htmlEmail.getPrimaryBodyPart(), primaryBodyPart);
        mimeMultipart.addBodyPart(null, 1000);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(HtmlEmail.class);
        try {
            callPrivateMethod("org.mentawai.mail.HtmlEmail", "buildNoAttachments", new Class[] {}, htmlEmail, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HtmlEmail.class, ex);
            assertNotNull("htmlEmail.emailBody", htmlEmail.emailBody);
            assertTrue("htmlEmail.initialized", ((Boolean) getPrivateField(htmlEmail, "initialized")).booleanValue());
            assertNull("htmlEmail.inlineImages", htmlEmail.inlineImages);
            assertSame("htmlEmail.primaryBodyPart", primaryBodyPart, getPrivateField(htmlEmail, "primaryBodyPart"));
            assertNotNull("htmlEmail.container", getPrivateField(htmlEmail, "container"));
        }
    }
    
    public void testEmbedThrowsEmailExceptionWithAggressiveMocks() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class, true);
        URL uRL = (URL) Mockingbird.getProxyObject(URL.class);
        InputStream inputStream = (InputStream) Mockingbird.getProxyObject(InputStream.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, uRL, "openStream", "()java.io.InputStream", new Object[] {}, inputStream, 1);
        Mockingbird.setException(false, inputStream, "close", "()void", new Object[] {}, iOException, 1);
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(HtmlEmail.class);
        try {
            htmlEmail.embed(uRL, "");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testEmbedThrowsEmailExceptionWithAggressiveMocks1() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class, true);
        URL uRL = (URL) Mockingbird.getProxyObject(URL.class);
        InputStream inputStream = (InputStream) Mockingbird.getProxyObject(InputStream.class);
        MessagingException messagingException = (MessagingException) Mockingbird.getProxyObject(MessagingException.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, uRL, "openStream", "()java.io.InputStream", new Object[] {}, inputStream, 1);
        Mockingbird.setReturnValue(false, inputStream, "close", "()void", new Object[] {}, null, 1);
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.replaceObjectForRecording(MimeBodyPart.class, "<init>()", mimeBodyPart);
        Mockingbird.replaceObjectForRecording(URLDataSource.class, "<init>(java.net.URL)", Mockingbird.getProxyObject(URLDataSource.class));
        DataHandler dataHandler = (DataHandler) Mockingbird.getProxyObject(DataHandler.class);
        Mockingbird.replaceObjectForRecording(DataHandler.class, "<init>(javax.activation.DataSource)", dataHandler);
        mimeBodyPart.setDataHandler(dataHandler);
        Mockingbird.setNormalReturnForVoid();
        mimeBodyPart.setFileName("");
        Mockingbird.setNormalReturnForVoid();
        mimeBodyPart.setDisposition("inline");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(RandomStringUtils.randomAlphabetic(10), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toLowerCase", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setException(false, mimeBodyPart, "addHeader", "(java.lang.String,java.lang.String)void", messagingException, 1);
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.Throwable)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(HtmlEmail.class);
        try {
            htmlEmail.embed(uRL, "");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testSendThrowsEmailExceptionWithAggressiveMocks() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MessagingException messagingException = (MessagingException) Mockingbird.getProxyObject(MessagingException.class);
        setPrivateField(htmlEmail, "boolHasAttachments", Boolean.TRUE);
        htmlEmail.text = "";
        htmlEmail.charset = "";
        htmlEmail.html = "";
        htmlEmail.inlineImages = list;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart);
        MimeMultipart mimeMultipart2 = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.replaceObjectForRecording(MimeMultipart.class, "<init>(java.lang.String)", mimeMultipart2);
        mimeMultipart.setSubType("mixed");
        Mockingbird.setNormalReturnForVoid();
        MimeMultipart mimeMultipart3 = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.replaceObjectForRecording(MimeMultipart.class, "<init>(java.lang.String)", mimeMultipart3);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.replaceObjectForRecording(MimeBodyPart.class, "<init>()", mimeBodyPart);
        mimeMultipart3.addBodyPart(mimeBodyPart);
        Mockingbird.setNormalReturnForVoid();
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, mimeBodyPart, "setContent", "(java.lang.Object,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(list.size(), -1);
        MimeBodyPart mimeBodyPart2 = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.replaceObjectForRecording(MimeBodyPart.class, "<init>()", mimeBodyPart2);
        mimeMultipart3.addBodyPart(mimeBodyPart2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, mimeBodyPart2, "setContent", "(java.lang.Object,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        mimeMultipart2.addBodyPart(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        mimeMultipart2.addBodyPart(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        mimeMultipart2.addBodyPart(null);
        Mockingbird.setExceptionForVoid(messagingException);
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.Throwable)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(HtmlEmail.class);
        try {
            htmlEmail.send();
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testSendThrowsNullPointerException() throws Throwable {
        Session defaultInstance = Session.getDefaultInstance(new Properties());
        Collection aCollection = new ArrayList(100);
        aCollection.add("testString");
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setTo(aCollection);
        htmlEmail.setCharset("testHtmlEmailNewCharset");
        htmlEmail.setHtmlMsg("testHtmlEmailAHtml");
        htmlEmail.setTextMsg("testHtmlEmailAText");
        Mockingbird.enterRecordingMode();
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart);
        mimeMultipart.addBodyPart(null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(HtmlEmail.class);
        htmlEmail.addPart("testHtmlEmailContent", "testHtmlEmailContentType");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(htmlEmail.isBoolHasAttachments(), true);
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart);
        mimeMultipart.setSubType("mixed");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, htmlEmail.addPart((MimeMultipart) null, 100), htmlEmail);
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.setReturnValue(htmlEmail.getPrimaryBodyPart(), mimeBodyPart);
        Mockingbird.setReturnValue(mimeBodyPart.getContent(), "mail.smtp.sockeFactory.class");
        Mockingbird.setReturnValue(htmlEmail.getMailSession(), defaultInstance);
        Mockingbird.enterTestMode(HtmlEmail.class);
        try {
            htmlEmail.send();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HtmlEmail.class, ex);
            assertNull("htmlEmail.emailBody", htmlEmail.emailBody);
            assertFalse("htmlEmail.initialized", ((Boolean) getPrivateField(htmlEmail, "initialized")).booleanValue());
            assertNull("htmlEmail.container", getPrivateField(htmlEmail, "container"));
            assertNull("htmlEmail.bccList", htmlEmail.bccList);
            assertNull("htmlEmail.headers", htmlEmail.headers);
            assertNull("htmlEmail.replyList", htmlEmail.replyList);
            assertNull("htmlEmail.session", getPrivateField(htmlEmail, "session"));
            assertNull("htmlEmail.inlineImages", htmlEmail.inlineImages);
            assertNull("htmlEmail.primaryBodyPart", getPrivateField(htmlEmail, "primaryBodyPart"));
            assertNull("htmlEmail.ccList", htmlEmail.ccList);
            assertNull("htmlEmail.message", htmlEmail.message);
            assertEquals("htmlEmail.toList.size()", 1, htmlEmail.toList.size());
            assertNull("htmlEmail.hostName", htmlEmail.hostName);
        }
    }
    
    public void testSetHtmlMsgThrowsEmailException() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setHtmlMsg("testHtmlEmailAHtml");
        Mockingbird.enterTestMode(HtmlEmail.class);
        try {
            htmlEmail.setHtmlMsg("");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertEquals("ex.getMessage()", "Invalid message supplied", ex.getMessage());
            assertThrownBy(HtmlEmail.class, ex);
            assertEquals("htmlEmail.html", "testHtmlEmailAHtml", htmlEmail.html);
        }
    }
    
    public void testSetMsgThrowsEmailException() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(htmlEmail.setTextMsg("testHtmlEmailParam1"), htmlEmail);
        Mockingbird.setReturnValue(htmlEmail.setHtmlMsg("testHtmlEmailParam1"), htmlEmail);
        Mockingbird.enterTestMode(HtmlEmail.class);
        htmlEmail.setMsg("testHtmlEmailMsg");
        try {
            htmlEmail.setMsg("");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertEquals("ex.getMessage()", "Invalid message supplied", ex.getMessage());
            assertThrownBy(HtmlEmail.class, ex);
            assertEquals("htmlEmail.text", "testHtmlEmailMsg", htmlEmail.text);
            assertEquals("htmlEmail.html", "<html><body><pre>testHtmlEmailMsg</pre></body></html>", htmlEmail.html);
        }
    }
    
    public void testSetTextMsgThrowsEmailException() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setTextMsg("testHtmlEmailAText");
        Mockingbird.enterTestMode(HtmlEmail.class);
        try {
            htmlEmail.setTextMsg("");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertEquals("ex.getMessage()", "Invalid message supplied", ex.getMessage());
            assertThrownBy(HtmlEmail.class, ex);
            assertEquals("htmlEmail.text", "testHtmlEmailAText", htmlEmail.text);
        }
    }
}

