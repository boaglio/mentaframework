/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:11:34 PM
 * Time to generate: 00:20.073 seconds
 *
 */

package org.mentawai.mail;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import org.mentawai.util.StringUtils;

public class SimpleEmailAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SimpleEmail.class;
    }
    
    public void testConstructor() throws Throwable {
        Mockingbird.ignoreConstructorExceptions(Email.class);
        SimpleEmail simpleEmail = new SimpleEmail();
        assertEquals("simpleEmail.bccList.size()", 0, simpleEmail.bccList.size());
        assertEquals("simpleEmail.headers.size()", 0, simpleEmail.headers.size());
        assertNull("simpleEmail.fromAddress", simpleEmail.fromAddress);
        assertEquals("simpleEmail.replyList.size()", 0, simpleEmail.replyList.size());
        assertEquals("simpleEmail.toList.size()", 0, simpleEmail.toList.size());
        assertNull("simpleEmail.authenticator", simpleEmail.authenticator);
        assertNull("simpleEmail.charset", simpleEmail.charset);
        assertEquals("simpleEmail.ccList.size()", 0, simpleEmail.ccList.size());
        assertEquals("simpleEmail.hostName", "localhost", simpleEmail.hostName);
        assertNull("simpleEmail.bounceAddress", simpleEmail.bounceAddress);
    }
    
    public void testSetMsgWithAggressiveMocks() throws Throwable {
        SimpleEmail simpleEmail = (SimpleEmail) Mockingbird.getProxyObject(SimpleEmail.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(StringUtils.isEmpty(""), false);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toLowerCase", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(-1), 1);
        Mockingbird.enterTestMode(SimpleEmail.class);
        Email result = simpleEmail.setMsg("");
        assertNotNull("result", result);
        assertEquals("simpleEmail.content", "", simpleEmail.content);
        assertNull("simpleEmail.charset", simpleEmail.charset);
        assertEquals("simpleEmail.contentType", "text/plain", simpleEmail.contentType);
    }
    
    public void testSetMsgThrowsEmailException() throws Throwable {
        SimpleEmail simpleEmail = (SimpleEmail) Mockingbird.getProxyObject(SimpleEmail.class);
        Mockingbird.enterRecordingMode();
        simpleEmail.setContent("0pop3", "testSimpleEmailParam2");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(SimpleEmail.class);
        simpleEmail.setMsg("testSimpleEmailMsg");
        try {
            simpleEmail.setMsg("");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertEquals("ex.getMessage()", "Invalid message supplied", ex.getMessage());
            assertThrownBy(SimpleEmail.class, ex);
            assertEquals("simpleEmail.content", "testSimpleEmailMsg", simpleEmail.content);
            assertNull("simpleEmail.charset", simpleEmail.charset);
            assertEquals("simpleEmail.contentType", "text/plain", simpleEmail.contentType);
        }
    }
}

