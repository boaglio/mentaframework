/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:12:26 PM
 * Time to generate: 00:19.808 seconds
 *
 */

package org.mentawai.mail;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;

public class ByteArrayDataSourceAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ByteArrayDataSource.class;
    }
    
    public void testConstructor() throws Throwable {
        ByteArrayDataSource byteArrayDataSource = new ByteArrayDataSource("testByteArrayDataSourceData", "testByteArrayDataSourceAType");
        assertEquals("byteArrayDataSource.getInputStream().available()", 27, byteArrayDataSource.getInputStream().available());
        assertEquals("byteArrayDataSource.getContentType()", "testByteArrayDataSourceAType", byteArrayDataSource.getContentType());
    }
    
    public void testConstructor1() throws Throwable {
        byte[] data = new byte[0];
        ByteArrayDataSource byteArrayDataSource = new ByteArrayDataSource(data, "testByteArrayDataSourceAType");
        assertEquals("byteArrayDataSource.getInputStream().available()", 0, byteArrayDataSource.getInputStream().available());
        assertEquals("byteArrayDataSource.getContentType()", "testByteArrayDataSourceAType", byteArrayDataSource.getContentType());
    }
    
    public void testConstructor2() throws Throwable {
        byte[] data = new byte[1];
        ByteArrayDataSource byteArrayDataSource = new ByteArrayDataSource(data, "testByteArrayDataSourceAType");
        assertEquals("byteArrayDataSource.getInputStream().available()", 1, byteArrayDataSource.getInputStream().available());
        assertEquals("byteArrayDataSource.getContentType()", "testByteArrayDataSourceAType", byteArrayDataSource.getContentType());
    }
    
    public void testConstructor3() throws Throwable {
        byte[] bytes = new byte[2];
        InputStream aIs = new ByteArrayInputStream(bytes);
        Mockingbird.enterRecordingMode();
        BufferedInputStream bufferedInputStream = (BufferedInputStream) Mockingbird.getProxyObject(BufferedInputStream.class);
        Mockingbird.replaceObjectForRecording(BufferedInputStream.class, "<init>(java.io.InputStream)", bufferedInputStream);
        ByteArrayOutputStream byteArrayOutputStream = (ByteArrayOutputStream) Mockingbird.getProxyObject(ByteArrayOutputStream.class);
        Mockingbird.replaceObjectForRecording(ByteArrayOutputStream.class, "<init>()", byteArrayOutputStream);
        BufferedOutputStream bufferedOutputStream = (BufferedOutputStream) Mockingbird.getProxyObject(BufferedOutputStream.class);
        Mockingbird.replaceObjectForRecording(BufferedOutputStream.class, "<init>(java.io.OutputStream)", bufferedOutputStream);
        Mockingbird.setReturnValue(false, bufferedInputStream, "read", "(byte[])int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, bufferedOutputStream, "flush", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, bufferedOutputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, bufferedInputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteArrayOutputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(ByteArrayDataSource.class);
        ByteArrayDataSource byteArrayDataSource = new ByteArrayDataSource(aIs, "testByteArrayDataSourceAType");
        assertSame("byteArrayDataSource.baos", byteArrayOutputStream, getPrivateField(byteArrayDataSource, "baos"));
        assertEquals("byteArrayDataSource.getContentType()", "testByteArrayDataSourceAType", byteArrayDataSource.getContentType());
    }
    
    public void testConstructor4() throws Throwable {
        byte[] bytes = new byte[2];
        ByteArrayDataSource byteArrayDataSource = new ByteArrayDataSource(new ByteArrayInputStream(bytes), "testByteArrayDataSourceAType");
        assertEquals("byteArrayDataSource.getInputStream().available()", 2, byteArrayDataSource.getInputStream().available());
        assertEquals("byteArrayDataSource.getContentType()", "testByteArrayDataSourceAType", byteArrayDataSource.getContentType());
    }
    
    public void testByteArrayDataSource() throws Throwable {
        ByteArrayDataSource byteArrayDataSource = new ByteArrayDataSource("testByteArrayDataSourceData", "testByteArrayDataSourceAType");
        byte[] bytes = new byte[1];
        callPrivateMethod("org.mentawai.mail.ByteArrayDataSource", "byteArrayDataSource", new Class[] {InputStream.class, String.class}, byteArrayDataSource, new Object[] {new ByteArrayInputStream(bytes), "testByteArrayDataSourceAType"});
        assertEquals("byteArrayDataSource.getInputStream().available()", 1, byteArrayDataSource.getInputStream().available());
        assertEquals("byteArrayDataSource.getContentType()", "testByteArrayDataSourceAType", byteArrayDataSource.getContentType());
    }
    
    public void testByteArrayDataSource1() throws Throwable {
        ByteArrayDataSource byteArrayDataSource = new ByteArrayDataSource("testByteArrayDataSourceData", "testByteArrayDataSourceAType");
        byte[] bytes = new byte[0];
        callPrivateMethod("org.mentawai.mail.ByteArrayDataSource", "byteArrayDataSource", new Class[] {InputStream.class, String.class}, byteArrayDataSource, new Object[] {new ByteArrayInputStream(bytes), "testByteArrayDataSourceAType1"});
        assertEquals("byteArrayDataSource.getContentType()", "testByteArrayDataSourceAType1", byteArrayDataSource.getContentType());
        assertEquals("byteArrayDataSource.getInputStream().available()", 0, byteArrayDataSource.getInputStream().available());
    }
    
    public void testGetContentType() throws Throwable {
        ByteArrayDataSource byteArrayDataSource = new ByteArrayDataSource("testByteArrayDataSourceData", "testByteArrayDataSourceAType");
        String result = byteArrayDataSource.getContentType();
        assertEquals("result", "testByteArrayDataSourceAType", result);
    }
    
    public void testGetContentType1() throws Throwable {
        byte[] bytes = new byte[1];
        String result = new ByteArrayDataSource(new ByteArrayInputStream(bytes), (String) null).getContentType();
        assertEquals("result", "application/octet-stream", result);
    }
    
    public void testGetInputStream() throws Throwable {
        ByteArrayDataSource byteArrayDataSource = new ByteArrayDataSource("testByteArrayDataSourceData", "testByteArrayDataSourceAType");
        ByteArrayInputStream result = (ByteArrayInputStream) byteArrayDataSource.getInputStream();
        assertEquals("result.available()", 27, result.available());
    }
    
    public void testGetName() throws Throwable {
        ByteArrayDataSource byteArrayDataSource = new ByteArrayDataSource("testByteArrayDataSourceData", "testByteArrayDataSourceAType");
        String result = byteArrayDataSource.getName();
        assertEquals("result", "ByteArrayDataSource", result);
    }
    
    public void testGetOutputStream() throws Throwable {
        ByteArrayDataSource byteArrayDataSource = new ByteArrayDataSource("Bufer size <= 0".getBytes(), "testByteArrayDataSourceAType");
        ByteArrayOutputStream result = (ByteArrayOutputStream) byteArrayDataSource.getOutputStream();
        assertEquals("result.toString()", "", result.toString());
        assertEquals("byteArrayDataSource.getInputStream().available()", 0, byteArrayDataSource.getInputStream().available());
    }
    
    public void testConstructorThrowsIOException() throws Throwable {
        try {
            new ByteArrayDataSource((InputStream) null, "testByteArrayDataSourceAType");
            fail("Expected IOException to be thrown");
        } catch (IOException ex) {
            assertEquals("ex.getClass()", IOException.class, ex.getClass());
            assertThrownBy(BufferedInputStream.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new ByteArrayDataSource((String) null, "testByteArrayDataSourceAType");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ByteArrayDataSource.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException1() throws Throwable {
        try {
            new ByteArrayDataSource((byte[]) null, "testByteArrayDataSourceAType");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ByteArrayInputStream.class, ex);
        }
    }
    
    public void testConstructorThrowsThrowable() throws Throwable {
        byte[] bytes = new byte[0];
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        IOException iOException2 = (IOException) Mockingbird.getProxyObject(IOException.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(ByteArrayInputStream.class, "<init>(byte[])", Mockingbird.getProxyObject(ByteArrayInputStream.class));
        BufferedInputStream bufferedInputStream = (BufferedInputStream) Mockingbird.getProxyObject(BufferedInputStream.class);
        Mockingbird.replaceObjectForRecording(BufferedInputStream.class, "<init>(java.io.InputStream)", bufferedInputStream);
        Mockingbird.replaceObjectForRecording(ByteArrayOutputStream.class, "<init>()", Mockingbird.getProxyObject(ByteArrayOutputStream.class));
        BufferedOutputStream bufferedOutputStream = (BufferedOutputStream) Mockingbird.getProxyObject(BufferedOutputStream.class);
        Mockingbird.replaceObjectForRecording(BufferedOutputStream.class, "<init>(java.io.OutputStream)", bufferedOutputStream);
        Mockingbird.setReturnValue(false, bufferedInputStream, "read", "(byte[])int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, bufferedOutputStream, "write", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(false, bufferedInputStream, "read", "(byte[])int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, bufferedOutputStream, "write", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(false, bufferedInputStream, "read", "(byte[])int", new Integer(0), 1);
        Mockingbird.setException(false, bufferedOutputStream, "write", "(byte[],int,int)void", iOException, 1);
        Mockingbird.setException(false, bufferedInputStream, "close", "()void", new Object[] {}, iOException2, 1);
        Mockingbird.enterTestMode();
        try {
            new ByteArrayDataSource(bytes, "");
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testConstructorThrowsThrowable1() throws Throwable {
        UnsupportedEncodingException unsupportedEncodingException = (UnsupportedEncodingException) Mockingbird.getProxyObject(UnsupportedEncodingException.class);
        Mockingbird.enterRecordingMode();
        ByteArrayOutputStream byteArrayOutputStream = (ByteArrayOutputStream) Mockingbird.getProxyObject(ByteArrayOutputStream.class);
        Mockingbird.replaceObjectForRecording(ByteArrayOutputStream.class, "<init>()", byteArrayOutputStream);
        Mockingbird.setException(false, "", "getBytes", "(java.lang.String)byte[]", new Object[] {"iso-8859-1"}, unsupportedEncodingException, 1);
        Mockingbird.replaceObjectForRecording(IOException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(IOException.class));
        Mockingbird.setReturnValue(false, byteArrayOutputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode();
        try {
            new ByteArrayDataSource("", "");
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testByteArrayDataSourceThrowsIOException() throws Throwable {
        ByteArrayDataSource byteArrayDataSource = new ByteArrayDataSource("testByteArrayDataSourceData", "testByteArrayDataSourceAType");
        try {
            callPrivateMethod("org.mentawai.mail.ByteArrayDataSource", "byteArrayDataSource", new Class[] {InputStream.class, String.class}, byteArrayDataSource, new Object[] {null, "testByteArrayDataSourceAType"});
            fail("Expected IOException to be thrown");
        } catch (IOException ex) {
            assertEquals("ex.getClass()", IOException.class, ex.getClass());
            assertThrownBy(BufferedInputStream.class, ex);
            assertEquals("byteArrayDataSource.getInputStream().available()", 0, byteArrayDataSource.getInputStream().available());
            assertEquals("byteArrayDataSource.getContentType()", "testByteArrayDataSourceAType", byteArrayDataSource.getContentType());
        }
    }
    
    public void testGetInputStreamThrowsIOExceptionWithAggressiveMocks() throws Throwable {
        ByteArrayDataSource byteArrayDataSource = (ByteArrayDataSource) Mockingbird.getProxyObject(ByteArrayDataSource.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(IOException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(IOException.class));
        setPrivateField(byteArrayDataSource, "baos", null);
        Mockingbird.enterTestMode(ByteArrayDataSource.class);
        try {
            byteArrayDataSource.getInputStream();
            fail("Expected IOException to be thrown");
        } catch (IOException ex) {
            assertEquals("byteArrayDataSource.getContentType()", "application/octet-stream", byteArrayDataSource.getContentType());
        }
    }
}

