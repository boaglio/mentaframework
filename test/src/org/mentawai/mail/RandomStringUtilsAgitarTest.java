/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:13:02 PM
 * Time to generate: 01:47.980 seconds
 *
 */

package org.mentawai.mail;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.Random;

public class RandomStringUtilsAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return RandomStringUtils.class;
    }
    
    public void testConstructor() throws Throwable {
        new RandomStringUtils();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRandom() throws Throwable {
        char[] chars = new char[3];
        String result = RandomStringUtils.random(0, 100, 1000, true, false, chars);
        assertEquals("result", "", result);
    }
    
    public void testRandom1() throws Throwable {
        String result = RandomStringUtils.random(0, true, true);
        assertEquals("result", "", result);
    }
    
    public void testRandom2() throws Throwable {
        RandomStringUtils.random(1);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRandom3() throws Throwable {
        String result = RandomStringUtils.random(0);
        assertEquals("result", "", result);
    }
    
    public void testRandom4() throws Throwable {
        char[] chars = new char[1];
        String result = RandomStringUtils.random(0, Integer.MIN_VALUE + 1, 33, false, true, chars, new Random());
        assertEquals("result", "", result);
    }
    
    public void testRandom5() throws Throwable {
        RandomStringUtils.random(100, 0, 100, false, true, (char[]) null, new Random());
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRandom6() throws Throwable {
        RandomStringUtils.random(100, 0, 100, true, true, (char[]) null, new Random());
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRandom7() throws Throwable {
        char[] chars = new char[3];
        String result = RandomStringUtils.random(123, 1, 3, false, false, chars, new Random());
        assertEquals("result", "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", result);
    }
    
    public void testRandom8() throws Throwable {
        char[] chars = new char[1];
        chars[0] = 'c';
        String result = RandomStringUtils.random(122, 0, 1, true, true, chars, new Random());
        assertEquals("result", "cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc", result);
    }
    
    public void testRandom9() throws Throwable {
        RandomStringUtils.random(1, 0, 0, true, true);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRandom10() throws Throwable {
        String result = RandomStringUtils.random(100, 0, 49, false, true);
        assertEquals("result", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", result);
    }
    
    public void testRandom11() throws Throwable {
        RandomStringUtils.random(100, 10, 1000, true, true);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRandom12() throws Throwable {
        RandomStringUtils.random(100, true, true);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRandom13() throws Throwable {
        RandomStringUtils.random(48, 0, 0, true, false);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRandom14() throws Throwable {
        String result = RandomStringUtils.random(100, -1, 49, false, true);
        assertEquals("result", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", result);
    }
    
    public void testRandom15() throws Throwable {
        String result = RandomStringUtils.random(31, 31, 32, false, false);
        assertEquals("result", "\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F", result);
    }
    
    public void testRandom16() throws Throwable {
        String result = RandomStringUtils.random(100, 1, 49, false, true);
        assertEquals("result", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", result);
    }
    
    public void testRandom17() throws Throwable {
        String result = RandomStringUtils.random(0, 1, 1, false, true);
        assertEquals("result", "", result);
    }
    
    public void testRandom18() throws Throwable {
        char[] chars = new char[3];
        String result = RandomStringUtils.random(123, chars);
        assertEquals("result", "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", result);
    }
    
    public void testRandom19() throws Throwable {
        char[] chars = new char[1];
        String result = RandomStringUtils.random(2, chars);
        assertEquals("result", "\u0000\u0000", result);
    }
    
    public void testRandom20() throws Throwable {
        char[] chars = new char[3];
        String result = RandomStringUtils.random(0, chars);
        assertEquals("result", "", result);
    }
    
    public void testRandom21() throws Throwable {
        char[] chars = new char[1];
        String result = RandomStringUtils.random(1, chars);
        assertEquals("result", "\u0000", result);
    }
    
    public void testRandom22() throws Throwable {
        RandomStringUtils.random(32, (char[]) null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRandom23() throws Throwable {
        RandomStringUtils.random(1, true, false);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRandom24() throws Throwable {
        RandomStringUtils.random(123, false, false);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRandom25() throws Throwable {
        RandomStringUtils.random(31, false, true);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRandom26() throws Throwable {
        RandomStringUtils.random(100, (String) null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRandom27() throws Throwable {
        String result = RandomStringUtils.random(1, " ");
        assertEquals("result", " ", result);
    }
    
    public void testRandom28() throws Throwable {
        String result = RandomStringUtils.random(0, "testRandomStringUtilsChars");
        assertEquals("result", "", result);
    }
    
    public void testRandom29() throws Throwable {
        RandomStringUtils.random(32);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRandomAlphabetic() throws Throwable {
        String result = RandomStringUtils.randomAlphabetic(0);
        assertEquals("result", "", result);
    }
    
    public void testRandomAlphabetic1() throws Throwable {
        RandomStringUtils.randomAlphabetic(1);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRandomAlphanumeric() throws Throwable {
        Mockingbird.enterRecordingMode();
        Random random = (Random) Mockingbird.getProxyObject(Random.class);
        Mockingbird.setReturnValue(false, random, "nextInt", "(int)int", new Integer(30), 1);
        Mockingbird.setReturnValue(false, random, "nextInt", "(int)int", new Integer(68), 1);
        Mockingbird.enterTestMode(RandomStringUtils.class);
        String result = RandomStringUtils.randomAlphanumeric(1);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRandomAlphanumeric1() throws Throwable {
        String result = RandomStringUtils.randomAlphanumeric(0);
        assertEquals("result", "", result);
    }
    
    public void testRandomAscii() throws Throwable {
        RandomStringUtils.randomAscii(100);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRandomAscii1() throws Throwable {
        RandomStringUtils.randomAscii(1);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRandomAscii2() throws Throwable {
        String result = RandomStringUtils.randomAscii(0);
        assertEquals("result", "", result);
    }
    
    public void testRandomNumeric() throws Throwable {
        String result = RandomStringUtils.randomNumeric(1);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRandomNumeric1() throws Throwable {
        String result = RandomStringUtils.randomNumeric(0);
        assertEquals("result", "", result);
    }
    
    public void testRandomThrowsArrayIndexOutOfBoundsException() throws Throwable {
        char[] chars = new char[1];
        try {
            RandomStringUtils.random(100, -1, 1000, true, false, chars);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertThrownBy(RandomStringUtils.class, ex);
        }
    }
    
    public void testRandomThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        try {
            RandomStringUtils.random(1, "");
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertThrownBy(RandomStringUtils.class, ex);
        }
    }
    
    public void testRandomThrowsArrayIndexOutOfBoundsException2() throws Throwable {
        char[] chars = new char[0];
        try {
            RandomStringUtils.random(1, 0, 0, false, true, chars, new Random());
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertThrownBy(RandomStringUtils.class, ex);
        }
    }
    
    public void testRandomThrowsArrayIndexOutOfBoundsException3() throws Throwable {
        char[] chars = new char[0];
        try {
            RandomStringUtils.random(31, 0, 0, false, false, chars, new Random());
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertThrownBy(RandomStringUtils.class, ex);
        }
    }
    
    public void testRandomThrowsArrayIndexOutOfBoundsException4() throws Throwable {
        char[] chars = new char[3];
        try {
            RandomStringUtils.random(1, 1, 32, true, true, chars, new Random());
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertThrownBy(RandomStringUtils.class, ex);
        }
    }
    
    public void testRandomThrowsArrayIndexOutOfBoundsException5() throws Throwable {
        char[] chars = new char[2];
        try {
            RandomStringUtils.random(71, 0, 0, true, true, chars, new Random());
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertThrownBy(RandomStringUtils.class, ex);
        }
    }
    
    public void testRandomThrowsArrayIndexOutOfBoundsException6() throws Throwable {
        char[] chars = new char[3];
        chars[0] = '1';
        chars[1] = '0';
        chars[2] = ' ';
        try {
            RandomStringUtils.random(100, -1, 1000, true, false, chars, new Random());
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertThrownBy(RandomStringUtils.class, ex);
        }
    }
    
    public void testRandomThrowsIllegalArgumentException() throws Throwable {
        char[] chars = new char[3];
        try {
            RandomStringUtils.random(100, 0, -1, true, false, chars);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "n must be positive", ex.getMessage());
            assertThrownBy(Random.class, ex);
        }
    }
    
    public void testRandomThrowsIllegalArgumentException1() throws Throwable {
        try {
            RandomStringUtils.random(-1, (String) null);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Requested random string length -1 is less than 0.", ex.getMessage());
            assertThrownBy(RandomStringUtils.class, ex);
        }
    }
    
    public void testRandomThrowsIllegalArgumentException2() throws Throwable {
        char[] chars = new char[2];
        try {
            RandomStringUtils.random(1, 0, -123, false, false, chars, new Random());
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "n must be positive", ex.getMessage());
            assertThrownBy(Random.class, ex);
        }
    }
    
    public void testRandomThrowsIllegalArgumentException3() throws Throwable {
        try {
            RandomStringUtils.random(100, 1000, 100, false, true, (char[]) null, new Random());
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "n must be positive", ex.getMessage());
            assertThrownBy(Random.class, ex);
        }
    }
    
    public void testRandomThrowsIllegalArgumentException4() throws Throwable {
        char[] chars = new char[0];
        try {
            RandomStringUtils.random(Integer.MIN_VALUE, Integer.MAX_VALUE, 122, false, true, chars, new Random());
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Requested random string length -2147483648 is less than 0.", ex.getMessage());
            assertThrownBy(RandomStringUtils.class, ex);
        }
    }
    
    public void testRandomThrowsNullPointerException() throws Throwable {
        char[] chars = new char[3];
        try {
            RandomStringUtils.random(1, 0, 100, true, false, chars, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RandomStringUtils.class, ex);
        }
    }
}

