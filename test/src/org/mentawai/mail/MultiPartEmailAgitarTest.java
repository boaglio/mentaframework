/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:13:27 PM
 * Time to generate: 02:07.689 seconds
 *
 */

package org.mentawai.mail;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.File;
import java.io.FilePermission;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.activation.URLDataSource;
import javax.mail.MessagingException;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.InternetHeaders;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.mail.internet.MimePartDataSource;
import org.mentawai.util.StringUtils;

public class MultiPartEmailAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MultiPartEmail.class;
    }
    
    public void testConstructor() throws Throwable {
        Mockingbird.ignoreConstructorExceptions(Email.class);
        MultiPartEmail multiPartEmail = new MultiPartEmail();
        assertEquals("multiPartEmail.bccList.size()", 0, multiPartEmail.bccList.size());
        assertEquals("multiPartEmail.headers.size()", 0, multiPartEmail.headers.size());
        assertNull("multiPartEmail.fromAddress", multiPartEmail.fromAddress);
        assertEquals("multiPartEmail.replyList.size()", 0, multiPartEmail.replyList.size());
        assertEquals("multiPartEmail.toList.size()", 0, multiPartEmail.toList.size());
        assertNull("multiPartEmail.authenticator", multiPartEmail.authenticator);
        assertNull("multiPartEmail.charset", multiPartEmail.charset);
        assertEquals("multiPartEmail.ccList.size()", 0, multiPartEmail.ccList.size());
        assertEquals("multiPartEmail.hostName", "localhost", multiPartEmail.hostName);
        assertNull("multiPartEmail.bounceAddress", multiPartEmail.bounceAddress);
    }
    
    public void testAddPartWithAggressiveMocks() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.enterRecordingMode();
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.replaceObjectForRecording(MimeBodyPart.class, "<init>()", mimeBodyPart);
        setPrivateField(multiPartEmail, "initialized", Boolean.FALSE);
        setPrivateField(multiPartEmail, "container", mimeMultipart);
        mimeBodyPart.setContent("", "");
        Mockingbird.setNormalReturnForVoid();
        multiPartEmail.init();
        Mockingbird.setNormalReturnForVoid();
        mimeMultipart.addBodyPart(mimeBodyPart);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MultiPartEmail.class);
        Email result = multiPartEmail.addPart("", "");
        assertNotNull("result", result);
    }
    
    public void testAddPartWithAggressiveMocks1() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.enterRecordingMode();
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.replaceObjectForRecording(MimeBodyPart.class, "<init>()", mimeBodyPart);
        setPrivateField(multiPartEmail, "initialized", Boolean.FALSE);
        setPrivateField(multiPartEmail, "container", mimeMultipart);
        mimeBodyPart.setContent(null);
        Mockingbird.setNormalReturnForVoid();
        multiPartEmail.init();
        Mockingbird.setNormalReturnForVoid();
        mimeMultipart.addBodyPart(mimeBodyPart, 0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MultiPartEmail.class);
        Email result = multiPartEmail.addPart((MimeMultipart) null, 0);
        assertNotNull("result", result);
    }
    
    public void testAttachWithAggressiveMocks() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        URL uRL = (URL) Mockingbird.getProxyObject(URL.class);
        InputStream inputStream = (InputStream) Mockingbird.getProxyObject(InputStream.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, uRL, "openStream", "()java.io.InputStream", new Object[] {}, inputStream, 1);
        Mockingbird.setReturnValue(false, inputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.replaceObjectForRecording(URLDataSource.class, "<init>(java.net.URL)", Mockingbird.getProxyObject(URLDataSource.class));
        Mockingbird.setReturnValue(false, multiPartEmail, "attach", "(javax.activation.DataSource,java.lang.String,java.lang.String,java.lang.String)org.mentawai.mail.MultiPartEmail", null, 1);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        MultiPartEmail result = multiPartEmail.attach(uRL, "", "");
        assertNull("result", result);
        assertNull("multiPartEmail.emailBody", multiPartEmail.emailBody);
        assertFalse("multiPartEmail.initialized", ((Boolean) getPrivateField(multiPartEmail, "initialized")).booleanValue());
        assertFalse("multiPartEmail.isBoolHasAttachments()", multiPartEmail.isBoolHasAttachments());
        assertNull("multiPartEmail.container", getPrivateField(multiPartEmail, "container"));
    }
    
    public void testAttachWithAggressiveMocks1() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        URL uRL = (URL) Mockingbird.getProxyObject(URL.class);
        InputStream inputStream = (InputStream) Mockingbird.getProxyObject(InputStream.class);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, uRL, "openStream", "()java.io.InputStream", new Object[] {}, inputStream, 1);
        Mockingbird.setReturnValue(false, inputStream, "close", "()void", new Object[] {}, null, 1);
        URLDataSource uRLDataSource = (URLDataSource) Mockingbird.getProxyObject(URLDataSource.class);
        Mockingbird.replaceObjectForRecording(URLDataSource.class, "<init>(java.net.URL)", uRLDataSource);
        Mockingbird.setReturnValue(true, StringUtils.class, "isEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(uRLDataSource.getName(), "");
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.replaceObjectForRecording(MimeBodyPart.class, "<init>()", mimeBodyPart);
        Mockingbird.setReturnValue(multiPartEmail.getContainer(), mimeMultipart);
        mimeMultipart.addBodyPart(mimeBodyPart);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, mimeBodyPart, "setDisposition", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, mimeBodyPart, "setFileName", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, mimeBodyPart, "setDescription", "(java.lang.String)void", null, 1);
        DataHandler dataHandler = (DataHandler) Mockingbird.getProxyObject(DataHandler.class);
        Mockingbird.replaceObjectForRecording(DataHandler.class, "<init>(javax.activation.DataSource)", dataHandler);
        mimeBodyPart.setDataHandler(dataHandler);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MultiPartEmail.class);
        MultiPartEmail result = multiPartEmail.attach(uRL, "", "", "");
        assertNotNull("result", result);
    }
    
    public void testAttachWithAggressiveMocks2() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        setPrivateField(multiPartEmail, "initialized", Boolean.FALSE);
        setPrivateField(multiPartEmail, "container", mimeMultipart);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(StringUtils.isEmpty(""), false);
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.replaceObjectForRecording(MimeBodyPart.class, "<init>()", mimeBodyPart);
        multiPartEmail.init();
        Mockingbird.setNormalReturnForVoid();
        mimeMultipart.addBodyPart(mimeBodyPart);
        Mockingbird.setNormalReturnForVoid();
        mimeBodyPart.setDisposition("");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, mimeBodyPart, "setFileName", "(java.lang.String)void", null, 1);
        mimeBodyPart.setDescription("");
        Mockingbird.setNormalReturnForVoid();
        DataHandler dataHandler = (DataHandler) Mockingbird.getProxyObject(DataHandler.class);
        Mockingbird.replaceObjectForRecording(DataHandler.class, "<init>(javax.activation.DataSource)", dataHandler);
        mimeBodyPart.setDataHandler(dataHandler);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MultiPartEmail.class);
        MultiPartEmail result = multiPartEmail.attach((DataSource) null, "", "", "");
        assertNotNull("result", result);
    }
    
    public void testAttachWithAggressiveMocks3() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        InputStream inputStream = (InputStream) Mockingbird.getProxyObject(InputStream.class);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getInputStream(), inputStream);
        Mockingbird.setReturnValue(true, StringUtils.class, "isEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(dataSource.getName(), "");
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.replaceObjectForRecording(MimeBodyPart.class, "<init>()", mimeBodyPart);
        Mockingbird.setReturnValue(multiPartEmail.getContainer(), mimeMultipart);
        mimeMultipart.addBodyPart(mimeBodyPart);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, mimeBodyPart, "setDisposition", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, mimeBodyPart, "setFileName", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, mimeBodyPart, "setDescription", "(java.lang.String)void", null, 1);
        DataHandler dataHandler = (DataHandler) Mockingbird.getProxyObject(DataHandler.class);
        Mockingbird.replaceObjectForRecording(DataHandler.class, "<init>(javax.activation.DataSource)", dataHandler);
        mimeBodyPart.setDataHandler(dataHandler);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MultiPartEmail.class);
        MultiPartEmail result = multiPartEmail.attach(dataSource, "", "");
        assertNotNull("result", result);
    }
    
    public void testAttachWithAggressiveMocks4() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        EmailAttachment emailAttachment = (EmailAttachment) Mockingbird.getProxyObject(EmailAttachment.class);
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.enterNormalMode();
        emailAttachment.setURL(null);
        emailAttachment.setPath("");
        emailAttachment.setName("");
        emailAttachment.setDescription("");
        emailAttachment.setDisposition("");
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, boolean2, 1);
        FileDataSource fileDataSource = (FileDataSource) Mockingbird.getProxyObject(FileDataSource.class);
        Mockingbird.replaceObjectForRecording(FileDataSource.class, "<init>(java.io.File)", fileDataSource);
        Mockingbird.setReturnValue(true, StringUtils.class, "isEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(fileDataSource.getName(), "");
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.replaceObjectForRecording(MimeBodyPart.class, "<init>()", mimeBodyPart);
        Mockingbird.setReturnValue(multiPartEmail.getContainer(), mimeMultipart);
        mimeMultipart.addBodyPart(mimeBodyPart);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, mimeBodyPart, "setDisposition", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, mimeBodyPart, "setFileName", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, mimeBodyPart, "setDescription", "(java.lang.String)void", null, 1);
        DataHandler dataHandler = (DataHandler) Mockingbird.getProxyObject(DataHandler.class);
        Mockingbird.replaceObjectForRecording(DataHandler.class, "<init>(javax.activation.DataSource)", dataHandler);
        mimeBodyPart.setDataHandler(dataHandler);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MultiPartEmail.class);
        MultiPartEmail result = multiPartEmail.attach(emailAttachment);
        assertNotNull("result", result);
    }
    
    public void testAttachWithAggressiveMocks5() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        EmailAttachment emailAttachment = (EmailAttachment) Mockingbird.getProxyObject(EmailAttachment.class);
        URL uRL = (URL) Mockingbird.getProxyObject(URL.class);
        InputStream inputStream = (InputStream) Mockingbird.getProxyObject(InputStream.class);
        emailAttachment.setURL(uRL);
        emailAttachment.setName("");
        emailAttachment.setDescription("");
        emailAttachment.setDisposition("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, uRL, "openStream", "()java.io.InputStream", new Object[] {}, inputStream, 1);
        Mockingbird.setReturnValue(false, inputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.replaceObjectForRecording(URLDataSource.class, "<init>(java.net.URL)", Mockingbird.getProxyObject(URLDataSource.class));
        Mockingbird.setReturnValue(false, multiPartEmail, "attach", "(javax.activation.DataSource,java.lang.String,java.lang.String,java.lang.String)org.mentawai.mail.MultiPartEmail", null, 1);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        MultiPartEmail result = multiPartEmail.attach(emailAttachment);
        assertNull("result", result);
        assertNull("multiPartEmail.emailBody", multiPartEmail.emailBody);
        assertFalse("multiPartEmail.initialized", ((Boolean) getPrivateField(multiPartEmail, "initialized")).booleanValue());
        assertFalse("multiPartEmail.isBoolHasAttachments()", multiPartEmail.isBoolHasAttachments());
        assertNull("multiPartEmail.container", getPrivateField(multiPartEmail, "container"));
    }
    
    public void testGetContainerWithAggressiveMocks() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        setPrivateField(multiPartEmail, "initialized", Boolean.TRUE);
        setPrivateField(multiPartEmail, "container", null);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        MimeMultipart result = multiPartEmail.getContainer();
        assertNull("result", result);
        assertNull("multiPartEmail.emailBody", multiPartEmail.emailBody);
        assertTrue("multiPartEmail.initialized", ((Boolean) getPrivateField(multiPartEmail, "initialized")).booleanValue());
        assertNull("multiPartEmail.container", getPrivateField(multiPartEmail, "container"));
    }
    
    public void testGetPrimaryBodyPart() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class);
        Mockingbird.enterRecordingMode();
        multiPartEmail.init();
        Mockingbird.setNormalReturnForVoid();
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.setReturnValue(multiPartEmail.getContainer(), mimeMultipart);
        mimeMultipart.addBodyPart(null, 100);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        MimeBodyPart primaryBodyPart = multiPartEmail.getPrimaryBodyPart();
        MimeBodyPart result = multiPartEmail.getPrimaryBodyPart();
        assertSame("result", primaryBodyPart, result);
        assertNotNull("multiPartEmail.emailBody", multiPartEmail.emailBody);
        assertTrue("multiPartEmail.initialized", ((Boolean) getPrivateField(multiPartEmail, "initialized")).booleanValue());
        assertNotNull("multiPartEmail.container", getPrivateField(multiPartEmail, "container"));
    }
    
    public void testGetPrimaryBodyPart1() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        Mockingbird.enterRecordingMode();
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart);
        mimeMultipart.addBodyPart(null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        htmlEmail.attach((DataSource) null, "testMultiPartEmailName", "testMultiPartEmailDescription", "testMultiPartEmailDisposition");
        MimeBodyPart primaryBodyPart = htmlEmail.getPrimaryBodyPart();
        htmlEmail.setSubject("testMultiPartEmailASubject");
        MimeBodyPart result = htmlEmail.getPrimaryBodyPart();
        assertSame("result", primaryBodyPart, result);
    }
    
    public void testSendWithAggressiveMocks() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Date date = (Date) Mockingbird.getProxyObject(Date.class);
        setPrivateField(multiPartEmail, "primaryBodyPart", null);
        setPrivateField(multiPartEmail, "initialized", Boolean.FALSE);
        setPrivateField(multiPartEmail, "container", mimeMultipart);
        multiPartEmail.setSubType("");
        setPrivateField(multiPartEmail, "session", null);
        multiPartEmail.popBeforeSmtp = false;
        multiPartEmail.headers = map;
        multiPartEmail.replyList = list;
        multiPartEmail.bccList = list2;
        multiPartEmail.ccList = list3;
        multiPartEmail.toList = list4;
        multiPartEmail.fromAddress = new InternetAddress();
        multiPartEmail.emailBody = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        multiPartEmail.content = null;
        multiPartEmail.subject = "";
        Mockingbird.enterRecordingMode();
        multiPartEmail.init();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, mimeMultipart, "setSubType", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(multiPartEmail.getMailSession(), null);
        MimeMessage mimeMessage = (MimeMessage) Mockingbird.getProxyObject(MimeMessage.class);
        Mockingbird.replaceObjectForRecording(MimeMessage.class, "<init>(javax.mail.Session)", mimeMessage);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setContent", "(javax.mail.Multipart)void", null, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setFrom", "(javax.mail.Address)void", null, 1);
        Mockingbird.setReturnValue(list4.size(), 0);
        Mockingbird.setReturnValue(list3.size(), 0);
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(false, list4, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list3, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list2, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(map.size(), 1);
        Mockingbird.setReturnValue(map.keySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(mimeMessage.getSentDate(), date);
        Transport.send(mimeMessage);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MultiPartEmail.class);
        multiPartEmail.send();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSendWithAggressiveMocks1() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Date date = (Date) Mockingbird.getProxyObject(Date.class);
        setPrivateField(multiPartEmail, "primaryBodyPart", null);
        multiPartEmail.setSubType(null);
        setPrivateField(multiPartEmail, "session", null);
        multiPartEmail.popBeforeSmtp = false;
        multiPartEmail.headers = map;
        multiPartEmail.replyList = list;
        multiPartEmail.bccList = list2;
        multiPartEmail.ccList = list3;
        multiPartEmail.toList = list4;
        multiPartEmail.fromAddress = new InternetAddress();
        multiPartEmail.emailBody = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        multiPartEmail.content = null;
        multiPartEmail.subject = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(multiPartEmail.getMailSession(), null);
        MimeMessage mimeMessage = (MimeMessage) Mockingbird.getProxyObject(MimeMessage.class);
        Mockingbird.replaceObjectForRecording(MimeMessage.class, "<init>(javax.mail.Session)", mimeMessage);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setContent", "(javax.mail.Multipart)void", null, 1);
        Mockingbird.setReturnValue(false, mimeMessage, "setFrom", "(javax.mail.Address)void", null, 1);
        Mockingbird.setReturnValue(list4.size(), 0);
        Mockingbird.setReturnValue(list3.size(), 0);
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(false, list4, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list3, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list2, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(map.size(), 1);
        Mockingbird.setReturnValue(map.keySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, mimeMessage, "addHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(mimeMessage.getSentDate(), date);
        Transport.send(mimeMessage);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MultiPartEmail.class);
        multiPartEmail.send();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSendWithAggressiveMocks2() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        MimeBodyPart mimeBodyPart2 = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(multiPartEmail, "primaryBodyPart", mimeBodyPart);
        multiPartEmail.setSubType(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(multiPartEmail.getPrimaryBodyPart(), mimeBodyPart2);
        Mockingbird.setException(mimeBodyPart2.getContent(), iOException);
        Mockingbird.setReturnValue(Email.class, "send", "()void", null, 1);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        multiPartEmail.send();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSendWithAggressiveMocks3() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        MimeBodyPart mimeBodyPart2 = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        setPrivateField(multiPartEmail, "primaryBodyPart", mimeBodyPart);
        multiPartEmail.setSubType(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(multiPartEmail.getPrimaryBodyPart(), mimeBodyPart2);
        Mockingbird.setReturnValue(mimeBodyPart2.getContent(), null);
        Mockingbird.setReturnValue(Email.class, "send", "()void", null, 1);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        multiPartEmail.send();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetBoolHasAttachments() throws Throwable {
        Collection aCollection = new ArrayList(100);
        boolean b = aCollection.add("");
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setBcc(aCollection);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        htmlEmail.setBoolHasAttachments(b);
        assertTrue("htmlEmail.isBoolHasAttachments()", htmlEmail.isBoolHasAttachments());
    }
    
    public void testSetMsgWithAggressiveMocks() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        multiPartEmail.charset = "";
        setPrivateField(multiPartEmail, "initialized", Boolean.FALSE);
        setPrivateField(multiPartEmail, "primaryBodyPart", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(StringUtils.isEmpty(""), false);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.FALSE, 1);
        multiPartEmail.init();
        Mockingbird.setNormalReturnForVoid();
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.replaceObjectForRecording(MimeBodyPart.class, "<init>()", mimeBodyPart);
        Mockingbird.setReturnValue(multiPartEmail.getContainer(), mimeMultipart);
        mimeMultipart.addBodyPart(mimeBodyPart, 0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, mimeBodyPart, "setText", "(java.lang.String)void", null, 1);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        Email result = multiPartEmail.setMsg("");
        assertNotNull("result", result);
    }
    
    public void testSetMsgWithAggressiveMocks1() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        setPrivateField(multiPartEmail, "initialized", Boolean.FALSE);
        setPrivateField(multiPartEmail, "primaryBodyPart", null);
        multiPartEmail.charset = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(StringUtils.isEmpty(""), false);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        multiPartEmail.init();
        Mockingbird.setNormalReturnForVoid();
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.replaceObjectForRecording(MimeBodyPart.class, "<init>()", mimeBodyPart);
        Mockingbird.setReturnValue(multiPartEmail.getContainer(), mimeMultipart);
        mimeMultipart.addBodyPart(mimeBodyPart, 0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, mimeBodyPart, "setText", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        Email result = multiPartEmail.setMsg("");
        assertNotNull("result", result);
    }
    
    public void testSetSubType() throws Throwable {
        Collection aCollection = new ArrayList(100);
        aCollection.add(new Object());
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.setBcc(aCollection);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        htmlEmail.setSubType("testMultiPartEmailASubType");
        assertEquals("htmlEmail.getSubType()", "testMultiPartEmailASubType", htmlEmail.getSubType());
    }
    
    public void testAddPartThrowsEmailExceptionWithAggressiveMocks() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.enterRecordingMode();
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.replaceObjectForRecording(MimeBodyPart.class, "<init>()", mimeBodyPart);
        setPrivateField(multiPartEmail, "initialized", Boolean.FALSE);
        setPrivateField(multiPartEmail, "container", mimeMultipart);
        mimeBodyPart.setContent("", "");
        Mockingbird.setNormalReturnForVoid();
        multiPartEmail.init();
        Mockingbird.setNormalReturnForVoid();
        mimeMultipart.addBodyPart(mimeBodyPart);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(MessagingException.class));
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.Throwable)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(MultiPartEmail.class);
        try {
            multiPartEmail.addPart("", "");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddPartThrowsEmailExceptionWithAggressiveMocks1() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        MessagingException messagingException = (MessagingException) Mockingbird.getProxyObject(MessagingException.class);
        setPrivateField(multiPartEmail, "initialized", Boolean.FALSE);
        setPrivateField(multiPartEmail, "container", mimeMultipart);
        Mockingbird.enterRecordingMode();
        multiPartEmail.init();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setException(mimeMultipart.getCount(), messagingException);
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.Throwable)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(MultiPartEmail.class);
        try {
            multiPartEmail.addPart(null);
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddPartThrowsEmailExceptionWithAggressiveMocks2() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.enterRecordingMode();
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.replaceObjectForRecording(MimeBodyPart.class, "<init>()", mimeBodyPart);
        setPrivateField(multiPartEmail, "initialized", Boolean.FALSE);
        setPrivateField(multiPartEmail, "container", mimeMultipart);
        mimeBodyPart.setContent(null);
        Mockingbird.setNormalReturnForVoid();
        multiPartEmail.init();
        Mockingbird.setNormalReturnForVoid();
        mimeMultipart.addBodyPart(mimeBodyPart, 0);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(MessagingException.class));
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.Throwable)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(MultiPartEmail.class);
        try {
            multiPartEmail.addPart((MimeMultipart) null, 0);
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAddPartThrowsNullPointerException() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class);
        Mockingbird.enterRecordingMode();
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.setReturnValue(multiPartEmail.getPrimaryBodyPart(), mimeBodyPart);
        mimeBodyPart.setText("testString");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MultiPartEmail.class);
        multiPartEmail.setMsg("testString");
        try {
            multiPartEmail.addPart((MimeMultipart) null, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MimeBodyPart.class, ex);
            assertNull("multiPartEmail.emailBody", multiPartEmail.emailBody);
            assertFalse("multiPartEmail.initialized", ((Boolean) getPrivateField(multiPartEmail, "initialized")).booleanValue());
            assertNull("multiPartEmail.container", getPrivateField(multiPartEmail, "container"));
        }
    }
    
    public void testAttachThrowsEmailException() throws Throwable {
        byte[] data = new byte[0];
        DataSource ds = new ByteArrayDataSource(data, "testMultiPartEmailAType");
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class);
        Mockingbird.enterRecordingMode();
        MultiPartEmail attach = multiPartEmail.attach(ds, "testMultiPartEmailParam2", "testMultiPartEmailParam3", "testMultiPartEmailParam4");
        Mockingbird.setReturnValue(attach, multiPartEmail);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        multiPartEmail.attach(ds, "testMultiPartEmailName", "testMultiPartEmailDescription");
        try {
            multiPartEmail.attach((DataSource) null, "testMultiPartEmailName", "testMultiPartEmailDescription");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertEquals("ex.getMessage()", "Invalid Datasource", ex.getMessage());
            assertThrownBy(MultiPartEmail.class, ex);
            assertNotNull("multiPartEmail.emailBody", multiPartEmail.emailBody);
            assertTrue("multiPartEmail.initialized", ((Boolean) getPrivateField(multiPartEmail, "initialized")).booleanValue());
            assertTrue("multiPartEmail.isBoolHasAttachments()", multiPartEmail.isBoolHasAttachments());
            assertNotNull("multiPartEmail.container", getPrivateField(multiPartEmail, "container"));
        }
    }
    
    public void testAttachThrowsEmailException1() throws Throwable {
        DataSource ds = new FileDataSource("testMultiPartEmailParam1");
        Collection aCollection = new ArrayList(100);
        aCollection.add("testString");
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class);
        multiPartEmail.setTo(aCollection);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        try {
            multiPartEmail.attach(ds, "testMultiPartEmailName", "testMultiPartEmailDescription");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertEquals("ex.getMessage()", "Invalid Datasource", ex.getMessage());
            assertThrownBy(MultiPartEmail.class, ex);
            assertNull("multiPartEmail.emailBody", multiPartEmail.emailBody);
            assertFalse("multiPartEmail.initialized", ((Boolean) getPrivateField(multiPartEmail, "initialized")).booleanValue());
            assertFalse("multiPartEmail.isBoolHasAttachments()", multiPartEmail.isBoolHasAttachments());
            assertNull("multiPartEmail.container", getPrivateField(multiPartEmail, "container"));
            assertEquals("(FileDataSource) ds.getName()", "testMultiPartEmailParam1", ((FileDataSource) ds).getName());
        }
    }
    
    public void testAttachThrowsEmailException2() throws Throwable {
        MimeMultipart multipart = new MimeMultipart();
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        Mockingbird.enterRecordingMode();
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart);
        Mockingbird.setReturnValue(mimeMultipart.getCount(), 2);
        Mockingbird.setReturnValue(htmlEmail.addPart(multipart, 2), htmlEmail);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        htmlEmail.addPart(multipart);
        try {
            htmlEmail.attach(new EmailAttachment());
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertEquals("ex.getMessage()", "Cannot attach file \"\"", ex.getMessage());
            assertThrownBy(MultiPartEmail.class, ex);
            assertNull("htmlEmail.emailBody", htmlEmail.emailBody);
            assertFalse("htmlEmail.initialized", ((Boolean) getPrivateField(htmlEmail, "initialized")).booleanValue());
            assertFalse("htmlEmail.isBoolHasAttachments()", htmlEmail.isBoolHasAttachments());
            assertNull("htmlEmail.container", getPrivateField(htmlEmail, "container"));
        }
    }
    
    public void testAttachThrowsEmailException3() throws Throwable {
        DataSource mimePartDataSource = new MimePartDataSource(new MimeBodyPart(new InternetHeaders(), "testString".getBytes()));
        MimeMultipart multipart = new MimeMultipart(mimePartDataSource);
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class);
        Mockingbird.enterRecordingMode();
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.setReturnValue(multiPartEmail.getContainer(), mimeMultipart);
        Mockingbird.setReturnValue(mimeMultipart.getCount(), 3);
        Mockingbird.setReturnValue(multiPartEmail.addPart(multipart, 3), multiPartEmail);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        multiPartEmail.addPart(multipart);
        EmailAttachment attachment = new EmailAttachment();
        attachment.setPath(null);
        try {
            multiPartEmail.attach(attachment);
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertEquals("ex.getMessage()", "Cannot attach file \"null\"", ex.getMessage());
            assertThrownBy(File.class, ex);
            assertNull("multiPartEmail.emailBody", multiPartEmail.emailBody);
            assertFalse("multiPartEmail.initialized", ((Boolean) getPrivateField(multiPartEmail, "initialized")).booleanValue());
            assertFalse("multiPartEmail.isBoolHasAttachments()", multiPartEmail.isBoolHasAttachments());
            assertNull("multiPartEmail.container", getPrivateField(multiPartEmail, "container"));
        }
    }
    
    public void testAttachThrowsEmailException4() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        htmlEmail.init();
        Mockingbird.enterTestMode(MultiPartEmail.class);
        try {
            htmlEmail.attach(null);
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertEquals("ex.getMessage()", "Invalid attachment supplied", ex.getMessage());
            assertThrownBy(MultiPartEmail.class, ex);
            assertNotNull("htmlEmail.emailBody", htmlEmail.emailBody);
            assertTrue("htmlEmail.initialized", ((Boolean) getPrivateField(htmlEmail, "initialized")).booleanValue());
            assertFalse("htmlEmail.isBoolHasAttachments()", htmlEmail.isBoolHasAttachments());
            assertNotNull("htmlEmail.container", getPrivateField(htmlEmail, "container"));
        }
    }
    
    public void testAttachThrowsEmailExceptionWithAggressiveMocks() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        URL uRL = (URL) Mockingbird.getProxyObject(URL.class);
        InputStream inputStream = (InputStream) Mockingbird.getProxyObject(InputStream.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, uRL, "openStream", "()java.io.InputStream", new Object[] {}, inputStream, 1);
        Mockingbird.setException(false, inputStream, "close", "()void", new Object[] {}, iOException, 1);
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(MultiPartEmail.class);
        try {
            multiPartEmail.attach(uRL, "", "", "");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertNull("multiPartEmail.getSubType()", multiPartEmail.getSubType());
        }
    }
    
    public void testAttachThrowsEmailExceptionWithAggressiveMocks1() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        MessagingException messagingException = (MessagingException) Mockingbird.getProxyObject(MessagingException.class);
        setPrivateField(multiPartEmail, "initialized", Boolean.FALSE);
        setPrivateField(multiPartEmail, "container", mimeMultipart);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(StringUtils.isEmpty(""), true);
        Mockingbird.setReturnValue(dataSource.getName(), "");
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.replaceObjectForRecording(MimeBodyPart.class, "<init>()", mimeBodyPart);
        multiPartEmail.init();
        Mockingbird.setNormalReturnForVoid();
        mimeMultipart.addBodyPart(mimeBodyPart);
        Mockingbird.setNormalReturnForVoid();
        mimeBodyPart.setDisposition("");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, mimeBodyPart, "setFileName", "(java.lang.String)void", null, 1);
        mimeBodyPart.setDescription("");
        Mockingbird.setNormalReturnForVoid();
        DataHandler dataHandler = (DataHandler) Mockingbird.getProxyObject(DataHandler.class);
        Mockingbird.replaceObjectForRecording(DataHandler.class, "<init>(javax.activation.DataSource)", dataHandler);
        mimeBodyPart.setDataHandler(dataHandler);
        Mockingbird.setExceptionForVoid(messagingException);
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.Throwable)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(MultiPartEmail.class);
        try {
            multiPartEmail.attach(dataSource, "", "", "");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testAttachThrowsEmailExceptionWithAggressiveMocks2() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getInputStream(), null);
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(MultiPartEmail.class);
        try {
            multiPartEmail.attach(dataSource, "", "");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertNull("multiPartEmail.getSubType()", multiPartEmail.getSubType());
        }
    }
    
    public void testAttachThrowsEmailExceptionWithAggressiveMocks3() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        EmailAttachment emailAttachment = (EmailAttachment) Mockingbird.getProxyObject(EmailAttachment.class);
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.enterNormalMode();
        emailAttachment.setURL(null);
        emailAttachment.setPath("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(IOException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(IOException.class));
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.String,java.lang.Throwable)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(MultiPartEmail.class);
        try {
            multiPartEmail.attach(emailAttachment);
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertNull("multiPartEmail.getSubType()", multiPartEmail.getSubType());
        }
    }
    
    public void testAttachThrowsNullPointerException() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class);
        Mockingbird.enterRecordingMode();
        multiPartEmail.init();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MultiPartEmail.class);
        MimeMultipart container = multiPartEmail.getContainer();
        DataSource ds = new ByteArrayDataSource("testMultiPartEmailData", "testMultiPartEmailAType");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(multiPartEmail.getContainer(), container);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        try {
            multiPartEmail.attach(ds, "", "testMultiPartEmailDescription", "testMultiPartEmailDisposition");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertThrownBy(MultiPartEmail.class, ex);
            assertSame("multiPartEmail.emailBody", container, multiPartEmail.emailBody);
            assertFalse("multiPartEmail.initialized", ((Boolean) getPrivateField(multiPartEmail, "initialized")).booleanValue());
            assertFalse("multiPartEmail.isBoolHasAttachments()", multiPartEmail.isBoolHasAttachments());
            assertSame("multiPartEmail.container", container, getPrivateField(multiPartEmail, "container"));
            assertEquals("(ByteArrayDataSource) ds.getContentType()", "testMultiPartEmailAType", ((ByteArrayDataSource) ds).getContentType());
        }
    }
    
    public void testAttachThrowsNullPointerException1() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class);
        multiPartEmail.init();
        DataSource ds = new URLDataSource(null);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        try {
            multiPartEmail.attach(ds, "", "testMultiPartEmailDescription", "testMultiPartEmailDisposition");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URLDataSource.class, ex);
            assertNotNull("multiPartEmail.emailBody", multiPartEmail.emailBody);
            assertTrue("multiPartEmail.initialized", ((Boolean) getPrivateField(multiPartEmail, "initialized")).booleanValue());
            assertFalse("multiPartEmail.isBoolHasAttachments()", multiPartEmail.isBoolHasAttachments());
            assertNotNull("multiPartEmail.container", getPrivateField(multiPartEmail, "container"));
        }
    }
    
    public void testAttachThrowsNullPointerException2() throws Throwable {
        HtmlEmail htmlEmail = (HtmlEmail) Mockingbird.getProxyObject(HtmlEmail.class);
        Mockingbird.enterRecordingMode();
        htmlEmail.init();
        Mockingbird.setNormalReturnForVoid();
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.setReturnValue(htmlEmail.getContainer(), mimeMultipart);
        mimeMultipart.addBodyPart(null, 100);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        htmlEmail.getPrimaryBodyPart();
        htmlEmail.setBounceAddress("testMultiPartEmailEmail");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(htmlEmail.attach((URL) null, "testString", "testString", "attachment"), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(MultiPartEmail.class);
        try {
            htmlEmail.attach((URL) null, "testString", "testString");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("htmlEmail.emailBody", htmlEmail.emailBody);
            assertFalse("htmlEmail.initialized", ((Boolean) getPrivateField(htmlEmail, "initialized")).booleanValue());
            assertFalse("htmlEmail.isBoolHasAttachments()", htmlEmail.isBoolHasAttachments());
            assertNull("htmlEmail.container", getPrivateField(htmlEmail, "container"));
        }
    }
    
    public void testAttachThrowsNullPointerException3() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class);
        multiPartEmail.init();
        DataSource ds = new FileDataSource((File) null);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        try {
            multiPartEmail.attach(ds, "testMultiPartEmailName", "testMultiPartEmailDescription");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "name can't be null", ex.getMessage());
            assertThrownBy(FilePermission.class, ex);
            assertNotNull("multiPartEmail.emailBody", multiPartEmail.emailBody);
            assertTrue("multiPartEmail.initialized", ((Boolean) getPrivateField(multiPartEmail, "initialized")).booleanValue());
            assertFalse("multiPartEmail.isBoolHasAttachments()", multiPartEmail.isBoolHasAttachments());
            assertNotNull("multiPartEmail.container", getPrivateField(multiPartEmail, "container"));
        }
    }
    
    public void testAttachThrowsNullPointerException4() throws Throwable {
        MimeMultipart multipart = new MimeMultipart(new MimePartDataSource(new MimeBodyPart()));
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class);
        Mockingbird.enterRecordingMode();
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        Mockingbird.setReturnValue(multiPartEmail.getContainer(), mimeMultipart);
        mimeMultipart.addBodyPart(null, 100);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        multiPartEmail.addPart(multipart, 100);
        try {
            multiPartEmail.attach((URL) null, "testMultiPartEmailName", "testMultiPartEmailDescription", "testMultiPartEmailDisposition");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MultiPartEmail.class, ex);
            assertNull("multiPartEmail.emailBody", multiPartEmail.emailBody);
            assertFalse("multiPartEmail.initialized", ((Boolean) getPrivateField(multiPartEmail, "initialized")).booleanValue());
            assertFalse("multiPartEmail.isBoolHasAttachments()", multiPartEmail.isBoolHasAttachments());
            assertNull("multiPartEmail.container", getPrivateField(multiPartEmail, "container"));
        }
    }
    
    public void testGetPrimaryBodyPartThrowsNullPointerException() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class);
        Mockingbird.enterRecordingMode();
        multiPartEmail.init();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MultiPartEmail.class);
        MimeMultipart container = multiPartEmail.getContainer();
        Collection aCollection = new ArrayList(100);
        aCollection.add(new MimeMultipart("testMultiPartEmailParam1"));
        multiPartEmail.setBcc(aCollection);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(multiPartEmail.getContainer(), container);
        Mockingbird.enterTestMode(MultiPartEmail.class);
        try {
            multiPartEmail.getPrimaryBodyPart();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertThrownBy(MultiPartEmail.class, ex);
            assertNotNull("multiPartEmail.emailBody", multiPartEmail.emailBody);
            assertTrue("multiPartEmail.initialized", ((Boolean) getPrivateField(multiPartEmail, "initialized")).booleanValue());
            assertNotNull("multiPartEmail.primaryBodyPart", getPrivateField(multiPartEmail, "primaryBodyPart"));
            assertNotNull("multiPartEmail.container", getPrivateField(multiPartEmail, "container"));
        }
    }
    
    public void testInitThrowsIllegalStateException() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class);
        multiPartEmail.init();
        Mockingbird.enterTestMode(MultiPartEmail.class);
        try {
            multiPartEmail.init();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Already initialized", ex.getMessage());
            assertThrownBy(MultiPartEmail.class, ex);
            assertNotNull("multiPartEmail.emailBody", multiPartEmail.emailBody);
            assertTrue("multiPartEmail.initialized", ((Boolean) getPrivateField(multiPartEmail, "initialized")).booleanValue());
            assertNotNull("multiPartEmail.container", getPrivateField(multiPartEmail, "container"));
        }
    }
    
    public void testSendThrowsEmailExceptionWithAggressiveMocks() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        MessagingException messagingException = (MessagingException) Mockingbird.getProxyObject(MessagingException.class);
        setPrivateField(multiPartEmail, "primaryBodyPart", null);
        setPrivateField(multiPartEmail, "initialized", Boolean.FALSE);
        setPrivateField(multiPartEmail, "container", mimeMultipart);
        multiPartEmail.setSubType("");
        Mockingbird.enterRecordingMode();
        multiPartEmail.init();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setException(false, mimeMultipart, "setSubType", "(java.lang.String)void", messagingException, 1);
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.Throwable)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(MultiPartEmail.class);
        try {
            multiPartEmail.send();
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testSetMsgThrowsEmailException() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class);
        multiPartEmail.init();
        multiPartEmail.setCharset("testString");
        Mockingbird.enterRecordingMode();
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.setReturnValue(multiPartEmail.getPrimaryBodyPart(), mimeBodyPart);
        mimeBodyPart.setText("*", "testString");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MultiPartEmail.class);
        multiPartEmail.setMsg("*");
        try {
            multiPartEmail.setMsg("");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertEquals("ex.getMessage()", "Invalid message supplied", ex.getMessage());
            assertThrownBy(MultiPartEmail.class, ex);
            assertNotNull("multiPartEmail.emailBody", multiPartEmail.emailBody);
            assertTrue("multiPartEmail.initialized", ((Boolean) getPrivateField(multiPartEmail, "initialized")).booleanValue());
            assertNotNull("multiPartEmail.container", getPrivateField(multiPartEmail, "container"));
            assertNull("multiPartEmail.primaryBodyPart", getPrivateField(multiPartEmail, "primaryBodyPart"));
        }
    }
    
    public void testSetMsgThrowsEmailExceptionWithAggressiveMocks() throws Throwable {
        MultiPartEmail multiPartEmail = (MultiPartEmail) Mockingbird.getProxyObject(MultiPartEmail.class, true);
        MimeMultipart mimeMultipart = (MimeMultipart) Mockingbird.getProxyObject(MimeMultipart.class);
        MessagingException messagingException = (MessagingException) Mockingbird.getProxyObject(MessagingException.class);
        setPrivateField(multiPartEmail, "initialized", Boolean.FALSE);
        setPrivateField(multiPartEmail, "primaryBodyPart", null);
        multiPartEmail.charset = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(StringUtils.isEmpty(""), false);
        Mockingbird.setReturnValue(true, StringUtils.class, "isNotEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        multiPartEmail.init();
        Mockingbird.setNormalReturnForVoid();
        MimeBodyPart mimeBodyPart = (MimeBodyPart) Mockingbird.getProxyObject(MimeBodyPart.class);
        Mockingbird.replaceObjectForRecording(MimeBodyPart.class, "<init>()", mimeBodyPart);
        Mockingbird.setReturnValue(multiPartEmail.getContainer(), mimeMultipart);
        mimeMultipart.addBodyPart(mimeBodyPart, 0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setException(false, mimeBodyPart, "setText", "(java.lang.String,java.lang.String)void", messagingException, 1);
        Mockingbird.replaceObjectForRecording(EmailException.class, "<init>(java.lang.Throwable)", Mockingbird.getProxyObject(EmailException.class));
        Mockingbird.enterTestMode(MultiPartEmail.class);
        try {
            multiPartEmail.setMsg("");
            fail("Expected EmailException to be thrown");
        } catch (EmailException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
}

