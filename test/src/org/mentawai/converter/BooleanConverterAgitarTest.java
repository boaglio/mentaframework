/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:23:35 PM
 * Time to generate: 00:15.649 seconds
 *
 */

package org.mentawai.converter;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;

public class BooleanConverterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return BooleanConverter.class;
    }
    
    public void testConstructor() throws Throwable {
        BooleanConverter booleanConverter = new BooleanConverter(true);
        assertTrue("booleanConverter.notPresentIsFalse", ((Boolean) getPrivateField(booleanConverter, "notPresentIsFalse")).booleanValue());
    }
    
    public void testConstructor1() throws Throwable {
        BooleanConverter booleanConverter = new BooleanConverter();
        assertFalse("booleanConverter.notPresentIsFalse", ((Boolean) getPrivateField(booleanConverter, "notPresentIsFalse")).booleanValue());
    }
    
    public void testAllowNull() throws Throwable {
        BooleanConverter booleanConverter = new BooleanConverter();
        boolean result = booleanConverter.allowNull();
        assertTrue("result", result);
    }
    
    public void testConvert() throws Throwable {
        Boolean result = (Boolean) new BooleanConverter(true).convert(null);
        assertFalse("result", result.booleanValue());
    }
    
    public void testConvert1() throws Throwable {
        Boolean result = (Boolean) new BooleanConverter(true).convert(new Integer(0));
        assertFalse("result", result.booleanValue());
    }
    
    public void testConvert2() throws Throwable {
        Boolean result = (Boolean) new BooleanConverter().convert(Boolean.TRUE);
        assertTrue("result", result.booleanValue());
    }
    
    public void testConvert3() throws Throwable {
        Boolean value = Boolean.FALSE;
        Boolean result = (Boolean) new BooleanConverter().convert(value);
        assertSame("result", value, result);
    }
    
    public void testConvertWithAggressiveMocks() throws Throwable {
        BooleanConverter booleanConverter = (BooleanConverter) Mockingbird.getProxyObject(BooleanConverter.class, true);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, obj, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.enterTestMode(BooleanConverter.class);
        Object result = booleanConverter.convert(obj);
        assertTrue("result.booleanValue()", ((Boolean) result).booleanValue());
    }
    
    public void testConvertWithAggressiveMocks1() throws Throwable {
        BooleanConverter booleanConverter = (BooleanConverter) Mockingbird.getProxyObject(BooleanConverter.class, true);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, obj, "toString", "()java.lang.String", new Object[] {}, "on", 1);
        Mockingbird.enterTestMode(BooleanConverter.class);
        Object result = booleanConverter.convert(obj);
        assertTrue("result.booleanValue()", ((Boolean) result).booleanValue());
    }
    
    public void testConvertThrowsConversionException() throws Throwable {
        try {
            new BooleanConverter(false).convert(null);
            fail("Expected ConversionException to be thrown");
        } catch (ConversionException ex) {
            assertEquals("ex.getMessage()", "Cannot convert null value!", ex.getMessage());
            assertThrownBy(BooleanConverter.class, ex);
        }
    }
    
    public void testConvertThrowsConversionException1() throws Throwable {
        try {
            new BooleanConverter(true).convert("testString");
            fail("Expected ConversionException to be thrown");
        } catch (ConversionException ex) {
            assertEquals("ex.getMessage()", "Cannot convert testString to a boolean!", ex.getMessage());
            assertThrownBy(BooleanConverter.class, ex);
        }
    }
    
    public void testConvertThrowsConversionException2() throws Throwable {
        try {
            new BooleanConverter(true).convert("42");
            fail("Expected ConversionException to be thrown");
        } catch (ConversionException ex) {
            assertEquals("ex.getMessage()", "Cannot convert the number 42 to a boolean!", ex.getMessage());
            assertThrownBy(BooleanConverter.class, ex);
        }
    }
}

