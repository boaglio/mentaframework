/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:25:43 PM
 * Time to generate: 00:18.218 seconds
 *
 */

package org.mentawai.converter;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import org.mentawai.i18n.LocaleManager;

public class DateConverterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return DateConverter.class;
    }
    
    public void testConstructor() throws Throwable {
        DateConverter dateConverter = new DateConverter();
        assertFalse("dateConverter.useStyle", ((Boolean) getPrivateField(dateConverter, "useStyle")).booleanValue());
        assertEquals("dateConverter.style", 3, ((Number) getPrivateField(dateConverter, "style")).intValue());
    }
    
    public void testConstructor1() throws Throwable {
        DateConverter dateConverter = new DateConverter(100);
        assertTrue("dateConverter.useStyle", ((Boolean) getPrivateField(dateConverter, "useStyle")).booleanValue());
        assertEquals("dateConverter.style", 100, ((Number) getPrivateField(dateConverter, "style")).intValue());
    }
    
    public void testConvert() throws Throwable {
        ConversionException result = (ConversionException) new DateConverter().convert("\r\rvk*Tx[\u001C\u001D \u001E\u001D\t\f\r \u000B\u000B", Locale.TAIWAN);
        assertEquals("result.getMessage()", "java.text.ParseException: Unparseable date: \"vk*Tx[\"", result.getMessage());
    }
    
    public void testConvert1() throws Throwable {
        Object result = new DateConverter(100).convert("", Locale.FRENCH);
        assertNull("result", result);
    }
    
    public void testConvert2() throws Throwable {
        DateConverter dateConverter = new DateConverter();
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(LocaleManager.getDateMask(loc), "MM/dd/yyyy");
        Mockingbird.setReturnValue(LocaleManager.getDateMask(loc), "MM/dd/yyyy");
        SimpleDateFormat simpleDateFormat = (SimpleDateFormat) Mockingbird.getProxyObject(SimpleDateFormat.class);
        Mockingbird.replaceObjectForRecording(SimpleDateFormat.class, "<init>(java.lang.String)", simpleDateFormat);
        Date date = (Date) Mockingbird.getProxyObject(Date.class);
        Mockingbird.setReturnValue(false, simpleDateFormat, "parse", "(java.lang.String)java.util.Date", new Object[] {"03/09/2013"}, date, 1);
        Mockingbird.enterTestMode(DateConverter.class);
        Date result = (Date) dateConverter.convert("03/09/2013", loc);
        assertSame("result", date, result);
    }
    
    public void testConvertWithAggressiveMocks() throws Throwable {
        DateConverter dateConverter = (DateConverter) Mockingbird.getProxyObject(DateConverter.class, true);
        DateFormat dateFormat = (DateFormat) Mockingbird.getProxyObject(DateFormat.class);
        setPrivateField(dateConverter, "useStyle", Boolean.FALSE);
        setPrivateField(dateConverter, "style", new Integer(0));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "A", 1);
        Mockingbird.setReturnValue(LocaleManager.getDateMask(null), null);
        Mockingbird.setReturnValue(true, DateFormat.class, "getDateInstance", "(int,java.util.Locale)java.text.DateFormat", new Object[] {new Integer(0), null}, dateFormat, 1);
        Mockingbird.setReturnValue(false, dateFormat, "setLenient", "(boolean)void", new Object[] {new Integer(0)}, null, 1);
        Mockingbird.setReturnValue(false, dateFormat, "parse", "(java.lang.String)java.util.Date", null, 1);
        Mockingbird.enterTestMode(DateConverter.class);
        Object result = dateConverter.convert("", (Locale) null);
        assertNull("result", result);
    }
    
    public void testConvertThrowsConversionException() throws Throwable {
        try {
            new DateConverter(0).convert("testString", Locale.ITALIAN);
            fail("Expected ConversionException to be thrown");
        } catch (ConversionException ex) {
            assertEquals("ex.getMessage()", "java.text.ParseException: Unparseable date: \"testString\"", ex.getMessage());
            assertThrownBy(DateFormat.class, ex);
        }
    }
    
    public void testConvertThrowsIllegalArgumentException() throws Throwable {
        try {
            new DateConverter(100).convert("testString", Locale.FRENCH);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Illegal date style 100", ex.getMessage());
            assertThrownBy(DateFormat.class, ex);
        }
    }
    
    public void testConvertThrowsNullPointerException() throws Throwable {
        try {
            new DateConverter(0).convert("D_tG~96p", (Locale) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testConvertThrowsNullPointerException1() throws Throwable {
        try {
            new DateConverter().convert((Object) null, Locale.CANADA_FRENCH);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DateConverter.class, ex);
        }
    }
}

