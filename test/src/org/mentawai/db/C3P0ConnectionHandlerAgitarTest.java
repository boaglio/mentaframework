/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:18:34 PM
 * Time to generate: 00:23.096 seconds
 *
 */

package org.mentawai.db;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.mchange.v2.c3p0.ComboPooledDataSource;
import java.sql.Connection;
import java.sql.SQLException;
import javax.sql.DataSource;

public class C3P0ConnectionHandlerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return C3P0ConnectionHandler.class;
    }
    
    public void testConstructor() throws Throwable {
        C3P0ConnectionHandler c3P0ConnectionHandler = new C3P0ConnectionHandler("com.mchange.v2.c3p0.ComboPooledDataSource", "testC3P0ConnectionHandlerUrl", "testC3P0ConnectionHandlerUser", "testC3P0ConnectionHandlerPass");
        assertNotNull("c3P0ConnectionHandler.getComboPooledDataSource()", c3P0ConnectionHandler.getComboPooledDataSource());
    }
    
    public void testDestroy() throws Throwable {
        C3P0ConnectionHandler c3P0ConnectionHandler = new C3P0ConnectionHandler("com.mchange.v2.c3p0.ComboPooledDataSource", "testC3P0ConnectionHandlerUrl", "testC3P0ConnectionHandlerUser", "testC3P0ConnectionHandlerPass");
        c3P0ConnectionHandler.destroy();
        Object actual = getPrivateField(getPrivateField(c3P0ConnectionHandler.getComboPooledDataSource(), "pbds"), "is_closed");
        assertEquals("c3P0ConnectionHandler.getComboPooledDataSource().pbds.is_closed", Boolean.TRUE, actual);
    }
    
    public void testDestroyWithAggressiveMocks() throws Throwable {
        C3P0ConnectionHandler c3P0ConnectionHandler = (C3P0ConnectionHandler) Mockingbird.getProxyObject(C3P0ConnectionHandler.class, true);
        ComboPooledDataSource comboPooledDataSource = (ComboPooledDataSource) Mockingbird.getProxyObject(ComboPooledDataSource.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(c3P0ConnectionHandler, "cpds", comboPooledDataSource);
        Mockingbird.enterRecordingMode();
        comboPooledDataSource.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.setReturnValue(false, sQLException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(C3P0ConnectionHandler.class);
        c3P0ConnectionHandler.destroy();
        assertNotNull("c3P0ConnectionHandler.getComboPooledDataSource()", c3P0ConnectionHandler.getComboPooledDataSource());
    }
    
    public void testGetComboPooledDataSource() throws Throwable {
        C3P0ConnectionHandler c3P0ConnectionHandler = new C3P0ConnectionHandler("com.mchange.v2.c3p0.ComboPooledDataSource", "testC3P0ConnectionHandlerUrl", "testC3P0ConnectionHandlerUser", "testC3P0ConnectionHandlerPass");
        ComboPooledDataSource result = (ComboPooledDataSource) c3P0ConnectionHandler.getComboPooledDataSource();
        assertNull("result.getAutomaticTestTable()", result.getAutomaticTestTable());
    }
    
    public void testGetConnectionWithAggressiveMocks() throws Throwable {
        C3P0ConnectionHandler c3P0ConnectionHandler = (C3P0ConnectionHandler) Mockingbird.getProxyObject(C3P0ConnectionHandler.class, true);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        setPrivateField(c3P0ConnectionHandler, "cpds", dataSource);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        Mockingbird.enterTestMode(C3P0ConnectionHandler.class);
        Connection result = c3P0ConnectionHandler.getConnection();
        assertNotNull("result", result);
        assertNotNull("c3P0ConnectionHandler.getComboPooledDataSource()", c3P0ConnectionHandler.getComboPooledDataSource());
    }
    
    public void testReleaseWithAggressiveMocks() throws Throwable {
        C3P0ConnectionHandler c3P0ConnectionHandler = (C3P0ConnectionHandler) Mockingbird.getProxyObject(C3P0ConnectionHandler.class, true);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        Mockingbird.enterRecordingMode();
        connection.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.setReturnValue(false, sQLException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(C3P0ConnectionHandler.class);
        c3P0ConnectionHandler.release(connection);
        assertNull("c3P0ConnectionHandler.getComboPooledDataSource()", c3P0ConnectionHandler.getComboPooledDataSource());
    }
    
    public void testReleaseWithAggressiveMocks1() throws Throwable {
        C3P0ConnectionHandler c3P0ConnectionHandler = (C3P0ConnectionHandler) Mockingbird.getProxyObject(C3P0ConnectionHandler.class, true);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        connection.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(C3P0ConnectionHandler.class);
        c3P0ConnectionHandler.release(connection);
        assertNull("c3P0ConnectionHandler.getComboPooledDataSource()", c3P0ConnectionHandler.getComboPooledDataSource());
    }
    
    public void testReleaseWithAggressiveMocks2() throws Throwable {
        C3P0ConnectionHandler c3P0ConnectionHandler = (C3P0ConnectionHandler) Mockingbird.getProxyObject(C3P0ConnectionHandler.class, true);
        Mockingbird.enterTestMode(C3P0ConnectionHandler.class);
        c3P0ConnectionHandler.release(null);
        assertNull("c3P0ConnectionHandler.getComboPooledDataSource()", c3P0ConnectionHandler.getComboPooledDataSource());
    }
    
    public void testConstructorThrowsIllegalStateException() throws Throwable {
        try {
            new C3P0ConnectionHandler("testC3P0ConnectionHandlerDriver", "testC3P0ConnectionHandlerUrl", "testC3P0ConnectionHandlerUser", "testC3P0ConnectionHandlerPass");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Cannot find jdbc driver testC3P0ConnectionHandlerDriver! You probably did not put your JDBC driver in your /WEB-INF/lib directory!", ex.getMessage());
            assertThrownBy(C3P0ConnectionHandler.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new C3P0ConnectionHandler(null, "testC3P0ConnectionHandlerUrl", "testC3P0ConnectionHandlerUser", "testC3P0ConnectionHandlerPass");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Class.class, ex);
        }
    }
    
    public void testGetConnectionThrowsSQLExceptionWithAggressiveMocks() throws Throwable {
        C3P0ConnectionHandler c3P0ConnectionHandler = (C3P0ConnectionHandler) Mockingbird.getProxyObject(C3P0ConnectionHandler.class, true);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        setPrivateField(c3P0ConnectionHandler, "cpds", dataSource);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getConnection(), null);
        Mockingbird.replaceObjectForRecording(SQLException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(SQLException.class));
        Mockingbird.enterTestMode(C3P0ConnectionHandler.class);
        try {
            c3P0ConnectionHandler.getConnection();
            fail("Expected SQLException to be thrown");
        } catch (SQLException ex) {
            assertNotNull("c3P0ConnectionHandler.getComboPooledDataSource()", c3P0ConnectionHandler.getComboPooledDataSource());
        }
    }
}

