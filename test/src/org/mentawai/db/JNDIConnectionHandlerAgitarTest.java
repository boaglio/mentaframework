/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:22:21 PM
 * Time to generate: 00:19.078 seconds
 *
 */

package org.mentawai.db;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Map;
import javax.naming.InitialContext;
import javax.sql.DataSource;
import org.agitar.mock.naming.MockContext;

public class JNDIConnectionHandlerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return JNDIConnectionHandler.class;
    }
    
    public void testConstructor() throws Throwable {
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        MockContext.bindAll("java:comp/env/testString", dataSource);
        Mockingbird.enterTestMode(JNDIConnectionHandler.class);
        JNDIConnectionHandler jNDIConnectionHandler = (JNDIConnectionHandler) callPrivateMethod("org.mentawai.db.JNDIConnectionHandler", "<init>", new Class[] {String.class}, null, new Object[] {"testString"});
        assertSame("jNDIConnectionHandler.ds", dataSource, getPrivateField(jNDIConnectionHandler, "ds"));
        assertEquals("jNDIConnectionHandler.poolname", "testString", getPrivateField(jNDIConnectionHandler, "poolname"));
    }
    
    public void testDestroy() throws Throwable {
        MockContext.bindAll("java:comp/env/java.naming.faPctory.initial", Mockingbird.getProxyObject(DataSource.class));
        JNDIConnectionHandler jNDIConnectionHandler = (JNDIConnectionHandler) callPrivateMethod("org.mentawai.db.JNDIConnectionHandler", "<init>", new Class[] {String.class}, null, new Object[] {"java.naming.faPctory.initial"});
        Mockingbird.enterTestMode(JNDIConnectionHandler.class);
        jNDIConnectionHandler.destroy();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetConnection() throws Throwable {
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        MockContext.bindAll("java:comp/env/) returned null !!!", dataSource);
        JNDIConnectionHandler jNDIConnectionHandler = (JNDIConnectionHandler) callPrivateMethod("org.mentawai.db.JNDIConnectionHandler", "<init>", new Class[] {String.class}, null, new Object[] {") returned null !!!"});
        Mockingbird.enterRecordingMode();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        Mockingbird.enterTestMode(JNDIConnectionHandler.class);
        Connection result = jNDIConnectionHandler.getConnection();
        assertSame("result", connection, result);
        assertSame("jNDIConnectionHandler.ds", dataSource, getPrivateField(jNDIConnectionHandler, "ds"));
    }
    
    public void testGetInstance() throws Throwable {
        storeStaticField(JNDIConnectionHandler.class, "single");
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        ConnectionHandler connectionHandler = (ConnectionHandler) Mockingbird.getProxyObject(ConnectionHandler.class);
        setPrivateField(JNDIConnectionHandler.class, "single", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), null);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", connectionHandler, 1);
        Mockingbird.enterTestMode(JNDIConnectionHandler.class);
        ConnectionHandler result = JNDIConnectionHandler.getInstance("");
        assertNotNull("result", result);
        assertNotNull("JNDIConnectionHandler.single", getPrivateField(JNDIConnectionHandler.class, "single"));
    }
    
    public void testGetInstance1() throws Throwable {
        storeStaticField(JNDIConnectionHandler.class, "single");
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(JNDIConnectionHandler.class, "single", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), null);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(JNDIConnectionHandler.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(JNDIConnectionHandler.class, true));
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(JNDIConnectionHandler.class);
        ConnectionHandler result = JNDIConnectionHandler.getInstance("");
        assertNotNull("result", result);
        assertNotNull("JNDIConnectionHandler.single", getPrivateField(JNDIConnectionHandler.class, "single"));
    }
    
    public void testRelease() throws Throwable {
        MockContext.bindAll("java:comp/env/testString", Mockingbird.getProxyObject(DataSource.class));
        JNDIConnectionHandler jNDIConnectionHandler = (JNDIConnectionHandler) callPrivateMethod("org.mentawai.db.JNDIConnectionHandler", "<init>", new Class[] {String.class}, null, new Object[] {"testString"});
        Connection conn = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        conn.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JNDIConnectionHandler.class);
        jNDIConnectionHandler.release(conn);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRelease1() throws Throwable {
        MockContext.bindAll("java:comp/env/testString", Mockingbird.getProxyObject(DataSource.class));
        JNDIConnectionHandler jNDIConnectionHandler = (JNDIConnectionHandler) callPrivateMethod("org.mentawai.db.JNDIConnectionHandler", "<init>", new Class[] {String.class}, null, new Object[] {"testString"});
        Mockingbird.enterTestMode(JNDIConnectionHandler.class);
        jNDIConnectionHandler.release(null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testReleaseWithAggressiveMocks() throws Throwable {
        JNDIConnectionHandler jNDIConnectionHandler = (JNDIConnectionHandler) Mockingbird.getProxyObject(JNDIConnectionHandler.class, true);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        Mockingbird.enterRecordingMode();
        connection.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.setReturnValue(false, sQLException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(JNDIConnectionHandler.class);
        jNDIConnectionHandler.release(connection);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testConstructorThrowsArrayIndexOutOfBoundsException() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(false, Mockingbird.getProxyObject(InitialContext.class), "lookup", "(java.lang.String)java.lang.Object", (Throwable) Mockingbird.getProxyObject(ArrayIndexOutOfBoundsException.class), 1);
        Mockingbird.enterTestMode(JNDIConnectionHandler.class);
        try {
            callPrivateMethod("org.mentawai.db.JNDIConnectionHandler", "<init>", new Class[] {String.class}, null, new Object[] {"testJNDIConnectionHandlerPoolname"});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testConstructorThrowsRuntimeException() throws Throwable {
        try {
            callPrivateMethod("org.mentawai.db.JNDIConnectionHandler", "<init>", new Class[] {String.class}, null, new Object[] {"testJNDIConnectionHandlerPoolname"});
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertEquals("ex.getMessage()", "javax.naming.NameNotFoundException: Name [java:comp] is not bound", ex.getMessage());
            assertThrownBy(JNDIConnectionHandler.class, ex);
        }
    }
    
    public void testGetConnectionThrowsSQLException() throws Throwable {
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        MockContext.bindAll("java:comp/env/testString", dataSource);
        JNDIConnectionHandler jNDIConnectionHandler = (JNDIConnectionHandler) callPrivateMethod("org.mentawai.db.JNDIConnectionHandler", "<init>", new Class[] {String.class}, null, new Object[] {"testString"});
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getConnection(), null);
        Mockingbird.replaceObjectForRecording(SQLException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(SQLException.class));
        Mockingbird.enterTestMode(JNDIConnectionHandler.class);
        try {
            jNDIConnectionHandler.getConnection();
            fail("Expected SQLException to be thrown");
        } catch (SQLException ex) {
            assertSame("jNDIConnectionHandler.ds", dataSource, getPrivateField(jNDIConnectionHandler, "ds"));
        }
    }
    
    public void testGetInstanceThrowsArrayIndexOutOfBoundsException() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setConstructorForException(JNDIConnectionHandler.class, "<init>(java.lang.String)", (Throwable) Mockingbird.getProxyObject(ArrayIndexOutOfBoundsException.class));
        Mockingbird.enterTestMode(JNDIConnectionHandler.class);
        try {
            JNDIConnectionHandler.getInstance("testJNDIConnectionHandlerPoolname");
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 1 assertion
        }
    }
    
    public void testGetInstanceThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setConstructorForException(JNDIConnectionHandler.class, "<init>(java.lang.String)", (Throwable) Mockingbird.getProxyObject(ArrayIndexOutOfBoundsException.class));
        Mockingbird.enterTestMode(JNDIConnectionHandler.class);
        try {
            JNDIConnectionHandler.getInstance("testJNDIConnectionHandlerPoolname");
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 1 assertion
        }
    }
    
    public void testGetInstanceThrowsNullPointerException() throws Throwable {
        try {
            JNDIConnectionHandler.getInstance(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 3 assertions
        }
    }
    
    public void testGetInstanceThrowsRuntimeException() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setConstructorForException(JNDIConnectionHandler.class, "<init>(java.lang.String)", (Throwable) Mockingbird.getProxyObject(RuntimeException.class));
        Mockingbird.enterTestMode(JNDIConnectionHandler.class);
        try {
            JNDIConnectionHandler.getInstance("testJNDIConnectionHandlerPoolname");
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 1 assertion
        }
    }
    
    public void testGetInstanceThrowsRuntimeException1() throws Throwable {
        try {
            JNDIConnectionHandler.getInstance("testJNDIConnectionHandlerPoolname");
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 3 assertions
        }
    }
}

