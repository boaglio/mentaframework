/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:20:05 PM
 * Time to generate: 00:20.142 seconds
 *
 */

package org.mentawai.db;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.sql.Connection;
import java.sql.SQLException;
import javax.sql.DataSource;

public class DBCPConnectionHandlerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return DBCPConnectionHandler.class;
    }
    
    public void testGetBasicDataSourceWithAggressiveMocks() throws Throwable {
        DBCPConnectionHandler dBCPConnectionHandler = (DBCPConnectionHandler) Mockingbird.getProxyObject(DBCPConnectionHandler.class, true);
        setPrivateField(dBCPConnectionHandler, "bds", null);
        Mockingbird.enterTestMode(DBCPConnectionHandler.class);
        DataSource result = dBCPConnectionHandler.getBasicDataSource();
        assertNull("result", result);
    }
    
    public void testGetConnectionWithAggressiveMocks() throws Throwable {
        DBCPConnectionHandler dBCPConnectionHandler = (DBCPConnectionHandler) Mockingbird.getProxyObject(DBCPConnectionHandler.class, true);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        setPrivateField(dBCPConnectionHandler, "bds", dataSource);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        Mockingbird.enterTestMode(DBCPConnectionHandler.class);
        Connection result = dBCPConnectionHandler.getConnection();
        assertNotNull("result", result);
        assertNotNull("dBCPConnectionHandler.getBasicDataSource()", dBCPConnectionHandler.getBasicDataSource());
    }
    
    public void testReleaseWithAggressiveMocks() throws Throwable {
        DBCPConnectionHandler dBCPConnectionHandler = (DBCPConnectionHandler) Mockingbird.getProxyObject(DBCPConnectionHandler.class, true);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        Mockingbird.enterRecordingMode();
        connection.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.setReturnValue(false, sQLException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(DBCPConnectionHandler.class);
        dBCPConnectionHandler.release(connection);
        assertNull("dBCPConnectionHandler.getBasicDataSource()", dBCPConnectionHandler.getBasicDataSource());
    }
    
    public void testReleaseWithAggressiveMocks1() throws Throwable {
        DBCPConnectionHandler dBCPConnectionHandler = (DBCPConnectionHandler) Mockingbird.getProxyObject(DBCPConnectionHandler.class, true);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Mockingbird.enterRecordingMode();
        connection.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DBCPConnectionHandler.class);
        dBCPConnectionHandler.release(connection);
        assertNull("dBCPConnectionHandler.getBasicDataSource()", dBCPConnectionHandler.getBasicDataSource());
    }
    
    public void testReleaseWithAggressiveMocks2() throws Throwable {
        DBCPConnectionHandler dBCPConnectionHandler = (DBCPConnectionHandler) Mockingbird.getProxyObject(DBCPConnectionHandler.class, true);
        Mockingbird.enterTestMode(DBCPConnectionHandler.class);
        dBCPConnectionHandler.release(null);
        assertNull("dBCPConnectionHandler.getBasicDataSource()", dBCPConnectionHandler.getBasicDataSource());
    }
    
    public void testConstructorThrowsNoClassDefFoundError() throws Throwable {
        try {
            new DBCPConnectionHandler("testDBCPConnectionHandlerDriver", "testDBCPConnectionHandlerUrl", "testDBCPConnectionHandlerUser", "testDBCPConnectionHandlerPass");
            fail("Expected NoClassDefFoundError to be thrown");
        } catch (NoClassDefFoundError ex) {
            assertEquals("ex.getMessage()", "org/apache/commons/pool/impl/GenericObjectPool", ex.getMessage());
            assertThrownBy(Class.class, ex);
        }
    }
    
    public void testGetConnectionThrowsSQLExceptionWithAggressiveMocks() throws Throwable {
        DBCPConnectionHandler dBCPConnectionHandler = (DBCPConnectionHandler) Mockingbird.getProxyObject(DBCPConnectionHandler.class, true);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        setPrivateField(dBCPConnectionHandler, "bds", dataSource);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getConnection(), null);
        Mockingbird.replaceObjectForRecording(SQLException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(SQLException.class));
        Mockingbird.enterTestMode(DBCPConnectionHandler.class);
        try {
            dBCPConnectionHandler.getConnection();
            fail("Expected SQLException to be thrown");
        } catch (SQLException ex) {
            assertNotNull("dBCPConnectionHandler.getBasicDataSource()", dBCPConnectionHandler.getBasicDataSource());
        }
    }
}

