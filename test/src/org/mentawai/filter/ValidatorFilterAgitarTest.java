/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:22:58 PM
 * Time to generate: 00:22.578 seconds
 *
 */

package org.mentawai.filter;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.Collections;
import java.util.Map;
import org.mentawai.action.LogoutAction;
import org.mentawai.core.ActionException;
import org.mentawai.core.InvocationChain;
import org.mentawai.core.PojoAction;
import org.mentawai.i18n.LocaleManager;
import org.mentawai.message.ClassMessageContext;
import org.mentawai.util.MockAction;

public class ValidatorFilterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ValidatorFilter.class;
    }
    
    public void testActionUniqueIdConstructor() throws Throwable {
        ValidatorFilter.ActionUniqueId actionUniqueId = new ValidatorFilter.ActionUniqueId("testActionUniqueIdClassname", "testActionUniqueIdInnerAction");
        assertEquals("actionUniqueId.innerAction", "testActionUniqueIdInnerAction", actionUniqueId.innerAction);
        assertEquals("actionUniqueId.classname", "testActionUniqueIdClassname", actionUniqueId.classname);
    }
    
    public void testConstructor() throws Throwable {
        Mockingbird.enterRecordingMode();
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", map, 1);
        Mockingbird.setReturnValue(LocaleManager.isUseMasterForEverything(), false);
        Mockingbird.enterTestMode(ValidatorFilter.class);
        ValidatorFilter validatorFilter = new ValidatorFilter();
        assertEquals("validatorFilter.resultForError", "error", getPrivateField(validatorFilter, "resultForError"));
        assertEquals("validatorFilter.dir", "/validation", getPrivateField(validatorFilter, "dir"));
        assertNull("validatorFilter.masterMsgContext", getPrivateField(validatorFilter, "masterMsgContext"));
        assertEquals("validatorFilter.msgContexts.size()", 0, ((Map) getPrivateField(validatorFilter, "msgContexts")).size());
    }
    
    public void testConstructor1() throws Throwable {
        new ValidatorFilter();
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 5 assertions
    }
    
    public void testConstructor2() throws Throwable {
        new ValidatorFilter("testValidatorFilterResultForError");
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 5 assertions
    }
    
    public void testActionUniqueIdEquals() throws Throwable {
        ValidatorFilter.ActionUniqueId actionUniqueId = new ValidatorFilter.ActionUniqueId("testActionUniqueIdClassname", "testActionUniqueIdInnerAction");
        ValidatorFilter.ActionUniqueId obj = new ValidatorFilter.ActionUniqueId("testActionUniqueIdClassname1", "testActionUniqueIdInnerAction1");
        boolean result = actionUniqueId.equals(obj);
        assertFalse("result", result);
    }
    
    public void testActionUniqueIdEquals1() throws Throwable {
        ValidatorFilter.ActionUniqueId actionUniqueId = new ValidatorFilter.ActionUniqueId("testString", null);
        boolean result = actionUniqueId.equals(new ValidatorFilter.ActionUniqueId("testString", "testString"));
        assertFalse("result", result);
    }
    
    public void testActionUniqueIdEquals2() throws Throwable {
        ValidatorFilter.ActionUniqueId obj = new ValidatorFilter.ActionUniqueId("testString", null);
        boolean result = new ValidatorFilter.ActionUniqueId("testString", null).equals(obj);
        assertTrue("result", result);
    }
    
    public void testActionUniqueIdEquals3() throws Throwable {
        ValidatorFilter.ActionUniqueId actionUniqueId = new ValidatorFilter.ActionUniqueId("testActionUniqueIdClassname", "testActionUniqueIdInnerAction");
        boolean result = actionUniqueId.equals("nulI");
        assertFalse("result", result);
    }
    
    public void testActionUniqueIdEquals4() throws Throwable {
        ValidatorFilter.ActionUniqueId actionUniqueId = new ValidatorFilter.ActionUniqueId("testString", "testString");
        boolean result = actionUniqueId.equals(new ValidatorFilter.ActionUniqueId("testString", "testString"));
        assertTrue("result", result);
    }
    
    public void testActionUniqueIdEquals5() throws Throwable {
        ValidatorFilter.ActionUniqueId actionUniqueId = new ValidatorFilter.ActionUniqueId("testString", "testActionUniqueIdInnerAction");
        boolean result = actionUniqueId.equals(new ValidatorFilter.ActionUniqueId("testString", null));
        assertFalse("result", result);
    }
    
    public void testActionUniqueIdEquals6() throws Throwable {
        ValidatorFilter.ActionUniqueId obj = new ValidatorFilter.ActionUniqueId("", "testActionUniqueIdInnerAction");
        boolean result = new ValidatorFilter.ActionUniqueId("", "testActionUniqueIdInnerAction1").equals(obj);
        assertFalse("result", result);
    }
    
    public void testActionUniqueIdHashCode() throws Throwable {
        ValidatorFilter.ActionUniqueId actionUniqueId = new ValidatorFilter.ActionUniqueId("testActionUniqueIdClassname", "testActionUniqueIdInnerAction");
        int result = actionUniqueId.hashCode();
        assertEquals("result", -1347947392, result);
        assertEquals("actionUniqueId.innerAction", "testActionUniqueIdInnerAction", actionUniqueId.innerAction);
        assertEquals("actionUniqueId.classname", "testActionUniqueIdClassname", actionUniqueId.classname);
    }
    
    public void testActionUniqueIdHashCode1() throws Throwable {
        ValidatorFilter.ActionUniqueId actionUniqueId = new ValidatorFilter.ActionUniqueId("testActionUniqueIdClassname", null);
        int result = actionUniqueId.hashCode();
        assertEquals("result", -871946224, result);
        assertNull("actionUniqueId.innerAction", actionUniqueId.innerAction);
        assertEquals("actionUniqueId.classname", "testActionUniqueIdClassname", actionUniqueId.classname);
    }
    
    public void testDestroy() throws Throwable {
        new ValidatorFilter().destroy();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testFilter() throws Throwable {
        String result = new ValidatorFilter().filter(new InvocationChain("testValidatorFilterActionName", new MockAction()));
        assertEquals("result", "success", result);
    }
    
    public void testGetDir() throws Throwable {
        ValidatorFilter.getDir();
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testSetDir() throws Throwable {
        ValidatorFilter validatorFilter = new ValidatorFilter();
        validatorFilter.setDir("testValidatorFilterDir");
        assertEquals("validatorFilter.dir", "testValidatorFilterDir", getPrivateField(validatorFilter, "dir"));
        assertEquals("validatorFilterValidatorFilter.getDir()", "testValidatorFilterDir", ValidatorFilter.getDir());
        assertEquals("validatorFilter.msgContexts.size()", 0, ((Map) getPrivateField(validatorFilter, "msgContexts")).size());
    }
    
    public void testSetResultForError() throws Throwable {
        ValidatorFilter validatorFilter = new ValidatorFilter("testValidatorFilterResultForError");
        validatorFilter.setResultForError("testValidatorFilterResultForError");
        assertEquals("validatorFilter.resultForError", "testValidatorFilterResultForError", getPrivateField(validatorFilter, "resultForError"));
    }
    
    public void testActionUniqueIdEqualsThrowsNullPointerException() throws Throwable {
        try {
            new ValidatorFilter.ActionUniqueId("Bx3", "testActionUniqueIdInnerAction1").equals(new ValidatorFilter.ActionUniqueId(null, "testActionUniqueIdInnerAction"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValidatorFilter.ActionUniqueId.class, ex);
        }
    }
    
    public void testActionUniqueIdHashCodeThrowsNullPointerException() throws Throwable {
        ValidatorFilter.ActionUniqueId actionUniqueId = new ValidatorFilter.ActionUniqueId(null, "testActionUniqueIdInnerAction");
        try {
            actionUniqueId.hashCode();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValidatorFilter.ActionUniqueId.class, ex);
            assertEquals("actionUniqueId.innerAction", "testActionUniqueIdInnerAction", actionUniqueId.innerAction);
            assertNull("actionUniqueId.classname", actionUniqueId.classname);
        }
    }
    
    public void testFilterThrowsActionException() throws Throwable {
        ValidatorFilter validatorFilter = new ValidatorFilter();
        InvocationChain chain = new InvocationChain("testValidatorFilterActionName", new PojoAction(""));
        try {
            validatorFilter.filter(chain);
            fail("Expected ActionException to be thrown");
        } catch (ActionException ex) {
            assertEquals("ex.getMessage()", "Cannot find method to execute: execute", ex.getMessage());
            assertThrownBy(InvocationChain.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("validatorFilter.msgContexts.size()", 0, ((Map) getPrivateField(validatorFilter, "msgContexts")).size());
            assertEquals("chain.getActionName()", "testValidatorFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException1() throws Throwable {
        ValidatorFilter validatorFilter = new ValidatorFilter();
        try {
            validatorFilter.filter(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValidatorFilter.class, ex);
            assertEquals("validatorFilter.msgContexts.size()", 0, ((Map) getPrivateField(validatorFilter, "msgContexts")).size());
        }
    }
    
    public void testGetMessageContextThrowsNullPointerException() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", Mockingbird.getProxyObject(Map.class), 1);
        Mockingbird.setReturnValue(LocaleManager.isUseMasterForEverything(), false);
        Mockingbird.enterTestMode(ValidatorFilter.class);
        ValidatorFilter validatorFilter = new ValidatorFilter("testValidatorFilterResultForError");
        try {
            callPrivateMethod("org.mentawai.filter.ValidatorFilter", "getMessageContext", new Class[] {Class.class}, validatorFilter, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ClassMessageContext.class, ex);
        }
    }
    
    public void testSetDirThrowsNullPointerException() throws Throwable {
        ValidatorFilter validatorFilter = new ValidatorFilter();
        try {
            validatorFilter.setDir(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValidatorFilter.class, ex);
            assertEquals("validatorFilterValidatorFilter.getDir()", "testValidatorFilterDir", ValidatorFilter.getDir());
            assertEquals("validatorFilter.dir", "/validation", getPrivateField(validatorFilter, "dir"));
            assertEquals("validatorFilter.msgContexts.size()", 0, ((Map) getPrivateField(validatorFilter, "msgContexts")).size());
        }
    }
}

