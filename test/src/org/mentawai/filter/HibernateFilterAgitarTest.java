/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:21:21 PM
 * Time to generate: 00:26.076 seconds
 *
 */

package org.mentawai.filter;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.File;
import java.net.URL;
import java.util.Collection;
import java.util.Set;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.jmx.HibernateService;
import org.mentawai.core.Action;
import org.mentawai.core.FilterException;
import org.mentawai.core.Input;
import org.mentawai.core.InputWrapper;
import org.mentawai.core.InvocationChain;
import org.mentawai.transaction.HibernateTransaction;
import org.mentawai.transaction.Transaction;
import org.w3c.dom.Document;

public class HibernateFilterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return HibernateFilter.class;
    }
    
    public void testConstructor() throws Throwable {
        SessionFactory sessionFactory = (SessionFactory) callPrivateMethod("org.hibernate.jmx.SessionFactoryStub", "<init>", new Class[] {HibernateService.class}, null, new Object[] {new HibernateService()});
        HibernateFilter hibernateFilter = new HibernateFilter(true, sessionFactory);
        assertNull("hibernateFilter.input.get()", ((ThreadLocal) getPrivateField(hibernateFilter, "input")).get());
        assertEquals("hibernateFilter.resultsForRollback.size()", 2, ((Collection) getPrivateField(hibernateFilter, "resultsForRollback")).size());
        Object object = ((ThreadLocal) getPrivateField(hibernateFilter, "hibernateTransactionThreadLocal")).get();
        assertNull("hibernateFilter.hibernateTransactionThreadLocal.get()", object);
        assertEquals("hibernateFilter.toString()", "HibernateFilter: sessionKey=session transKey=transaction transactional=true", hibernateFilter.toString());
        Object object2 = ((ThreadLocal) getPrivateField(hibernateFilter, "hibernateSessionThreadLocal")).get();
        assertNull("hibernateFilter.hibernateSessionThreadLocal.get()", object2);
        assertSame("hibernateFilter.sessionFactory", sessionFactory, getPrivateField(hibernateFilter, "sessionFactory"));
    }
    
    public void testConstructor1() throws Throwable {
        SessionFactory sessionFactory = (SessionFactory) callPrivateMethod("org.hibernate.jmx.SessionFactoryStub", "<init>", new Class[] {HibernateService.class}, null, new Object[] {new HibernateService()});
        HibernateFilter hibernateFilter = new HibernateFilter(sessionFactory);
        assertEquals("hibernateFilter.resultsForRollback.size()", 0, ((Collection) getPrivateField(hibernateFilter, "resultsForRollback")).size());
        assertNull("hibernateFilter.input.get()", ((ThreadLocal) getPrivateField(hibernateFilter, "input")).get());
        Object object = ((ThreadLocal) getPrivateField(hibernateFilter, "hibernateTransactionThreadLocal")).get();
        assertNull("hibernateFilter.hibernateTransactionThreadLocal.get()", object);
        assertEquals("hibernateFilter.toString()", "HibernateFilter: sessionKey=session transKey=transaction transactional=false", hibernateFilter.toString());
        Object object2 = ((ThreadLocal) getPrivateField(hibernateFilter, "hibernateSessionThreadLocal")).get();
        assertNull("hibernateFilter.hibernateSessionThreadLocal.get()", object2);
        assertSame("hibernateFilter.sessionFactory", sessionFactory, getPrivateField(hibernateFilter, "sessionFactory"));
    }
    
    public void testConstructor2() throws Throwable {
        storeStaticField(ExceptionFilter.class, "EXCEPTION");
        Mockingbird.ignoreConstructorExceptions(InputWrapper.class);
        Mockingbird.ignoreConstructorExceptions(HibernateFilter.class, "()");
        ExceptionFilter.EXCEPTION = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(HibernateFilter.class, "addResultsForRollback", "(java.lang.String[])void", null, 1);
        Mockingbird.enterTestMode();
        HibernateFilter hibernateFilter = new HibernateFilter(false);
        assertNull("hibernateFilter.input.get()", ((ThreadLocal) getPrivateField(hibernateFilter, "input")).get());
        assertEquals("hibernateFilter.resultsForRollback.size()", 0, ((Collection) getPrivateField(hibernateFilter, "resultsForRollback")).size());
        Object object = ((ThreadLocal) getPrivateField(hibernateFilter, "hibernateTransactionThreadLocal")).get();
        assertNull("hibernateFilter.hibernateTransactionThreadLocal.get()", object);
        assertEquals("hibernateFilter.toString()", "HibernateFilter: sessionKey=session transKey=transaction transactional=false", hibernateFilter.toString());
        Object object2 = ((ThreadLocal) getPrivateField(hibernateFilter, "hibernateSessionThreadLocal")).get();
        assertNull("hibernateFilter.hibernateSessionThreadLocal.get()", object2);
        assertNull("hibernateFilter.sessionFactory", getPrivateField(hibernateFilter, "sessionFactory"));
    }
    
    public void testConstructor3() throws Throwable {
        storeStaticField(ExceptionFilter.class, "EXCEPTION");
        Mockingbird.ignoreConstructorExceptions(InputWrapper.class);
        Mockingbird.ignoreConstructorExceptions(HibernateFilter.class, "(org.w3c.dom.Document)");
        ExceptionFilter.EXCEPTION = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(HibernateFilter.class, "addResultsForRollback", "(java.lang.String[])void", null, 1);
        Mockingbird.enterTestMode();
        HibernateFilter hibernateFilter = new HibernateFilter(false, (Document) null);
        assertNull("hibernateFilter.input.get()", ((ThreadLocal) getPrivateField(hibernateFilter, "input")).get());
        assertEquals("hibernateFilter.resultsForRollback.size()", 0, ((Collection) getPrivateField(hibernateFilter, "resultsForRollback")).size());
        Object object = ((ThreadLocal) getPrivateField(hibernateFilter, "hibernateTransactionThreadLocal")).get();
        assertNull("hibernateFilter.hibernateTransactionThreadLocal.get()", object);
        assertEquals("hibernateFilter.toString()", "HibernateFilter: sessionKey=session transKey=transaction transactional=false", hibernateFilter.toString());
        Object object2 = ((ThreadLocal) getPrivateField(hibernateFilter, "hibernateSessionThreadLocal")).get();
        assertNull("hibernateFilter.hibernateSessionThreadLocal.get()", object2);
        assertNull("hibernateFilter.sessionFactory", getPrivateField(hibernateFilter, "sessionFactory"));
    }
    
    public void testConstructor4() throws Throwable {
        storeStaticField(ExceptionFilter.class, "EXCEPTION");
        Mockingbird.ignoreConstructorExceptions(InputWrapper.class);
        Mockingbird.ignoreConstructorExceptions(HibernateFilter.class, "(java.io.File)");
        ExceptionFilter.EXCEPTION = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(HibernateFilter.class, "addResultsForRollback", "(java.lang.String[])void", null, 1);
        Mockingbird.enterTestMode();
        HibernateFilter hibernateFilter = new HibernateFilter(false, (File) null);
        assertNull("hibernateFilter.input.get()", ((ThreadLocal) getPrivateField(hibernateFilter, "input")).get());
        assertEquals("hibernateFilter.resultsForRollback.size()", 0, ((Collection) getPrivateField(hibernateFilter, "resultsForRollback")).size());
        Object object = ((ThreadLocal) getPrivateField(hibernateFilter, "hibernateTransactionThreadLocal")).get();
        assertNull("hibernateFilter.hibernateTransactionThreadLocal.get()", object);
        assertEquals("hibernateFilter.toString()", "HibernateFilter: sessionKey=session transKey=transaction transactional=false", hibernateFilter.toString());
        Object object2 = ((ThreadLocal) getPrivateField(hibernateFilter, "hibernateSessionThreadLocal")).get();
        assertNull("hibernateFilter.hibernateSessionThreadLocal.get()", object2);
        assertNull("hibernateFilter.sessionFactory", getPrivateField(hibernateFilter, "sessionFactory"));
    }
    
    public void testConstructor5() throws Throwable {
        storeStaticField(ExceptionFilter.class, "EXCEPTION");
        Mockingbird.ignoreConstructorExceptions(InputWrapper.class);
        Mockingbird.ignoreConstructorExceptions(HibernateFilter.class, "(java.net.URL)");
        ExceptionFilter.EXCEPTION = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(HibernateFilter.class, "addResultsForRollback", "(java.lang.String[])void", null, 1);
        Mockingbird.enterTestMode();
        HibernateFilter hibernateFilter = new HibernateFilter(false, (URL) null);
        assertNull("hibernateFilter.input.get()", ((ThreadLocal) getPrivateField(hibernateFilter, "input")).get());
        assertEquals("hibernateFilter.resultsForRollback.size()", 0, ((Collection) getPrivateField(hibernateFilter, "resultsForRollback")).size());
        Object object = ((ThreadLocal) getPrivateField(hibernateFilter, "hibernateTransactionThreadLocal")).get();
        assertNull("hibernateFilter.hibernateTransactionThreadLocal.get()", object);
        assertEquals("hibernateFilter.toString()", "HibernateFilter: sessionKey=session transKey=transaction transactional=false", hibernateFilter.toString());
        Object object2 = ((ThreadLocal) getPrivateField(hibernateFilter, "hibernateSessionThreadLocal")).get();
        assertNull("hibernateFilter.hibernateSessionThreadLocal.get()", object2);
        assertNull("hibernateFilter.sessionFactory", getPrivateField(hibernateFilter, "sessionFactory"));
    }
    
    public void testConstructor6() throws Throwable {
        storeStaticField(ExceptionFilter.class, "EXCEPTION");
        Mockingbird.ignoreConstructorExceptions(InputWrapper.class);
        Mockingbird.ignoreConstructorExceptions(HibernateFilter.class, "(java.lang.String)");
        ExceptionFilter.EXCEPTION = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(HibernateFilter.class, "addResultsForRollback", "(java.lang.String[])void", null, 1);
        Mockingbird.enterTestMode();
        HibernateFilter hibernateFilter = new HibernateFilter(false, "");
        assertNull("hibernateFilter.input.get()", ((ThreadLocal) getPrivateField(hibernateFilter, "input")).get());
        assertEquals("hibernateFilter.resultsForRollback.size()", 0, ((Collection) getPrivateField(hibernateFilter, "resultsForRollback")).size());
        Object object = ((ThreadLocal) getPrivateField(hibernateFilter, "hibernateTransactionThreadLocal")).get();
        assertNull("hibernateFilter.hibernateTransactionThreadLocal.get()", object);
        assertEquals("hibernateFilter.toString()", "HibernateFilter: sessionKey=session transKey=transaction transactional=false", hibernateFilter.toString());
        Object object2 = ((ThreadLocal) getPrivateField(hibernateFilter, "hibernateSessionThreadLocal")).get();
        assertNull("hibernateFilter.hibernateSessionThreadLocal.get()", object2);
        assertNull("hibernateFilter.sessionFactory", getPrivateField(hibernateFilter, "sessionFactory"));
    }
    
    public void testAfterConsequenceWithAggressiveMocks() throws Throwable {
        HibernateFilter hibernateFilter = (HibernateFilter) Mockingbird.getProxyObject(HibernateFilter.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        setPrivateField(hibernateFilter, "hibernateSessionThreadLocal", threadLocal);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(HibernateFilter.class);
        hibernateFilter.afterConsequence(null, null, false, false, "");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAfterConsequenceWithAggressiveMocks1() throws Throwable {
        HibernateFilter hibernateFilter = (HibernateFilter) Mockingbird.getProxyObject(HibernateFilter.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Session session = (Session) Mockingbird.getProxyObject(Session.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        setPrivateField(hibernateFilter, "hibernateSessionThreadLocal", threadLocal);
        hibernateFilter.setKey("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, session, 1);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hibernateFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "removeValue", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(session.close(), null);
        Mockingbird.enterTestMode(HibernateFilter.class);
        hibernateFilter.afterConsequence(null, null, false, false, "");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testDestroyWithAggressiveMocks() throws Throwable {
        HibernateFilter hibernateFilter = (HibernateFilter) Mockingbird.getProxyObject(HibernateFilter.class, true);
        SessionFactory sessionFactory = (SessionFactory) Mockingbird.getProxyObject(SessionFactory.class);
        setPrivateField(hibernateFilter, "sessionFactory", sessionFactory);
        Mockingbird.enterRecordingMode();
        sessionFactory.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(HibernateFilter.class);
        hibernateFilter.destroy();
        assertNotNull("hibernateFilter.sessionFactory", getPrivateField(hibernateFilter, "sessionFactory"));
    }
    
    public void testFilterWithAggressiveMocks() throws Throwable {
        HibernateFilter hibernateFilter = (HibernateFilter) Mockingbird.getProxyObject(HibernateFilter.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        ThreadLocal threadLocal2 = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Transaction transaction = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        setPrivateField(hibernateFilter, "input", threadLocal);
        setPrivateField(hibernateFilter, "transactional", Boolean.TRUE);
        setPrivateField(hibernateFilter, "hibernateTransactionThreadLocal", threadLocal2);
        setPrivateField(hibernateFilter, "hibernateTransactionKey", "");
        setPrivateField(hibernateFilter, "resultsForRollback", set);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), null);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", new Object[] {null}, null, 1);
        action.setInput(hibernateFilter);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.setReturnValue(false, threadLocal2, "get", "()java.lang.Object", new Object[] {}, transaction, 1);
        Mockingbird.setReturnValue(false, threadLocal2, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hibernateFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "removeValue", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, set, "contains", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        transaction.commit();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(HibernateFilter.class);
        String result = hibernateFilter.filter(invocationChain);
        assertEquals("result", "", result);
    }
    
    public void testFilterWithAggressiveMocks1() throws Throwable {
        HibernateFilter hibernateFilter = (HibernateFilter) Mockingbird.getProxyObject(HibernateFilter.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        ThreadLocal threadLocal2 = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Transaction transaction = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        setPrivateField(hibernateFilter, "input", threadLocal);
        setPrivateField(hibernateFilter, "transactional", Boolean.TRUE);
        setPrivateField(hibernateFilter, "hibernateTransactionThreadLocal", threadLocal2);
        setPrivateField(hibernateFilter, "hibernateTransactionKey", "");
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), null);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", new Object[] {null}, null, 1);
        action.setInput(hibernateFilter);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(invocationChain.invoke(), null);
        Mockingbird.setReturnValue(false, threadLocal2, "get", "()java.lang.Object", new Object[] {}, transaction, 1);
        Mockingbird.setReturnValue(false, threadLocal2, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hibernateFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "removeValue", "(java.lang.String)void", null, 1);
        transaction.rollback();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(HibernateFilter.class);
        String result = hibernateFilter.filter(invocationChain);
        assertNull("result", result);
    }
    
    public void testFilterWithAggressiveMocks2() throws Throwable {
        HibernateFilter hibernateFilter = (HibernateFilter) Mockingbird.getProxyObject(HibernateFilter.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        ThreadLocal threadLocal2 = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Transaction transaction = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        setPrivateField(hibernateFilter, "input", threadLocal);
        setPrivateField(hibernateFilter, "transactional", Boolean.TRUE);
        setPrivateField(hibernateFilter, "hibernateTransactionThreadLocal", threadLocal2);
        setPrivateField(hibernateFilter, "hibernateTransactionKey", "");
        setPrivateField(hibernateFilter, "resultsForRollback", set);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), null);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", new Object[] {null}, null, 1);
        action.setInput(hibernateFilter);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.setReturnValue(false, threadLocal2, "get", "()java.lang.Object", new Object[] {}, transaction, 1);
        Mockingbird.setReturnValue(false, threadLocal2, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hibernateFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "removeValue", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, set, "contains", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        transaction.rollback();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(HibernateFilter.class);
        String result = hibernateFilter.filter(invocationChain);
        assertEquals("result", "", result);
    }
    
    public void testFilterWithAggressiveMocks3() throws Throwable {
        HibernateFilter hibernateFilter = (HibernateFilter) Mockingbird.getProxyObject(HibernateFilter.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        setPrivateField(hibernateFilter, "input", threadLocal);
        setPrivateField(hibernateFilter, "transactional", Boolean.FALSE);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), null);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", new Object[] {null}, null, 1);
        action.setInput(hibernateFilter);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.enterTestMode(HibernateFilter.class);
        String result = hibernateFilter.filter(invocationChain);
        assertEquals("result", "", result);
        assertNull("hibernateFilter.resultsForRollback", getPrivateField(hibernateFilter, "resultsForRollback"));
    }
    
    public void testFilterWithAggressiveMocks4() throws Throwable {
        HibernateFilter hibernateFilter = (HibernateFilter) Mockingbird.getProxyObject(HibernateFilter.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        ThreadLocal threadLocal2 = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        setPrivateField(hibernateFilter, "input", threadLocal);
        setPrivateField(hibernateFilter, "transactional", Boolean.TRUE);
        setPrivateField(hibernateFilter, "hibernateTransactionThreadLocal", threadLocal2);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), null);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", new Object[] {null}, null, 1);
        action.setInput(hibernateFilter);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.setReturnValue(false, threadLocal2, "get", "()java.lang.Object", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(HibernateFilter.class);
        String result = hibernateFilter.filter(invocationChain);
        assertEquals("result", "", result);
        assertNull("hibernateFilter.resultsForRollback", getPrivateField(hibernateFilter, "resultsForRollback"));
    }
    
    public void testGetValueWithAggressiveMocks() throws Throwable {
        HibernateFilter hibernateFilter = (HibernateFilter) Mockingbird.getProxyObject(HibernateFilter.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Session session = (Session) Mockingbird.getProxyObject(Session.class);
        hibernateFilter.setKey("");
        setPrivateField(hibernateFilter, "hibernateSessionThreadLocal", threadLocal);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, session, 1);
        Mockingbird.enterTestMode(HibernateFilter.class);
        Object result = hibernateFilter.getValue("");
        assertNotNull("result", result);
        assertNull("hibernateFilter.sessionFactory", getPrivateField(hibernateFilter, "sessionFactory"));
    }
    
    public void testGetValueWithAggressiveMocks1() throws Throwable {
        HibernateFilter hibernateFilter = (HibernateFilter) Mockingbird.getProxyObject(HibernateFilter.class, true);
        SessionFactory sessionFactory = (SessionFactory) Mockingbird.getProxyObject(SessionFactory.class);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        ThreadLocal threadLocal2 = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        org.hibernate.classic.Session session = (org.hibernate.classic.Session) Mockingbird.getProxyObject(org.hibernate.classic.Session.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Input input2 = (Input) Mockingbird.getProxyObject(Input.class);
        hibernateFilter.setKey("");
        setPrivateField(hibernateFilter, "sessionFactory", sessionFactory);
        setPrivateField(hibernateFilter, "hibernateSessionThreadLocal", threadLocal);
        setPrivateField(hibernateFilter, "transactional", Boolean.TRUE);
        setPrivateField(hibernateFilter, "hibernateTransactionThreadLocal", threadLocal2);
        setPrivateField(hibernateFilter, "hibernateTransactionKey", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(sessionFactory.openSession(), session);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", new Object[] {session}, null, 1);
        Mockingbird.setReturnValue(session.beginTransaction(), null);
        HibernateTransaction hibernateTransaction = (HibernateTransaction) Mockingbird.getProxyObject(HibernateTransaction.class);
        Mockingbird.replaceObjectForRecording(HibernateTransaction.class, "<init>(org.hibernate.Session,org.hibernate.Transaction)", hibernateTransaction);
        Mockingbird.setReturnValue(false, threadLocal2, "set", "(java.lang.Object)void", new Object[] {hibernateTransaction}, null, 1);
        Mockingbird.setReturnValue(false, hibernateFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hibernateFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input2, 1);
        Mockingbird.setReturnValue(false, input2, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(HibernateFilter.class);
        Object result = hibernateFilter.getValue("");
        assertNotNull("result", result);
    }
    
    public void testGetValueWithAggressiveMocks2() throws Throwable {
        HibernateFilter hibernateFilter = (HibernateFilter) Mockingbird.getProxyObject(HibernateFilter.class, true);
        SessionFactory sessionFactory = (SessionFactory) Mockingbird.getProxyObject(SessionFactory.class);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        hibernateFilter.setKey("");
        setPrivateField(hibernateFilter, "sessionFactory", sessionFactory);
        setPrivateField(hibernateFilter, "hibernateSessionThreadLocal", threadLocal);
        setPrivateField(hibernateFilter, "transactional", Boolean.FALSE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(sessionFactory.openSession(), null);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(false, hibernateFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(HibernateFilter.class);
        Object result = hibernateFilter.getValue("");
        assertNull("result", result);
    }
    
    public void testGetValueWithAggressiveMocks3() throws Throwable {
        HibernateFilter hibernateFilter = (HibernateFilter) Mockingbird.getProxyObject(HibernateFilter.class, true);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        hibernateFilter.setKey("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, hibernateFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(HibernateFilter.class);
        Object result = hibernateFilter.getValue("X");
        assertNull("result", result);
    }
    
    public void testSetKeyWithAggressiveMocks() throws Throwable {
        HibernateFilter hibernateFilter = (HibernateFilter) Mockingbird.getProxyObject(HibernateFilter.class, true);
        Mockingbird.enterTestMode(HibernateFilter.class);
        hibernateFilter.setKey("");
        assertEquals("hibernateFilter.toString()", "HibernateFilter: sessionKey= transKey=null transactional=false", hibernateFilter.toString());
    }
    
    public void testSetTransactionalWithAggressiveMocks() throws Throwable {
        storeStaticField(ExceptionFilter.class, "EXCEPTION");
        HibernateFilter hibernateFilter = (HibernateFilter) Mockingbird.getProxyObject(HibernateFilter.class, true);
        ExceptionFilter.EXCEPTION = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, hibernateFilter, "addResultsForRollback", "(java.lang.String[])void", null, 1);
        Mockingbird.enterTestMode(HibernateFilter.class);
        hibernateFilter.setTransactional(false, "");
        assertNull("hibernateFilter.resultsForRollback", getPrivateField(hibernateFilter, "resultsForRollback"));
        assertEquals("hibernateFilter.toString()", "HibernateFilter: sessionKey=null transKey= transactional=false", hibernateFilter.toString());
    }
    
    public void testToStringWithAggressiveMocks() throws Throwable {
        HibernateFilter hibernateFilter = (HibernateFilter) Mockingbird.getProxyObject(HibernateFilter.class, true);
        hibernateFilter.setKey("");
        setPrivateField(hibernateFilter, "hibernateTransactionKey", "");
        setPrivateField(hibernateFilter, "transactional", Boolean.FALSE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(HibernateFilter.class);
        String result = hibernateFilter.toString();
        assertEquals("result", "", result);
    }
    
    public void testConstructorThrowsNoClassDefFoundError() throws Throwable {
        try {
            new HibernateFilter();
            fail("Expected NoClassDefFoundError to be thrown");
        } catch (NoClassDefFoundError ex) {
            assertEquals("ex.getMessage()", "org/dom4j/DocumentException", ex.getMessage());
            assertThrownBy(Class.class, ex);
        }
    }
    
    public void testConstructorThrowsNoClassDefFoundError1() throws Throwable {
        URL url = new URL("https://alaivyzs.us/7/AT__kvpz__bB/?_Vt5Tz27mZ=__3&C_=%DF%5D%DB&_S__z_e=%Ab%D24%70&3=uH%B2&99_=_Oi%C38%aC%B7Bu%9b");
        try {
            new HibernateFilter(url);
            fail("Expected NoClassDefFoundError to be thrown");
        } catch (NoClassDefFoundError ex) {
            assertEquals("ex.getMessage()", "org/dom4j/DocumentException", ex.getMessage());
            assertThrownBy(Class.class, ex);
        }
    }
    
    public void testConstructorThrowsNoClassDefFoundError2() throws Throwable {
        try {
            new HibernateFilter(true, new File("testHibernateFilterParam1"));
            fail("Expected NoClassDefFoundError to be thrown");
        } catch (NoClassDefFoundError ex) {
            assertEquals("ex.getMessage()", "org/dom4j/DocumentException", ex.getMessage());
            assertThrownBy(Class.class, ex);
        }
    }
    
    public void testConstructorThrowsNoClassDefFoundError3() throws Throwable {
        try {
            new HibernateFilter(true);
            fail("Expected NoClassDefFoundError to be thrown");
        } catch (NoClassDefFoundError ex) {
            assertEquals("ex.getMessage()", "org/dom4j/DocumentException", ex.getMessage());
            assertThrownBy(Class.class, ex);
        }
    }
    
    public void testConstructorThrowsNoClassDefFoundError4() throws Throwable {
        try {
            new HibernateFilter((File) null);
            fail("Expected NoClassDefFoundError to be thrown");
        } catch (NoClassDefFoundError ex) {
            assertEquals("ex.getMessage()", "org/dom4j/DocumentException", ex.getMessage());
            assertThrownBy(Class.class, ex);
        }
    }
    
    public void testConstructorThrowsNoClassDefFoundError5() throws Throwable {
        try {
            new HibernateFilter("testHibernateFilterString");
            fail("Expected NoClassDefFoundError to be thrown");
        } catch (NoClassDefFoundError ex) {
            assertEquals("ex.getMessage()", "org/dom4j/DocumentException", ex.getMessage());
            assertThrownBy(Class.class, ex);
        }
    }
    
    public void testConstructorThrowsNoClassDefFoundError6() throws Throwable {
        URL url = new URL("https://alaivyzs.us/7/AT__kvpz__bB/?_Vt5Tz27mZ=__3&C_=%DF%5D%DB&_S__z_e=%Ab%D24%70&3=uH%B2&99_=_Oi%C38%aC%B7Bu%9b");
        try {
            new HibernateFilter(true, url);
            fail("Expected NoClassDefFoundError to be thrown");
        } catch (NoClassDefFoundError ex) {
            assertEquals("ex.getMessage()", "org/dom4j/DocumentException", ex.getMessage());
            assertThrownBy(Class.class, ex);
        }
    }
    
    public void testConstructorThrowsNoClassDefFoundError7() throws Throwable {
        try {
            new HibernateFilter(true, "testHibernateFilterString");
            fail("Expected NoClassDefFoundError to be thrown");
        } catch (NoClassDefFoundError ex) {
            assertEquals("ex.getMessage()", "org/dom4j/DocumentException", ex.getMessage());
            assertThrownBy(Class.class, ex);
        }
    }
    
    public void testDestroyThrowsNullPointerException() throws Throwable {
        HibernateFilter hibernateFilter = new HibernateFilter(true, (SessionFactory) null);
        try {
            hibernateFilter.destroy();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNull("hibernateFilter.sessionFactory", getPrivateField(hibernateFilter, "sessionFactory"));
        }
    }
    
    public void testFilterThrowsFilterExceptionWithAggressiveMocks() throws Throwable {
        HibernateFilter hibernateFilter = (HibernateFilter) Mockingbird.getProxyObject(HibernateFilter.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        ThreadLocal threadLocal2 = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Transaction transaction = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Exception ex2 = (Exception) Mockingbird.getProxyObject(Exception.class);
        setPrivateField(hibernateFilter, "input", threadLocal);
        setPrivateField(hibernateFilter, "transactional", Boolean.TRUE);
        setPrivateField(hibernateFilter, "hibernateTransactionThreadLocal", threadLocal2);
        setPrivateField(hibernateFilter, "hibernateTransactionKey", "");
        setPrivateField(hibernateFilter, "resultsForRollback", set);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), null);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", new Object[] {null}, null, 1);
        action.setInput(hibernateFilter);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.setReturnValue(false, threadLocal2, "get", "()java.lang.Object", new Object[] {}, transaction, 1);
        Mockingbird.setReturnValue(false, threadLocal2, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hibernateFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "removeValue", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, set, "contains", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        transaction.commit();
        Mockingbird.setExceptionForVoid(ex2);
        Mockingbird.setReturnValue(false, ex2, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.replaceObjectForRecording(FilterException.class, "<init>(java.lang.String,java.lang.Throwable)", Mockingbird.getProxyObject(FilterException.class));
        Mockingbird.enterTestMode(HibernateFilter.class);
        try {
            hibernateFilter.filter(invocationChain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testFilterThrowsFilterExceptionWithAggressiveMocks1() throws Throwable {
        HibernateFilter hibernateFilter = (HibernateFilter) Mockingbird.getProxyObject(HibernateFilter.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        ThreadLocal threadLocal2 = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Transaction transaction = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Exception ex2 = (Exception) Mockingbird.getProxyObject(Exception.class);
        setPrivateField(hibernateFilter, "input", threadLocal);
        setPrivateField(hibernateFilter, "transactional", Boolean.TRUE);
        setPrivateField(hibernateFilter, "hibernateTransactionThreadLocal", threadLocal2);
        setPrivateField(hibernateFilter, "hibernateTransactionKey", "");
        setPrivateField(hibernateFilter, "resultsForRollback", set);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), null);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", new Object[] {null}, null, 1);
        action.setInput(hibernateFilter);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.setReturnValue(false, threadLocal2, "get", "()java.lang.Object", new Object[] {}, transaction, 1);
        Mockingbird.setReturnValue(false, threadLocal2, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, hibernateFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "removeValue", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, set, "contains", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        transaction.rollback();
        Mockingbird.setExceptionForVoid(ex2);
        Mockingbird.setReturnValue(false, ex2, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.replaceObjectForRecording(FilterException.class, "<init>(java.lang.String,java.lang.Throwable)", Mockingbird.getProxyObject(FilterException.class));
        Mockingbird.enterTestMode(HibernateFilter.class);
        try {
            hibernateFilter.filter(invocationChain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
}

