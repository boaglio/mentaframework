/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:22:34 PM
 * Time to generate: 00:18.956 seconds
 *
 */

package org.mentawai.filter;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import org.mentawai.action.LogoutAction;
import org.mentawai.core.Action;
import org.mentawai.core.ActionException;
import org.mentawai.core.Controller;
import org.mentawai.core.InvocationChain;
import org.mentawai.spring.SpringInput;
import org.mentawai.util.MockAction;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.web.context.support.WebApplicationContextUtils;

public class SpringFilterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SpringFilter.class;
    }
    
    public void testConstructor() throws Throwable {
        SpringFilter springFilter = new SpringFilter(null);
        assertNull("springFilter.beanFactory", getPrivateField(springFilter, "beanFactory"));
    }
    
    public void testConstructorWithAggressiveMocks() throws Throwable {
        storeStaticField(Controller.class, "application");
        setPrivateField(Controller.class, "application", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(WebApplicationContextUtils.getWebApplicationContext(null), null);
        Mockingbird.enterTestMode();
        SpringFilter springFilter = new SpringFilter();
        assertNull("springFilter.beanFactory", getPrivateField(springFilter, "beanFactory"));
    }
    
    public void testDestroy() throws Throwable {
        new SpringFilter(null).destroy();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testFilter() throws Throwable {
        Action action = new MockAction();
        InvocationChain chain = new InvocationChain("testSpringFilterActionName", action);
        SpringFilter springFilter = new SpringFilter((BeanFactory) Mockingbird.getProxyObject(BeanFactory.class));
        Mockingbird.enterRecordingMode();
        SpringInput springInput = (SpringInput) Mockingbird.getProxyObject(SpringInput.class);
        Mockingbird.replaceObjectForRecording(SpringInput.class, "<init>(org.mentawai.core.Input,org.springframework.beans.factory.BeanFactory)", springInput);
        action.setInput(springInput);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(SpringFilter.class);
        String result = springFilter.filter(chain);
        assertEquals("result", "success", result);
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new SpringFilter();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(WebApplicationContextUtils.class, ex);
        }
    }
    
    public void testFilterThrowsActionException() throws Throwable {
        Action action = new LogoutAction();
        SpringFilter springFilter = new SpringFilter((BeanFactory) Mockingbird.getProxyObject(BeanFactory.class));
        InvocationChain chain = new InvocationChain("testSpringFilterActionName", action);
        chain.setInnerAction("testSpringFilterInnerAction");
        Mockingbird.enterRecordingMode();
        SpringInput springInput = (SpringInput) Mockingbird.getProxyObject(SpringInput.class);
        Mockingbird.replaceObjectForRecording(SpringInput.class, "<init>(org.mentawai.core.Input,org.springframework.beans.factory.BeanFactory)", springInput);
        action.setInput(springInput);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(SpringFilter.class);
        try {
            springFilter.filter(chain);
            fail("Expected ActionException to be thrown");
        } catch (ActionException ex) {
            assertEquals("ex.getMessage()", "The inner action does not exist: testSpringFilterInnerAction", ex.getMessage());
            assertThrownBy(InvocationChain.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("chain.getActionName()", "testSpringFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException() throws Throwable {
        InvocationChain chain = new InvocationChain("testSpringFilterActionName", null);
        SpringFilter springFilter = new SpringFilter((BeanFactory) Mockingbird.getProxyObject(BeanFactory.class));
        Mockingbird.enterTestMode(SpringFilter.class);
        try {
            springFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SpringFilter.class, ex);
            assertEquals("chain.getActionName()", "testSpringFilterActionName", chain.getActionName());
        }
    }
}

