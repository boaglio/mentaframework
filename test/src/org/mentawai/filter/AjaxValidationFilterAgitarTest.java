/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:18:20 PM
 * Time to generate: 00:21.360 seconds
 *
 */

package org.mentawai.filter;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.mentawai.action.LogoutAction;
import org.mentawai.action.SuccessAction;
import org.mentawai.ajax.AjaxConsequence;
import org.mentawai.core.Action;
import org.mentawai.core.ActionException;
import org.mentawai.core.InvocationChain;
import org.mentawai.core.Output;
import org.mentawai.core.PojoAction;
import org.mentawai.message.ClassMessageContext;
import org.mentawai.message.ClasspathMessageContext;
import org.mentawai.message.DefaultMessage;
import org.mentawai.message.Message;
import org.mentawai.message.MessageManager;
import org.mentawai.util.MockAction;

public class AjaxValidationFilterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return AjaxValidationFilter.class;
    }
    
    public void testConstructor() throws Throwable {
        new AjaxValidationFilter();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testDestroy() throws Throwable {
        new AjaxValidationFilter().destroy();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testFilter() throws Throwable {
        String result = new AjaxValidationFilter().filter(new InvocationChain("testAjaxValidationFilterActionName", new MockAction()));
        assertEquals("result", "success", result);
    }
    
    public void testFilter1() throws Throwable {
        storeStaticField(AjaxConsequence.class, "KEY");
        AjaxValidationFilter ajaxValidationFilter = new AjaxValidationFilter();
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Output output = (Output) Mockingbird.getProxyObject(Output.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Message message = (Message) Mockingbird.getProxyObject(Message.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Message message2 = (Message) Mockingbird.getProxyObject(Message.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getLocale(), null);
        AjaxConsequence.KEY = "";
        Mockingbird.setReturnValue(invocationChain.invoke(), "error");
        Mockingbird.setReturnValue(action.getOutput(), output);
        Mockingbird.setReturnValue(MessageManager.getFieldErrors(action, true), map);
        Mockingbird.setReturnValue(map.isEmpty(), false);
        LinkedHashMap linkedHashMap = (LinkedHashMap) Mockingbird.getProxyObject(LinkedHashMap.class);
        Mockingbird.replaceObjectForRecording(LinkedHashMap.class, "<init>()", linkedHashMap);
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), null);
        Mockingbird.setReturnValue(map.get(null), message);
        Mockingbird.setReturnValue(entry.getKey(), obj);
        Mockingbird.setReturnValue(false, obj, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(message.getText(null), "");
        Mockingbird.setReturnValue(false, linkedHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), null);
        Mockingbird.setReturnValue(map.get(null), message2);
        Mockingbird.setReturnValue(entry2.getKey(), obj2);
        Mockingbird.setReturnValue(false, obj2, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(message2.getText(null), "");
        Mockingbird.setReturnValue(false, linkedHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, output, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(AjaxValidationFilter.class);
        String result = ajaxValidationFilter.filter(invocationChain);
        assertEquals("result", "error", result);
    }
    
    public void testFilter2() throws Throwable {
        storeStaticField(AjaxConsequence.class, "KEY");
        AjaxValidationFilter ajaxValidationFilter = new AjaxValidationFilter();
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Output output = (Output) Mockingbird.getProxyObject(Output.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Message message = (Message) Mockingbird.getProxyObject(Message.class);
        Message message2 = (Message) Mockingbird.getProxyObject(Message.class);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getLocale(), null);
        AjaxConsequence.KEY = "";
        Mockingbird.setReturnValue(invocationChain.invoke(), "error");
        Mockingbird.setReturnValue(action.getOutput(), output);
        Mockingbird.setReturnValue(MessageManager.getFieldErrors(action, true), map);
        Mockingbird.setReturnValue(map.isEmpty(), true);
        Mockingbird.setReturnValue(MessageManager.getErrors(action, true), list);
        LinkedHashMap linkedHashMap = (LinkedHashMap) Mockingbird.getProxyObject(LinkedHashMap.class);
        Mockingbird.replaceObjectForRecording(LinkedHashMap.class, "<init>()", linkedHashMap);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), message);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(message.getText(null), "");
        Mockingbird.setReturnValue(false, linkedHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), message2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(message2.getText(null), "");
        Mockingbird.setReturnValue(false, linkedHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, output, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(AjaxValidationFilter.class);
        String result = ajaxValidationFilter.filter(invocationChain);
        assertEquals("result", "error", result);
    }
    
    public void testProccessList() throws Throwable {
        List list = new ArrayList(100);
        list.add(new DefaultMessage(100, new ClassMessageContext(Integer.class)));
        AjaxValidationFilter ajaxValidationFilter = new AjaxValidationFilter();
        LinkedHashMap result = (LinkedHashMap) ajaxValidationFilter.proccessList(list, Locale.ITALIAN);
        assertEquals("result.size()", 1, result.size());
        assertEquals("(LinkedHashMap) result.get(\"msg1\")", "100", result.get("msg1"));
    }
    
    public void testProccessList1() throws Throwable {
        AjaxValidationFilter ajaxValidationFilter = new AjaxValidationFilter();
        LinkedHashMap result = (LinkedHashMap) ajaxValidationFilter.proccessList(new ArrayList(100), Locale.CANADA);
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testFilterThrowsActionException() throws Throwable {
        InvocationChain chain = new InvocationChain("testAjaxValidationFilterActionName", new MockAction());
        chain.setInnerAction("testAjaxValidationFilterInnerAction");
        try {
            new AjaxValidationFilter().filter(chain);
            fail("Expected ActionException to be thrown");
        } catch (ActionException ex) {
            assertEquals("ex.getMessage()", "The inner action does not exist: testAjaxValidationFilterInnerAction", ex.getMessage());
            assertThrownBy(InvocationChain.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("chain.getActionName()", "testAjaxValidationFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException() throws Throwable {
        InvocationChain chain = new InvocationChain("testAjaxValidationFilterActionName", new SuccessAction());
        try {
            new AjaxValidationFilter().filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MessageManager.class, ex);
            assertEquals("chain.getActionName()", "testAjaxValidationFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException2() throws Throwable {
        try {
            new AjaxValidationFilter().filter(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AjaxValidationFilter.class, ex);
        }
    }
    
    public void testFilterThrowsNullPointerException3() throws Throwable {
        InvocationChain chain = new InvocationChain("testAjaxValidationFilterActionName", null);
        try {
            new AjaxValidationFilter().filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AjaxValidationFilter.class, ex);
            assertEquals("chain.getActionName()", "testAjaxValidationFilterActionName", chain.getActionName());
        }
    }
    
    public void testProccessListThrowsNullPointerException() throws Throwable {
        List list = new ArrayList(100);
        DefaultMessage defaultMessage = new DefaultMessage(100, new ClasspathMessageContext("testAjaxValidationFilterResource"));
        list.add(defaultMessage);
        AjaxValidationFilter ajaxValidationFilter = new AjaxValidationFilter();
        try {
            ajaxValidationFilter.proccessList(list, Locale.PRC);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("(ArrayList) list.size()", 1, list.size());
        }
    }
    
    public void testProccessListThrowsNullPointerException1() throws Throwable {
        AjaxValidationFilter ajaxValidationFilter = new AjaxValidationFilter();
        try {
            ajaxValidationFilter.proccessList(null, Locale.FRANCE);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AjaxValidationFilter.class, ex);
        }
    }
}

