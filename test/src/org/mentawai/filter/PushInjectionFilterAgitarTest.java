/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:25:25 PM
 * Time to generate: 00:50.051 seconds
 *
 */

package org.mentawai.filter;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.text.DateFormat;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import org.mentawai.action.SuccessAction;
import org.mentawai.core.Input;
import org.mentawai.core.MapInput;
import org.mentawai.core.InputWrapper;
import org.mentawai.core.InvocationChain;
import org.mentawai.core.PojoAction;
import org.mentawai.util.FindMethod;
import org.mentawai.util.MockAction;

public class PushInjectionFilterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return PushInjectionFilter.class;
    }
    
    public void testConstructor() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        assertEquals("pushInjectionFilter.methodsConverted.size()", 0, ((Map) getPrivateField(pushInjectionFilter, "methodsConverted")).size());
        assertTrue("pushInjectionFilter.tryField", ((Boolean) getPrivateField(pushInjectionFilter, "tryField")).booleanValue());
        assertTrue("pushInjectionFilter.convert", ((Boolean) getPrivateField(pushInjectionFilter, "convert")).booleanValue());
        assertEquals("pushInjectionFilter.methods.size()", 0, ((Map) getPrivateField(pushInjectionFilter, "methods")).size());
    }
    
    public void testConstructor1() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        assertEquals("pushInjectionFilter.methodsConverted.size()", 0, ((Map) getPrivateField(pushInjectionFilter, "methodsConverted")).size());
        assertTrue("pushInjectionFilter.tryField", ((Boolean) getPrivateField(pushInjectionFilter, "tryField")).booleanValue());
        assertTrue("pushInjectionFilter.convert", ((Boolean) getPrivateField(pushInjectionFilter, "convert")).booleanValue());
        assertEquals("pushInjectionFilter.methods.size()", 0, ((Map) getPrivateField(pushInjectionFilter, "methods")).size());
    }
    
    public void testConstructor2() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true, false);
        assertEquals("pushInjectionFilter.methodsConverted.size()", 0, ((Map) getPrivateField(pushInjectionFilter, "methodsConverted")).size());
        assertTrue("pushInjectionFilter.tryField", ((Boolean) getPrivateField(pushInjectionFilter, "tryField")).booleanValue());
        assertFalse("pushInjectionFilter.convert", ((Boolean) getPrivateField(pushInjectionFilter, "convert")).booleanValue());
        assertEquals("pushInjectionFilter.methods.size()", 0, ((Map) getPrivateField(pushInjectionFilter, "methods")).size());
    }
    
    public void testDestroy() throws Throwable {
        new PushInjectionFilter(true).destroy();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testFilter() throws Throwable {
        String result = new PushInjectionFilter(true, false).filter(new InvocationChain("testPushInjectionFilterActionName", new MockAction()));
        assertEquals("result", "success", result);
    }
    
    public void testFilterWithAggressiveMocks() throws Throwable {
        PushInjectionFilter pushInjectionFilter = (PushInjectionFilter) Mockingbird.getProxyObject(PushInjectionFilter.class, true);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        PojoAction pojoAction = (PojoAction) Mockingbird.getProxyObject(PojoAction.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Field field = (Field) Mockingbird.getProxyObject(Field.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        setPrivateField(pushInjectionFilter, "convert", Boolean.TRUE);
        setPrivateField(invocationChain, "action", pojoAction);
        setPrivateField(pojoAction, "pojo", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(pojoAction.getInput(), input);
        Mockingbird.setReturnValue(input.keys(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(pojoAction.getLocale(), null);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, pushInjectionFilter, "setValueByReflection", "(java.lang.Object,java.lang.String,java.lang.Object,java.util.Locale,boolean)boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, PushInjectionFilter.class, "getField", "(java.lang.Object,java.lang.String)java.lang.reflect.Field", field, 1);
        Mockingbird.setReturnValue(false, pushInjectionFilter, "getConvertedValue", "(java.lang.String,java.lang.String,java.util.Locale)java.lang.Object", obj, 1);
        Mockingbird.setReturnValue(false, pushInjectionFilter, "setValueByReflection", "(java.lang.Object,java.lang.String,java.lang.Object,java.util.Locale,boolean)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", obj2, 1);
        Mockingbird.setReturnValue(pojoAction.getLocale(), null);
        Mockingbird.setReturnValue(false, pushInjectionFilter, "setValueByReflection", "(java.lang.Object,java.lang.String,java.lang.Object,java.util.Locale,boolean)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        String result = pushInjectionFilter.filter(invocationChain);
        assertEquals("result", "", result);
    }
    
    public void testFilterWithAggressiveMocks1() throws Throwable {
        PushInjectionFilter pushInjectionFilter = (PushInjectionFilter) Mockingbird.getProxyObject(PushInjectionFilter.class, true);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        PojoAction pojoAction = (PojoAction) Mockingbird.getProxyObject(PojoAction.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Field field = (Field) Mockingbird.getProxyObject(Field.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        Field field2 = (Field) Mockingbird.getProxyObject(Field.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        setPrivateField(pushInjectionFilter, "convert", Boolean.TRUE);
        setPrivateField(invocationChain, "action", pojoAction);
        setPrivateField(pojoAction, "pojo", obj);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(pojoAction.getInput(), input);
        Mockingbird.setReturnValue(input.keys(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(pojoAction.getLocale(), null);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, pushInjectionFilter, "setValueByReflection", "(java.lang.Object,java.lang.String,java.lang.Object,java.util.Locale,boolean)boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, PushInjectionFilter.class, "getField", "(java.lang.Object,java.lang.String)java.lang.reflect.Field", field, 1);
        Mockingbird.setReturnValue(false, pushInjectionFilter, "getConvertedValue", "(java.lang.String,java.lang.String,java.util.Locale)java.lang.Object", obj2, 1);
        Mockingbird.setReturnValue(false, pushInjectionFilter, "setValueByReflection", "(java.lang.Object,java.lang.String,java.lang.Object,java.util.Locale,boolean)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(pojoAction.getLocale(), null);
        Mockingbird.setReturnValue(false, pushInjectionFilter, "setValueByReflection", "(java.lang.Object,java.lang.String,java.lang.Object,java.util.Locale,boolean)boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, PushInjectionFilter.class, "getField", "(java.lang.Object,java.lang.String)java.lang.reflect.Field", field2, 1);
        Mockingbird.setReturnValue(false, pushInjectionFilter, "getConvertedValue", "(java.lang.String,java.lang.String,java.util.Locale)java.lang.Object", obj3, 1);
        Mockingbird.setReturnValue(false, pushInjectionFilter, "setValueByReflection", "(java.lang.Object,java.lang.String,java.lang.Object,java.util.Locale,boolean)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        String result = pushInjectionFilter.filter(invocationChain);
        assertEquals("result", "", result);
    }
    
    public void testGetConvertedValue() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        Boolean result = (Boolean) pushInjectionFilter.getConvertedValue("boolean", "0", Locale.ITALY);
        assertFalse("result", result.booleanValue());
    }
    
    public void testGetConvertedValue1() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        Object result = pushInjectionFilter.getConvertedValue("boolean", "2", Locale.SIMPLIFIED_CHINESE);
        assertNull("result", result);
    }
    
    public void testGetConvertedValue2() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        Object result = pushInjectionFilter.getConvertedValue("java.lang.Integer", "testPushInjectionFilterValue", Locale.US);
        assertNull("result", result);
    }
    
    public void testGetConvertedValue3() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        Double result = (Double) pushInjectionFilter.getConvertedValue("double", "0", Locale.ITALY);
        assertEquals("result", 0.0, result.doubleValue(), 1.0E-6);
    }
    
    public void testGetConvertedValue4() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        Object result = pushInjectionFilter.getConvertedValue("java.lang.Boolean", "-18", Locale.FRANCE);
        assertNull("result", result);
    }
    
    public void testGetConvertedValue5() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        Integer result = (Integer) pushInjectionFilter.getConvertedValue("int", "-18", Locale.US);
        assertEquals("result", -18, result.intValue());
    }
    
    public void testGetConvertedValue6() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true, false);
        Object result = pushInjectionFilter.getConvertedValue("java.lang.Boolean", "testPushInjectionFilterValue", null);
        assertNull("result", result);
    }
    
    public void testGetConvertedValue7() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        Object result = pushInjectionFilter.getConvertedValue("java.util.Date", "testPushInjectionFilterValue", Locale.GERMANY);
        assertNull("result", result);
    }
    
    public void testGetConvertedValue8() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true, false);
        Object result = pushInjectionFilter.getConvertedValue("double", "testPushInjectionFilterValue", Locale.CHINESE);
        assertNull("result", result);
    }
    
    public void testGetConvertedValue9() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        Object result = pushInjectionFilter.getConvertedValue("int", "testPushInjectionFilterValue", Locale.JAPANESE);
        assertNull("result", result);
    }
    
    public void testGetConvertedValue10() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        Boolean result = (Boolean) pushInjectionFilter.getConvertedValue("boolean", "1", Locale.FRENCH);
        assertTrue("result", result.booleanValue());
    }
    
    public void testGetConvertedValue11() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true, false);
        Object result = pushInjectionFilter.getConvertedValue("testPushInjectionFilterClassName", "testPushInjectionFilterValue", Locale.FRENCH);
        assertNull("result", result);
    }
    
    public void testGetConvertedValue12() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        Boolean result = (Boolean) pushInjectionFilter.getConvertedValue("boolean", "on", Locale.KOREAN);
        assertTrue("result", result.booleanValue());
    }
    
    public void testGetConvertedValue13() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        Object result = pushInjectionFilter.getConvertedValue("java.lang.Double", "testPushInjectionFilterValue", Locale.CANADA);
        assertNull("result", result);
    }
    
    public void testGetConvertedValue14() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        Object result = pushInjectionFilter.getConvertedValue("boolean", "testPushInjectionFilterValue", Locale.TRADITIONAL_CHINESE);
        assertNull("result", result);
    }
    
    public void testGetConvertedValue15() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        Double result = (Double) pushInjectionFilter.getConvertedValue("java.lang.Double", "1.1427226478519452E307", Locale.US);
        assertEquals("result", 1.1427226478519452E307, result.doubleValue(), 1.0E-6);
    }
    
    public void testGetConvertedValue16() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        Boolean result = (Boolean) pushInjectionFilter.getConvertedValue("boolean", "tRUe", Locale.SIMPLIFIED_CHINESE);
        assertTrue("result", result.booleanValue());
    }
    
    public void testGetConvertedValue17() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true, false);
        Boolean result = (Boolean) pushInjectionFilter.getConvertedValue("boolean", "fAlsE", Locale.FRENCH);
        assertFalse("result", result.booleanValue());
    }
    
    public void testGetConvertedValueWithAggressiveMocks() throws Throwable {
        PushInjectionFilter pushInjectionFilter = (PushInjectionFilter) Mockingbird.getProxyObject(PushInjectionFilter.class, true);
        DateFormat dateFormat = (DateFormat) Mockingbird.getProxyObject(DateFormat.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, DateFormat.class, "getDateInstance", "(int,java.util.Locale)java.text.DateFormat", new Object[] {new Integer(3), null}, dateFormat, 1);
        Mockingbird.setReturnValue(false, dateFormat, "setLenient", "(boolean)void", new Object[] {new Integer(0)}, null, 1);
        Mockingbird.setReturnValue(false, dateFormat, "parse", "(java.lang.String)java.util.Date", new Object[] {""}, null, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        Object result = pushInjectionFilter.getConvertedValue("java.util.Date", "", null);
        assertNull("result", result);
    }
    
    public void testGetConvertedValueWithAggressiveMocks1() throws Throwable {
        PushInjectionFilter pushInjectionFilter = (PushInjectionFilter) Mockingbird.getProxyObject(PushInjectionFilter.class, true);
        NumberFormatException numberFormatException = (NumberFormatException) Mockingbird.getProxyObject(NumberFormatException.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, Integer.class, "parseInt", "(java.lang.String)int", new Object[] {""}, numberFormatException, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        Object result = pushInjectionFilter.getConvertedValue("boolean", "", null);
        assertNull("result", result);
    }
    
    public void testGetField() throws Throwable {
        Field result = PushInjectionFilter.getField(new Object(), "testPushInjectionFilterName");
        assertNull("result", result);
    }
    
    public void testGetField1() throws Throwable {
        Field result = PushInjectionFilter.getField("", "testPushInjectionFilterName");
        assertNull("result", result);
    }
    
    public void testGetPrimitiveFrom() throws Throwable {
        Class result = PushInjectionFilter.getPrimitiveFrom(new Double(0.0));
        assertEquals("result", double.class, result);
    }
    
    public void testGetPrimitiveFrom1() throws Throwable {
        Class result = PushInjectionFilter.getPrimitiveFrom(new Long(1L));
        assertEquals("result", long.class, result);
    }
    
    public void testGetPrimitiveFrom2() throws Throwable {
        Class result = PushInjectionFilter.getPrimitiveFrom(short.class);
        assertNull("result", result);
    }
    
    public void testGetPrimitiveFrom3() throws Throwable {
        Class result = PushInjectionFilter.getPrimitiveFrom(new Integer(0));
        assertEquals("result", int.class, result);
    }
    
    public void testGetPrimitiveFrom4() throws Throwable {
        Class result = PushInjectionFilter.getPrimitiveFrom(new Short((short)0));
        assertEquals("result", short.class, result);
    }
    
    public void testGetPrimitiveFrom5() throws Throwable {
        Class result = PushInjectionFilter.getPrimitiveFrom(new Float(-1.0F));
        assertEquals("result", float.class, result);
    }
    
    public void testGetPrimitiveFrom6() throws Throwable {
        Class result = PushInjectionFilter.getPrimitiveFrom(new Character('b'));
        assertEquals("result", char.class, result);
    }
    
    public void testGetPrimitiveFrom7() throws Throwable {
        Class result = PushInjectionFilter.getPrimitiveFrom(Boolean.TRUE);
        assertEquals("result", boolean.class, result);
    }
    
    public void testGetPrimitiveFrom8() throws Throwable {
        Class result = PushInjectionFilter.getPrimitiveFrom(new Byte((byte)9));
        assertEquals("result", byte.class, result);
    }
    
    public void testSetValue() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false);
        boolean result = pushInjectionFilter.setValue(new Integer(0), " ", new Integer(0), Locale.ENGLISH);
        assertFalse("result", result);
    }
    
    public void testSetValue1() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        Object method = FindMethod.getMethod(Integer.class, "testPushInjectionFilterParam2", (Class[]) null);
        Mockingbird.setException(true, method, (Throwable) Mockingbird.getProxyObject(NoSuchMethodException.class));
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(""), null);
        Integer target = new Integer(32);
        Mockingbird.setReturnValue(PushInjectionFilter.getField(target, "testPushInjectionFilterParam2"), null);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = pushInjectionFilter.setValue(target, "testPushInjectionFilterName", "", loc);
        assertFalse("result", result);
    }
    
    public void testSetValue2() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        boolean result = pushInjectionFilter.setValue(null, "2C", null, Locale.ITALY);
        assertFalse("result", result);
    }
    
    public void testSetValue3() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true, false);
        boolean result = pushInjectionFilter.setValue(null, "testPushInjectionFilterName", "", Locale.CHINA);
        assertFalse("result", result);
    }
    
    public void testSetValue4() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        boolean result = pushInjectionFilter.setValue("", " ", new Integer(69), Locale.TRADITIONAL_CHINESE);
        assertFalse("result", result);
    }
    
    public void testSetValue5() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false);
        boolean result = pushInjectionFilter.setValue(new Integer(-2), " ", null, null);
        assertFalse("result", result);
    }
    
    public void testSetValue6() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        boolean result = pushInjectionFilter.setValue(new InvocationChain("testPushInjectionFilterActionName", new MockAction()), "2C", null, Locale.FRANCE);
        assertFalse("result", result);
    }
    
    public void testSetValue7() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        boolean result = pushInjectionFilter.setValue("4p2", "", null, Locale.FRANCE);
        assertFalse("result", result);
    }
    
    public void testSetValue8() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        Object method = FindMethod.getMethod(String.class, "testPushInjectionFilterParam2", (Class[]) null);
        Mockingbird.setException(true, method, (Throwable) Mockingbird.getProxyObject(NoSuchMethodException.class));
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom("testString"), null);
        Mockingbird.setReturnValue(PushInjectionFilter.getField("testString", "testPushInjectionFilterParam2"), null);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = pushInjectionFilter.setValue("testString", "testPushInjectionFilterName", "testString", loc);
        assertFalse("result", result);
    }
    
    public void testSetValue9() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false);
        boolean result = pushInjectionFilter.setValue("testString", "testPushInjectionFilterName", "testString", Locale.PRC);
        assertFalse("result", result);
    }
    
    public void testSetValue10() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false);
        boolean result = pushInjectionFilter.setValue(new Object(), " ", "3", Locale.UK);
        assertFalse("result", result);
    }
    
    public void testSetValue11() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true, false);
        boolean result = pushInjectionFilter.setValue(new Integer(0), "testPushInjectionFilterName", "", Locale.ENGLISH);
        assertFalse("result", result);
    }
    
    public void testSetValue12() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        boolean result = pushInjectionFilter.setValue(null, "testPushInjectionFilterName", new Integer(23), Locale.ENGLISH);
        assertFalse("result", result);
    }
    
    public void testSetValue13() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        boolean result = pushInjectionFilter.setValue("testString", "", "testString", Locale.GERMANY);
        assertFalse("result", result);
    }
    
    public void testSetValue14() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        boolean result = pushInjectionFilter.setValue(null, " ", new Object(), Locale.FRENCH);
        assertFalse("result", result);
    }
    
    public void testSetValue15() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(null), null);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = pushInjectionFilter.setValue("tr", "testPushInjectionFilterName", null, null);
        assertFalse("result", result);
    }
    
    public void testSetValue16() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        boolean result = pushInjectionFilter.setValue("testString", " ", "", Locale.ITALIAN);
        assertFalse("result", result);
    }
    
    public void testSetValue17() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        boolean result = pushInjectionFilter.setValue(null, " ", null, Locale.JAPAN);
        assertFalse("result", result);
    }
    
    public void testSetValue18() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        Object target = Mockingbird.getProxyObject(Object.class);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Object value = Mockingbird.getProxyObject(Object.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(value), null);
        Mockingbird.setReturnValue(PushInjectionFilter.getField(target, "testPushInjectionFilterParam2"), null);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = pushInjectionFilter.setValue(target, " ", value, loc);
        assertFalse("result", result);
    }
    
    public void testSetValue19() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        Integer target = new Integer(-1);
        boolean result = pushInjectionFilter.setValue(target, "2C", target, Locale.GERMAN);
        assertFalse("result", result);
    }
    
    public void testSetValue20() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false, false);
        boolean result = pushInjectionFilter.setValue(new Object(), "2C", "", Locale.US);
        assertFalse("result", result);
    }
    
    public void testSetValue21() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false);
        boolean result = pushInjectionFilter.setValue("", " ", new Object(), Locale.ITALY);
        assertFalse("result", result);
    }
    
    public void testSetValue22() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false);
        Locale target = Locale.CHINESE;
        boolean result = pushInjectionFilter.setValue(target, "testPushInjectionFilterName", new Object(), Locale.FRANCE);
        assertFalse("result", result);
    }
    
    public void testSetValue23() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Object value = Mockingbird.getProxyObject(Object.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(value), null);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = pushInjectionFilter.setValue("", " ", value, loc);
        assertFalse("result", result);
    }
    
    public void testSetValue24() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false);
        boolean result = pushInjectionFilter.setValue("", "testPushInjectionFilterName", null, Locale.FRANCE);
        assertFalse("result", result);
    }
    
    public void testSetValue25() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true, false);
        boolean result = pushInjectionFilter.setValue("+ ", "", "\u0001 -", Locale.SIMPLIFIED_CHINESE);
        assertFalse("result", result);
    }
    
    public void testSetValue26() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true, false);
        boolean result = pushInjectionFilter.setValue(null, " ", null, Locale.FRENCH);
        assertFalse("result", result);
    }
    
    public void testSetValue27() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false);
        boolean result = pushInjectionFilter.setValue("testString", "testPushInjectionFilterName", new Integer(-32), Locale.KOREAN);
        assertFalse("result", result);
    }
    
    public void testSetValue28() throws Throwable {
        Mockingbird.enterRecordingMode();
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", map, 1);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", Mockingbird.getProxyObject(Map.class), 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true, false);
        Object value = Mockingbird.getProxyObject(Object.class);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Object[] {String.class}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "containsKey", "(java.lang.Object)boolean", new Object[] {"1"}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"1"}, null, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = pushInjectionFilter.setValue("", "1", value, loc);
        assertFalse("result", result);
    }
    
    public void testSetValue29() throws Throwable {
        Mockingbird.enterRecordingMode();
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", map, 1);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", Mockingbird.getProxyObject(Map.class), 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true, false);
        Object value = Mockingbird.getProxyObject(Object.class);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Object[] {String.class}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "containsKey", "(java.lang.Object)boolean", new Object[] {"testString"}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"testString"}, null, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = pushInjectionFilter.setValue("", "testString", value, loc);
        assertFalse("result", result);
    }
    
    public void testSetValue30() throws Throwable {
        Mockingbird.enterRecordingMode();
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", map, 1);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", Mockingbird.getProxyObject(Map.class), 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Object[] {String.class}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "containsKey", "(java.lang.Object)boolean", new Object[] {"doubl"}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"doubl"}, null, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = pushInjectionFilter.setValue("", "doubl", null, loc);
        assertFalse("result", result);
    }
    
    public void testSetValue31() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        boolean result = pushInjectionFilter.setValue(new Character('1'), "testPushInjectionFilterName", "42L", Locale.KOREAN);
        assertFalse("result", result);
    }
    
    public void testSetValue32() throws Throwable {
        Mockingbird.enterRecordingMode();
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", map, 1);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", Mockingbird.getProxyObject(Map.class), 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Object[] {String.class}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "containsKey", "(java.lang.Object)boolean", new Object[] {"1"}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"1"}, null, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = pushInjectionFilter.setValue("", "1", "", loc);
        assertFalse("result", result);
    }
    
    public void testSetValue33() throws Throwable {
        Mockingbird.enterRecordingMode();
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", map, 1);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", Mockingbird.getProxyObject(Map.class), 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Object[] {String.class}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "containsKey", "(java.lang.Object)boolean", new Object[] {"testString"}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"testString"}, null, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = pushInjectionFilter.setValue("testString", "testString", "testString", loc);
        assertFalse("result", result);
    }
    
    public void testSetValue34() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false, false);
        boolean result = pushInjectionFilter.setValue("", " ", new Object(), Locale.JAPANESE);
        assertFalse("result", result);
    }
    
    public void testSetValue35() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        boolean result = pushInjectionFilter.setValue("1 ", " ", null, null);
        assertFalse("result", result);
    }
    
    public void testSetValue36() throws Throwable {
        Mockingbird.enterRecordingMode();
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", map, 1);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", Mockingbird.getProxyObject(Map.class), 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Object[] {String.class}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "containsKey", "(java.lang.Object)boolean", new Object[] {"testString"}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"testString"}, null, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = pushInjectionFilter.setValue("testString", "testString", new Integer(-32), loc);
        assertFalse("result", result);
    }
    
    public void testSetValue37() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false);
        Mockingbird.enterRecordingMode();
        Object method = FindMethod.getMethod(Integer.class, "testPushInjectionFilterParam2", (Class[]) null);
        Mockingbird.setException(true, method, (Throwable) Mockingbird.getProxyObject(NoSuchMethodException.class));
        Integer target = new Integer(33);
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(target), int.class);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = pushInjectionFilter.setValue(target, " ", target, null);
        assertFalse("result", result);
    }
    
    public void testSetValue38() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        boolean result = pushInjectionFilter.setValue("testString", "", new Object(), Locale.PRC);
        assertFalse("result", result);
    }
    
    public void testSetValue39() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true, false);
        boolean result = pushInjectionFilter.setValue("", " ", new Object(), Locale.JAPANESE);
        assertFalse("result", result);
    }
    
    public void testSetValue40() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false, false);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        Object method = FindMethod.getMethod(String.class, "testPushInjectionFilterParam2", (Class[]) null);
        Mockingbird.setException(true, method, (Throwable) Mockingbird.getProxyObject(NoSuchMethodException.class));
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom("testString"), null);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = pushInjectionFilter.setValue("", "2C", "testString", loc);
        assertFalse("result", result);
    }
    
    public void testSetValue41() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        Object method = FindMethod.getMethod(String.class, "testPushInjectionFilterParam2", (Class[]) null);
        Mockingbird.setException(true, method, (Throwable) Mockingbird.getProxyObject(NoSuchMethodException.class));
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(""), null);
        Mockingbird.setReturnValue(PushInjectionFilter.getField("n~J !>[M", "testPushInjectionFilterParam2"), null);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = pushInjectionFilter.setValue("n~J !>[M", " ", "", loc);
        assertFalse("result", result);
    }
    
    public void testSetValue42() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        SuccessAction value = (SuccessAction) Mockingbird.getProxyObject(SuccessAction.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(value), null);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = pushInjectionFilter.setValue(new Integer(100), "testPushInjectionFilterName", value, loc);
        assertFalse("result", result);
    }
    
    public void testSetValue43() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true, true);
        MapInput value = (MapInput) Mockingbird.getProxyObject(MapInput.class);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Object target = Mockingbird.getProxyObject(Object.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(value), null);
        Mockingbird.setReturnValue(PushInjectionFilter.getField(target, "testPushInjectionFilterParam2"), null);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = pushInjectionFilter.setValue(target, "testPushInjectionFilterName", value, loc);
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {new Object(), "2C", new Integer(0), Locale.FRENCH, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection1() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        Integer integer = new Integer(33);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {integer, "testPushInjectionFilterName", integer, Locale.CHINA, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection2() throws Throwable {
        Mockingbird.enterRecordingMode();
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", map, 1);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", Mockingbird.getProxyObject(Map.class), 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Object[] {String.class}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "containsKey", "(java.lang.Object)boolean", new Object[] {"testString"}, Boolean.FALSE, 1);
        Object method = FindMethod.getMethod(String.class, "testPushInjectionFilterParam2", (Class[]) null);
        Mockingbird.setException(true, method, (Throwable) Mockingbird.getProxyObject(NoSuchMethodException.class));
        Integer integer = new Integer(-32);
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(integer), int.class);
        Mockingbird.setReturnValue(PushInjectionFilter.getField("", "testPushInjectionFilterParam2"), null);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"testString", null}, null, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"testString"}, null, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {"", "testString", integer, locale, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection3() throws Throwable {
        Mockingbird.enterRecordingMode();
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", map, 1);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", Mockingbird.getProxyObject(Map.class), 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Object[] {String.class}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "containsKey", "(java.lang.Object)boolean", new Object[] {"\uE8AD"}, Boolean.FALSE, 1);
        Object method = FindMethod.getMethod(String.class, "testPushInjectionFilterParam2", (Class[]) null);
        Mockingbird.setException(true, method, (Throwable) Mockingbird.getProxyObject(NoSuchMethodException.class));
        Integer integer = new Integer(0);
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(integer), int.class);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"\uE8AD", null}, null, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"\uE8AD"}, null, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {"; ", "\uE8AD", integer, locale, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection4() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {"testString", " ", "", Locale.ITALIAN, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection5() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {"I", " ", "", Locale.JAPAN, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection6() throws Throwable {
        Mockingbird.enterRecordingMode();
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", map, 1);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", Mockingbird.getProxyObject(Map.class), 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Object[] {String.class}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "containsKey", "(java.lang.Object)boolean", new Object[] {"testString"}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(obj), null);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"testString", null}, null, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"testString"}, null, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {"", "testString", obj, locale, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection7() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {"Q+xT", "2C", "Q+xT", Locale.CHINESE, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection8() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", Mockingbird.getProxyObject(Map.class), 1);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", map, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false, true);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Object[] {Integer.class}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "containsKey", "(java.lang.Object)boolean", new Object[] {"testString"}, Boolean.FALSE, 1);
        Object method = FindMethod.getMethod(Integer.class, "testPushInjectionFilterParam2", (Class[]) null);
        Mockingbird.setException(true, method, (Throwable) Mockingbird.getProxyObject(NoSuchMethodException.class));
        Integer integer = new Integer(0);
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(integer), int.class);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"testString", null}, null, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"testString"}, null, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {new Integer(1), "testString", integer, locale, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection9() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", Mockingbird.getProxyObject(Map.class), 1);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", map, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Object[] {String.class}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "containsKey", "(java.lang.Object)boolean", new Object[] {"o"}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(null), null);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"o", null}, null, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"o"}, null, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {"", "o", null, locale, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection10() throws Throwable {
        Mockingbird.enterRecordingMode();
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", map, 1);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", Mockingbird.getProxyObject(Map.class), 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true, false);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Object[] {String.class}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "containsKey", "(java.lang.Object)boolean", new Object[] {"1"}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"1"}, null, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {"", "1", "", locale, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection11() throws Throwable {
        Mockingbird.enterRecordingMode();
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", map, 1);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", Mockingbird.getProxyObject(Map.class), 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Object[] {String.class}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "containsKey", "(java.lang.Object)boolean", new Object[] {"2C"}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"2C"}, null, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {"English", "2C", null, locale, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection12() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true, false);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {"testString", " ", new Byte((byte)100), Locale.CHINA, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection13() throws Throwable {
        Mockingbird.enterRecordingMode();
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", map, 1);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", Mockingbird.getProxyObject(Map.class), 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Object[] {String.class}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "containsKey", "(java.lang.Object)boolean", new Object[] {":"}, Boolean.FALSE, 1);
        Object method = FindMethod.getMethod(String.class, "testPushInjectionFilterParam2", (Class[]) null);
        Mockingbird.setException(true, method, (Throwable) Mockingbird.getProxyObject(NoSuchMethodException.class));
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(""), null);
        Mockingbird.setReturnValue(PushInjectionFilter.getField("", "testPushInjectionFilterParam2"), null);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {":", null}, null, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {":"}, null, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {"", ":", "", locale, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection14() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false, true);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {new Integer(1), "testPushInjectionFilterName", new Integer(0), Locale.SIMPLIFIED_CHINESE, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection15() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true, false);
        Integer integer = new Integer(33);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {integer, " ", integer, Locale.ITALIAN, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection16() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {"", " ", "", Locale.ITALIAN, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection17() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {"; ", " ", new Integer(0), Locale.FRANCE, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection18() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {"", " ", "", Locale.CHINESE, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection19() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {null, "testPushInjectionFilterName", "", Locale.FRENCH, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection20() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true, false);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {"", "", "testString", Locale.SIMPLIFIED_CHINESE, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection21() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", Mockingbird.getProxyObject(Map.class), 1);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", map, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Object[] {String.class}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "containsKey", "(java.lang.Object)boolean", new Object[] {"testString"}, Boolean.FALSE, 1);
        Object method = FindMethod.getMethod(String.class, "testPushInjectionFilterParam2", (Class[]) null);
        Mockingbird.setException(true, method, (Throwable) Mockingbird.getProxyObject(NoSuchMethodException.class));
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(""), null);
        Mockingbird.setReturnValue(PushInjectionFilter.getField("testString", "testPushInjectionFilterParam2"), null);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"testString", null}, null, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"testString"}, null, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {"testString", "testString", "", locale, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection22() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false, true);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {"testString", " ", new Byte((byte)100), Locale.CHINA, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection23() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true, false);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        Object method = FindMethod.getMethod(Object.class, "testPushInjectionFilterParam2", (Class[]) null);
        Mockingbird.setException(true, method, (Throwable) Mockingbird.getProxyObject(NoSuchMethodException.class));
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(""), null);
        Mockingbird.setReturnValue(PushInjectionFilter.getField(obj, "testPushInjectionFilterParam2"), null);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {obj, "2C", "", locale, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection24() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {new Integer(0), "testPushInjectionFilterName", "", Locale.SIMPLIFIED_CHINESE, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection25() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false, true);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {"testString", "h9", new Integer(33), null, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection26() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(false);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {new Integer(0), "2C", "", Locale.GERMAN, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection27() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", Mockingbird.getProxyObject(Map.class), 1);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", map, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter();
        Object obj = Mockingbird.getProxyObject(Object.class);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Object[] {String.class}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "containsKey", "(java.lang.Object)boolean", new Object[] {"N"}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(obj), null);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"N", null}, null, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"N"}, null, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {"", "N", obj, locale, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflectionWithAggressiveMocks() throws Throwable {
        PushInjectionFilter pushInjectionFilter = (PushInjectionFilter) Mockingbird.getProxyObject(PushInjectionFilter.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        setPrivateField(pushInjectionFilter, "methods", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, "AA", "substring", "(int,int)java.lang.String", new Object[] {new Integer(0), new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toUpperCase", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "containsKey", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(true, FindMethod.class, "getMethod", "(java.lang.Class,java.lang.String,java.lang.Class[])java.lang.reflect.Method", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushInjectionFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushInjectionFilter, new Object[] {obj, "AA", obj2, null, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueWithAggressiveMocks() throws Throwable {
        PushInjectionFilter pushInjectionFilter = (PushInjectionFilter) Mockingbird.getProxyObject(PushInjectionFilter.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        NoSuchMethodException noSuchMethodException = (NoSuchMethodException) Mockingbird.getProxyObject(NoSuchMethodException.class);
        Class class2 = (Class) Mockingbird.getProxyObject(Class.class);
        Field field = (Field) Mockingbird.getProxyObject(Field.class);
        setPrivateField(pushInjectionFilter, "methods", map);
        setPrivateField(pushInjectionFilter, "convert", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toUpperCase", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "containsKey", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setException(true, FindMethod.class, "getMethod", "(java.lang.Class,java.lang.String,java.lang.Class[])java.lang.reflect.Method", noSuchMethodException, 1);
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(obj2), class2);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", field, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = pushInjectionFilter.setValue(obj, "AA", obj2, null);
        assertFalse("result", result);
    }
    
    public void testSetValueWithAggressiveMocks1() throws Throwable {
        PushInjectionFilter pushInjectionFilter = (PushInjectionFilter) Mockingbird.getProxyObject(PushInjectionFilter.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        NoSuchMethodException noSuchMethodException = (NoSuchMethodException) Mockingbird.getProxyObject(NoSuchMethodException.class);
        Class class2 = (Class) Mockingbird.getProxyObject(Class.class);
        Field field = (Field) Mockingbird.getProxyObject(Field.class);
        Method method = (Method) Mockingbird.getProxyObject(Method.class);
        Class class3 = (Class) Mockingbird.getProxyObject(Class.class);
        Field field2 = (Field) Mockingbird.getProxyObject(Field.class);
        Method method2 = (Method) Mockingbird.getProxyObject(Method.class);
        setPrivateField(pushInjectionFilter, "methods", map);
        setPrivateField(pushInjectionFilter, "convert", Boolean.TRUE);
        setPrivateField(pushInjectionFilter, "methodsConverted", map2);
        setPrivateField(pushInjectionFilter, "tryField", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toUpperCase", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, hashMap, "containsKey", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setException(true, FindMethod.class, "getMethod", "(java.lang.Class,java.lang.String,java.lang.Class[])java.lang.reflect.Method", noSuchMethodException, 1);
        Mockingbird.setReturnValue(true, PushInjectionFilter.class, "getPrimitiveFrom", "(java.lang.Object)java.lang.Class", class2, 1);
        Mockingbird.setReturnValue(true, PushInjectionFilter.class, "getField", "(java.lang.Object,java.lang.String)java.lang.reflect.Field", field, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", method, 1);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toUpperCase", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", null, 1);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap2);
        Mockingbird.setReturnValue(false, map2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap2, "containsKey", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setException(true, FindMethod.class, "getMethod", "(java.lang.Class,java.lang.String,java.lang.Class[])java.lang.reflect.Method", noSuchMethodException, 1);
        Mockingbird.setReturnValue(true, PushInjectionFilter.class, "getPrimitiveFrom", "(java.lang.Object)java.lang.Class", class3, 1);
        Mockingbird.setReturnValue(true, PushInjectionFilter.class, "getField", "(java.lang.Object,java.lang.String)java.lang.reflect.Field", field2, 1);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap2, "get", "(java.lang.Object)java.lang.Object", method2, 1);
        Mockingbird.enterTestMode(PushInjectionFilter.class);
        boolean result = pushInjectionFilter.setValue(obj, "AA", "", null);
        assertFalse("result", result);
    }
    
    public void testFilterThrowsIllegalStateException() throws Throwable {
        PojoAction action = new PojoAction("");
        action.setInput(new DIFilter());
        InvocationChain chain = new InvocationChain("testPushInjectionFilterActionName", action);
        try {
            new PushInjectionFilter().filter(chain);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
            assertEquals("chain.getActionName()", "testPushInjectionFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException() throws Throwable {
        InvocationChain chain = new InvocationChain("testPushInjectionFilterActionName", new SuccessAction());
        try {
            new PushInjectionFilter(true, false).filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushInjectionFilter.class, ex);
            assertEquals("chain.getActionName()", "testPushInjectionFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException1() throws Throwable {
        InvocationChain chain = new InvocationChain("testPushInjectionFilterActionName", new PojoAction("testString"));
        try {
            new PushInjectionFilter(true).filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushInjectionFilter.class, ex);
            assertEquals("chain.getActionName()", "testPushInjectionFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException2() throws Throwable {
        InvocationChain chain = new InvocationChain("testPushInjectionFilterActionName", null);
        try {
            new PushInjectionFilter(true, false).filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushInjectionFilter.class, ex);
            assertEquals("chain.getActionName()", "testPushInjectionFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException3() throws Throwable {
        try {
            new PushInjectionFilter(true).filter(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushInjectionFilter.class, ex);
        }
    }
    
    public void testGetConvertedValueThrowsNullPointerException() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        try {
            pushInjectionFilter.getConvertedValue("java.util.Date", "testPushInjectionFilterValue", null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testGetConvertedValueThrowsNullPointerException1() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true, false);
        try {
            pushInjectionFilter.getConvertedValue("boolean", null, Locale.PRC);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushInjectionFilter.class, ex);
        }
    }
    
    public void testGetConvertedValueThrowsNullPointerException2() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true, false);
        try {
            pushInjectionFilter.getConvertedValue(null, "testPushInjectionFilterValue", Locale.FRENCH);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushInjectionFilter.class, ex);
        }
    }
    
    public void testGetFieldThrowsNullPointerException() throws Throwable {
        try {
            PushInjectionFilter.getField("", null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushInjectionFilter.class, ex);
        }
    }
    
    public void testGetFieldThrowsNullPointerException1() throws Throwable {
        try {
            PushInjectionFilter.getField(null, "testPushInjectionFilterName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushInjectionFilter.class, ex);
        }
    }
    
    public void testSetValueThrowsNullPointerException() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        try {
            pushInjectionFilter.setValue(null, "2C", "testString", Locale.FRENCH);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushInjectionFilter.class, ex);
        }
    }
    
    public void testSetValueThrowsNullPointerException1() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        try {
            pushInjectionFilter.setValue(null, " ", "testString", Locale.PRC);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushInjectionFilter.class, ex);
        }
    }
    
    public void testSetValueThrowsNullPointerException2() throws Throwable {
        PushInjectionFilter pushInjectionFilter = new PushInjectionFilter(true);
        try {
            pushInjectionFilter.setValue(null, "", "testString", Locale.PRC);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushInjectionFilter.class, ex);
        }
    }
}

