/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:22:47 PM
 * Time to generate: 02:01.641 seconds
 *
 */

package org.mentawai.filter;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.PersistenceException;
import org.agitar.mock.persistence.MockEntityManager;
import org.agitar.mock.persistence.MockEntityManagerFactory;
import org.mentawai.action.LogoutAction;
import org.mentawai.action.SuccessAction;
import org.mentawai.core.Action;
import org.mentawai.core.ActionException;
import org.mentawai.core.FilterException;
import org.mentawai.core.Input;
import org.mentawai.core.MapInput;
import org.mentawai.core.RequestInput;
import org.mentawai.core.InputWrapper;
import org.mentawai.core.InvocationChain;
import org.mentawai.core.NullConsequence;
import org.mentawai.core.PojoAction;
import org.mentawai.core.Redirect;
import org.mentawai.transaction.JpaTransaction;
import org.mentawai.transaction.Transaction;
import org.mentawai.util.MockAction;

public class JpaFilterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return JpaFilter.class;
    }
    
    public void testConstructor() throws Throwable {
        EntityManagerFactory factory = new MockEntityManagerFactory();
        JpaFilter jpaFilter = new JpaFilter(factory);
        assertNull("jpaFilter.input.get()", ((ThreadLocal) getPrivateField(jpaFilter, "input")).get());
        assertSame("jpaFilter.factory", factory, getPrivateField(jpaFilter, "factory"));
        assertEquals("jpaFilter.resultsForRollback.size()", 0, ((Collection) getPrivateField(jpaFilter, "resultsForRollback")).size());
        assertEquals("jpaFilter.toString()", "JPAFilter: entityManagerKey=jpa_entityManager transKey=jpa_transaction transactional=false", jpaFilter.toString());
        assertNull("jpaFilter.jpaTransactionThreadLocal.get()", ((ThreadLocal) getPrivateField(jpaFilter, "jpaTransactionThreadLocal")).get());
        assertNull("jpaFilter.jpaEntityManagerThreadLocal.get()", ((ThreadLocal) getPrivateField(jpaFilter, "jpaEntityManagerThreadLocal")).get());
    }
    
    public void testConstructor1() throws Throwable {
        EntityManagerFactory factory = (EntityManagerFactory) Mockingbird.getProxyObject(EntityManagerFactory.class);
        Mockingbird.enterTestMode(JpaFilter.class);
        JpaFilter jpaFilter = new JpaFilter(factory, true);
        assertNull("jpaFilter.input.get()", ((ThreadLocal) getPrivateField(jpaFilter, "input")).get());
        assertSame("jpaFilter.factory", factory, getPrivateField(jpaFilter, "factory"));
        assertEquals("jpaFilter.resultsForRollback.size()", 2, ((Collection) getPrivateField(jpaFilter, "resultsForRollback")).size());
        assertEquals("jpaFilter.toString()", "JPAFilter: entityManagerKey=jpa_entityManager transKey=jpa_transaction transactional=true", jpaFilter.toString());
        assertNull("jpaFilter.jpaTransactionThreadLocal.get()", ((ThreadLocal) getPrivateField(jpaFilter, "jpaTransactionThreadLocal")).get());
        assertNull("jpaFilter.jpaEntityManagerThreadLocal.get()", ((ThreadLocal) getPrivateField(jpaFilter, "jpaEntityManagerThreadLocal")).get());
    }
    
    public void testConstructorWithAggressiveMocks() throws Throwable {
        Mockingbird.ignoreConstructorExceptions(InputWrapper.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.replaceObjectForRecording(HashSet.class, "<init>()", Mockingbird.getProxyObject(HashSet.class));
        Mockingbird.setReturnValue(Persistence.createEntityManagerFactory(""), null);
        Mockingbird.enterTestMode();
        JpaFilter jpaFilter = new JpaFilter("");
        assertNotNull("jpaFilter.input", getPrivateField(jpaFilter, "input"));
        assertNull("jpaFilter.factory", getPrivateField(jpaFilter, "factory"));
        assertNotNull("jpaFilter.resultsForRollback", getPrivateField(jpaFilter, "resultsForRollback"));
        assertEquals("jpaFilter.toString()", "JPAFilter: entityManagerKey=jpa_entityManager transKey=jpa_transaction transactional=false", jpaFilter.toString());
        assertNull("jpaFilter.jpaTransactionThreadLocal.get()", ((ThreadLocal) getPrivateField(jpaFilter, "jpaTransactionThreadLocal")).get());
        assertNotNull("jpaFilter.jpaEntityManagerThreadLocal", getPrivateField(jpaFilter, "jpaEntityManagerThreadLocal"));
    }
    
    public void testConstructorWithAggressiveMocks1() throws Throwable {
        storeStaticField(ExceptionFilter.class, "EXCEPTION");
        Mockingbird.ignoreConstructorExceptions(InputWrapper.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        ExceptionFilter.EXCEPTION = "";
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.replaceObjectForRecording(HashSet.class, "<init>()", Mockingbird.getProxyObject(HashSet.class));
        Mockingbird.setReturnValue(Persistence.createEntityManagerFactory(""), null);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(JpaFilter.class, true), "addResultsForRollback", "(java.lang.String[])void", null, 1);
        Mockingbird.enterTestMode();
        JpaFilter jpaFilter = new JpaFilter("", false);
        assertNotNull("jpaFilter.input", getPrivateField(jpaFilter, "input"));
        assertNull("jpaFilter.factory", getPrivateField(jpaFilter, "factory"));
        assertNotNull("jpaFilter.resultsForRollback", getPrivateField(jpaFilter, "resultsForRollback"));
        assertEquals("jpaFilter.toString()", "JPAFilter: entityManagerKey=jpa_entityManager transKey=jpa_transaction transactional=false", jpaFilter.toString());
        assertNull("jpaFilter.jpaTransactionThreadLocal.get()", ((ThreadLocal) getPrivateField(jpaFilter, "jpaTransactionThreadLocal")).get());
        assertNotNull("jpaFilter.jpaEntityManagerThreadLocal", getPrivateField(jpaFilter, "jpaEntityManagerThreadLocal"));
    }
    
    public void testConstructorWithAggressiveMocks2() throws Throwable {
        storeStaticField(ExceptionFilter.class, "EXCEPTION");
        Mockingbird.ignoreConstructorExceptions(InputWrapper.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        ExceptionFilter.EXCEPTION = "";
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.replaceObjectForRecording(HashSet.class, "<init>()", Mockingbird.getProxyObject(HashSet.class));
        Mockingbird.setReturnValue(Persistence.createEntityManagerFactory("", null), null);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(JpaFilter.class, true), "addResultsForRollback", "(java.lang.String[])void", null, 1);
        Mockingbird.enterTestMode();
        JpaFilter jpaFilter = new JpaFilter("", false, null);
        assertNotNull("jpaFilter.input", getPrivateField(jpaFilter, "input"));
        assertNull("jpaFilter.factory", getPrivateField(jpaFilter, "factory"));
        assertNotNull("jpaFilter.resultsForRollback", getPrivateField(jpaFilter, "resultsForRollback"));
        assertEquals("jpaFilter.toString()", "JPAFilter: entityManagerKey=jpa_entityManager transKey=jpa_transaction transactional=false", jpaFilter.toString());
        assertNull("jpaFilter.jpaTransactionThreadLocal.get()", ((ThreadLocal) getPrivateField(jpaFilter, "jpaTransactionThreadLocal")).get());
        assertNotNull("jpaFilter.jpaEntityManagerThreadLocal", getPrivateField(jpaFilter, "jpaEntityManagerThreadLocal"));
    }
    
    public void testConstructorWithAggressiveMocks3() throws Throwable {
        Mockingbird.ignoreConstructorExceptions(InputWrapper.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.replaceObjectForRecording(HashSet.class, "<init>()", Mockingbird.getProxyObject(HashSet.class));
        Mockingbird.setReturnValue(Persistence.createEntityManagerFactory("", null), null);
        Mockingbird.enterTestMode();
        JpaFilter jpaFilter = new JpaFilter("", null);
        assertNotNull("jpaFilter.input", getPrivateField(jpaFilter, "input"));
        assertNull("jpaFilter.factory", getPrivateField(jpaFilter, "factory"));
        assertNotNull("jpaFilter.resultsForRollback", getPrivateField(jpaFilter, "resultsForRollback"));
        assertEquals("jpaFilter.toString()", "JPAFilter: entityManagerKey=jpa_entityManager transKey=jpa_transaction transactional=false", jpaFilter.toString());
        assertNull("jpaFilter.jpaTransactionThreadLocal.get()", ((ThreadLocal) getPrivateField(jpaFilter, "jpaTransactionThreadLocal")).get());
        assertNotNull("jpaFilter.jpaEntityManagerThreadLocal", getPrivateField(jpaFilter, "jpaEntityManagerThreadLocal"));
    }
    
    public void testAddResultsForRollback() throws Throwable {
        JpaFilter jpaFilter = new JpaFilter(new MockEntityManagerFactory(), true);
        String[] results = new String[1];
        jpaFilter.addResultsForRollback(results);
        assertEquals("jpaFilter.resultsForRollback.size()", 3, ((Collection) getPrivateField(jpaFilter, "resultsForRollback")).size());
    }
    
    public void testAddResultsForRollback1() throws Throwable {
        JpaFilter jpaFilter = new JpaFilter(new MockEntityManagerFactory(), true);
        String[] results = new String[0];
        jpaFilter.addResultsForRollback(results);
        assertEquals("jpaFilter.resultsForRollback.size()", 2, ((Collection) getPrivateField(jpaFilter, "resultsForRollback")).size());
    }
    
    public void testAfterConsequence() throws Throwable {
        EntityManagerFactory factory = (EntityManagerFactory) Mockingbird.getProxyObject(EntityManagerFactory.class);
        Mockingbird.enterRecordingMode();
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", threadLocal);
        ThreadLocal threadLocal2 = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", threadLocal2);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.enterTestMode(JpaFilter.class);
        JpaFilter jpaFilter = new JpaFilter(factory);
        jpaFilter.setKey("testString");
        SuccessAction action = (SuccessAction) Mockingbird.getProxyObject(SuccessAction.class);
        Redirect c = (Redirect) Mockingbird.getProxyObject(Redirect.class);
        Mockingbird.enterRecordingMode();
        MockEntityManager mockEntityManager = (MockEntityManager) Mockingbird.getProxyObject(MockEntityManager.class);
        Mockingbird.setReturnValue(false, threadLocal2, "get", "()java.lang.Object", new Object[] {}, mockEntityManager, 1);
        Mockingbird.setReturnValue(false, threadLocal2, "set", "(java.lang.Object)void", new Object[] {null}, null, 1);
        MapInput inputMap = (MapInput) Mockingbird.getProxyObject(MapInput.class);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, inputMap, 1);
        inputMap.removeValue("testString");
        Mockingbird.setNormalReturnForVoid();
        mockEntityManager.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JpaFilter.class);
        jpaFilter.afterConsequence(action, c, true, true, "[rror");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAfterConsequence1() throws Throwable {
        new JpaFilter(new MockEntityManagerFactory(), true).afterConsequence(new MockAction(), new NullConsequence(), true, false, "testJpaFilterResult");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testDestroy() throws Throwable {
        EntityManagerFactory factory = new MockEntityManagerFactory();
        JpaFilter jpaFilter = new JpaFilter(factory);
        jpaFilter.destroy();
        assertSame("jpaFilter.factory", factory, getPrivateField(jpaFilter, "factory"));
    }
    
    public void testFilter() throws Throwable {
        JpaFilter jpaFilter = new JpaFilter(new MockEntityManagerFactory(), true);
        jpaFilter.setTransactional(true);
        String result = jpaFilter.filter(new InvocationChain("testJpaFilterActionName", new MockAction()));
        assertEquals("result", "success", result);
    }
    
    public void testFilter1() throws Throwable {
        EntityManagerFactory factory = (EntityManagerFactory) Mockingbird.getProxyObject(EntityManagerFactory.class);
        Action action = new SuccessAction();
        JpaFilter jpaFilter = new JpaFilter(factory, false);
        jpaFilter.setKey("u\n");
        String filter = jpaFilter.filter(new InvocationChain("testString", new MockAction()));
        jpaFilter.setTransactional(true, "testString");
        Mockingbird.enterRecordingMode();
        EntityManager entityManager = (EntityManager) Mockingbird.getProxyObject(EntityManager.class);
        Object entityManager2 = callPrivateMethod("javax.persistence.EntityManagerFactory", "createEntityManager", new Class[] {}, factory, new Object[] {});
        Mockingbird.setReturnValue(entityManager2, entityManager);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(ThreadLocal.class), "set", "(java.lang.Object)void", null, 1);
        Object transaction = callPrivateMethod("javax.persistence.EntityManager", "getTransaction", new Class[] {}, entityManager, new Object[] {});
        Mockingbird.setReturnValue(transaction, Mockingbird.getProxyObject(EntityTransaction.class));
        JpaTransaction jpaTransaction = (JpaTransaction) Mockingbird.getProxyObject(JpaTransaction.class);
        Mockingbird.replaceObjectForRecording(JpaTransaction.class, "<init>(javax.persistence.EntityManager,javax.persistence.EntityTransaction)", jpaTransaction);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", null, 1);
        Input inputMap = (Input) Mockingbird.getProxyObject(Input.class);
        inputMap.setValue("testString", jpaTransaction);
        Mockingbird.setNormalReturnForVoid(true);
        inputMap.setValue("u\n", entityManager);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(JpaFilter.class);
        jpaFilter.getValue("u\n");
        InvocationChain chain = new InvocationChain(" / ", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", jpaTransaction, 1);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", null, 1);
        jpaTransaction.commit();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JpaFilter.class);
        String result = jpaFilter.filter(chain);
        assertEquals("result", filter, result);
        assertEquals("jpaFilter.resultsForRollback.size()", 2, ((Collection) getPrivateField(jpaFilter, "resultsForRollback")).size());
    }
    
    public void testFilter2() throws Throwable {
        String result = new JpaFilter(new MockEntityManagerFactory()).filter(new InvocationChain("testJpaFilterActionName", new MockAction()));
        assertEquals("result", "success", result);
    }
    
    public void testFilterWithAggressiveMocks() throws Throwable {
        JpaFilter jpaFilter = (JpaFilter) Mockingbird.getProxyObject(JpaFilter.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        ThreadLocal threadLocal2 = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Transaction transaction = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        setPrivateField(jpaFilter, "input", threadLocal);
        setPrivateField(jpaFilter, "transactional", Boolean.TRUE);
        setPrivateField(jpaFilter, "jpaTransactionThreadLocal", threadLocal2);
        setPrivateField(jpaFilter, "jpaTransactionKey", "");
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), null);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", new Object[] {null}, null, 1);
        action.setInput(jpaFilter);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(invocationChain.invoke(), null);
        Mockingbird.setReturnValue(false, threadLocal2, "get", "()java.lang.Object", new Object[] {}, transaction, 1);
        Mockingbird.setReturnValue(false, threadLocal2, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, jpaFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "removeValue", "(java.lang.String)void", null, 1);
        transaction.rollback();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JpaFilter.class);
        String result = jpaFilter.filter(invocationChain);
        assertNull("result", result);
    }
    
    public void testFilterWithAggressiveMocks1() throws Throwable {
        JpaFilter jpaFilter = (JpaFilter) Mockingbird.getProxyObject(JpaFilter.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        ThreadLocal threadLocal2 = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Transaction transaction = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        setPrivateField(jpaFilter, "input", threadLocal);
        setPrivateField(jpaFilter, "transactional", Boolean.TRUE);
        setPrivateField(jpaFilter, "jpaTransactionThreadLocal", threadLocal2);
        setPrivateField(jpaFilter, "jpaTransactionKey", "");
        setPrivateField(jpaFilter, "resultsForRollback", set);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), null);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", new Object[] {null}, null, 1);
        action.setInput(jpaFilter);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.setReturnValue(false, threadLocal2, "get", "()java.lang.Object", new Object[] {}, transaction, 1);
        Mockingbird.setReturnValue(false, threadLocal2, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, jpaFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "removeValue", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, set, "contains", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        transaction.rollback();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(JpaFilter.class);
        String result = jpaFilter.filter(invocationChain);
        assertEquals("result", "", result);
    }
    
    public void testGetValue() throws Throwable {
        EntityManagerFactory factory = new MockEntityManagerFactory();
        JpaFilter jpaFilter = new JpaFilter(factory);
        jpaFilter.setTransactional(true);
        jpaFilter.filter(new InvocationChain("testJpaFilterActionName", new MockAction()));
        MockEntityManager result = (MockEntityManager) jpaFilter.getValue("jpa_entityManager");
        assertTrue("result.isOpen()", result.isOpen());
        assertSame("jpaFilter.factory", factory, getPrivateField(jpaFilter, "factory"));
    }
    
    public void testGetValue1() throws Throwable {
        EntityManagerFactory factory = (EntityManagerFactory) Mockingbird.getProxyObject(EntityManagerFactory.class);
        JpaFilter jpaFilter = new JpaFilter(factory);
        jpaFilter.setTransactional(false);
        jpaFilter.filter(new InvocationChain("testJpaFilterActionName", new MockAction()));
        Mockingbird.enterRecordingMode();
        EntityManager entityManager = (EntityManager) Mockingbird.getProxyObject(EntityManager.class);
        Object entityManager2 = callPrivateMethod("javax.persistence.EntityManagerFactory", "createEntityManager", new Class[] {}, factory, new Object[] {});
        Mockingbird.setReturnValue(entityManager2, entityManager);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(ThreadLocal.class), "set", "(java.lang.Object)void", null, 1);
        ((Input) Mockingbird.getProxyObject(Input.class)).setValue("testJpaFilterParam1", entityManager);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(JpaFilter.class);
        EntityManager result = (EntityManager) jpaFilter.getValue("jpa_entityManager");
        assertSame("result", entityManager, result);
        assertSame("jpaFilter.factory", factory, getPrivateField(jpaFilter, "factory"));
    }
    
    public void testGetValue2() throws Throwable {
        JpaFilter jpaFilter = new JpaFilter((EntityManagerFactory) Mockingbird.getProxyObject(EntityManagerFactory.class), true);
        jpaFilter.filter(new InvocationChain("testJpaFilterActionName", new MockAction()));
        Mockingbird.enterTestMode(JpaFilter.class);
        Object result = jpaFilter.getValue("testJpaFilterKey");
        assertNull("result", result);
    }
    
    public void testGetValue3() throws Throwable {
        EntityManagerFactory factory = (EntityManagerFactory) Mockingbird.getProxyObject(EntityManagerFactory.class);
        Mockingbird.enterRecordingMode();
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", threadLocal);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.enterTestMode(JpaFilter.class);
        JpaFilter jpaFilter = new JpaFilter(factory);
        Mockingbird.enterRecordingMode();
        JpaFilter jpaFilter2 = (JpaFilter) Mockingbird.getProxyObject(JpaFilter.class);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, jpaFilter2, 1);
        Long long2 = new Long(100L);
        Mockingbird.setReturnValue(jpaFilter2.getValue("testString"), long2);
        Mockingbird.enterTestMode(JpaFilter.class);
        Long result = (Long) jpaFilter.getValue("testString");
        assertEquals("result", long2.longValue(), result.longValue());
    }
    
    public void testGetValue4() throws Throwable {
        EntityManagerFactory factory = (EntityManagerFactory) Mockingbird.getProxyObject(EntityManagerFactory.class);
        Mockingbird.enterRecordingMode();
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", threadLocal);
        ThreadLocal threadLocal2 = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", threadLocal2);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(JpaFilter.class);
        JpaFilter jpaFilter = new JpaFilter(factory, true);
        Mockingbird.enterRecordingMode();
        EntityManager entityManager = (EntityManager) Mockingbird.getProxyObject(EntityManager.class);
        Mockingbird.setReturnValue(false, threadLocal2, "get", "()java.lang.Object", new Object[] {}, entityManager, 1);
        Mockingbird.enterTestMode(JpaFilter.class);
        EntityManager result = (EntityManager) jpaFilter.getValue("jpa_entityManager");
        assertSame("result", entityManager, result);
    }
    
    public void testSetKey() throws Throwable {
        JpaFilter jpaFilter = new JpaFilter(new MockEntityManagerFactory());
        jpaFilter.setKey("testJpaFilterKey");
        assertEquals("jpaFilter.toString()", "JPAFilter: entityManagerKey=testJpaFilterKey transKey=jpa_transaction transactional=false", jpaFilter.toString());
    }
    
    public void testSetTransactional() throws Throwable {
        JpaFilter jpaFilter = new JpaFilter(new MockEntityManagerFactory());
        jpaFilter.setTransactional(true);
        assertEquals("jpaFilter.resultsForRollback.size()", 2, ((Collection) getPrivateField(jpaFilter, "resultsForRollback")).size());
        assertEquals("jpaFilter.toString()", "JPAFilter: entityManagerKey=jpa_entityManager transKey=jpa_transaction transactional=true", jpaFilter.toString());
    }
    
    public void testSetTransactional1() throws Throwable {
        JpaFilter jpaFilter = new JpaFilter(new MockEntityManagerFactory());
        jpaFilter.setTransactional(true, "testJpaFilterTransactionKey");
        assertEquals("jpaFilter.toString()", "JPAFilter: entityManagerKey=jpa_entityManager transKey=testJpaFilterTransactionKey transactional=true", jpaFilter.toString());
        assertEquals("jpaFilter.resultsForRollback.size()", 2, ((Collection) getPrivateField(jpaFilter, "resultsForRollback")).size());
    }
    
    public void testToString() throws Throwable {
        String result = new JpaFilter(new MockEntityManagerFactory()).toString();
        assertEquals("result", "JPAFilter: entityManagerKey=jpa_entityManager transKey=jpa_transaction transactional=false", result);
    }
    
    public void testConstructorThrowsPersistenceException() throws Throwable {
        try {
            new JpaFilter("testJpaFilterPersistenceUnit");
            fail("Expected PersistenceException to be thrown");
        } catch (PersistenceException ex) {
            assertEquals("ex.getMessage()", "No Persistence provider for EntityManager named testJpaFilterPersistenceUnit", ex.getMessage());
            assertThrownBy(Persistence.class, ex);
        }
    }
    
    public void testConstructorThrowsPersistenceException1() throws Throwable {
        try {
            new JpaFilter("testJpaFilterPersistenceUnit", new HashMap(100, 100.0F));
            fail("Expected PersistenceException to be thrown");
        } catch (PersistenceException ex) {
            assertEquals("ex.getMessage()", "No Persistence provider for EntityManager named testJpaFilterPersistenceUnit", ex.getMessage());
            assertThrownBy(Persistence.class, ex);
        }
    }
    
    public void testConstructorThrowsPersistenceException2() throws Throwable {
        try {
            new JpaFilter("testJpaFilterPersistenceUnit", true);
            fail("Expected PersistenceException to be thrown");
        } catch (PersistenceException ex) {
            assertEquals("ex.getMessage()", "No Persistence provider for EntityManager named testJpaFilterPersistenceUnit", ex.getMessage());
            assertThrownBy(Persistence.class, ex);
        }
    }
    
    public void testConstructorThrowsPersistenceException3() throws Throwable {
        try {
            new JpaFilter("testJpaFilterPersistenceUnit", true, new HashMap(100, 100.0F));
            fail("Expected PersistenceException to be thrown");
        } catch (PersistenceException ex) {
            assertEquals("ex.getMessage()", "No Persistence provider for EntityManager named testJpaFilterPersistenceUnit", ex.getMessage());
            assertThrownBy(Persistence.class, ex);
        }
    }
    
    public void testAddResultsForRollbackThrowsNullPointerException() throws Throwable {
        JpaFilter jpaFilter = new JpaFilter(new MockEntityManagerFactory(), true);
        try {
            jpaFilter.addResultsForRollback((String[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("jpaFilter.resultsForRollback.size()", 2, ((Collection) getPrivateField(jpaFilter, "resultsForRollback")).size());
        }
    }
    
    public void testAfterConsequenceThrowsIllegalStateException() throws Throwable {
        EntityManagerFactory factory = (EntityManagerFactory) Mockingbird.getProxyObject(EntityManagerFactory.class);
        Mockingbird.enterRecordingMode();
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", threadLocal);
        ThreadLocal threadLocal2 = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", threadLocal2);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(JpaFilter.class);
        JpaFilter jpaFilter = new JpaFilter(factory);
        LogoutAction action = (LogoutAction) Mockingbird.getProxyObject(LogoutAction.class);
        Redirect c = (Redirect) Mockingbird.getProxyObject(Redirect.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal2, "get", "()java.lang.Object", new Object[] {}, Mockingbird.getProxyObject(EntityManager.class), 1);
        Mockingbird.setReturnValue(false, threadLocal2, "set", "(java.lang.Object)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(JpaFilter.class);
        try {
            jpaFilter.afterConsequence(action, c, true, false, "testJpaFilterResult");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testDestroyThrowsNullPointerException() throws Throwable {
        JpaFilter jpaFilter = new JpaFilter((EntityManagerFactory) null);
        try {
            jpaFilter.destroy();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNull("jpaFilter.factory", getPrivateField(jpaFilter, "factory"));
        }
    }
    
    public void testFilterThrowsActionException() throws Throwable {
        JpaFilter jpaFilter = new JpaFilter((EntityManagerFactory) Mockingbird.getProxyObject(EntityManagerFactory.class));
        InvocationChain chain = new InvocationChain("testJpaFilterActionName", new PojoAction("testString"));
        Mockingbird.enterTestMode(JpaFilter.class);
        try {
            jpaFilter.filter(chain);
            fail("Expected ActionException to be thrown");
        } catch (ActionException ex) {
            assertEquals("ex.getMessage()", "Cannot find method to execute: execute", ex.getMessage());
            assertThrownBy(InvocationChain.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("jpaFilter.resultsForRollback.size()", 0, ((Collection) getPrivateField(jpaFilter, "resultsForRollback")).size());
            assertEquals("chain.getActionName()", "testJpaFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsClassCastException() throws Throwable {
        JpaFilter jpaFilter = new JpaFilter(new MockEntityManagerFactory());
        jpaFilter.setTransactional(true, "testString");
        InvocationChain chain = new InvocationChain("succesi", new MockAction());
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(ThreadLocal.class), "get", "()java.lang.Object", jpaFilter, 1);
        Mockingbird.enterTestMode(JpaFilter.class);
        try {
            jpaFilter.filter(chain);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(JpaFilter.class, ex);
            assertEquals("jpaFilter.resultsForRollback.size()", 2, ((Collection) getPrivateField(jpaFilter, "resultsForRollback")).size());
            assertEquals("chain.getActionName()", "succesi", chain.getActionName());
        }
    }
    
    public void testFilterThrowsFilterExceptionWithAggressiveMocks() throws Throwable {
        JpaFilter jpaFilter = (JpaFilter) Mockingbird.getProxyObject(JpaFilter.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        ThreadLocal threadLocal2 = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Transaction transaction = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Exception ex2 = (Exception) Mockingbird.getProxyObject(Exception.class);
        setPrivateField(jpaFilter, "input", threadLocal);
        setPrivateField(jpaFilter, "transactional", Boolean.TRUE);
        setPrivateField(jpaFilter, "jpaTransactionThreadLocal", threadLocal2);
        setPrivateField(jpaFilter, "jpaTransactionKey", "");
        setPrivateField(jpaFilter, "resultsForRollback", set);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), null);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", new Object[] {null}, null, 1);
        action.setInput(jpaFilter);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.setReturnValue(false, threadLocal2, "get", "()java.lang.Object", new Object[] {}, transaction, 1);
        Mockingbird.setReturnValue(false, threadLocal2, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, jpaFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "removeValue", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, set, "contains", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        transaction.commit();
        Mockingbird.setExceptionForVoid(ex2);
        Mockingbird.setReturnValue(false, ex2, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.replaceObjectForRecording(FilterException.class, "<init>(java.lang.String,java.lang.Throwable)", Mockingbird.getProxyObject(FilterException.class));
        Mockingbird.enterTestMode(JpaFilter.class);
        try {
            jpaFilter.filter(invocationChain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testFilterThrowsFilterExceptionWithAggressiveMocks1() throws Throwable {
        JpaFilter jpaFilter = (JpaFilter) Mockingbird.getProxyObject(JpaFilter.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        ThreadLocal threadLocal2 = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Transaction transaction = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Exception ex2 = (Exception) Mockingbird.getProxyObject(Exception.class);
        setPrivateField(jpaFilter, "input", threadLocal);
        setPrivateField(jpaFilter, "transactional", Boolean.TRUE);
        setPrivateField(jpaFilter, "jpaTransactionThreadLocal", threadLocal2);
        setPrivateField(jpaFilter, "jpaTransactionKey", "");
        setPrivateField(jpaFilter, "resultsForRollback", set);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), null);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", new Object[] {null}, null, 1);
        action.setInput(jpaFilter);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.setReturnValue(false, threadLocal2, "get", "()java.lang.Object", new Object[] {}, transaction, 1);
        Mockingbird.setReturnValue(false, threadLocal2, "set", "(java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, jpaFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "removeValue", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, set, "contains", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        transaction.rollback();
        Mockingbird.setExceptionForVoid(ex2);
        Mockingbird.setReturnValue(false, ex2, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.replaceObjectForRecording(FilterException.class, "<init>(java.lang.String,java.lang.Throwable)", Mockingbird.getProxyObject(FilterException.class));
        Mockingbird.enterTestMode(JpaFilter.class);
        try {
            jpaFilter.filter(invocationChain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testFilterThrowsIllegalStateException() throws Throwable {
        EntityManagerFactory factory = (EntityManagerFactory) Mockingbird.getProxyObject(EntityManagerFactory.class);
        Mockingbird.enterRecordingMode();
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", threadLocal);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        ThreadLocal threadLocal2 = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", threadLocal2);
        Mockingbird.enterTestMode(JpaFilter.class);
        JpaFilter jpaFilter = new JpaFilter(factory);
        jpaFilter.setTransactional(true, "testJpaFilterTransactionKey");
        InvocationChain chain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.enterRecordingMode();
        Action mockAction = (Action) Mockingbird.getProxyObject(Action.class);
        Mockingbird.setReturnValue(chain.getAction(), mockAction);
        Mockingbird.setReturnValue(mockAction.getInput(), jpaFilter);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", new Object[] {jpaFilter}, null, 1);
        mockAction.setInput(jpaFilter);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(chain.invoke(), "success");
        Mockingbird.setReturnValue(false, threadLocal2, "get", "()java.lang.Object", new Object[] {}, Mockingbird.getProxyObject(JpaTransaction.class), 1);
        Mockingbird.setReturnValue(false, threadLocal2, "set", "(java.lang.Object)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, jpaFilter, 1);
        Mockingbird.enterTestMode(JpaFilter.class);
        try {
            jpaFilter.filter(chain);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
            assertEquals("jpaFilter.resultsForRollback.size()", 2, ((Collection) getPrivateField(jpaFilter, "resultsForRollback")).size());
            assertNull("chain.getAction()", chain.getAction());
        }
    }
    
    public void testFilterThrowsNullPointerException1() throws Throwable {
        InvocationChain chain = new InvocationChain("testJpaFilterActionName", null);
        JpaFilter jpaFilter = new JpaFilter(new MockEntityManagerFactory());
        try {
            jpaFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("jpaFilter.resultsForRollback.size()", 0, ((Collection) getPrivateField(jpaFilter, "resultsForRollback")).size());
            assertEquals("chain.getActionName()", "testJpaFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException2() throws Throwable {
        JpaFilter jpaFilter = new JpaFilter(new MockEntityManagerFactory());
        try {
            jpaFilter.filter(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("jpaFilter.resultsForRollback.size()", 0, ((Collection) getPrivateField(jpaFilter, "resultsForRollback")).size());
        }
    }
    
    public void testGetValueThrowsIllegalStateException() throws Throwable {
        EntityManagerFactory factory = new MockEntityManagerFactory();
        JpaFilter jpaFilter = new JpaFilter(factory);
        try {
            jpaFilter.getValue("jpa_entityManager");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
            assertSame("jpaFilter.factory", factory, getPrivateField(jpaFilter, "factory"));
        }
    }
    
    public void testGetValueThrowsNullPointerException() throws Throwable {
        EntityManagerFactory factory = (EntityManagerFactory) Mockingbird.getProxyObject(EntityManagerFactory.class);
        Mockingbird.enterRecordingMode();
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", threadLocal);
        ThreadLocal threadLocal2 = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", threadLocal2);
        ThreadLocal threadLocal3 = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", threadLocal3);
        Mockingbird.enterTestMode(JpaFilter.class);
        JpaFilter jpaFilter = new JpaFilter(factory, false);
        jpaFilter.setKey("testString");
        jpaFilter.setTransactional(true, null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal2, "get", "()java.lang.Object", new Object[] {}, null, 1);
        EntityManager entityManager = (EntityManager) Mockingbird.getProxyObject(EntityManager.class);
        Object entityManager2 = callPrivateMethod("javax.persistence.EntityManagerFactory", "createEntityManager", new Class[] {}, factory, new Object[] {});
        Mockingbird.setReturnValue(entityManager2, entityManager);
        Mockingbird.setReturnValue(false, threadLocal2, "set", "(java.lang.Object)void", new Object[] {entityManager}, null, 1);
        Object transaction = callPrivateMethod("javax.persistence.EntityManager", "getTransaction", new Class[] {}, entityManager, new Object[] {});
        Mockingbird.setReturnValue(transaction, Mockingbird.getProxyObject(EntityTransaction.class));
        JpaTransaction jpaTransaction = (JpaTransaction) Mockingbird.getProxyObject(JpaTransaction.class);
        Mockingbird.replaceObjectForRecording(JpaTransaction.class, "<init>(javax.persistence.EntityManager,javax.persistence.EntityTransaction)", jpaTransaction);
        Mockingbird.setReturnValue(false, threadLocal3, "set", "(java.lang.Object)void", new Object[] {jpaTransaction}, null, 1);
        RequestInput inputRequest = (RequestInput) Mockingbird.getProxyObject(RequestInput.class);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, inputRequest, 1);
        inputRequest.setValue(null, jpaTransaction);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(JpaFilter.class);
        try {
            jpaFilter.getValue("testString");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("jpaFilter.factory", factory, getPrivateField(jpaFilter, "factory"));
        }
    }
    
    public void testGetValueThrowsNullPointerException1() throws Throwable {
        JpaFilter jpaFilter = new JpaFilter((EntityManagerFactory) null);
        jpaFilter.setKey("testString");
        try {
            jpaFilter.getValue("testString");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNull("jpaFilter.factory", getPrivateField(jpaFilter, "factory"));
        }
    }
    
    public void testGetValueThrowsNullPointerException2() throws Throwable {
        EntityManagerFactory factory = new MockEntityManagerFactory();
        JpaFilter jpaFilter = new JpaFilter(factory);
        try {
            jpaFilter.getValue(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertSame("jpaFilter.factory", factory, getPrivateField(jpaFilter, "factory"));
        }
    }
}

