/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:22:22 PM
 * Time to generate: 00:18.005 seconds
 *
 */

package org.mentawai.filter;

import com.agitar.lib.junit.AgitarTestCase;
import java.util.Collection;
import org.mentawai.action.SuccessAction;
import org.mentawai.core.ActionException;
import org.mentawai.core.InvocationChain;
import org.mentawai.util.MockAction;

public class MethodParamFilterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MethodParamFilter.class;
    }
    
    public void testConstructor() throws Throwable {
        String[] strings = new String[0];
        MethodParamFilter methodParamFilter = new MethodParamFilter(strings);
        assertEquals("methodParamFilter.list.size()", 0, ((Collection) getPrivateField(methodParamFilter, "list")).size());
    }
    
    public void testConstructor1() throws Throwable {
        String[] strings = new String[2];
        MethodParamFilter methodParamFilter = new MethodParamFilter(strings);
        assertEquals("methodParamFilter.list.size()", 2, ((Collection) getPrivateField(methodParamFilter, "list")).size());
    }
    
    public void testDestroy() throws Throwable {
        String[] strings = new String[0];
        new MethodParamFilter(strings).destroy();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testFilter() throws Throwable {
        String[] strings = new String[1];
        String result = new MethodParamFilter(strings).filter(new InvocationChain("testMethodParamFilterActionName", new MockAction()));
        assertEquals("result", "success", result);
    }
    
    public void testToString() throws Throwable {
        String[] strings = new String[1];
        MethodParamFilter methodParamFilter = new MethodParamFilter(strings);
        String result = methodParamFilter.toString();
        assertEquals("result", "MethodParamFilter: null", result);
        assertEquals("methodParamFilter.list.size()", 1, ((Collection) getPrivateField(methodParamFilter, "list")).size());
    }
    
    public void testToString1() throws Throwable {
        String[] strings = new String[2];
        MethodParamFilter methodParamFilter = new MethodParamFilter(strings);
        String result = methodParamFilter.toString();
        assertEquals("result", "MethodParamFilter: null, null", result);
        assertEquals("methodParamFilter.list.size()", 2, ((Collection) getPrivateField(methodParamFilter, "list")).size());
    }
    
    public void testToString2() throws Throwable {
        String[] strings = new String[0];
        String result = new MethodParamFilter(strings).toString();
        assertEquals("result", "MethodParamFilter: ", result);
    }
    
    public void testFilterThrowsActionException() throws Throwable {
        String[] strings = new String[0];
        InvocationChain chain = new InvocationChain("testMethodParamFilterActionName", new MockAction());
        chain.setInnerAction("testMethodParamFilterInnerAction");
        try {
            new MethodParamFilter(strings).filter(chain);
            fail("Expected ActionException to be thrown");
        } catch (ActionException ex) {
            assertEquals("ex.getMessage()", "The inner action does not exist: testMethodParamFilterInnerAction", ex.getMessage());
            assertThrownBy(InvocationChain.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("chain.getActionName()", "testMethodParamFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException() throws Throwable {
        InvocationChain chain = new InvocationChain("testMethodParamFilterActionName", new SuccessAction());
        String[] strings = new String[0];
        try {
            new MethodParamFilter(strings).filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MethodParamFilter.class, ex);
            assertEquals("chain.getActionName()", "testMethodParamFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException1() throws Throwable {
        String[] strings = new String[0];
        InvocationChain chain = new InvocationChain("testMethodParamFilterActionName", null);
        try {
            new MethodParamFilter(strings).filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MethodParamFilter.class, ex);
            assertEquals("chain.getActionName()", "testMethodParamFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException2() throws Throwable {
        String[] strings = new String[0];
        try {
            new MethodParamFilter(strings).filter(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MethodParamFilter.class, ex);
        }
    }
}

