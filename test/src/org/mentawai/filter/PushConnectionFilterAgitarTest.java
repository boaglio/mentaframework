/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:21:55 PM
 * Time to generate: 00:20.878 seconds
 *
 */

package org.mentawai.filter;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.sql.SQLException;
import javax.sql.DataSource;
import org.mentawai.action.LogoutAction;
import org.mentawai.core.Action;
import org.mentawai.core.FilterException;
import org.mentawai.core.Input;
import org.mentawai.core.InvocationChain;
import org.mentawai.db.ConnectionHandler;
import org.mentawai.db.DataSourceConnectionHandler;
import org.mentawai.db.JNDIConnectionHandler;
import org.mentawai.util.MockAction;

public class PushConnectionFilterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return PushConnectionFilter.class;
    }
    
    public void testConstructor() throws Throwable {
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        Mockingbird.enterTestMode(PushConnectionFilter.class);
        PushConnectionFilter pushConnectionFilter = new PushConnectionFilter(connHandler, "testPushConnectionFilterConn_key");
        assertEquals("pushConnectionFilter.conn_key", "testPushConnectionFilterConn_key", getPrivateField(pushConnectionFilter, "conn_key"));
        assertSame("pushConnectionFilter.connHandler", connHandler, getPrivateField(pushConnectionFilter, "connHandler"));
    }
    
    public void testConstructor1() throws Throwable {
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        Mockingbird.enterTestMode(PushConnectionFilter.class);
        PushConnectionFilter pushConnectionFilter = new PushConnectionFilter(connHandler);
        assertEquals("pushConnectionFilter.conn_key", "conn", getPrivateField(pushConnectionFilter, "conn_key"));
        assertSame("pushConnectionFilter.connHandler", connHandler, getPrivateField(pushConnectionFilter, "connHandler"));
    }
    
    public void testDestroy() throws Throwable {
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        PushConnectionFilter pushConnectionFilter = new PushConnectionFilter(connHandler, "testPushConnectionFilterConn_key");
        Mockingbird.enterTestMode(PushConnectionFilter.class);
        pushConnectionFilter.destroy();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testFilter() throws Throwable {
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        PushConnectionFilter pushConnectionFilter = new PushConnectionFilter(connHandler, "testPushConnectionFilterConn_key");
        InvocationChain chain = new InvocationChain("testPushConnectionFilterActionName", new MockAction());
        Mockingbird.enterTestMode(PushConnectionFilter.class);
        String result = pushConnectionFilter.filter(chain);
        assertEquals("result", "success", result);
        assertSame("pushConnectionFilter.connHandler", connHandler, getPrivateField(pushConnectionFilter, "connHandler"));
    }
    
    public void testFilterThrowsFilterException() throws Throwable {
        JNDIConnectionHandler connHandler = (JNDIConnectionHandler) Mockingbird.getProxyObject(JNDIConnectionHandler.class);
        PushConnectionFilter pushConnectionFilter = new PushConnectionFilter(connHandler, ".4wE_Tg\"/3/p");
        InvocationChain chain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.enterRecordingMode();
        Action mockAction = (Action) Mockingbird.getProxyObject(Action.class);
        Mockingbird.setReturnValue(chain.getAction(), mockAction);
        Input inputMap = (Input) Mockingbird.getProxyObject(Input.class);
        Mockingbird.setReturnValue(mockAction.getInput(), inputMap);
        Mockingbird.setException(connHandler.getConnection(), (Throwable) Mockingbird.getProxyObject(SQLException.class));
        Mockingbird.replaceObjectForRecording(FilterException.class, "<init>(java.lang.Throwable)", Mockingbird.getProxyObject(FilterException.class));
        inputMap.removeValue(".4wE_Tg\"/3/p");
        Mockingbird.setNormalReturnForVoid();
        connHandler.release(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(PushConnectionFilter.class);
        try {
            pushConnectionFilter.filter(chain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testFilterThrowsNullPointerException() throws Throwable {
        PushConnectionFilter pushConnectionFilter = new PushConnectionFilter(null, "testPushConnectionFilterConn_key");
        InvocationChain chain = new InvocationChain("testPushConnectionFilterActionName", new MockAction());
        try {
            pushConnectionFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushConnectionFilter.class, ex);
            assertNull("pushConnectionFilter.connHandler", getPrivateField(pushConnectionFilter, "connHandler"));
            assertEquals("chain.getActionName()", "testPushConnectionFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException1() throws Throwable {
        PushConnectionFilter pushConnectionFilter = new PushConnectionFilter(null, "testPushConnectionFilterConn_key");
        InvocationChain chain = new InvocationChain("testPushConnectionFilterActionName", new LogoutAction());
        try {
            pushConnectionFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushConnectionFilter.class, ex);
            assertNull("pushConnectionFilter.connHandler", getPrivateField(pushConnectionFilter, "connHandler"));
            assertEquals("chain.getActionName()", "testPushConnectionFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException2() throws Throwable {
        InvocationChain chain = new InvocationChain("testPushConnectionFilterActionName", new MockAction());
        ConnectionHandler connHandler = new DataSourceConnectionHandler(null);
        PushConnectionFilter pushConnectionFilter = new PushConnectionFilter(connHandler, "testPushConnectionFilterConn_key");
        try {
            pushConnectionFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DataSourceConnectionHandler.class, ex);
            assertSame("pushConnectionFilter.connHandler", connHandler, getPrivateField(pushConnectionFilter, "connHandler"));
            assertEquals("chain.getActionName()", "testPushConnectionFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException3() throws Throwable {
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        PushConnectionFilter pushConnectionFilter = new PushConnectionFilter(connHandler, "testPushConnectionFilterConn_key");
        InvocationChain chain = new InvocationChain("testPushConnectionFilterActionName", new LogoutAction());
        Mockingbird.enterTestMode(PushConnectionFilter.class);
        try {
            pushConnectionFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushConnectionFilter.class, ex);
            assertSame("pushConnectionFilter.connHandler", connHandler, getPrivateField(pushConnectionFilter, "connHandler"));
            assertEquals("chain.getActionName()", "testPushConnectionFilterActionName", chain.getActionName());
        }
    }
}

