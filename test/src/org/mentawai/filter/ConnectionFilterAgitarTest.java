/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:21:03 PM
 * Time to generate: 01:31.742 seconds
 *
 */

package org.mentawai.filter;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.sql.Connection;
import java.sql.SQLException;
import javax.sql.DataSource;
import org.agitar.mock.naming.MockContext;
import org.mentawai.action.SuccessAction;
import org.mentawai.ajaxtag.AjaxtagConsequence;
import org.mentawai.core.Action;
import org.mentawai.core.ActionException;
import org.mentawai.core.Consequence;
import org.mentawai.core.InputWrapper;
import org.mentawai.core.InvocationChain;
import org.mentawai.core.NullConsequence;
import org.mentawai.core.PojoAction;
import org.mentawai.db.ConnectionHandler;
import org.mentawai.db.DataSourceConnectionHandler;
import org.mentawai.db.JNDIConnectionHandler;
import org.mentawai.util.MockAction;

public class ConnectionFilterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ConnectionFilter.class;
    }
    
    public void testConstructor() throws Throwable {
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        Mockingbird.enterTestMode(ConnectionFilter.class);
        ConnectionFilter connectionFilter = new ConnectionFilter(connHandler, "testConnectionFilterConnKey");
        assertNull("connectionFilter.input.get()", ((ThreadLocal) getPrivateField(connectionFilter, "input")).get());
        assertEquals("connectionFilter.connKey", "testConnectionFilterConnKey", getPrivateField(connectionFilter, "connKey"));
        assertNull("connectionFilter.conn.get()", ((ThreadLocal) getPrivateField(connectionFilter, "conn")).get());
        assertSame("connectionFilter.connHandler", connHandler, getPrivateField(connectionFilter, "connHandler"));
    }
    
    public void testConstructor1() throws Throwable {
        ConnectionHandler connHandler = new DataSourceConnectionHandler(null);
        ConnectionFilter connectionFilter = new ConnectionFilter(connHandler);
        assertNull("connectionFilter.input.get()", ((ThreadLocal) getPrivateField(connectionFilter, "input")).get());
        assertEquals("connectionFilter.connKey", "conn", getPrivateField(connectionFilter, "connKey"));
        assertNull("connectionFilter.conn.get()", ((ThreadLocal) getPrivateField(connectionFilter, "conn")).get());
        assertSame("connectionFilter.connHandler", connHandler, getPrivateField(connectionFilter, "connHandler"));
    }
    
    public void testConstructor2() throws Throwable {
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        Mockingbird.enterTestMode(ConnectionFilter.class);
        ConnectionFilter connectionFilter = new ConnectionFilter("testConnectionFilterConnKey", connHandler);
        assertEquals("connectionFilter.connKey", "testConnectionFilterConnKey", getPrivateField(connectionFilter, "connKey"));
        assertNull("connectionFilter.input.get()", ((ThreadLocal) getPrivateField(connectionFilter, "input")).get());
        assertNull("connectionFilter.conn.get()", ((ThreadLocal) getPrivateField(connectionFilter, "conn")).get());
        assertSame("connectionFilter.connHandler", connHandler, getPrivateField(connectionFilter, "connHandler"));
    }
    
    public void testAfterConsequence() throws Throwable {
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        ConnectionFilter connectionFilter = new ConnectionFilter("testString", connHandler);
        connectionFilter.filter(new InvocationChain("testConnectionFilterActionName", new MockAction()));
        connectionFilter.getValue("testString");
        Consequence c = new NullConsequence();
        Mockingbird.enterTestMode(ConnectionFilter.class);
        connectionFilter.afterConsequence(null, c, true, false, "testConnectionFilterResult");
        assertSame("connectionFilter.connHandler", connHandler, getPrivateField(connectionFilter, "connHandler"));
    }
    
    public void testFilter() throws Throwable {
        MockContext.bindAll("java:comp/env/testString", Mockingbird.getProxyObject(DataSource.class));
        ConnectionFilter connectionFilter = new ConnectionFilter(JNDIConnectionHandler.getInstance("testString"));
        InvocationChain chain = new InvocationChain("testConnectionFilterActionName", new MockAction());
        Mockingbird.enterTestMode(ConnectionFilter.class);
        String result = connectionFilter.filter(chain);
        assertEquals("result", "success", result);
    }
    
    public void testGetValue() throws Throwable {
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        ConnectionFilter connectionFilter = new ConnectionFilter("testString", connHandler);
        connectionFilter.filter(new InvocationChain("testConnectionFilterActionName", new MockAction()));
        Mockingbird.enterTestMode(ConnectionFilter.class);
        Connection result = (Connection) connectionFilter.getValue("testString");
        assertNotNull("result", result);
        assertSame("connectionFilter.connHandler", connHandler, getPrivateField(connectionFilter, "connHandler"));
    }
    
    public void testGetValue1() throws Throwable {
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        ConnectionFilter connectionFilter = new ConnectionFilter("testString", connHandler);
        connectionFilter.filter(new InvocationChain("testConnectionFilterActionName", new MockAction()));
        Connection value = (Connection) connectionFilter.getValue("testString");
        Mockingbird.enterTestMode(ConnectionFilter.class);
        Connection result = (Connection) connectionFilter.getValue("testString");
        assertSame("result", value, result);
    }
    
    public void testGetValue2() throws Throwable {
        ConnectionFilter connectionFilter = new ConnectionFilter(JNDIConnectionHandler.getInstance("testString"));
        connectionFilter.filter(new InvocationChain("testConnectionFilterActionName", new MockAction()));
        Object result = connectionFilter.getValue("testConnectionFilterKey");
        assertNull("result", result);
    }
    
    public void testSetKey() throws Throwable {
        MockContext.bindAll("java:comp/env/testString", Mockingbird.getProxyObject(DataSource.class));
        ConnectionFilter connectionFilter = new ConnectionFilter(JNDIConnectionHandler.getInstance("testString"));
        Mockingbird.enterTestMode(ConnectionFilter.class);
        connectionFilter.setKey("testConnectionFilterKey");
        assertEquals("connectionFilter.connKey", "testConnectionFilterKey", getPrivateField(connectionFilter, "connKey"));
    }
    
    public void testAfterConsequenceThrowsClassCastException() throws Throwable {
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        ConnectionFilter connectionFilter = new ConnectionFilter(connHandler, "testString");
        Action action = new MockAction();
        Consequence c = new AjaxtagConsequence();
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(ThreadLocal.class), "get", "()java.lang.Object", Mockingbird.getProxyObject(ConnectionFilter.class), 1);
        Mockingbird.enterTestMode(ConnectionFilter.class);
        try {
            connectionFilter.afterConsequence(action, c, true, false, "testString");
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(ConnectionFilter.class, ex);
            assertSame("connectionFilter.connHandler", connHandler, getPrivateField(connectionFilter, "connHandler"));
        }
    }
    
    public void testAfterConsequenceThrowsIllegalStateException() throws Throwable {
        DataSourceConnectionHandler connHandler = (DataSourceConnectionHandler) Mockingbird.getProxyObject(DataSourceConnectionHandler.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", threadLocal);
        Mockingbird.enterTestMode(ConnectionFilter.class);
        ConnectionFilter connectionFilter = new ConnectionFilter(connHandler, "testConnectionFilterConnKey");
        MockAction action = (MockAction) Mockingbird.getProxyObject(MockAction.class);
        AjaxtagConsequence c = (AjaxtagConsequence) Mockingbird.getProxyObject(AjaxtagConsequence.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, Mockingbird.getProxyObject(Connection.class), 1);
        Mockingbird.setReturnValue(false, threadLocal, "set", "(java.lang.Object)void", new Object[] {null}, null, 1);
        Mockingbird.enterTestMode(ConnectionFilter.class);
        try {
            connectionFilter.afterConsequence(action, c, true, false, "testConnectionFilterResult");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
            assertSame("connectionFilter.connHandler", connHandler, getPrivateField(connectionFilter, "connHandler"));
        }
    }
    
    public void testDestroyThrowsNullPointerException() throws Throwable {
        ConnectionFilter connectionFilter = new ConnectionFilter((ConnectionHandler) null, "testConnectionFilterConnKey");
        try {
            connectionFilter.destroy();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNull("connectionFilter.connHandler", getPrivateField(connectionFilter, "connHandler"));
        }
    }
    
    public void testFilterThrowsActionException() throws Throwable {
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        ConnectionFilter connectionFilter = new ConnectionFilter("testConnectionFilterConnKey", connHandler);
        InvocationChain chain = new InvocationChain("testConnectionFilterActionName", new SuccessAction());
        chain.setInnerAction("testConnectionFilterInnerAction");
        Mockingbird.enterTestMode(ConnectionFilter.class);
        try {
            connectionFilter.filter(chain);
            fail("Expected ActionException to be thrown");
        } catch (ActionException ex) {
            assertEquals("ex.getMessage()", "The inner action does not exist: testConnectionFilterInnerAction", ex.getMessage());
            assertThrownBy(InvocationChain.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("chain.getActionName()", "testConnectionFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsIllegalStateException() throws Throwable {
        MockContext.bindAll("java:comp/env/testString", Mockingbird.getProxyObject(DataSource.class));
        ConnectionFilter connectionFilter = new ConnectionFilter(JNDIConnectionHandler.getInstance("testString"));
        InvocationChain chain = new InvocationChain("testConnectionFilterActionName", new PojoAction(new NullConsequence()));
        Mockingbird.enterTestMode(ConnectionFilter.class);
        try {
            connectionFilter.filter(chain);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
            assertEquals("chain.getActionName()", "testConnectionFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException() throws Throwable {
        InvocationChain chain = new InvocationChain("testConnectionFilterActionName", null);
        try {
            new ConnectionFilter(JNDIConnectionHandler.getInstance("testString")).filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("chain.getActionName()", "testConnectionFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException1() throws Throwable {
        ConnectionFilter connectionFilter = new ConnectionFilter(JNDIConnectionHandler.getInstance("testString"), "testConnectionFilterConnKey");
        try {
            connectionFilter.filter(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testGetValueThrowsIllegalStateException() throws Throwable {
        ConnectionHandler connHandler = new DataSourceConnectionHandler((DataSource) Mockingbird.getProxyObject(DataSource.class));
        ConnectionFilter connectionFilter = new ConnectionFilter(connHandler, "testString");
        Mockingbird.enterTestMode(ConnectionFilter.class);
        try {
            connectionFilter.getValue("testString");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
            assertSame("connectionFilter.connHandler", connHandler, getPrivateField(connectionFilter, "connHandler"));
        }
    }
    
    public void testGetValueThrowsNullPointerException() throws Throwable {
        ConnectionHandler connHandler = new DataSourceConnectionHandler(null);
        ConnectionFilter connectionFilter = new ConnectionFilter("testString", connHandler);
        try {
            connectionFilter.getValue("testString");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DataSourceConnectionHandler.class, ex);
            assertSame("connectionFilter.connHandler", connHandler, getPrivateField(connectionFilter, "connHandler"));
        }
    }
    
    public void testGetValueThrowsNullPointerException1() throws Throwable {
        ConnectionHandler connHandler = JNDIConnectionHandler.getInstance("testString");
        ConnectionFilter connectionFilter = new ConnectionFilter(connHandler, "testConnectionFilterConnKey");
        try {
            connectionFilter.getValue(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertSame("connectionFilter.connHandler", connHandler, getPrivateField(connectionFilter, "connHandler"));
        }
    }
    
    public void testGetValueThrowsRuntimeException() throws Throwable {
        ConnectionHandler connHandler = JNDIConnectionHandler.getInstance("testString");
        ConnectionFilter connectionFilter = new ConnectionFilter(connHandler, "testString");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(connHandler.getConnection(), (Throwable) Mockingbird.getProxyObject(SQLException.class));
        Mockingbird.replaceObjectForRecording(RuntimeException.class, "<init>(java.lang.String,java.lang.Throwable)", Mockingbird.getProxyObject(RuntimeException.class));
        Mockingbird.enterTestMode(ConnectionFilter.class);
        try {
            connectionFilter.getValue("testString");
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertSame("connectionFilter.connHandler", connHandler, getPrivateField(connectionFilter, "connHandler"));
        }
    }
    
    public void testGetValueThrowsRuntimeException1() throws Throwable {
        ConnectionHandler connHandler = new DataSourceConnectionHandler(null);
        ConnectionFilter connectionFilter = new ConnectionFilter("testConnectionFilterConnKey", connHandler);
        try {
            connectionFilter.getValue("testConnectionFilterKey");
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
            assertSame("connectionFilter.connHandler", connHandler, getPrivateField(connectionFilter, "connHandler"));
        }
    }
}

