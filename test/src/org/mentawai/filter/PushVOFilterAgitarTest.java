/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:25:02 PM
 * Time to generate: 02:07.876 seconds
 *
 */

package org.mentawai.filter;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.text.DateFormat;
import java.util.Collections;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import org.mentawai.action.LogoutAction;
import org.mentawai.core.Action;
import org.mentawai.core.ActionException;
import org.mentawai.core.Input;
import org.mentawai.core.InvocationChain;
import org.mentawai.core.PojoAction;
import org.mentawai.util.FindMethod;
import org.mentawai.util.MockAction;

public class PushVOFilterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return PushVOFilter.class;
    }
    
    public void testConstructor() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class);
        assertTrue("pushVOFilter.tryField", ((Boolean) getPrivateField(pushVOFilter, "tryField")).booleanValue());
        assertTrue("pushVOFilter.convert", ((Boolean) getPrivateField(pushVOFilter, "convert")).booleanValue());
        assertEquals("pushVOFilter.klass", Integer.class, getPrivateField(pushVOFilter, "klass"));
        assertEquals("pushVOFilter.cacheConverted.size()", 0, ((Map) getPrivateField(pushVOFilter, "cacheConverted")).size());
        assertEquals("pushVOFilter.cache.size()", 0, ((Map) getPrivateField(pushVOFilter, "cache")).size());
        assertNull("pushVOFilter.key", getPrivateField(pushVOFilter, "key"));
        assertNull("pushVOFilter.prefix", getPrivateField(pushVOFilter, "prefix"));
    }
    
    public void testConstructor1() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(String.class, "testPushVOFilterKey", true);
        assertTrue("pushVOFilter.tryField", ((Boolean) getPrivateField(pushVOFilter, "tryField")).booleanValue());
        assertTrue("pushVOFilter.convert", ((Boolean) getPrivateField(pushVOFilter, "convert")).booleanValue());
        assertEquals("pushVOFilter.klass", String.class, getPrivateField(pushVOFilter, "klass"));
        assertEquals("pushVOFilter.cacheConverted.size()", 0, ((Map) getPrivateField(pushVOFilter, "cacheConverted")).size());
        assertEquals("pushVOFilter.cache.size()", 0, ((Map) getPrivateField(pushVOFilter, "cache")).size());
        assertEquals("pushVOFilter.key", "testPushVOFilterKey", getPrivateField(pushVOFilter, "key"));
        assertNull("pushVOFilter.prefix", getPrivateField(pushVOFilter, "prefix"));
    }
    
    public void testConstructor2() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, true);
        assertTrue("pushVOFilter.tryField", ((Boolean) getPrivateField(pushVOFilter, "tryField")).booleanValue());
        assertTrue("pushVOFilter.convert", ((Boolean) getPrivateField(pushVOFilter, "convert")).booleanValue());
        assertEquals("pushVOFilter.klass", Integer.class, getPrivateField(pushVOFilter, "klass"));
        assertEquals("pushVOFilter.cache.size()", 0, ((Map) getPrivateField(pushVOFilter, "cache")).size());
        assertEquals("pushVOFilter.cacheConverted.size()", 0, ((Map) getPrivateField(pushVOFilter, "cacheConverted")).size());
        assertNull("pushVOFilter.key", getPrivateField(pushVOFilter, "key"));
        assertNull("pushVOFilter.prefix", getPrivateField(pushVOFilter, "prefix"));
    }
    
    public void testConstructor3() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey");
        assertTrue("pushVOFilter.tryField", ((Boolean) getPrivateField(pushVOFilter, "tryField")).booleanValue());
        assertTrue("pushVOFilter.convert", ((Boolean) getPrivateField(pushVOFilter, "convert")).booleanValue());
        assertEquals("pushVOFilter.klass", Integer.class, getPrivateField(pushVOFilter, "klass"));
        assertEquals("pushVOFilter.cache.size()", 0, ((Map) getPrivateField(pushVOFilter, "cache")).size());
        assertEquals("pushVOFilter.cacheConverted.size()", 0, ((Map) getPrivateField(pushVOFilter, "cacheConverted")).size());
        assertEquals("pushVOFilter.key", "testPushVOFilterKey", getPrivateField(pushVOFilter, "key"));
        assertNull("pushVOFilter.prefix", getPrivateField(pushVOFilter, "prefix"));
    }
    
    public void testConstructor4() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey", true, "testPushVOFilterPrefix");
        assertTrue("pushVOFilter.tryField", ((Boolean) getPrivateField(pushVOFilter, "tryField")).booleanValue());
        assertTrue("pushVOFilter.convert", ((Boolean) getPrivateField(pushVOFilter, "convert")).booleanValue());
        assertEquals("pushVOFilter.klass", Integer.class, getPrivateField(pushVOFilter, "klass"));
        assertEquals("pushVOFilter.cache.size()", 0, ((Map) getPrivateField(pushVOFilter, "cache")).size());
        assertEquals("pushVOFilter.cacheConverted.size()", 0, ((Map) getPrivateField(pushVOFilter, "cacheConverted")).size());
        assertEquals("pushVOFilter.key", "testPushVOFilterKey", getPrivateField(pushVOFilter, "key"));
        assertEquals("pushVOFilter.prefix", "testPushVOFilterPrefix", getPrivateField(pushVOFilter, "prefix"));
    }
    
    public void testConstructor5() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey", true, false, "testPushVOFilterPrefix");
        assertTrue("pushVOFilter.tryField", ((Boolean) getPrivateField(pushVOFilter, "tryField")).booleanValue());
        assertFalse("pushVOFilter.convert", ((Boolean) getPrivateField(pushVOFilter, "convert")).booleanValue());
        assertEquals("pushVOFilter.klass", Integer.class, getPrivateField(pushVOFilter, "klass"));
        assertEquals("pushVOFilter.cache.size()", 0, ((Map) getPrivateField(pushVOFilter, "cache")).size());
        assertEquals("pushVOFilter.cacheConverted.size()", 0, ((Map) getPrivateField(pushVOFilter, "cacheConverted")).size());
        assertEquals("pushVOFilter.key", "testPushVOFilterKey", getPrivateField(pushVOFilter, "key"));
        assertEquals("pushVOFilter.prefix", "testPushVOFilterPrefix", getPrivateField(pushVOFilter, "prefix"));
    }
    
    public void testCreateObject() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(String.class, true);
        String result = (String) callPrivateMethod("org.mentawai.filter.PushVOFilter", "createObject", new Class[] {}, pushVOFilter, new Object[] {});
        assertEquals("result", "", result);
        assertEquals("pushVOFilter.klass", String.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testCreateObject1() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, true);
        Object result = callPrivateMethod("org.mentawai.filter.PushVOFilter", "createObject", new Class[] {}, pushVOFilter, new Object[] {});
        assertNull("result", result);
        assertEquals("pushVOFilter.klass", Integer.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testDestroy() throws Throwable {
        new PushVOFilter(Integer.class, true).destroy();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testFilter() throws Throwable {
        InvocationChain chain = new InvocationChain("testPushVOFilterActionName", new MockAction());
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, "testString", true, "");
        String filter = pushVOFilter.filter(chain);
        String result = pushVOFilter.filter(chain);
        assertEquals("result", filter, result);
        assertEquals("pushVOFilter.klass", Object.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testFilter1() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(String.class, "testString");
        InvocationChain chain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.enterRecordingMode();
        Action mockAction = (Action) Mockingbird.getProxyObject(Action.class);
        Mockingbird.setReturnValue(chain.getAction(), mockAction);
        Input inputMap = (Input) Mockingbird.getProxyObject(Input.class);
        Mockingbird.setReturnValue(mockAction.getInput(), inputMap);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(inputMap.keys(), iterator);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "testString", 1);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Mockingbird.setReturnValue(inputMap.getValue("testString"), obj);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.setReturnValue(mockAction.getLocale(), locale);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(obj), null);
        Mockingbird.setReturnValue(PushInjectionFilter.getField("", "testPushVOFilterParam2"), null);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "n", 1);
        Mockingbird.setReturnValue(inputMap.getValue("n"), "");
        Mockingbird.setReturnValue(mockAction.getLocale(), locale);
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(""), null);
        Mockingbird.setReturnValue(PushInjectionFilter.getField("", "testPushVOFilterParam21"), null);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        inputMap.setValue("testString", "");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(chain.invoke(), "success");
        Mockingbird.enterTestMode(PushVOFilter.class);
        String result = pushVOFilter.filter(chain);
        assertEquals("result", "success", result);
        assertEquals("pushVOFilter.klass", String.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testFilter2() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class);
        InvocationChain chain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.enterRecordingMode();
        Action successAction = (Action) Mockingbird.getProxyObject(Action.class);
        Mockingbird.setReturnValue(chain.getAction(), successAction);
        Input inputMap = (Input) Mockingbird.getProxyObject(Input.class);
        Mockingbird.setReturnValue(successAction.getInput(), inputMap);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(inputMap.keys(), iterator);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "java.lang.Object", 1);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Mockingbird.setReturnValue(inputMap.getValue("java.lang.Object"), obj);
        Mockingbird.setReturnValue(successAction.getLocale(), Mockingbird.getProxyObject(Locale.class));
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(obj), null);
        Mockingbird.setReturnValue(true, PushInjectionFilter.getField(null, "testPushVOFilterParam2"), null);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        inputMap.setValue("testPushVOFilterParam1", null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(chain.invoke(), "success");
        Mockingbird.enterTestMode(PushVOFilter.class);
        String result = pushVOFilter.filter(chain);
        assertEquals("result", "success", result);
        assertEquals("pushVOFilter.klass", Object.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testFilter3() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, "testPushVOFilterKey", true, "testPushVOFilterPrefix");
        InvocationChain chain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.enterRecordingMode();
        Action mockAction = (Action) Mockingbird.getProxyObject(Action.class);
        Mockingbird.setReturnValue(chain.getAction(), mockAction);
        Input inputMap = (Input) Mockingbird.getProxyObject(Input.class);
        Mockingbird.setReturnValue(mockAction.getInput(), inputMap);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(inputMap.keys(), iterator);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, "testString", 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        inputMap.setValue("testPushVOFilterParam1", null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(chain.invoke(), "success");
        Mockingbird.enterTestMode(PushVOFilter.class);
        String result = pushVOFilter.filter(chain);
        assertEquals("result", "success", result);
        assertEquals("pushVOFilter.klass", Object.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testFilter4() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(null, "testPushVOFilterKey", true, "testPushVOFilterPrefix");
        String result = pushVOFilter.filter(new InvocationChain("testPushVOFilterActionName", new MockAction()));
        assertEquals("result", "success", result);
        assertNull("pushVOFilter.klass", getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testFilter5() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, true);
        String result = pushVOFilter.filter(new InvocationChain("testPushVOFilterActionName", new MockAction()));
        assertEquals("result", "success", result);
        assertEquals("pushVOFilter.klass", Object.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testFilter6() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(String.class, "testPushVOFilterKey");
        String result = pushVOFilter.filter(new InvocationChain("testPushVOFilterActionName", new MockAction()));
        assertEquals("result", "success", result);
        assertEquals("pushVOFilter.klass", String.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testGetConvertedValue() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, true);
        Object result = pushVOFilter.getConvertedValue("boolean", "2", Locale.GERMANY);
        assertNull("result", result);
    }
    
    public void testGetConvertedValue1() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey", true);
        Boolean result = (Boolean) pushVOFilter.getConvertedValue("boolean", "0", Locale.SIMPLIFIED_CHINESE);
        assertFalse("result", result.booleanValue());
    }
    
    public void testGetConvertedValue2() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey");
        Object result = pushVOFilter.getConvertedValue("boolean", "testPushVOFilterValue", Locale.KOREAN);
        assertNull("result", result);
    }
    
    public void testGetConvertedValue3() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, "testPushVOFilterKey", true, "testPushVOFilterPrefix");
        Boolean result = (Boolean) pushVOFilter.getConvertedValue("java.lang.Boolean", "on", Locale.FRANCE);
        assertTrue("result", result.booleanValue());
    }
    
    public void testGetConvertedValue4() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey");
        Object result = pushVOFilter.getConvertedValue("java.lang.Boolean", "testPushVOFilterValue", Locale.CHINESE);
        assertNull("result", result);
    }
    
    public void testGetConvertedValue5() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey");
        Object result = pushVOFilter.getConvertedValue("int", "testPushVOFilterValue", Locale.PRC);
        assertNull("result", result);
    }
    
    public void testGetConvertedValue6() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, true);
        Boolean result = (Boolean) pushVOFilter.getConvertedValue("java.lang.Boolean", "True", Locale.JAPAN);
        assertTrue("result", result.booleanValue());
    }
    
    public void testGetConvertedValue7() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey", true);
        Integer result = (Integer) pushVOFilter.getConvertedValue("java.lang.Integer", "0", Locale.SIMPLIFIED_CHINESE);
        assertEquals("result", 0, result.intValue());
    }
    
    public void testGetConvertedValue8() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey");
        Object result = pushVOFilter.getConvertedValue("double", "testPushVOFilterValue", Locale.ENGLISH);
        assertNull("result", result);
    }
    
    public void testGetConvertedValue9() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class);
        Double result = (Double) pushVOFilter.getConvertedValue("double", "-85630", Locale.FRENCH);
        assertEquals("result", -85630.0, result.doubleValue(), 1.0E-6);
    }
    
    public void testGetConvertedValue10() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey");
        Object result = pushVOFilter.getConvertedValue("java.lang.Double", "testPushVOFilterValue", Locale.FRENCH);
        assertNull("result", result);
    }
    
    public void testGetConvertedValue11() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey", true);
        Double result = (Double) pushVOFilter.getConvertedValue("java.lang.Double", "0", Locale.SIMPLIFIED_CHINESE);
        assertEquals("result", 0.0, result.doubleValue(), 1.0E-6);
    }
    
    public void testGetConvertedValue12() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey", true);
        Boolean result = (Boolean) pushVOFilter.getConvertedValue("java.lang.Boolean", "0", Locale.SIMPLIFIED_CHINESE);
        assertFalse("result", result.booleanValue());
    }
    
    public void testGetConvertedValue13() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, true);
        Boolean result = (Boolean) pushVOFilter.getConvertedValue("boolean", "True", Locale.JAPAN);
        assertTrue("result", result.booleanValue());
    }
    
    public void testGetConvertedValue14() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey", true, false, "testPushVOFilterPrefix");
        Boolean result = (Boolean) pushVOFilter.getConvertedValue("java.lang.Boolean", "FaLSe", Locale.US);
        assertFalse("result", result.booleanValue());
    }
    
    public void testGetConvertedValue15() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey", true, false, "testPushVOFilterPrefix");
        Boolean result = (Boolean) pushVOFilter.getConvertedValue("boolean", "FaLSe", Locale.US);
        assertFalse("result", result.booleanValue());
    }
    
    public void testGetConvertedValue16() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey");
        Object result = pushVOFilter.getConvertedValue("testPushVOFilterClassName", "testPushVOFilterValue", Locale.GERMANY);
        assertNull("result", result);
    }
    
    public void testGetConvertedValue17() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, "testPushVOFilterKey", true, "testPushVOFilterPrefix");
        Boolean result = (Boolean) pushVOFilter.getConvertedValue("boolean", "1", Locale.ITALY);
        assertTrue("result", result.booleanValue());
    }
    
    public void testGetConvertedValue18() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, "testPushVOFilterKey", true, "testPushVOFilterPrefix");
        Boolean result = (Boolean) pushVOFilter.getConvertedValue("java.lang.Boolean", "1", Locale.ITALY);
        assertTrue("result", result.booleanValue());
    }
    
    public void testGetConvertedValue19() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter((Class) null, "testPushVOFilterKey");
        Object result = pushVOFilter.getConvertedValue("java.lang.Boolean", "2", Locale.UK);
        assertNull("result", result);
    }
    
    public void testGetConvertedValue20() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey");
        Object result = pushVOFilter.getConvertedValue("java.util.Date", "testPushVOFilterValue", Locale.TAIWAN);
        assertNull("result", result);
    }
    
    public void testGetConvertedValue21() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey", true);
        Integer result = (Integer) pushVOFilter.getConvertedValue("int", "-85630", Locale.CHINA);
        assertEquals("result", -85630, result.intValue());
    }
    
    public void testGetConvertedValue22() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, true);
        Object result = pushVOFilter.getConvertedValue("java.lang.Integer", "testPushVOFilterValue", Locale.ENGLISH);
        assertNull("result", result);
    }
    
    public void testGetConvertedValue23() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, true);
        Boolean result = (Boolean) pushVOFilter.getConvertedValue("boolean", "on", null);
        assertTrue("result", result.booleanValue());
    }
    
    public void testGetConvertedValueWithAggressiveMocks() throws Throwable {
        PushVOFilter pushVOFilter = (PushVOFilter) Mockingbird.getProxyObject(PushVOFilter.class, true);
        DateFormat dateFormat = (DateFormat) Mockingbird.getProxyObject(DateFormat.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, DateFormat.class, "getDateInstance", "(int,java.util.Locale)java.text.DateFormat", new Object[] {new Integer(3), null}, dateFormat, 1);
        Mockingbird.setReturnValue(false, dateFormat, "setLenient", "(boolean)void", new Object[] {new Integer(0)}, null, 1);
        Mockingbird.setReturnValue(false, dateFormat, "parse", "(java.lang.String)java.util.Date", new Object[] {""}, null, 1);
        Mockingbird.enterTestMode(PushVOFilter.class);
        Object result = pushVOFilter.getConvertedValue("java.util.Date", "", null);
        assertNull("result", result);
    }
    
    public void testGetConvertedValueWithAggressiveMocks1() throws Throwable {
        PushVOFilter pushVOFilter = (PushVOFilter) Mockingbird.getProxyObject(PushVOFilter.class, true);
        NumberFormatException numberFormatException = (NumberFormatException) Mockingbird.getProxyObject(NumberFormatException.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, Integer.class, "parseInt", "(java.lang.String)int", new Object[] {""}, numberFormatException, 1);
        Mockingbird.enterTestMode(PushVOFilter.class);
        Object result = pushVOFilter.getConvertedValue("boolean", "", null);
        assertNull("result", result);
    }
    
    public void testSetValue() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey", true);
        boolean result = pushVOFilter.setValue(null, "2C", new Object(), null);
        assertFalse("result", result);
    }
    
    public void testSetValue1() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class);
        boolean result = pushVOFilter.setValue(null, "testPushVOFilterName", new Integer(1), Locale.CHINA);
        assertFalse("result", result);
        assertEquals("pushVOFilter.klass", Integer.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testSetValue2() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class);
        boolean result = pushVOFilter.setValue("testString", " ", new Object(), Locale.CHINESE);
        assertFalse("result", result);
    }
    
    public void testSetValue3() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, false);
        boolean result = pushVOFilter.setValue(new Integer(15), "2C", new Integer(33), Locale.FRENCH);
        assertFalse("result", result);
        assertEquals("pushVOFilter.klass", Integer.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testSetValue4() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, true);
        boolean result = pushVOFilter.setValue(new Character('1'), "2C", null, Locale.ITALY);
        assertFalse("result", result);
    }
    
    public void testSetValue5() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, false);
        boolean result = pushVOFilter.setValue("", "2C", new Object(), Locale.ITALIAN);
        assertFalse("result", result);
    }
    
    public void testSetValue6() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, false);
        boolean result = pushVOFilter.setValue("", " ", "testString", Locale.JAPANESE);
        assertFalse("result", result);
    }
    
    public void testSetValue7() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class);
        boolean result = pushVOFilter.setValue("", "testPushVOFilterName", "Qalse", Locale.ITALY);
        assertFalse("result", result);
    }
    
    public void testSetValue8() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class);
        boolean result = pushVOFilter.setValue(null, " ", null, Locale.CHINA);
        assertFalse("result", result);
    }
    
    public void testSetValue9() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class);
        boolean result = pushVOFilter.setValue(new Integer(12), "testPushVOFilterName", new Object(), Locale.GERMAN);
        assertFalse("result", result);
    }
    
    public void testSetValue10() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, false);
        callPrivateMethod("org.mentawai.filter.PushVOFilter", "createObject", new Class[] {}, pushVOFilter, new Object[] {});
        boolean tryField = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {Mockingbird.getProxyObject(PushVOFilter.class), "2C", "", Mockingbird.getProxyObject(Locale.class), Boolean.FALSE})).booleanValue();
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterTestMode(PushVOFilter.class);
        boolean result = pushVOFilter.setValue("", "2C", "", loc);
        assertFalse("result", result);
    }
    
    public void testSetValue11() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, false);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        boolean tryField = pushVOFilter.setValue("", "testString", "testString", loc);
        pushVOFilter.setValue("", "testString", "testString", loc);
        Mockingbird.enterTestMode(PushVOFilter.class);
        boolean result = pushVOFilter.setValue("", "testString", null, loc);
        assertFalse("result", result);
    }
    
    public void testSetValue12() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(void.class, true);
        Locale bean = (Locale) Mockingbird.getProxyObject(Locale.class);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(PushInjectionFilter.getField(bean, "1"), null);
        Mockingbird.enterTestMode(PushVOFilter.class);
        boolean value = pushVOFilter.setValue(bean, "1", "", loc);
        callPrivateMethod("org.mentawai.filter.PushVOFilter", "createObject", new Class[] {}, pushVOFilter, new Object[] {});
        callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {"", "bf", "", null, Boolean.TRUE});
        Locale loc2 = (Locale) Mockingbird.getProxyObject(Locale.class);
        boolean result = pushVOFilter.setValue(new Integer(-32), "1", "M/d/yy h:mmda", loc2);
        assertFalse("result", result);
    }
    
    public void testSetValue13() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, false);
        boolean result = pushVOFilter.setValue(new Object(), " ", new Object(), null);
        assertFalse("result", result);
    }
    
    public void testSetValue14() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey", false, false, "testPushVOFilterPrefix");
        boolean result = pushVOFilter.setValue("", " ", "", null);
        assertFalse("result", result);
    }
    
    public void testSetValue15() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class);
        boolean result = pushVOFilter.setValue("ls", "", new Integer(-100), Locale.ENGLISH);
        assertFalse("result", result);
    }
    
    public void testSetValue16() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, "testPushVOFilterKey", true, false, "testPushVOFilterPrefix");
        boolean result = pushVOFilter.setValue(new Integer(31), "", "testString", Locale.US);
        assertFalse("result", result);
    }
    
    public void testSetValue17() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, true);
        boolean result = pushVOFilter.setValue("", "", "testString", Locale.ITALIAN);
        assertFalse("result", result);
    }
    
    public void testSetValue18() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey", false, "testPushVOFilterPrefix");
        boolean result = pushVOFilter.setValue(null, " ", null, Locale.CANADA);
        assertFalse("result", result);
    }
    
    public void testSetValue19() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(String.class, "testPushVOFilterKey", false, true, "testPushVOFilterPrefix");
        boolean result = pushVOFilter.setValue("", " ", new Integer(7), Locale.ITALIAN);
        assertFalse("result", result);
        assertEquals("pushVOFilter.klass", String.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testSetValue20() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, false);
        boolean result = pushVOFilter.setValue("", "2C", null, new Locale("testPushVOFilterParam1"));
        assertFalse("result", result);
    }
    
    public void testSetValue21() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class);
        boolean result = pushVOFilter.setValue(null, " ", new Integer(1), Locale.CHINA);
        assertFalse("result", result);
        assertEquals("pushVOFilter.klass", Integer.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testSetValue22() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class);
        boolean result = pushVOFilter.setValue("", " ", null, Locale.KOREAN);
        assertFalse("result", result);
    }
    
    public void testSetValue23() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterTestMode(PushVOFilter.class);
        Integer bean = new Integer(0);
        boolean result = pushVOFilter.setValue(bean, " ", bean, loc);
        assertFalse("result", result);
        assertEquals("pushVOFilter.klass", Integer.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testSetValue24() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, true);
        boolean result = pushVOFilter.setValue(null, "testPushVOFilterName", null, Locale.FRANCE);
        assertFalse("result", result);
    }
    
    public void testSetValue25() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey", true);
        boolean result = pushVOFilter.setValue("testString", "", null, Locale.SIMPLIFIED_CHINESE);
        assertFalse("result", result);
    }
    
    public void testSetValue26() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, true);
        InvocationChain value = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterTestMode(PushVOFilter.class);
        boolean result = pushVOFilter.setValue(null, " ", value, loc);
        assertFalse("result", result);
    }
    
    public void testSetValue27() throws Throwable {
        Mockingbird.enterRecordingMode();
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", map, 1);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", Mockingbird.getProxyObject(Map.class), 1);
        Mockingbird.enterTestMode(PushVOFilter.class);
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey");
        Object value = Mockingbird.getProxyObject(Object.class);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", new Object[] {"1"}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Object[] {"1"}, null, 1);
        Mockingbird.enterTestMode(PushVOFilter.class);
        boolean result = pushVOFilter.setValue("", "1", value, loc);
        assertFalse("result", result);
    }
    
    public void testSetValue28() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, "testPushVOFilterKey", true, false, "testPushVOFilterPrefix");
        boolean result = pushVOFilter.setValue(new Integer(31), "testPushVOFilterName", "testString", Locale.US);
        assertFalse("result", result);
    }
    
    public void testSetValue29() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey", true, false, "testPushVOFilterPrefix");
        boolean result = pushVOFilter.setValue("", " ", "", null);
        assertFalse("result", result);
    }
    
    public void testSetValue30() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, true);
        boolean result = pushVOFilter.setValue("carsetName", " ", "testString", Locale.TRADITIONAL_CHINESE);
        assertFalse("result", result);
    }
    
    public void testSetValue31() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(PushInjectionFilter.getField(obj, "h"), null);
        Mockingbird.enterTestMode(PushVOFilter.class);
        boolean valueByReflection = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {obj, "h", "", locale, Boolean.TRUE})).booleanValue();
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        pushVOFilter.setValue("testString", "2C", " KeXy=", loc);
        Object value = Mockingbird.getProxyObject(Object.class);
        Locale loc2 = (Locale) Mockingbird.getProxyObject(Locale.class);
        boolean result = pushVOFilter.setValue(new Integer(-32), "2C", value, loc2);
        assertSame("loc2", loc, loc2);
        assertFalse("result", result);
    }
    
    public void testSetValue32() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey", false, false, "testPushVOFilterPrefix");
        boolean result = pushVOFilter.setValue("", "testPushVOFilterName", "", Locale.JAPANESE);
        assertFalse("result", result);
    }
    
    public void testSetValue33() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey", true, false, "testPushVOFilterPrefix");
        boolean result = pushVOFilter.setValue(null, "2C", "", Locale.CHINA);
        assertFalse("result", result);
    }
    
    public void testSetValue34() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey", true, false, "testPushVOFilterPrefix");
        boolean result = pushVOFilter.setValue(null, " ", "", Locale.CHINA);
        assertFalse("result", result);
    }
    
    public void testSetValue35() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey");
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterTestMode(PushVOFilter.class);
        Integer bean = new Integer(78);
        boolean result = pushVOFilter.setValue(bean, "2C", bean, loc);
        assertFalse("result", result);
        assertEquals("pushVOFilter.klass", Integer.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testSetValue36() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, false);
        boolean result = pushVOFilter.setValue("", "2C", "testString", Locale.CHINA);
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(String.class, true);
        Object bean = Mockingbird.getProxyObject(Object.class);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        Field field = PushInjectionFilter.getField(bean, "'?U?[@X&-mu9RFr%uOzh!0$Ur,/\r9^>RSvTim`d*}");
        Mockingbird.setReturnValue(field, null);
        Mockingbird.enterTestMode(PushVOFilter.class);
        boolean value = pushVOFilter.setValue(bean, "'?U?[@X&-mu9RFr%uOzh!0$Ur,/\r9^>RSvTim`d*}", "testString", loc);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {obj, "'?U?[@X&-mu9RFr%uOzh!0$Ur,/\r9^>RSvTim`d*}", new Character('1'), locale, Boolean.valueOf(value)})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection1() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, true);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {Boolean.FALSE, " ", new Object(), Locale.ITALIAN, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection2() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, true);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {"", "testPushVOFilterName", Boolean.TRUE, Locale.ENGLISH, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
        assertEquals("pushVOFilter.klass", Object.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testSetValueByReflection3() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey");
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {"Yt5?t%|$fpL?0Ls('`;u\fyB1^\f4&A6", " ", "Yt5?t%|$fpL?0Ls('`;u\fyB1^\f4&A6", Locale.GERMAN, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection4() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {null, "2C", "", Locale.CHINESE, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection5() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(String.class, "testPushVOFilterKey", false, "testPushVOFilterPrefix");
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {"", "testPushVOFilterName", new Integer(0), Locale.SIMPLIFIED_CHINESE, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
        assertEquals("pushVOFilter.klass", String.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testSetValueByReflection6() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, true);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {new Object(), " ", new Integer(0), Locale.KOREA, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
        assertEquals("pushVOFilter.klass", Integer.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testSetValueByReflection7() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(String.class, false);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {"t", "2C", null, Locale.TRADITIONAL_CHINESE, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection8() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(String.class, "testPushVOFilterKey", false, true, "testPushVOFilterPrefix");
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {new Object(), "testPushVOFilterName", new Integer(-1), Locale.GERMAN, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
        assertEquals("pushVOFilter.klass", String.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testSetValueByReflection9() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(String.class, "testPushVOFilterKey", false, "testPushVOFilterPrefix");
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {"", " ", new Integer(0), Locale.SIMPLIFIED_CHINESE, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
        assertEquals("pushVOFilter.klass", String.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testSetValueByReflection10() throws Throwable {
        Mockingbird.enterRecordingMode();
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", map, 1);
        Mockingbird.setReturnValue(true, Collections.class, "synchronizedMap", "(java.util.Map)java.util.Map", Mockingbird.getProxyObject(Map.class), 1);
        Mockingbird.enterTestMode(PushVOFilter.class);
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        PushVOFilter pushVOFilter2 = (PushVOFilter) Mockingbird.getProxyObject(PushVOFilter.class);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", new Object[] {"1"}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Object[] {"1"}, null, 1);
        Mockingbird.enterTestMode(PushVOFilter.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {obj, "1", pushVOFilter2, locale, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection11() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {"", " ", new Integer(1), Locale.GERMANY, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
        assertEquals("pushVOFilter.klass", Object.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testSetValueByReflection12() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {null, "2C", null, Locale.ENGLISH, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection13() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, "testPushVOFilterKey", false, "testPushVOFilterPrefix");
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {"testString", " ", new Object(), Locale.GERMANY, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection14() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(String.class, "testPushVOFilterKey", false, true, "testPushVOFilterPrefix");
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {new Object(), " ", new Integer(-1), Locale.GERMAN, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
        assertEquals("pushVOFilter.klass", String.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testSetValueByReflection15() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, false);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {new Integer(-100), " ", "", Locale.FRENCH, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection16() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey");
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {null, " ", "", Locale.GERMANY, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection17() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, true);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {"", "", "", Locale.TRADITIONAL_CHINESE, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection18() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class);
        callPrivateMethod("org.mentawai.filter.PushVOFilter", "createObject", new Class[] {}, pushVOFilter, new Object[] {});
        boolean valueByReflection = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {new Integer(0), "testString", "", Mockingbird.getProxyObject(Locale.class), Boolean.TRUE})).booleanValue();
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        pushVOFilter.setValue("", "'jTR%9N?:V2!z_>.t6\\\nM\t,I+mZc[NAxVYV]Eyg1#", "'jTR%9N?:V2!z_>.t6\\\nM\t,I+mZc[NAxVYV]Eyg1#", loc);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterTestMode(PushVOFilter.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {obj, "testString", obj, locale, Boolean.TRUE})).booleanValue();
        assertSame("locale", loc, locale);
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection19() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(String.class, true);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterTestMode(PushVOFilter.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {obj, "2C", new Character('1'), locale, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
        assertEquals("pushVOFilter.klass", String.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testSetValueByReflection20() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(String.class, true);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {null, " ", "testString", Locale.ITALY, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection21() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey", true);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {"", "2C", "1J", Locale.ITALIAN, Boolean.TRUE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection22() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, "testPushVOFilterKey", false, "testPushVOFilterPrefix");
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {"", "testPushVOFilterName", "", Locale.ENGLISH, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection23() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, true);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {"testString", "2C", "testString", Locale.FRENCH, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueByReflection24() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class);
        Integer integer = new Integer(32);
        boolean valueByReflection = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {integer, "5", integer, null, Boolean.TRUE})).booleanValue();
        callPrivateMethod("org.mentawai.filter.PushVOFilter", "createObject", new Class[] {}, pushVOFilter, new Object[] {});
        InvocationChain chain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.enterRecordingMode();
        Action mockAction = (Action) Mockingbird.getProxyObject(Action.class);
        Mockingbird.setReturnValue(chain.getAction(), mockAction);
        Mockingbird.setReturnValue(mockAction.getInput(), Mockingbird.getProxyObject(Input.class));
        Mockingbird.setReturnValue(chain.invoke(), "success");
        Mockingbird.enterTestMode(PushVOFilter.class);
        pushVOFilter.filter(chain);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        pushVOFilter.setValue("testString", "", "testString", loc);
        pushVOFilter.toString();
        PushVOFilter pushVOFilter2 = (PushVOFilter) Mockingbird.getProxyObject(PushVOFilter.class);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {pushVOFilter2, "5", "", locale, Boolean.TRUE})).booleanValue();
        assertSame("locale", loc, locale);
        assertFalse("result", result);
    }
    
    public void testSetValueByReflectionWithAggressiveMocks() throws Throwable {
        PushVOFilter pushVOFilter = (PushVOFilter) Mockingbird.getProxyObject(PushVOFilter.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Method method = (Method) Mockingbird.getProxyObject(Method.class);
        setPrivateField(pushVOFilter, "cache", map);
        setPrivateField(pushVOFilter, "klass", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, "AA", "substring", "(int,int)java.lang.String", new Object[] {new Integer(0), new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toUpperCase", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(true, FindMethod.class, "getMethod", "(java.lang.Class,java.lang.String,java.lang.Class[])java.lang.reflect.Method", method, 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(PushVOFilter.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.PushVOFilter", "setValueByReflection", new Class[] {Object.class, String.class, Object.class, Locale.class, boolean.class}, pushVOFilter, new Object[] {null, "AA", obj, null, Boolean.FALSE})).booleanValue();
        assertFalse("result", result);
        assertNull("pushVOFilter.klass", getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testSetValueWithAggressiveMocks() throws Throwable {
        PushVOFilter pushVOFilter = (PushVOFilter) Mockingbird.getProxyObject(PushVOFilter.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Class class2 = (Class) Mockingbird.getProxyObject(Class.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        NoSuchMethodException noSuchMethodException = (NoSuchMethodException) Mockingbird.getProxyObject(NoSuchMethodException.class);
        Class class3 = (Class) Mockingbird.getProxyObject(Class.class);
        Field field = (Field) Mockingbird.getProxyObject(Field.class);
        setPrivateField(pushVOFilter, "cache", map);
        setPrivateField(pushVOFilter, "klass", class2);
        setPrivateField(pushVOFilter, "convert", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toUpperCase", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setException(true, FindMethod.class, "getMethod", "(java.lang.Class,java.lang.String,java.lang.Class[])java.lang.reflect.Method", noSuchMethodException, 1);
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(obj), class3);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", field, 1);
        Mockingbird.enterTestMode(PushVOFilter.class);
        boolean result = pushVOFilter.setValue(null, "AA", obj, null);
        assertFalse("result", result);
        assertEquals("pushVOFilter.klass", String.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testSetValueWithAggressiveMocks1() throws Throwable {
        PushVOFilter pushVOFilter = (PushVOFilter) Mockingbird.getProxyObject(PushVOFilter.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Class class2 = (Class) Mockingbird.getProxyObject(Class.class);
        NoSuchMethodException noSuchMethodException = (NoSuchMethodException) Mockingbird.getProxyObject(NoSuchMethodException.class);
        Class class3 = (Class) Mockingbird.getProxyObject(Class.class);
        Field field = (Field) Mockingbird.getProxyObject(Field.class);
        Method method = (Method) Mockingbird.getProxyObject(Method.class);
        Field field2 = (Field) Mockingbird.getProxyObject(Field.class);
        Class class4 = (Class) Mockingbird.getProxyObject(Class.class);
        Field field3 = (Field) Mockingbird.getProxyObject(Field.class);
        Method method2 = (Method) Mockingbird.getProxyObject(Method.class);
        setPrivateField(pushVOFilter, "cache", map);
        setPrivateField(pushVOFilter, "convert", Boolean.TRUE);
        setPrivateField(pushVOFilter, "cacheConverted", map2);
        setPrivateField(pushVOFilter, "klass", class2);
        setPrivateField(pushVOFilter, "tryField", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toUpperCase", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setException(true, FindMethod.class, "getMethod", "(java.lang.Class,java.lang.String,java.lang.Class[])java.lang.reflect.Method", noSuchMethodException, 1);
        Mockingbird.setReturnValue(true, PushInjectionFilter.class, "getPrimitiveFrom", "(java.lang.Object)java.lang.Class", class3, 1);
        Mockingbird.setReturnValue(true, PushInjectionFilter.class, "getField", "(java.lang.Object,java.lang.String)java.lang.reflect.Field", field, 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", method, 1);
        Mockingbird.setReturnValue(true, PushInjectionFilter.class, "getField", "(java.lang.Object,java.lang.String)java.lang.reflect.Field", field2, 1);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toUpperCase", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map2, "containsKey", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setException(true, FindMethod.class, "getMethod", "(java.lang.Class,java.lang.String,java.lang.Class[])java.lang.reflect.Method", noSuchMethodException, 1);
        Mockingbird.setReturnValue(true, PushInjectionFilter.class, "getPrimitiveFrom", "(java.lang.Object)java.lang.Class", class4, 1);
        Mockingbird.setReturnValue(true, PushInjectionFilter.class, "getField", "(java.lang.Object,java.lang.String)java.lang.reflect.Field", field3, 1);
        Mockingbird.setReturnValue(false, map2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", method2, 1);
        Mockingbird.enterTestMode(PushVOFilter.class);
        boolean result = pushVOFilter.setValue(null, "AA", "", null);
        assertFalse("result", result);
        assertEquals("pushVOFilter.klass", String.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testToString() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, "testPushVOFilterKey");
        String result = pushVOFilter.toString();
        assertEquals("result", "PushVOFilter: Class=java.lang.Object Key=testPushVOFilterKey TryField=true", result);
        assertEquals("pushVOFilter.klass", Object.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testToString1() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, true);
        String result = pushVOFilter.toString();
        assertEquals("result", "PushVOFilter: Class=java.lang.Object Key=java.lang.Object TryField=true", result);
        assertEquals("pushVOFilter.klass", Object.class, getPrivateField(pushVOFilter, "klass"));
    }
    
    public void testFilterThrowsActionException() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, true);
        InvocationChain chain = new InvocationChain("testPushVOFilterActionName", new PojoAction("\u0000\u0000"));
        try {
            pushVOFilter.filter(chain);
            fail("Expected ActionException to be thrown");
        } catch (ActionException ex) {
            assertEquals("ex.getMessage()", "Cannot find method to execute: execute", ex.getMessage());
            assertThrownBy(InvocationChain.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("pushVOFilter.klass", Integer.class, getPrivateField(pushVOFilter, "klass"));
            assertEquals("chain.getActionName()", "testPushVOFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException() throws Throwable {
        InvocationChain chain = new InvocationChain("testPushVOFilterActionName", new LogoutAction());
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, true);
        try {
            pushVOFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushVOFilter.class, ex);
            assertEquals("pushVOFilter.klass", Object.class, getPrivateField(pushVOFilter, "klass"));
            assertEquals("chain.getActionName()", "testPushVOFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException1() throws Throwable {
        InvocationChain chain = new InvocationChain("testPushVOFilterActionName", null);
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, true);
        try {
            pushVOFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushVOFilter.class, ex);
            assertEquals("pushVOFilter.klass", Integer.class, getPrivateField(pushVOFilter, "klass"));
            assertEquals("chain.getActionName()", "testPushVOFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException2() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(String.class);
        try {
            pushVOFilter.filter(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushVOFilter.class, ex);
            assertEquals("pushVOFilter.klass", String.class, getPrivateField(pushVOFilter, "klass"));
        }
    }
    
    public void testGetConvertedValueThrowsNullPointerException() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, "testPushVOFilterKey");
        try {
            pushVOFilter.getConvertedValue("java.lang.Boolean", null, Locale.ITALY);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushVOFilter.class, ex);
        }
    }
    
    public void testGetConvertedValueThrowsNullPointerException1() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, true);
        try {
            pushVOFilter.getConvertedValue("java.util.Date", "testPushVOFilterValue", null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testGetConvertedValueThrowsNullPointerException2() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Object.class, "testPushVOFilterKey");
        try {
            pushVOFilter.getConvertedValue("boolean", null, Locale.ITALY);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushVOFilter.class, ex);
        }
    }
    
    public void testGetConvertedValueThrowsNullPointerException3() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, "testPushVOFilterKey");
        try {
            pushVOFilter.getConvertedValue(null, "testPushVOFilterValue", Locale.GERMANY);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushVOFilter.class, ex);
        }
    }
    
    public void testSetValueThrowsNullPointerException() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, false);
        try {
            pushVOFilter.setValue(null, " ", "testString", Locale.JAPANESE);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushInjectionFilter.class, ex);
            assertEquals("pushVOFilter.klass", Integer.class, getPrivateField(pushVOFilter, "klass"));
        }
    }
    
    public void testSetValueThrowsNullPointerException1() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(String.class, false);
        try {
            pushVOFilter.setValue(null, "testPushVOFilterName", "", Locale.KOREAN);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushInjectionFilter.class, ex);
            assertEquals("pushVOFilter.klass", String.class, getPrivateField(pushVOFilter, "klass"));
        }
    }
    
    public void testSetValueThrowsNullPointerException2() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, false);
        pushVOFilter.setValue("", "1", "testString", (Locale) Mockingbird.getProxyObject(Locale.class));
        InvocationChain chain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.enterRecordingMode();
        Action successAction = (Action) Mockingbird.getProxyObject(Action.class);
        Mockingbird.setReturnValue(chain.getAction(), successAction);
        Mockingbird.setReturnValue(successAction.getInput(), Mockingbird.getProxyObject(Input.class));
        Mockingbird.setReturnValue(chain.invoke(), "success");
        Mockingbird.enterTestMode(PushVOFilter.class);
        pushVOFilter.filter(chain);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        try {
            pushVOFilter.setValue(null, "1", "testString", loc);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("pushVOFilter.klass", Integer.class, getPrivateField(pushVOFilter, "klass"));
        }
    }
    
    public void testSetValueThrowsNullPointerException3() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class);
        Locale loc = (Locale) Mockingbird.getProxyObject(Locale.class);
        pushVOFilter.setValue("", "Qalse", "Qalse", loc);
        Object value = Mockingbird.getProxyObject(Object.class);
        Locale loc2 = (Locale) Mockingbird.getProxyObject(Locale.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(PushInjectionFilter.getPrimitiveFrom(value), null);
        Mockingbird.enterTestMode(PushVOFilter.class);
        pushVOFilter.setValue("testString", "\u0017", value, loc2);
        try {
            pushVOFilter.setValue(null, "Qalse", "Qalse", loc);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("pushVOFilter.klass", Integer.class, getPrivateField(pushVOFilter, "klass"));
        }
    }
    
    public void testSetValueThrowsNullPointerException4() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, true);
        try {
            pushVOFilter.setValue(null, " ", "", Locale.JAPAN);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushInjectionFilter.class, ex);
            assertEquals("pushVOFilter.klass", Integer.class, getPrivateField(pushVOFilter, "klass"));
        }
    }
    
    public void testSetValueThrowsNullPointerException5() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(Integer.class, true);
        try {
            pushVOFilter.setValue(null, "2C", "", Locale.JAPAN);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushInjectionFilter.class, ex);
            assertEquals("pushVOFilter.klass", Integer.class, getPrivateField(pushVOFilter, "klass"));
        }
    }
    
    public void testSetValueThrowsNullPointerException6() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter(double.class, true);
        try {
            pushVOFilter.setValue("", null, "tru", null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushInjectionFilter.class, ex);
            assertEquals("pushVOFilter.klass", double.class, getPrivateField(pushVOFilter, "klass"));
        }
    }
    
    public void testToStringThrowsNullPointerException() throws Throwable {
        PushVOFilter pushVOFilter = new PushVOFilter((Class) null, "testPushVOFilterKey");
        try {
            pushVOFilter.toString();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushVOFilter.class, ex);
            assertNull("pushVOFilter.klass", getPrivateField(pushVOFilter, "klass"));
        }
    }
}

