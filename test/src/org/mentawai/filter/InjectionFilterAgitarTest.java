/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:20:58 PM
 * Time to generate: 00:20.777 seconds
 *
 */

package org.mentawai.filter;

import com.agitar.lib.junit.AgitarTestCase;
import org.mentawai.core.ActionException;
import org.mentawai.core.InvocationChain;
import org.mentawai.core.PojoAction;
import org.mentawai.util.InjectionUtils;
import org.mentawai.util.MockAction;

public class InjectionFilterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return InjectionFilter.class;
    }
    
    public void testConstructor() throws Throwable {
        InjectionFilter injectionFilter = new InjectionFilter(true, false);
        assertTrue("injectionFilter.tryField", ((Boolean) getPrivateField(injectionFilter, "tryField")).booleanValue());
        assertFalse("injectionFilter.convert", ((Boolean) getPrivateField(injectionFilter, "convert")).booleanValue());
        assertFalse("injectionFilter.convertNullToFalse", ((Boolean) getPrivateField(injectionFilter, "convertNullToFalse")).booleanValue());
    }
    
    public void testConstructor1() throws Throwable {
        InjectionFilter injectionFilter = new InjectionFilter(true);
        assertTrue("injectionFilter.tryField", ((Boolean) getPrivateField(injectionFilter, "tryField")).booleanValue());
        assertTrue("injectionFilter.convert", ((Boolean) getPrivateField(injectionFilter, "convert")).booleanValue());
        assertFalse("injectionFilter.convertNullToFalse", ((Boolean) getPrivateField(injectionFilter, "convertNullToFalse")).booleanValue());
    }
    
    public void testConstructor2() throws Throwable {
        InjectionFilter injectionFilter = new InjectionFilter();
        assertTrue("injectionFilter.tryField", ((Boolean) getPrivateField(injectionFilter, "tryField")).booleanValue());
        assertTrue("injectionFilter.convert", ((Boolean) getPrivateField(injectionFilter, "convert")).booleanValue());
        assertFalse("injectionFilter.convertNullToFalse", ((Boolean) getPrivateField(injectionFilter, "convertNullToFalse")).booleanValue());
    }
    
    public void testConstructor3() throws Throwable {
        InjectionFilter injectionFilter = new InjectionFilter(true, false, false);
        assertTrue("injectionFilter.tryField", ((Boolean) getPrivateField(injectionFilter, "tryField")).booleanValue());
        assertFalse("injectionFilter.convert", ((Boolean) getPrivateField(injectionFilter, "convert")).booleanValue());
        assertFalse("injectionFilter.convertNullToFalse", ((Boolean) getPrivateField(injectionFilter, "convertNullToFalse")).booleanValue());
    }
    
    public void testDestroy() throws Throwable {
        new InjectionFilter(true, false).destroy();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testFilter() throws Throwable {
        String result = new InjectionFilter().filter(new InvocationChain("testInjectionFilterActionName", new MockAction()));
        assertEquals("result", "success", result);
    }
    
    public void testGetTarget() throws Throwable {
        InjectionFilter injectionFilter = new InjectionFilter(true);
        Object result = injectionFilter.getTarget(null);
        assertNull("result", result);
    }
    
    public void testGetTarget1() throws Throwable {
        InjectionFilter injectionFilter = new InjectionFilter(true, false, true);
        Boolean pojo = Boolean.TRUE;
        Boolean result = (Boolean) injectionFilter.getTarget(new PojoAction(pojo));
        assertSame("result", pojo, result);
    }
    
    public void testGetTarget2() throws Throwable {
        InjectionFilter injectionFilter = new InjectionFilter();
        String result = (String) injectionFilter.getTarget(new PojoAction("1"));
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetTarget3() throws Throwable {
        Integer pojo = new Integer(0);
        InjectionFilter injectionFilter = new InjectionFilter();
        Integer result = (Integer) injectionFilter.getTarget(new PojoAction(pojo));
        assertSame("result", pojo, result);
    }
    
    public void testFilterThrowsActionException() throws Throwable {
        InvocationChain chain = new InvocationChain("testInjectionFilterActionName", new PojoAction(new Object()));
        try {
            new InjectionFilter(true, false, false).filter(chain);
            fail("Expected ActionException to be thrown");
        } catch (ActionException ex) {
            assertEquals("ex.getMessage()", "Cannot find method to execute: execute", ex.getMessage());
            assertThrownBy(InvocationChain.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("chain.getActionName()", "testInjectionFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException() throws Throwable {
        InvocationChain chain = new InvocationChain("testInjectionFilterActionName", new PojoAction("1"));
        try {
            new InjectionFilter(true, false).filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(InjectionUtils.class, ex);
            assertEquals("chain.getActionName()", "testInjectionFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException1() throws Throwable {
        try {
            new InjectionFilter().filter(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(InjectionFilter.class, ex);
        }
    }
}

