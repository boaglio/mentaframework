/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:22:48 PM
 * Time to generate: 00:26.658 seconds
 *
 */

package org.mentawai.filter;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.ArrayList;
import org.mentawai.action.LogoutAction;
import org.mentawai.action.SuccessAction;
import org.mentawai.core.Action;
import org.mentawai.core.ActionException;
import org.mentawai.core.Context;
import org.mentawai.core.FilterException;
import org.mentawai.core.Input;
import org.mentawai.core.InvocationChain;
import org.mentawai.core.PojoAction;
import org.mentawai.ioc.ApplicationComponent;
import org.mentawai.ioc.Component;
import org.mentawai.ioc.DefaultComponent;
import org.mentawai.ioc.LocaleComponent;
import org.mentawai.ioc.ScopeComponent;
import org.mentawai.ioc.SessionComponent;
import org.mentawai.util.MockAction;

public class PushIoCFilterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return PushIoCFilter.class;
    }
    
    public void testConstructor() throws Throwable {
        new PushIoCFilter(new ApplicationComponent(), "testPushIoCFilterKey", 100);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testConstructor1() throws Throwable {
        new PushIoCFilter(new SessionComponent("testPushIoCFilterKey"), "testPushIoCFilterKey");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testDestroy() throws Throwable {
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new DefaultComponent(Integer.class, new ArrayList(100)), "testPushIoCFilterKey", 100);
        pushIoCFilter.destroy();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testFilter() throws Throwable {
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new DefaultComponent(Object.class), "testPushIoCFilterKey", 10);
        String result = pushIoCFilter.filter(new InvocationChain("testPushIoCFilterActionName", new MockAction()));
        assertEquals("result", "success", result);
    }
    
    public void testFilter1() throws Throwable {
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new ScopeComponent(Object.class, 100), "testPushIoCFilterKey", 3);
        String result = pushIoCFilter.filter(new InvocationChain("testPushIoCFilterActionName", new MockAction()));
        assertEquals("result", "success", result);
    }
    
    public void testFilter2() throws Throwable {
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new ScopeComponent(Object.class, 100), "testPushIoCFilterKey", 11);
        String result = pushIoCFilter.filter(new InvocationChain("testPushIoCFilterActionName", new MockAction()));
        assertEquals("result", "success", result);
    }
    
    public void testFilterWithAggressiveMocks() throws Throwable {
        PushIoCFilter pushIoCFilter = (PushIoCFilter) Mockingbird.getProxyObject(PushIoCFilter.class, true);
        Component component = (Component) Mockingbird.getProxyObject(Component.class);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        setPrivateField(pushIoCFilter, "scope", new Integer(4));
        setPrivateField(pushIoCFilter, "comp", component);
        setPrivateField(pushIoCFilter, "key", "");
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Mockingbird.setReturnValue(action.getSession(), null);
        Mockingbird.setReturnValue(action.getApplication(), context);
        Mockingbird.setReturnValue(false, context, "getAttribute", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(component.getInstance(), null);
        Mockingbird.setReturnValue(false, context, "setAttribute", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, input, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.enterTestMode(PushIoCFilter.class);
        String result = pushIoCFilter.filter(invocationChain);
        assertEquals("result", "", result);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testFilterWithAggressiveMocks1() throws Throwable {
        PushIoCFilter pushIoCFilter = (PushIoCFilter) Mockingbird.getProxyObject(PushIoCFilter.class, true);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        setPrivateField(pushIoCFilter, "scope", new Integer(4));
        setPrivateField(pushIoCFilter, "key", "");
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Mockingbird.setReturnValue(action.getSession(), null);
        Mockingbird.setReturnValue(action.getApplication(), context);
        Mockingbird.setReturnValue(false, context, "getAttribute", "(java.lang.String)java.lang.Object", obj, 1);
        Mockingbird.setReturnValue(false, input, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.enterTestMode(PushIoCFilter.class);
        String result = pushIoCFilter.filter(invocationChain);
        assertEquals("result", "", result);
        assertEquals("pushIoCFilter.toString()", "PushIoCFilter: Component=null Key= Scope=APPLICATION", pushIoCFilter.toString());
    }
    
    public void testFilterWithAggressiveMocks2() throws Throwable {
        PushIoCFilter pushIoCFilter = (PushIoCFilter) Mockingbird.getProxyObject(PushIoCFilter.class, true);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        setPrivateField(pushIoCFilter, "scope", new Integer(3));
        setPrivateField(pushIoCFilter, "key", "");
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Mockingbird.setReturnValue(action.getSession(), context);
        Mockingbird.setReturnValue(action.getApplication(), null);
        Mockingbird.setReturnValue(false, context, "getAttribute", "(java.lang.String)java.lang.Object", obj, 1);
        Mockingbird.setReturnValue(false, input, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.enterTestMode(PushIoCFilter.class);
        String result = pushIoCFilter.filter(invocationChain);
        assertEquals("result", "", result);
        assertEquals("pushIoCFilter.toString()", "PushIoCFilter: Component=null Key= Scope=SESSION", pushIoCFilter.toString());
    }
    
    public void testFilterWithAggressiveMocks3() throws Throwable {
        PushIoCFilter pushIoCFilter = (PushIoCFilter) Mockingbird.getProxyObject(PushIoCFilter.class, true);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        setPrivateField(pushIoCFilter, "scope", new Integer(11));
        setPrivateField(pushIoCFilter, "key", "");
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Mockingbird.setReturnValue(action.getSession(), null);
        Mockingbird.setReturnValue(action.getApplication(), null);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", obj, 1);
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.enterTestMode(PushIoCFilter.class);
        String result = pushIoCFilter.filter(invocationChain);
        assertEquals("result", "", result);
        assertEquals("pushIoCFilter.toString()", "PushIoCFilter: Component=null Key= Scope=REQUEST", pushIoCFilter.toString());
    }
    
    public void testGetScope() throws Throwable {
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new ScopeComponent(Integer.class, 100), "testPushIoCFilterKey");
        String result = (String) callPrivateMethod("org.mentawai.filter.PushIoCFilter", "getScope", new Class[] {int.class}, pushIoCFilter, new Object[] {new Integer(100)});
        assertEquals("result", "?", result);
    }
    
    public void testGetScope1() throws Throwable {
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new DefaultComponent(Integer.class, new ArrayList(100)), "testPushIoCFilterKey", 100);
        String result = (String) callPrivateMethod("org.mentawai.filter.PushIoCFilter", "getScope", new Class[] {int.class}, pushIoCFilter, new Object[] {new Integer(11)});
        assertEquals("result", "REQUEST", result);
    }
    
    public void testGetScope2() throws Throwable {
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new ScopeComponent(Object.class, new ArrayList(100), 100), "testPushIoCFilterKey");
        String result = (String) callPrivateMethod("org.mentawai.filter.PushIoCFilter", "getScope", new Class[] {int.class}, pushIoCFilter, new Object[] {new Integer(10)});
        assertEquals("result", "ACTION", result);
    }
    
    public void testGetScope3() throws Throwable {
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new LocaleComponent(), "testPushIoCFilterKey");
        String result = (String) callPrivateMethod("org.mentawai.filter.PushIoCFilter", "getScope", new Class[] {int.class}, pushIoCFilter, new Object[] {new Integer(4)});
        assertEquals("result", "APPLICATION", result);
    }
    
    public void testGetScope4() throws Throwable {
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new ScopeComponent(Integer.class, 100), "testPushIoCFilterKey", 100);
        String result = (String) callPrivateMethod("org.mentawai.filter.PushIoCFilter", "getScope", new Class[] {int.class}, pushIoCFilter, new Object[] {new Integer(3)});
        assertEquals("result", "SESSION", result);
    }
    
    public void testToString() throws Throwable {
        new PushIoCFilter(new LocaleComponent(), "testPushIoCFilterKey", 4).toString();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testToString1() throws Throwable {
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new SessionComponent("testPushIoCFilterKey"), "testPushIoCFilterKey", 11);
        pushIoCFilter.toString();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testToString2() throws Throwable {
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new DefaultComponent(Object.class), "testPushIoCFilterKey", 100);
        pushIoCFilter.toString();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testToString3() throws Throwable {
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new DefaultComponent(Integer.class), "testPushIoCFilterKey", 3);
        pushIoCFilter.toString();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testToString4() throws Throwable {
        new PushIoCFilter(new ApplicationComponent(), "testPushIoCFilterKey", 10).toString();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testFilterThrowsActionException() throws Throwable {
        DefaultComponent comp = (DefaultComponent) Mockingbird.getProxyObject(DefaultComponent.class);
        PushIoCFilter pushIoCFilter = new PushIoCFilter(comp, "", 11);
        InvocationChain chain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.enterRecordingMode();
        Action pojoAction = (Action) Mockingbird.getProxyObject(Action.class);
        Mockingbird.setReturnValue(chain.getAction(), pojoAction);
        Input inputMap = (Input) Mockingbird.getProxyObject(Input.class);
        Mockingbird.setReturnValue(pojoAction.getInput(), inputMap);
        Mockingbird.setReturnValue(pojoAction.getSession(), Mockingbird.getProxyObject(Context.class));
        Mockingbird.setReturnValue(pojoAction.getApplication(), Mockingbird.getProxyObject(Context.class));
        Mockingbird.setReturnValue(inputMap.getValue("testPushIoCFilterParam1"), null);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Mockingbird.setReturnValue(comp.getInstance(), obj);
        inputMap.setValue("", obj);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setException(chain.invoke(), (Throwable) Mockingbird.getProxyObject(ActionException.class));
        Mockingbird.enterTestMode(PushIoCFilter.class);
        try {
            pushIoCFilter.filter(chain);
            fail("Expected ActionException to be thrown");
        } catch (ActionException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testFilterThrowsFilterException() throws Throwable {
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new DefaultComponent(Integer.class), "testPushIoCFilterKey", 3);
        InvocationChain chain = new InvocationChain("testPushIoCFilterActionName", new MockAction());
        try {
            pushIoCFilter.filter(chain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertEquals("ex.getMessage()", "Cannot create instance from class: class java.lang.Integer", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("ex.getCause().getMessage()", "Cannot create instance from class: class java.lang.Integer", ex.getCause().getMessage());
            assertEquals("chain.getActionName()", "testPushIoCFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsFilterException1() throws Throwable {
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new ScopeComponent(Integer.class, 100), "testPushIoCFilterKey");
        InvocationChain chain = new InvocationChain("testPushIoCFilterActionName", new LogoutAction());
        try {
            pushIoCFilter.filter(chain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertEquals("ex.getMessage()", "Cannot create instance from class: class java.lang.Integer", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("ex.getCause().getMessage()", "Cannot create instance from class: class java.lang.Integer", ex.getCause().getMessage());
            assertEquals("chain.getActionName()", "testPushIoCFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsFilterException2() throws Throwable {
        Component comp = new DefaultComponent(Integer.class, new ArrayList(100));
        InvocationChain chain = new InvocationChain("testPushIoCFilterActionName", new PojoAction(Integer.class));
        try {
            new PushIoCFilter(comp, "testPushIoCFilterKey", 9).filter(chain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertEquals("ex.getMessage()", "Invalid scope for IoCFilter: 9", ex.getMessage());
            assertThrownBy(PushIoCFilter.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("chain.getActionName()", "testPushIoCFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsFilterException3() throws Throwable {
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new ApplicationComponent("testPushIoCFilterKey"), "testPushIoCFilterKey", 2);
        InvocationChain chain = new InvocationChain("testPushIoCFilterActionName", new MockAction());
        try {
            pushIoCFilter.filter(chain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertEquals("ex.getMessage()", "Invalid scope for IoCFilter: 2", ex.getMessage());
            assertThrownBy(PushIoCFilter.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("chain.getActionName()", "testPushIoCFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsFilterException4() throws Throwable {
        InvocationChain chain = new InvocationChain("testPushIoCFilterActionName", new MockAction());
        try {
            new PushIoCFilter(new LocaleComponent(), "testPushIoCFilterKey", 12).filter(chain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertEquals("ex.getMessage()", "Invalid scope for IoCFilter: 12", ex.getMessage());
            assertThrownBy(PushIoCFilter.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("chain.getActionName()", "testPushIoCFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsFilterException5() throws Throwable {
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new DefaultComponent(Integer.class, new ArrayList(100)), "testPushIoCFilterKey", 11);
        InvocationChain chain = new InvocationChain("testPushIoCFilterActionName", new MockAction());
        try {
            pushIoCFilter.filter(chain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertEquals("ex.getMessage()", "Cannot create instance from class: class java.lang.Integer", ex.getMessage());
            assertThrownBy(DefaultComponent.class, ex);
            assertEquals("ex.getCause().getMessage()", "Cannot create instance from class: class java.lang.Integer", ex.getCause().getMessage());
            assertEquals("chain.getActionName()", "testPushIoCFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsFilterException6() throws Throwable {
        InvocationChain chain = new InvocationChain("testPushIoCFilterActionName", new LogoutAction());
        try {
            new PushIoCFilter(new LocaleComponent(), "testPushIoCFilterKey", 5).filter(chain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertEquals("ex.getMessage()", "Invalid scope for IoCFilter: 5", ex.getMessage());
            assertThrownBy(PushIoCFilter.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("chain.getActionName()", "testPushIoCFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsFilterExceptionWithAggressiveMocks() throws Throwable {
        PushIoCFilter pushIoCFilter = (PushIoCFilter) Mockingbird.getProxyObject(PushIoCFilter.class, true);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        setPrivateField(pushIoCFilter, "scope", new Integer(0));
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), null);
        Mockingbird.setReturnValue(action.getSession(), null);
        Mockingbird.setReturnValue(action.getApplication(), null);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(FilterException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(FilterException.class));
        Mockingbird.enterTestMode(PushIoCFilter.class);
        try {
            pushIoCFilter.filter(invocationChain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testFilterThrowsNullPointerException() throws Throwable {
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new ApplicationComponent("testPushIoCFilterKey"), "testPushIoCFilterKey", 3);
        InvocationChain chain = new InvocationChain("testPushIoCFilterActionName", new MockAction());
        try {
            pushIoCFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ApplicationComponent.class, ex);
            assertEquals("chain.getActionName()", "testPushIoCFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException1() throws Throwable {
        Action action = new PojoAction(Integer.class);
        InvocationChain chain = new InvocationChain("testPushIoCFilterActionName", action);
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new ScopeComponent(Integer.class, 100), "testPushIoCFilterKey", 3);
        try {
            pushIoCFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushIoCFilter.class, ex);
            assertEquals("chain.getActionName()", "testPushIoCFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException2() throws Throwable {
        InvocationChain chain = new InvocationChain("testPushIoCFilterActionName", new MockAction());
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new ApplicationComponent("testPushIoCFilterKey"), "testPushIoCFilterKey", 10);
        try {
            pushIoCFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ApplicationComponent.class, ex);
            assertEquals("chain.getActionName()", "testPushIoCFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException3() throws Throwable {
        InvocationChain chain = new InvocationChain("testPushIoCFilterActionName", new MockAction());
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new ApplicationComponent("testPushIoCFilterKey"), "testPushIoCFilterKey", 4);
        try {
            pushIoCFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ApplicationComponent.class, ex);
            assertEquals("chain.getActionName()", "testPushIoCFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException4() throws Throwable {
        InvocationChain chain = new InvocationChain("testPushIoCFilterActionName", new LogoutAction());
        try {
            new PushIoCFilter(new LocaleComponent(), "testPushIoCFilterKey", 4).filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushIoCFilter.class, ex);
            assertEquals("chain.getActionName()", "testPushIoCFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException5() throws Throwable {
        InvocationChain chain = new InvocationChain("testPushIoCFilterActionName", new SuccessAction());
        try {
            new PushIoCFilter(new LocaleComponent(), "testPushIoCFilterKey", 11).filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushIoCFilter.class, ex);
            assertEquals("chain.getActionName()", "testPushIoCFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException6() throws Throwable {
        SessionComponent comp = (SessionComponent) Mockingbird.getProxyObject(SessionComponent.class);
        PushIoCFilter pushIoCFilter = new PushIoCFilter(comp, "testString", 11);
        InvocationChain chain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.enterRecordingMode();
        Action pojoAction = (Action) Mockingbird.getProxyObject(Action.class);
        Mockingbird.setReturnValue(chain.getAction(), pojoAction);
        Input inputMap = (Input) Mockingbird.getProxyObject(Input.class);
        Mockingbird.setReturnValue(pojoAction.getInput(), inputMap);
        Mockingbird.setReturnValue(pojoAction.getSession(), Mockingbird.getProxyObject(Context.class));
        Mockingbird.setReturnValue(pojoAction.getApplication(), Mockingbird.getProxyObject(Context.class));
        Mockingbird.setReturnValue(inputMap.getValue("testString"), null);
        Mockingbird.setException(comp.getInstance(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(PushIoCFilter.class);
        try {
            pushIoCFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("chain.getAction()", chain.getAction());
        }
    }
    
    public void testFilterThrowsNullPointerException7() throws Throwable {
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new ApplicationComponent("testPushIoCFilterKey"), "testPushIoCFilterKey", 100);
        try {
            pushIoCFilter.filter(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushIoCFilter.class, ex);
        }
    }
    
    public void testFilterThrowsNullPointerException8() throws Throwable {
        PushIoCFilter pushIoCFilter = new PushIoCFilter(new SessionComponent("testPushIoCFilterKey"), "testPushIoCFilterKey", 100);
        InvocationChain chain = new InvocationChain("testPushIoCFilterActionName", null);
        try {
            pushIoCFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PushIoCFilter.class, ex);
            assertEquals("chain.getActionName()", "testPushIoCFilterActionName", chain.getActionName());
        }
    }
}

