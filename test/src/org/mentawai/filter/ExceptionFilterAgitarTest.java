/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:19:50 PM
 * Time to generate: 00:29.551 seconds
 *
 */

package org.mentawai.filter;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import org.mentawai.action.LogoutAction;
import org.mentawai.action.SuccessAction;
import org.mentawai.core.Action;
import org.mentawai.core.InvocationChain;
import org.mentawai.core.Output;
import org.mentawai.util.MockAction;

public class ExceptionFilterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ExceptionFilter.class;
    }
    
    public void testConstructor() throws Throwable {
        ExceptionFilter exceptionFilter = new ExceptionFilter(true);
        assertTrue("exceptionFilter.trace", ((Boolean) getPrivateField(exceptionFilter, "trace")).booleanValue());
    }
    
    public void testConstructor1() throws Throwable {
        ExceptionFilter exceptionFilter = new ExceptionFilter();
        assertTrue("exceptionFilter.trace", ((Boolean) getPrivateField(exceptionFilter, "trace")).booleanValue());
    }
    
    public void testDestroy() throws Throwable {
        new ExceptionFilter().destroy();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testFilter() throws Throwable {
        String result = new ExceptionFilter().filter(new InvocationChain("testExceptionFilterActionName", new MockAction()));
        assertEquals("result", "success", result);
    }
    
    public void testFilterWithAggressiveMocks() throws Throwable {
        storeStaticField(ExceptionFilter.class, "MESSAGE_KEY");
        storeStaticField(ExceptionFilter.class, "EXCEPTION");
        storeStaticField(ExceptionFilter.class, "EXCEPTION_KEY");
        ExceptionFilter exceptionFilter = (ExceptionFilter) Mockingbird.getProxyObject(ExceptionFilter.class, true);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Exception ex2 = (Exception) Mockingbird.getProxyObject(Exception.class);
        Output output = (Output) Mockingbird.getProxyObject(Output.class);
        setPrivateField(exceptionFilter, "trace", Boolean.TRUE);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(invocationChain.invoke(), ex2);
        ExceptionFilter.EXCEPTION_KEY = "";
        ExceptionFilter.MESSAGE_KEY = "";
        ExceptionFilter.EXCEPTION = "";
        Mockingbird.setReturnValue(false, ex2, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, ex2, "getCause", "()java.lang.Throwable", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, ex2, "getStackTrace", "()java.lang.StackTraceElement[]", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(action.getOutput(), output);
        Mockingbird.setReturnValue(false, output, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, output, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, ex2, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(ExceptionFilter.class);
        String result = exceptionFilter.filter(invocationChain);
        assertEquals("result", "", result);
    }
    
    public void testHandleException() throws Throwable {
        ExceptionFilter exceptionFilter = new ExceptionFilter();
        String result = exceptionFilter.handleException(new MockAction(), new Throwable("testExceptionFilterParam1"));
        assertEquals("result", "exception", result);
    }
    
    public void testHandleException1() throws Throwable {
        ExceptionFilter exceptionFilter = new ExceptionFilter(true);
        Throwable throwable = new IncompatibleClassChangeError();
        StackTraceElement stackTraceElement = new StackTraceElement("testExceptionFilterParam1", "testExceptionFilterParam2", "testExceptionFilterParam3", 100);
        StackTraceElement[] stackTraceElements = new StackTraceElement[1];
        stackTraceElements[0] = stackTraceElement;
        throwable.setStackTrace(stackTraceElements);
        throwable.initCause(new CloneNotSupportedException());
        String result = exceptionFilter.handleException(new MockAction(), throwable);
        assertEquals("result", "exception", result);
    }
    
    public void testHandleException2() throws Throwable {
        ExceptionFilter exceptionFilter = new ExceptionFilter(false);
        String result = exceptionFilter.handleException(new MockAction(new SuccessAction()), new Throwable(new ArrayStoreException()));
        assertEquals("result", "exception", result);
    }
    
    public void testHandleException3() throws Throwable {
        ExceptionFilter exceptionFilter = new ExceptionFilter(false);
        Throwable throwable = new NullPointerException("testExceptionFilterParam1");
        StackTraceElement[] stackTraceElements = new StackTraceElement[0];
        throwable.setStackTrace(stackTraceElements);
        String result = exceptionFilter.handleException(new MockAction(), throwable);
        assertEquals("result", "exception", result);
    }
    
    public void testHandleException4() throws Throwable {
        ExceptionFilter exceptionFilter = new ExceptionFilter(true);
        Throwable throwable = new Throwable();
        StackTraceElement[] stackTraceElements = new StackTraceElement[0];
        throwable.setStackTrace(stackTraceElements);
        throwable.initCause(new NullPointerException());
        String result = exceptionFilter.handleException(new MockAction(), throwable);
        assertEquals("result", "exception", result);
    }
    
    public void testHandleException5() throws Throwable {
        ExceptionFilter exceptionFilter = new ExceptionFilter(false);
        String result = exceptionFilter.handleException(new MockAction(), new IncompatibleClassChangeError("testExceptionFilterParam1"));
        assertEquals("result", "exception", result);
    }
    
    public void testHandleException6() throws Throwable {
        ExceptionFilter exceptionFilter = new ExceptionFilter(true);
        Throwable throwable = new NullPointerException("testExceptionFilterParam1");
        StackTraceElement[] stackTraceElements = new StackTraceElement[0];
        throwable.setStackTrace(stackTraceElements);
        String result = exceptionFilter.handleException(new MockAction(), throwable);
        assertEquals("result", "exception", result);
    }
    
    public void testHandleException7() throws Throwable {
        ExceptionFilter exceptionFilter = new ExceptionFilter(false);
        Throwable throwable = new Throwable();
        StackTraceElement[] stackTraceElements = new StackTraceElement[0];
        throwable.setStackTrace(stackTraceElements);
        throwable.initCause(new NullPointerException());
        String result = exceptionFilter.handleException(new MockAction(), throwable);
        assertEquals("result", "exception", result);
    }
    
    public void testPrepareForHtml() throws Throwable {
        ExceptionFilter exceptionFilter = new ExceptionFilter();
        String result = exceptionFilter.prepareForHtml("testExceptionFilters");
        assertEquals("result", "testExceptionFilters", result);
    }
    
    public void testPrepareStackTrace() throws Throwable {
        StackTraceElement stackTraceElement = new StackTraceElement("testExceptionFilterParam1", "testExceptionFilterParam2", "testExceptionFilterParam3", 100);
        StackTraceElement[] stacktrace = new StackTraceElement[1];
        stacktrace[0] = stackTraceElement;
        ExceptionFilter exceptionFilter = new ExceptionFilter();
        String result = exceptionFilter.prepareStackTrace(stacktrace);
        assertEquals("result", "testExceptionFilterParam1.testExceptionFilterParam2(testExceptionFilterParam3:100)<br/>", result);
    }
    
    public void testPrepareStackTrace1() throws Throwable {
        StackTraceElement stackTraceElement = new StackTraceElement("testExceptionFilterParam1", "testExceptionFilterParam2", "testExceptionFilterParam3", 100);
        StackTraceElement stackTraceElement2 = new StackTraceElement("testExceptionFilterParam11", "testExceptionFilterParam21", "testExceptionFilterParam31", 1000);
        StackTraceElement[] stacktrace = new StackTraceElement[2];
        stacktrace[0] = stackTraceElement;
        stacktrace[1] = stackTraceElement2;
        ExceptionFilter exceptionFilter = new ExceptionFilter(true);
        String result = exceptionFilter.prepareStackTrace(stacktrace);
        assertEquals("result", "testExceptionFilterParam1.testExceptionFilterParam2(testExceptionFilterParam3:100)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;testExceptionFilterParam11.testExceptionFilterParam21(testExceptionFilterParam31:1000)<br/>", result);
    }
    
    public void testPrepareStackTrace2() throws Throwable {
        ExceptionFilter exceptionFilter = new ExceptionFilter(true);
        StackTraceElement[] stacktrace = new StackTraceElement[0];
        String result = exceptionFilter.prepareStackTrace(stacktrace);
        assertEquals("result", "", result);
    }
    
    public void testFilterThrowsNullPointerException() throws Throwable {
        InvocationChain chain = new InvocationChain("testExceptionFilterActionName", new LogoutAction());
        try {
            new ExceptionFilter().filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ExceptionFilter.class, ex);
            assertEquals("chain.getActionName()", "testExceptionFilterActionName", chain.getActionName());
        }
    }
    
    public void testHandleExceptionThrowsNullPointerException() throws Throwable {
        ExceptionFilter exceptionFilter = new ExceptionFilter();
        Throwable throwable = new Throwable("testExceptionFilterParam1");
        Action a = new SuccessAction();
        try {
            exceptionFilter.handleException(a, throwable);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ExceptionFilter.class, ex);
            assertEquals("throwable.getMessage()", "testExceptionFilterParam1", throwable.getMessage());
        }
    }
    
    public void testHandleExceptionThrowsNullPointerException1() throws Throwable {
        ExceptionFilter exceptionFilter = new ExceptionFilter();
        Throwable throwable = new Throwable("testExceptionFilterParam1");
        try {
            exceptionFilter.handleException(null, throwable);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ExceptionFilter.class, ex);
            assertEquals("throwable.getMessage()", "testExceptionFilterParam1", throwable.getMessage());
        }
    }
    
    public void testHandleExceptionThrowsNullPointerException2() throws Throwable {
        ExceptionFilter exceptionFilter = new ExceptionFilter();
        Throwable throwable = new Throwable(new IncompatibleClassChangeError());
        Action a = new SuccessAction();
        try {
            exceptionFilter.handleException(a, throwable);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ExceptionFilter.class, ex);
            assertEquals("throwable.getMessage()", "java.lang.IncompatibleClassChangeError", throwable.getMessage());
        }
    }
    
    public void testHandleExceptionThrowsNullPointerException3() throws Throwable {
        ExceptionFilter exceptionFilter = new ExceptionFilter(true);
        Action a = new SuccessAction();
        try {
            exceptionFilter.handleException(a, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ExceptionFilter.class, ex);
        }
    }
    
    public void testHandleExceptionThrowsNullPointerException4() throws Throwable {
        ExceptionFilter exceptionFilter = new ExceptionFilter(true);
        Throwable throwable = new Throwable(new NoSuchFieldError("testExceptionFilterParam1"));
        try {
            exceptionFilter.handleException(null, throwable);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ExceptionFilter.class, ex);
            assertEquals("throwable.getMessage()", "java.lang.NoSuchFieldError: testExceptionFilterParam1", throwable.getMessage());
        }
    }
    
    public void testPrepareForHtmlThrowsNullPointerException() throws Throwable {
        ExceptionFilter exceptionFilter = new ExceptionFilter();
        try {
            exceptionFilter.prepareForHtml(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ExceptionFilter.class, ex);
        }
    }
    
    public void testPrepareStackTraceThrowsNullPointerException() throws Throwable {
        StackTraceElement stackTraceElement = new StackTraceElement("testExceptionFilterParam1", "testExceptionFilterParam2", "testExceptionFilterParam3", 100);
        StackTraceElement[] stacktrace = new StackTraceElement[2];
        stacktrace[0] = stackTraceElement;
        ExceptionFilter exceptionFilter = new ExceptionFilter(true);
        try {
            exceptionFilter.prepareStackTrace(stacktrace);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ExceptionFilter.class, ex);
        }
    }
    
    public void testPrepareStackTraceThrowsNullPointerException1() throws Throwable {
        ExceptionFilter exceptionFilter = new ExceptionFilter(true);
        StackTraceElement[] stacktrace = new StackTraceElement[1];
        try {
            exceptionFilter.prepareStackTrace(stacktrace);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ExceptionFilter.class, ex);
        }
    }
    
    public void testPrepareStackTraceThrowsNullPointerException2() throws Throwable {
        ExceptionFilter exceptionFilter = new ExceptionFilter();
        try {
            exceptionFilter.prepareStackTrace((StackTraceElement[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ExceptionFilter.class, ex);
        }
    }
}

