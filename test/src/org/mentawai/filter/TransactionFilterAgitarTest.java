/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:23:44 PM
 * Time to generate: 00:22.208 seconds
 *
 */

package org.mentawai.filter;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.HashSet;
import java.util.Set;
import org.mentawai.action.SuccessAction;
import org.mentawai.core.Action;
import org.mentawai.core.ActionException;
import org.mentawai.core.FilterException;
import org.mentawai.core.Input;
import org.mentawai.core.InvocationChain;
import org.mentawai.core.PojoAction;
import org.mentawai.log.Debug;
import org.mentawai.transaction.Transaction;
import org.mentawai.util.MockAction;

public class TransactionFilterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return TransactionFilter.class;
    }
    
    public void testConstructor() throws Throwable {
        String[] results = new String[2];
        TransactionFilter transactionFilter = new TransactionFilter(results, true);
        assertTrue("transactionFilter.onlyPost", ((Boolean) getPrivateField(transactionFilter, "onlyPost")).booleanValue());
        assertEquals("transactionFilter.getResultsForCommit().size()", 1, transactionFilter.getResultsForCommit().size());
        assertEquals("transactionFilter.transactionKey", "transaction", getPrivateField(transactionFilter, "transactionKey"));
    }
    
    public void testConstructor1() throws Throwable {
        TransactionFilter transactionFilter = new TransactionFilter(true);
        assertTrue("transactionFilter.onlyPost", ((Boolean) getPrivateField(transactionFilter, "onlyPost")).booleanValue());
        assertEquals("transactionFilter.getResultsForCommit().size()", 1, transactionFilter.getResultsForCommit().size());
        assertEquals("transactionFilter.transactionKey", "transaction", getPrivateField(transactionFilter, "transactionKey"));
    }
    
    public void testConstructor2() throws Throwable {
        String[] results = new String[3];
        TransactionFilter transactionFilter = new TransactionFilter("testTransactionFilterTransaction_key", results);
        assertFalse("transactionFilter.onlyPost", ((Boolean) getPrivateField(transactionFilter, "onlyPost")).booleanValue());
        assertEquals("transactionFilter.getResultsForCommit().size()", 1, transactionFilter.getResultsForCommit().size());
        assertEquals("transactionFilter.transactionKey", "testTransactionFilterTransaction_key", getPrivateField(transactionFilter, "transactionKey"));
    }
    
    public void testConstructor3() throws Throwable {
        TransactionFilter transactionFilter = new TransactionFilter();
        assertFalse("transactionFilter.onlyPost", ((Boolean) getPrivateField(transactionFilter, "onlyPost")).booleanValue());
        assertEquals("transactionFilter.getResultsForCommit().size()", 1, transactionFilter.getResultsForCommit().size());
        assertEquals("transactionFilter.transactionKey", "transaction", getPrivateField(transactionFilter, "transactionKey"));
    }
    
    public void testConstructor4() throws Throwable {
        String[] results = new String[6];
        TransactionFilter transactionFilter = new TransactionFilter("testTransactionFilterTransaction_key", results, true);
        assertTrue("transactionFilter.onlyPost", ((Boolean) getPrivateField(transactionFilter, "onlyPost")).booleanValue());
        assertEquals("transactionFilter.getResultsForCommit().size()", 1, transactionFilter.getResultsForCommit().size());
        assertEquals("transactionFilter.transactionKey", "testTransactionFilterTransaction_key", getPrivateField(transactionFilter, "transactionKey"));
    }
    
    public void testConstructor5() throws Throwable {
        TransactionFilter transactionFilter = new TransactionFilter("testTransactionFilterTransaction_key");
        assertFalse("transactionFilter.onlyPost", ((Boolean) getPrivateField(transactionFilter, "onlyPost")).booleanValue());
        assertEquals("transactionFilter.getResultsForCommit().size()", 1, transactionFilter.getResultsForCommit().size());
        assertEquals("transactionFilter.transactionKey", "testTransactionFilterTransaction_key", getPrivateField(transactionFilter, "transactionKey"));
    }
    
    public void testConstructor6() throws Throwable {
        TransactionFilter transactionFilter = new TransactionFilter("testTransactionFilterTransaction_key", true);
        assertTrue("transactionFilter.onlyPost", ((Boolean) getPrivateField(transactionFilter, "onlyPost")).booleanValue());
        assertEquals("transactionFilter.getResultsForCommit().size()", 1, transactionFilter.getResultsForCommit().size());
        assertEquals("transactionFilter.transactionKey", "testTransactionFilterTransaction_key", getPrivateField(transactionFilter, "transactionKey"));
    }
    
    public void testConstructor7() throws Throwable {
        String[] results = new String[0];
        TransactionFilter transactionFilter = new TransactionFilter(results);
        assertFalse("transactionFilter.onlyPost", ((Boolean) getPrivateField(transactionFilter, "onlyPost")).booleanValue());
        assertEquals("transactionFilter.getResultsForCommit().size()", 0, transactionFilter.getResultsForCommit().size());
        assertEquals("transactionFilter.transactionKey", "transaction", getPrivateField(transactionFilter, "transactionKey"));
    }
    
    public void testConstructor8() throws Throwable {
        String[] results = new String[4];
        TransactionFilter transactionFilter = new TransactionFilter(results);
        assertFalse("transactionFilter.onlyPost", ((Boolean) getPrivateField(transactionFilter, "onlyPost")).booleanValue());
        assertEquals("transactionFilter.getResultsForCommit().size()", 1, transactionFilter.getResultsForCommit().size());
        assertEquals("transactionFilter.transactionKey", "transaction", getPrivateField(transactionFilter, "transactionKey"));
    }
    
    public void testDestroy() throws Throwable {
        TransactionFilter transactionFilter = new TransactionFilter();
        transactionFilter.destroy();
        assertEquals("transactionFilter.getResultsForCommit().size()", 1, transactionFilter.getResultsForCommit().size());
    }
    
    public void testFilter() throws Throwable {
        String result = new TransactionFilter("testTransactionFilterTransaction_key", true).filter(new InvocationChain("testTransactionFilterActionName", new MockAction()));
        assertEquals("result", "success", result);
    }
    
    public void testFilterWithAggressiveMocks() throws Throwable {
        storeStaticField(Debug.class, "ENABLED");
        TransactionFilter transactionFilter = (TransactionFilter) Mockingbird.getProxyObject(TransactionFilter.class, true);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Transaction transaction = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        setPrivateField(transactionFilter, "onlyPost", Boolean.TRUE);
        setPrivateField(transactionFilter, "transactionKey", "");
        setPrivateField(transactionFilter, "results", set);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Debug.isEnabled() = false;
        Mockingbird.setReturnValue(input.getProperty("method"), "post");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", transaction, 1);
        Mockingbird.setReturnValue(transaction.wasCommited(), false);
        Mockingbird.setReturnValue(transaction.wasRolledBack(), false);
        transaction.begin();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.setReturnValue(false, set, "contains", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        transaction.commit();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(TransactionFilter.class);
        String result = transactionFilter.filter(invocationChain);
        assertEquals("result", "", result);
        assertNotNull("transactionFilter.getResultsForCommit()", transactionFilter.getResultsForCommit());
    }
    
    public void testFilterWithAggressiveMocks1() throws Throwable {
        storeStaticField(Debug.class, "ENABLED");
        TransactionFilter transactionFilter = (TransactionFilter) Mockingbird.getProxyObject(TransactionFilter.class, true);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Transaction transaction = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        Transaction transaction2 = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        setPrivateField(transactionFilter, "onlyPost", Boolean.TRUE);
        setPrivateField(transactionFilter, "transactionKey", "");
        setPrivateField(transactionFilter, "results", set);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Debug.isEnabled() = false;
        Mockingbird.setReturnValue(input.getProperty("method"), "post");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", transaction, 1);
        Mockingbird.setReturnValue(transaction.wasCommited(), true);
        Mockingbird.setReturnValue(false, input, "removeValue", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", transaction2, 1);
        transaction2.begin();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.setReturnValue(false, set, "contains", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        transaction2.commit();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(TransactionFilter.class);
        String result = transactionFilter.filter(invocationChain);
        assertEquals("result", "", result);
        assertNotNull("transactionFilter.getResultsForCommit()", transactionFilter.getResultsForCommit());
    }
    
    public void testFilterWithAggressiveMocks2() throws Throwable {
        storeStaticField(Debug.class, "ENABLED");
        TransactionFilter transactionFilter = (TransactionFilter) Mockingbird.getProxyObject(TransactionFilter.class, true);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Transaction transaction = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        Transaction transaction2 = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        setPrivateField(transactionFilter, "onlyPost", Boolean.TRUE);
        setPrivateField(transactionFilter, "transactionKey", "");
        setPrivateField(transactionFilter, "results", set);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Debug.isEnabled() = false;
        Mockingbird.setReturnValue(input.getProperty("method"), "post");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", transaction, 1);
        Mockingbird.setReturnValue(transaction.wasCommited(), false);
        Mockingbird.setReturnValue(transaction.wasRolledBack(), true);
        Mockingbird.setReturnValue(false, input, "removeValue", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", transaction2, 1);
        transaction2.begin();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.setReturnValue(false, set, "contains", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        transaction2.commit();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(TransactionFilter.class);
        String result = transactionFilter.filter(invocationChain);
        assertEquals("result", "", result);
        assertNotNull("transactionFilter.getResultsForCommit()", transactionFilter.getResultsForCommit());
    }
    
    public void testFilterWithAggressiveMocks3() throws Throwable {
        storeStaticField(Debug.class, "ENABLED");
        TransactionFilter transactionFilter = (TransactionFilter) Mockingbird.getProxyObject(TransactionFilter.class, true);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Transaction transaction = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        Transaction transaction2 = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        setPrivateField(transactionFilter, "onlyPost", Boolean.TRUE);
        setPrivateField(transactionFilter, "transactionKey", "");
        setPrivateField(transactionFilter, "results", set);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Debug.isEnabled() = true;
        Mockingbird.setReturnValue(input.getProperty("method"), "post");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", transaction, 1);
        Mockingbird.setReturnValue(transaction.wasCommited(), true);
        Mockingbird.setReturnValue(false, input, "removeValue", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", transaction2, 1);
        Mockingbird.setReturnValue(true, Debug.class, "log", "(java.lang.String[])void", null, 1);
        transaction2.begin();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, Debug.class, "log", "(java.lang.String[])void", null, 1);
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.setReturnValue(false, set, "contains", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(true, Debug.class, "log", "(java.lang.String[])void", null, 1);
        transaction2.rollback();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, Debug.class, "log", "(java.lang.String[])void", null, 1);
        Mockingbird.enterTestMode(TransactionFilter.class);
        String result = transactionFilter.filter(invocationChain);
        assertEquals("result", "", result);
        assertNotNull("transactionFilter.getResultsForCommit()", transactionFilter.getResultsForCommit());
    }
    
    public void testFilterWithAggressiveMocks4() throws Throwable {
        storeStaticField(Debug.class, "ENABLED");
        TransactionFilter transactionFilter = (TransactionFilter) Mockingbird.getProxyObject(TransactionFilter.class, true);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Transaction transaction = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        Transaction transaction2 = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        setPrivateField(transactionFilter, "onlyPost", Boolean.TRUE);
        setPrivateField(transactionFilter, "transactionKey", "");
        setPrivateField(transactionFilter, "results", set);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Debug.isEnabled() = true;
        Mockingbird.setReturnValue(input.getProperty("method"), "post");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", transaction, 1);
        Mockingbird.setReturnValue(transaction.wasCommited(), true);
        Mockingbird.setReturnValue(false, input, "removeValue", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", transaction2, 1);
        Mockingbird.setReturnValue(true, Debug.class, "log", "(java.lang.String[])void", null, 1);
        transaction2.begin();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, Debug.class, "log", "(java.lang.String[])void", null, 1);
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.setReturnValue(false, set, "contains", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(true, Debug.class, "log", "(java.lang.String[])void", null, 1);
        transaction2.commit();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, Debug.class, "log", "(java.lang.String[])void", null, 1);
        Mockingbird.enterTestMode(TransactionFilter.class);
        String result = transactionFilter.filter(invocationChain);
        assertEquals("result", "", result);
        assertNotNull("transactionFilter.getResultsForCommit()", transactionFilter.getResultsForCommit());
    }
    
    public void testFilterWithAggressiveMocks5() throws Throwable {
        storeStaticField(Debug.class, "ENABLED");
        TransactionFilter transactionFilter = (TransactionFilter) Mockingbird.getProxyObject(TransactionFilter.class, true);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Transaction transaction = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        Transaction transaction2 = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        setPrivateField(transactionFilter, "onlyPost", Boolean.TRUE);
        setPrivateField(transactionFilter, "transactionKey", "");
        setPrivateField(transactionFilter, "results", set);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Debug.isEnabled() = false;
        Mockingbird.setReturnValue(input.getProperty("method"), "post");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", transaction, 1);
        Mockingbird.setReturnValue(transaction.wasCommited(), true);
        Mockingbird.setReturnValue(false, input, "removeValue", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", transaction2, 1);
        transaction2.begin();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.setReturnValue(false, set, "contains", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        transaction2.rollback();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(TransactionFilter.class);
        String result = transactionFilter.filter(invocationChain);
        assertEquals("result", "", result);
        assertNotNull("transactionFilter.getResultsForCommit()", transactionFilter.getResultsForCommit());
    }
    
    public void testFilterWithAggressiveMocks6() throws Throwable {
        TransactionFilter transactionFilter = (TransactionFilter) Mockingbird.getProxyObject(TransactionFilter.class, true);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        setPrivateField(transactionFilter, "onlyPost", Boolean.TRUE);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Mockingbird.setReturnValue(input.getProperty("method"), "");
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.enterTestMode(TransactionFilter.class);
        String result = transactionFilter.filter(invocationChain);
        assertEquals("result", "", result);
        assertNull("transactionFilter.getResultsForCommit()", transactionFilter.getResultsForCommit());
    }
    
    public void testGetResultsForCommit() throws Throwable {
        HashSet result = (HashSet) new TransactionFilter("testTransactionFilterTransaction_key").getResultsForCommit();
        assertEquals("result.size()", 1, result.size());
        assertTrue("(HashSet) result.contains(\"success\")", result.contains("success"));
    }
    
    public void testGetResultsForCommit1() throws Throwable {
        String[] results = new String[0];
        HashSet result = (HashSet) new TransactionFilter("testTransactionFilterTransaction_key", results, true).getResultsForCommit();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new TransactionFilter((String[]) null, true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(TransactionFilter.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException1() throws Throwable {
        try {
            new TransactionFilter("testTransactionFilterTransaction_key", null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(TransactionFilter.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException2() throws Throwable {
        try {
            new TransactionFilter("testTransactionFilterTransaction_key", null, true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(TransactionFilter.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException3() throws Throwable {
        try {
            new TransactionFilter((String[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(TransactionFilter.class, ex);
        }
    }
    
    public void testFilterThrowsActionException() throws Throwable {
        String[] results = new String[0];
        TransactionFilter transactionFilter = new TransactionFilter("testTransactionFilterTransaction_key", results, true);
        InvocationChain chain = new InvocationChain("testTransactionFilterActionName", new MockAction());
        chain.setInnerAction("testTransactionFilterInnerAction");
        try {
            transactionFilter.filter(chain);
            fail("Expected ActionException to be thrown");
        } catch (ActionException ex) {
            assertEquals("ex.getMessage()", "The inner action does not exist: testTransactionFilterInnerAction", ex.getMessage());
            assertThrownBy(InvocationChain.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("transactionFilter.getResultsForCommit().size()", 0, transactionFilter.getResultsForCommit().size());
            assertEquals("chain.getActionName()", "testTransactionFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsFilterException() throws Throwable {
        InvocationChain chain = new InvocationChain("testTransactionFilterActionName", new MockAction());
        String[] results = new String[0];
        TransactionFilter transactionFilter = new TransactionFilter("testTransactionFilterTransaction_key", results, false);
        try {
            transactionFilter.filter(chain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertEquals("ex.getMessage()", "Cannot find transaction in action's input with the given key: testTransactionFilterTransaction_key", ex.getMessage());
            assertThrownBy(TransactionFilter.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("transactionFilter.getResultsForCommit().size()", 0, transactionFilter.getResultsForCommit().size());
            assertEquals("chain.getActionName()", "testTransactionFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsFilterExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(Debug.class, "ENABLED");
        TransactionFilter transactionFilter = (TransactionFilter) Mockingbird.getProxyObject(TransactionFilter.class, true);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Transaction transaction = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        setPrivateField(transactionFilter, "onlyPost", Boolean.FALSE);
        setPrivateField(transactionFilter, "transactionKey", "");
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Debug.isEnabled() = true;
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", transaction, 1);
        Mockingbird.setReturnValue(transaction.wasCommited(), true);
        Mockingbird.setReturnValue(false, input, "removeValue", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(true, Debug.class, "log", "(java.lang.String[])void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(FilterException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(FilterException.class));
        Mockingbird.enterTestMode(TransactionFilter.class);
        try {
            transactionFilter.filter(invocationChain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertNull("transactionFilter.getResultsForCommit()", transactionFilter.getResultsForCommit());
        }
    }
    
    public void testFilterThrowsNullPointerException() throws Throwable {
        TransactionFilter transactionFilter = new TransactionFilter("testTransactionFilterTransaction_key", true);
        InvocationChain chain = new InvocationChain("testTransactionFilterActionName", new PojoAction(null));
        try {
            transactionFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(TransactionFilter.class, ex);
            assertEquals("transactionFilter.getResultsForCommit().size()", 1, transactionFilter.getResultsForCommit().size());
            assertEquals("chain.getActionName()", "testTransactionFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException1() throws Throwable {
        String[] results = new String[3];
        TransactionFilter transactionFilter = new TransactionFilter("testTransactionFilterTransaction_key", results, false);
        InvocationChain chain = new InvocationChain("testTransactionFilterActionName", new SuccessAction());
        try {
            transactionFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(TransactionFilter.class, ex);
            assertEquals("transactionFilter.getResultsForCommit().size()", 1, transactionFilter.getResultsForCommit().size());
            assertEquals("chain.getActionName()", "testTransactionFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException2() throws Throwable {
        TransactionFilter transactionFilter = new TransactionFilter("testTransactionFilterTransaction_key", true);
        try {
            transactionFilter.filter(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(TransactionFilter.class, ex);
            assertEquals("transactionFilter.getResultsForCommit().size()", 1, transactionFilter.getResultsForCommit().size());
        }
    }
    
    public void testFilterThrowsNullPointerException3() throws Throwable {
        TransactionFilter transactionFilter = new TransactionFilter("testTransactionFilterTransaction_key", true);
        InvocationChain chain = new InvocationChain("testTransactionFilterActionName", null);
        try {
            transactionFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(TransactionFilter.class, ex);
            assertEquals("transactionFilter.getResultsForCommit().size()", 1, transactionFilter.getResultsForCommit().size());
            assertEquals("chain.getActionName()", "testTransactionFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsThrowableWithAggressiveMocks() throws Throwable {
        storeStaticField(Debug.class, "ENABLED");
        TransactionFilter transactionFilter = (TransactionFilter) Mockingbird.getProxyObject(TransactionFilter.class, true);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Transaction transaction = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        Transaction transaction2 = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        Exception ex2 = (Exception) Mockingbird.getProxyObject(Exception.class);
        setPrivateField(transactionFilter, "onlyPost", Boolean.TRUE);
        setPrivateField(transactionFilter, "transactionKey", "");
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Debug.isEnabled() = false;
        Mockingbird.setReturnValue(input.getProperty("method"), "post");
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", transaction, 1);
        Mockingbird.setReturnValue(transaction.wasCommited(), true);
        Mockingbird.setReturnValue(false, input, "removeValue", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", transaction2, 1);
        transaction2.begin();
        Mockingbird.setExceptionForVoid(ex2);
        Mockingbird.setReturnValue(false, ex2, "printStackTrace", "()void", new Object[] {}, null, 1);
        transaction2.rollback();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(TransactionFilter.class);
        try {
            transactionFilter.filter(invocationChain);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("transactionFilter.getResultsForCommit()", transactionFilter.getResultsForCommit());
        }
    }
    
    public void testFilterThrowsThrowableWithAggressiveMocks1() throws Throwable {
        storeStaticField(Debug.class, "ENABLED");
        TransactionFilter transactionFilter = (TransactionFilter) Mockingbird.getProxyObject(TransactionFilter.class, true);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Transaction transaction = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        Transaction transaction2 = (Transaction) Mockingbird.getProxyObject(Transaction.class);
        Exception ex2 = (Exception) Mockingbird.getProxyObject(Exception.class);
        setPrivateField(transactionFilter, "onlyPost", Boolean.FALSE);
        setPrivateField(transactionFilter, "transactionKey", "");
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Debug.isEnabled() = true;
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", transaction, 1);
        Mockingbird.setReturnValue(transaction.wasCommited(), true);
        Mockingbird.setReturnValue(false, input, "removeValue", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", transaction2, 1);
        Mockingbird.setReturnValue(true, Debug.class, "log", "(java.lang.String[])void", null, 1);
        transaction2.begin();
        Mockingbird.setExceptionForVoid(ex2);
        Mockingbird.setReturnValue(false, ex2, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, ex2, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(true, Debug.class, "log", "(java.lang.String[])void", null, 1);
        transaction2.rollback();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, Debug.class, "log", "(java.lang.String[])void", null, 1);
        Mockingbird.enterTestMode(TransactionFilter.class);
        try {
            transactionFilter.filter(invocationChain);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("transactionFilter.getResultsForCommit()", transactionFilter.getResultsForCommit());
        }
    }
}

