/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:22:10 PM
 * Time to generate: 01:31.526 seconds
 *
 */

package org.mentawai.filter;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import org.mentawai.action.LogoutAction;
import org.mentawai.action.SuccessAction;
import org.mentawai.core.Action;
import org.mentawai.core.ActionException;
import org.mentawai.core.ApplicationManager;
import org.mentawai.core.Context;
import org.mentawai.core.MapContext;
import org.mentawai.core.Filter;
import org.mentawai.core.FilterException;
import org.mentawai.core.Input;
import org.mentawai.core.MapInput;
import org.mentawai.core.InputWrapper;
import org.mentawai.core.InvocationChain;
import org.mentawai.ioc.ActionComponent;
import org.mentawai.ioc.ApplicationComponent;
import org.mentawai.ioc.Component;
import org.mentawai.ioc.DefaultComponent;
import org.mentawai.ioc.LocaleComponent;
import org.mentawai.ioc.ScopeComponent;
import org.mentawai.util.MockAction;

public class IoCFilterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return IoCFilter.class;
    }
    
    public void testConstructor() throws Throwable {
        IoCFilter ioCFilter = new IoCFilter(new ScopeComponent(Integer.class, 100), "testIoCFilterKey", 100);
        assertNull("ioCFilter.input.get()", ((ThreadLocal) getPrivateField(ioCFilter, "input")).get());
        assertEquals("ioCFilter.toString()", "IocFilter (deprecated one)", ioCFilter.toString());
        assertNull("ioCFilter.action.get()", ((ThreadLocal) getPrivateField(ioCFilter, "action")).get());
    }
    
    public void testConstructor1() throws Throwable {
        IoCFilter ioCFilter = new IoCFilter();
        assertNull("ioCFilter.input.get()", ((ThreadLocal) getPrivateField(ioCFilter, "input")).get());
        assertEquals("ioCFilter.toString()", "IoCFilter", ioCFilter.toString());
        assertNull("ioCFilter.action.get()", ((ThreadLocal) getPrivateField(ioCFilter, "action")).get());
    }
    
    public void testConstructor2() throws Throwable {
        IoCFilter ioCFilter = new IoCFilter(new DefaultComponent(Integer.class), "testIoCFilterKey");
        assertNull("ioCFilter.input.get()", ((ThreadLocal) getPrivateField(ioCFilter, "input")).get());
        assertEquals("ioCFilter.toString()", "IocFilter (deprecated one)", ioCFilter.toString());
        assertNull("ioCFilter.action.get()", ((ThreadLocal) getPrivateField(ioCFilter, "action")).get());
    }
    
    public void testDestroy() throws Throwable {
        IoCFilter ioCFilter = new IoCFilter(new ApplicationComponent(), "testIoCFilterKey", 100);
        ioCFilter.destroy();
        assertEquals("ioCFilter.toString()", "IocFilter (deprecated one)", ioCFilter.toString());
    }
    
    public void testDestroy1() throws Throwable {
        IoCFilter ioCFilter = new IoCFilter();
        ioCFilter.destroy();
        assertEquals("ioCFilter.toString()", "IoCFilter", ioCFilter.toString());
    }
    
    public void testFilter() throws Throwable {
        IoCFilter ioCFilter = new IoCFilter(new DefaultComponent(Object.class), "testIoCFilterKey");
        String result = ioCFilter.filter(new InvocationChain("testIoCFilterActionName", new MockAction()));
        assertEquals("result", "success", result);
        assertEquals("ioCFilter.toString()", "IocFilter (deprecated one)", ioCFilter.toString());
    }
    
    public void testGetAction() throws Throwable {
        IoCFilter ioCFilter = new IoCFilter(new LocaleComponent(), "testIoCFilterKey");
        Object result = callPrivateMethod("org.mentawai.filter.IoCFilter", "getAction", new Class[] {}, ioCFilter, new Object[] {});
        assertNull("result", result);
    }
    
    public void testGetAction1() throws Throwable {
        IoCFilter ioCFilter = new IoCFilter();
        Action action = new MockAction();
        ioCFilter.filter(new InvocationChain("testIoCFilterActionName", action));
        Action result = (Action) callPrivateMethod("org.mentawai.filter.IoCFilter", "getAction", new Class[] {}, ioCFilter, new Object[] {});
        assertSame("result", action, result);
    }
    
    public void testGetApplication() throws Throwable {
        IoCFilter ioCFilter = new IoCFilter();
        Mockingbird.enterRecordingMode();
        SuccessAction successAction = (SuccessAction) Mockingbird.getProxyObject(SuccessAction.class);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(ThreadLocal.class), "get", "()java.lang.Object", successAction, 1);
        Mockingbird.setReturnValue(successAction.getApplication(), null);
        Mockingbird.enterTestMode(IoCFilter.class);
        Object result = callPrivateMethod("org.mentawai.filter.IoCFilter", "getApplication", new Class[] {}, ioCFilter, new Object[] {});
        assertNull("result", result);
    }
    
    public void testGetApplication1() throws Throwable {
        IoCFilter ioCFilter = new IoCFilter();
        ioCFilter.filter(new InvocationChain("testIoCFilterActionName", new MockAction()));
        MapContext result = (MapContext) callPrivateMethod("org.mentawai.filter.IoCFilter", "getApplication", new Class[] {}, ioCFilter, new Object[] {});
        assertNotNull("result", result);
    }
    
    public void testGetSession() throws Throwable {
        IoCFilter ioCFilter = new IoCFilter();
        ioCFilter.filter(new InvocationChain("testIoCFilterActionName", new MockAction()));
        MapContext result = (MapContext) callPrivateMethod("org.mentawai.filter.IoCFilter", "getSession", new Class[] {}, ioCFilter, new Object[] {});
        assertNotNull("result", result);
    }
    
    public void testGetSession1() throws Throwable {
        IoCFilter ioCFilter = new IoCFilter();
        Mockingbird.enterRecordingMode();
        SuccessAction successAction = (SuccessAction) Mockingbird.getProxyObject(SuccessAction.class);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(ThreadLocal.class), "get", "()java.lang.Object", successAction, 1);
        Mockingbird.setReturnValue(successAction.getSession(), null);
        Mockingbird.enterTestMode(IoCFilter.class);
        Object result = callPrivateMethod("org.mentawai.filter.IoCFilter", "getSession", new Class[] {}, ioCFilter, new Object[] {});
        assertNull("result", result);
    }
    
    public void testGetValue() throws Throwable {
        Mockingbird.enterRecordingMode();
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", threadLocal);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.enterTestMode(IoCFilter.class);
        IoCFilter ioCFilter = new IoCFilter();
        Mockingbird.enterRecordingMode();
        MapInput inputMap = (MapInput) Mockingbird.getProxyObject(MapInput.class);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, inputMap, 1);
        Mockingbird.setReturnValue(inputMap.getValue("testString"), "");
        Mockingbird.enterTestMode(IoCFilter.class);
        String result = (String) ioCFilter.getValue("testString");
        assertEquals("result", "", result);
    }
    
    public void testGetValue1() throws Throwable {
        Mockingbird.enterRecordingMode();
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", threadLocal);
        Mockingbird.replaceObjectForRecording(ThreadLocal.class, "<init>()", Mockingbird.getProxyObject(ThreadLocal.class));
        Mockingbird.enterTestMode(IoCFilter.class);
        IoCFilter ioCFilter = new IoCFilter();
        Mockingbird.enterRecordingMode();
        MapInput inputMap = (MapInput) Mockingbird.getProxyObject(MapInput.class);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, inputMap, 1);
        Integer integer = new Integer(33);
        Mockingbird.setReturnValue(inputMap.getValue("testString"), integer);
        Mockingbird.enterTestMode(IoCFilter.class);
        Integer result = (Integer) ioCFilter.getValue("testString");
        assertSame("result", integer, result);
    }
    
    public void testGetValueWithAggressiveMocks() throws Throwable {
        storeStaticField(ApplicationManager.class, "instance");
        IoCFilter ioCFilter = (IoCFilter) Mockingbird.getProxyObject(IoCFilter.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        Action action2 = (Action) Mockingbird.getProxyObject(Action.class);
        Context context2 = (Context) Mockingbird.getProxyObject(Context.class);
        Input input2 = (Input) Mockingbird.getProxyObject(Input.class);
        setPrivateField(ioCFilter, "action", threadLocal);
        setPrivateField(ApplicationManager.class, "instance", applicationManager);
        setPrivateField(scopeComponent, "scope", new Integer(3));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getComponent", "(java.lang.String)org.mentawai.ioc.Component", scopeComponent, 1);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, action, 1);
        Mockingbird.setReturnValue(action.getSession(), context);
        Mockingbird.setReturnValue(false, context, "getAttribute", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(scopeComponent.getInstance(), null);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, action2, 1);
        Mockingbird.setReturnValue(action2.getSession(), context2);
        Mockingbird.setReturnValue(false, context2, "setAttribute", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input2, 1);
        Mockingbird.setReturnValue(false, input2, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(IoCFilter.class);
        Object result = ioCFilter.getValue("");
        assertNull("result", result);
    }
    
    public void testGetValueWithAggressiveMocks1() throws Throwable {
        storeStaticField(ApplicationManager.class, "instance");
        IoCFilter ioCFilter = (IoCFilter) Mockingbird.getProxyObject(IoCFilter.class, true);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        Input input2 = (Input) Mockingbird.getProxyObject(Input.class);
        Input input3 = (Input) Mockingbird.getProxyObject(Input.class);
        Input input4 = (Input) Mockingbird.getProxyObject(Input.class);
        setPrivateField(ApplicationManager.class, "instance", applicationManager);
        setPrivateField(scopeComponent, "scope", new Integer(11));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getComponent", "(java.lang.String)org.mentawai.ioc.Component", scopeComponent, 1);
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input2, 1);
        Mockingbird.setReturnValue(false, input2, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(scopeComponent.getInstance(), null);
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input3, 1);
        Mockingbird.setReturnValue(false, input3, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input4, 1);
        Mockingbird.setReturnValue(false, input4, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(IoCFilter.class);
        Object result = ioCFilter.getValue("");
        assertNull("result", result);
    }
    
    public void testGetValueWithAggressiveMocks2() throws Throwable {
        storeStaticField(ApplicationManager.class, "instance");
        IoCFilter ioCFilter = (IoCFilter) Mockingbird.getProxyObject(IoCFilter.class, true);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        setPrivateField(ApplicationManager.class, "instance", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getComponent", "(java.lang.String)org.mentawai.ioc.Component", null, 1);
        Mockingbird.enterTestMode(IoCFilter.class);
        Object result = ioCFilter.getValue("");
        assertNull("result", result);
    }
    
    public void testGetValueWithAggressiveMocks3() throws Throwable {
        storeStaticField(ApplicationManager.class, "instance");
        IoCFilter ioCFilter = (IoCFilter) Mockingbird.getProxyObject(IoCFilter.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        Action action2 = (Action) Mockingbird.getProxyObject(Action.class);
        Context context2 = (Context) Mockingbird.getProxyObject(Context.class);
        Input input2 = (Input) Mockingbird.getProxyObject(Input.class);
        setPrivateField(ioCFilter, "action", threadLocal);
        setPrivateField(ApplicationManager.class, "instance", applicationManager);
        setPrivateField(scopeComponent, "scope", new Integer(4));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getComponent", "(java.lang.String)org.mentawai.ioc.Component", scopeComponent, 1);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, action, 1);
        Mockingbird.setReturnValue(action.getApplication(), context);
        Mockingbird.setReturnValue(false, context, "getAttribute", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(scopeComponent.getInstance(), null);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, action2, 1);
        Mockingbird.setReturnValue(action2.getApplication(), context2);
        Mockingbird.setReturnValue(false, context2, "setAttribute", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input2, 1);
        Mockingbird.setReturnValue(false, input2, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(IoCFilter.class);
        Object result = ioCFilter.getValue("");
        assertNull("result", result);
    }
    
    public void testGetValueWithAggressiveMocks4() throws Throwable {
        storeStaticField(ApplicationManager.class, "instance");
        IoCFilter ioCFilter = (IoCFilter) Mockingbird.getProxyObject(IoCFilter.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Input input2 = (Input) Mockingbird.getProxyObject(Input.class);
        setPrivateField(ioCFilter, "action", threadLocal);
        setPrivateField(ApplicationManager.class, "instance", applicationManager);
        setPrivateField(scopeComponent, "scope", new Integer(4));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getComponent", "(java.lang.String)org.mentawai.ioc.Component", scopeComponent, 1);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, action, 1);
        Mockingbird.setReturnValue(action.getApplication(), context);
        Mockingbird.setReturnValue(false, context, "getAttribute", "(java.lang.String)java.lang.Object", obj, 1);
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input2, 1);
        Mockingbird.setReturnValue(false, input2, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(IoCFilter.class);
        Object result = ioCFilter.getValue("");
        assertNotNull("result", result);
    }
    
    public void testGetValueWithAggressiveMocks5() throws Throwable {
        storeStaticField(ApplicationManager.class, "instance");
        IoCFilter ioCFilter = (IoCFilter) Mockingbird.getProxyObject(IoCFilter.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Context context = (Context) Mockingbird.getProxyObject(Context.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Input input2 = (Input) Mockingbird.getProxyObject(Input.class);
        setPrivateField(ioCFilter, "action", threadLocal);
        setPrivateField(ApplicationManager.class, "instance", applicationManager);
        setPrivateField(scopeComponent, "scope", new Integer(3));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getComponent", "(java.lang.String)org.mentawai.ioc.Component", scopeComponent, 1);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, action, 1);
        Mockingbird.setReturnValue(action.getSession(), context);
        Mockingbird.setReturnValue(false, context, "getAttribute", "(java.lang.String)java.lang.Object", obj, 1);
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input2, 1);
        Mockingbird.setReturnValue(false, input2, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(IoCFilter.class);
        Object result = ioCFilter.getValue("");
        assertNotNull("result", result);
    }
    
    public void testGetValueWithAggressiveMocks6() throws Throwable {
        storeStaticField(ApplicationManager.class, "instance");
        IoCFilter ioCFilter = (IoCFilter) Mockingbird.getProxyObject(IoCFilter.class, true);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        Input input2 = (Input) Mockingbird.getProxyObject(Input.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Input input3 = (Input) Mockingbird.getProxyObject(Input.class);
        setPrivateField(ApplicationManager.class, "instance", applicationManager);
        setPrivateField(scopeComponent, "scope", new Integer(11));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getComponent", "(java.lang.String)org.mentawai.ioc.Component", scopeComponent, 1);
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input2, 1);
        Mockingbird.setReturnValue(false, input2, "getValue", "(java.lang.String)java.lang.Object", obj, 1);
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input3, 1);
        Mockingbird.setReturnValue(false, input3, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(IoCFilter.class);
        Object result = ioCFilter.getValue("");
        assertNotNull("result", result);
    }
    
    public void testGetValueWithAggressiveMocks7() throws Throwable {
        storeStaticField(ApplicationManager.class, "instance");
        IoCFilter ioCFilter = (IoCFilter) Mockingbird.getProxyObject(IoCFilter.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ActionComponent actionComponent = (ActionComponent) Mockingbird.getProxyObject(ActionComponent.class);
        setPrivateField(ioCFilter, "action", threadLocal);
        setPrivateField(ApplicationManager.class, "instance", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getComponent", "(java.lang.String)org.mentawai.ioc.Component", actionComponent, 1);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, null, 1);
        actionComponent.setAction(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, actionComponent, "setKey", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(actionComponent.getInstance(), null);
        Mockingbird.enterTestMode(IoCFilter.class);
        Object result = ioCFilter.getValue("");
        assertNull("result", result);
    }
    
    public void testGetValueWithAggressiveMocks8() throws Throwable {
        storeStaticField(ApplicationManager.class, "instance");
        IoCFilter ioCFilter = (IoCFilter) Mockingbird.getProxyObject(IoCFilter.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ActionComponent actionComponent = (ActionComponent) Mockingbird.getProxyObject(ActionComponent.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Input input2 = (Input) Mockingbird.getProxyObject(Input.class);
        setPrivateField(ioCFilter, "action", threadLocal);
        setPrivateField(ApplicationManager.class, "instance", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getComponent", "(java.lang.String)org.mentawai.ioc.Component", actionComponent, 1);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, null, 1);
        actionComponent.setAction(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, actionComponent, "setKey", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(actionComponent.getInstance(), obj);
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input2, 1);
        Mockingbird.setReturnValue(false, input2, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(IoCFilter.class);
        Object result = ioCFilter.getValue("");
        assertNotNull("result", result);
    }
    
    public void testGetValueWithAggressiveMocks9() throws Throwable {
        storeStaticField(ApplicationManager.class, "instance");
        IoCFilter ioCFilter = (IoCFilter) Mockingbird.getProxyObject(IoCFilter.class, true);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Component component = (Component) Mockingbird.getProxyObject(Component.class);
        setPrivateField(ApplicationManager.class, "instance", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getComponent", "(java.lang.String)org.mentawai.ioc.Component", component, 1);
        Mockingbird.setReturnValue(component.getInstance(), null);
        Mockingbird.enterTestMode(IoCFilter.class);
        Object result = ioCFilter.getValue("");
        assertNull("result", result);
    }
    
    public void testGetValueWithAggressiveMocks10() throws Throwable {
        storeStaticField(ApplicationManager.class, "instance");
        IoCFilter ioCFilter = (IoCFilter) Mockingbird.getProxyObject(IoCFilter.class, true);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        Component component = (Component) Mockingbird.getProxyObject(Component.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Input input2 = (Input) Mockingbird.getProxyObject(Input.class);
        setPrivateField(ApplicationManager.class, "instance", applicationManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getComponent", "(java.lang.String)org.mentawai.ioc.Component", component, 1);
        Mockingbird.setReturnValue(component.getInstance(), obj);
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input2, 1);
        Mockingbird.setReturnValue(false, input2, "setValue", "(java.lang.String,java.lang.Object)void", null, 1);
        Mockingbird.enterTestMode(IoCFilter.class);
        Object result = ioCFilter.getValue("");
        assertNotNull("result", result);
    }
    
    public void testToString() throws Throwable {
        String result = new IoCFilter(new ApplicationComponent(), "testIoCFilterKey", 100).toString();
        assertEquals("result", "IocFilter (deprecated one)", result);
    }
    
    public void testToString1() throws Throwable {
        String result = new IoCFilter().toString();
        assertEquals("result", "IoCFilter", result);
    }
    
    public void testFilterThrowsActionException() throws Throwable {
        IoCFilter ioCFilter = new IoCFilter();
        InvocationChain chain = new InvocationChain("testIoCFilterActionName", new MockAction());
        chain.setInnerAction("testIoCFilterInnerAction");
        try {
            ioCFilter.filter(chain);
            fail("Expected ActionException to be thrown");
        } catch (ActionException ex) {
            assertEquals("ex.getMessage()", "The inner action does not exist: testIoCFilterInnerAction", ex.getMessage());
            assertThrownBy(InvocationChain.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("ioCFilter.toString()", "IoCFilter", ioCFilter.toString());
            assertEquals("chain.getActionName()", "testIoCFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsFilterException() throws Throwable {
        ScopeComponent comp = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        Mockingbird.enterRecordingMode();
        PushIoCFilter pushIoCFilter = (PushIoCFilter) Mockingbird.getProxyObject(PushIoCFilter.class);
        Mockingbird.replaceObjectForRecording(PushIoCFilter.class, "<init>(org.mentawai.ioc.Component,java.lang.String)", pushIoCFilter);
        Mockingbird.enterTestMode(IoCFilter.class);
        IoCFilter ioCFilter = new IoCFilter(comp, "testIoCFilterKey");
        InvocationChain chain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(pushIoCFilter.filter(chain), (Throwable) Mockingbird.getProxyObject(FilterException.class));
        Mockingbird.enterTestMode(IoCFilter.class);
        try {
            ioCFilter.filter(chain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testFilterThrowsIllegalStateException() throws Throwable {
        ScopeComponent comp = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        Mockingbird.enterRecordingMode();
        PushIoCFilter pushIoCFilter = (PushIoCFilter) Mockingbird.getProxyObject(PushIoCFilter.class);
        Mockingbird.replaceObjectForRecording(PushIoCFilter.class, "<init>(org.mentawai.ioc.Component,java.lang.String)", pushIoCFilter);
        Mockingbird.enterTestMode(IoCFilter.class);
        IoCFilter ioCFilter = new IoCFilter(comp, "zq>");
        InvocationChain chain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(pushIoCFilter.filter(chain), (Throwable) Mockingbird.getProxyObject(IllegalStateException.class));
        Mockingbird.enterTestMode(IoCFilter.class);
        try {
            ioCFilter.filter(chain);
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ioCFilter.toString()", "IocFilter (deprecated one)", ioCFilter.toString());
            assertNull("chain.getAction()", chain.getAction());
        }
    }
    
    public void testFilterThrowsNullPointerException() throws Throwable {
        IoCFilter ioCFilter = new IoCFilter();
        try {
            ioCFilter.filter(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("ioCFilter.toString()", "IoCFilter", ioCFilter.toString());
        }
    }
    
    public void testFilterThrowsNullPointerException1() throws Throwable {
        IoCFilter ioCFilter = new IoCFilter();
        InvocationChain chain = new InvocationChain("testIoCFilterActionName", null);
        try {
            ioCFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("ioCFilter.toString()", "IoCFilter", ioCFilter.toString());
            assertEquals("chain.getActionName()", "testIoCFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsRuntimeException() throws Throwable {
        InvocationChain chain = new InvocationChain("testIoCFilterActionName", new LogoutAction());
        IoCFilter ioCFilter = new IoCFilter();
        Filter dateConverterFilter = new DateConverterFilter(100, "testIoCFilterS1");
        callPrivateMethod("org.mentawai.core.InvocationChain", "addFilter", new Class[] {Filter.class}, chain, new Object[] {dateConverterFilter});
        try {
            ioCFilter.filter(chain);
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertEquals("chain.getFilters().size()", 0, chain.getFilters().size());
            assertFalse("chain.getFilters().contains(dateConverterFilter)", chain.getFilters().contains(dateConverterFilter));
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
            assertEquals("ioCFilter.toString()", "IoCFilter", ioCFilter.toString());
            assertEquals("chain.getActionName()", "testIoCFilterActionName", chain.getActionName());
        }
    }
    
    public void testGetApplicationThrowsNullPointerException() throws Throwable {
        IoCFilter ioCFilter = new IoCFilter(new ApplicationComponent(), "testIoCFilterKey");
        try {
            callPrivateMethod("org.mentawai.filter.IoCFilter", "getApplication", new Class[] {}, ioCFilter, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testGetSessionThrowsNullPointerException() throws Throwable {
        IoCFilter ioCFilter = new IoCFilter();
        try {
            callPrivateMethod("org.mentawai.filter.IoCFilter", "getSession", new Class[] {}, ioCFilter, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testGetValueThrowsIllegalStateException() throws Throwable {
        try {
            new IoCFilter().getValue("testIoCFilterKey");
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetValueThrowsRuntimeException() throws Throwable {
        try {
            new IoCFilter().getValue("testIoCFilterKey");
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertEquals("ex.getMessage()", "InputWrapper does not have an input!", ex.getMessage());
            assertThrownBy(InputWrapper.class, ex);
        }
    }
    
    public void testGetValueThrowsRuntimeException1() throws Throwable {
        IoCFilter ioCFilter = new IoCFilter();
        ioCFilter.filter(new InvocationChain("testIoCFilterActionName", new MockAction()));
        try {
            ioCFilter.getValue("testIoCFilterKey");
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertEquals("ex.getMessage()", "IoCFilter threw an Exception: null", ex.getMessage());
            assertThrownBy(IoCFilter.class, ex);
        }
    }
    
    public void testGetValueThrowsRuntimeExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ApplicationManager.class, "instance");
        IoCFilter ioCFilter = (IoCFilter) Mockingbird.getProxyObject(IoCFilter.class, true);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        ApplicationManager applicationManager = (ApplicationManager) Mockingbird.getProxyObject(ApplicationManager.class);
        ScopeComponent scopeComponent = (ScopeComponent) Mockingbird.getProxyObject(ScopeComponent.class);
        setPrivateField(ApplicationManager.class, "instance", applicationManager);
        setPrivateField(scopeComponent, "scope", new Integer(0));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, ioCFilter, "getInput", "()org.mentawai.core.Input", new Object[] {}, input, 1);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, applicationManager, "getComponent", "(java.lang.String)org.mentawai.ioc.Component", scopeComponent, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        FilterException filterException = (FilterException) Mockingbird.getProxyObject(FilterException.class);
        Mockingbird.replaceObjectForRecording(FilterException.class, "<init>(java.lang.String)", filterException);
        filterException.printStackTrace();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(filterException.getMessage(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(RuntimeException.class, "<init>(java.lang.String,java.lang.Throwable)", Mockingbird.getProxyObject(RuntimeException.class));
        Mockingbird.enterTestMode(IoCFilter.class);
        try {
            ioCFilter.getValue("");
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetValueThrowsStackOverflowError() throws Throwable {
        IoCFilter ioCFilter = new IoCFilter();
        InvocationChain chain = new InvocationChain("testIoCFilterActionName", new SuccessAction());
        ioCFilter.filter(chain);
        ioCFilter.filter(chain);
        IoCFilter ioCFilter2 = new IoCFilter();
        ioCFilter2.filter(chain);
        try {
            ioCFilter2.getValue("testIoCFilterKey");
            fail("Expected StackOverflowError to be thrown");
        } catch (StackOverflowError ex) {
            assertEquals("ex.getClass()", StackOverflowError.class, ex.getClass());
        }
    }
}

