/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:20:24 PM
 * Time to generate: 00:16.102 seconds
 *
 */

package org.mentawai.filter;

import com.agitar.lib.junit.AgitarTestCase;
import java.util.Collection;
import org.hibernate.SessionFactory;
import org.hibernate.jmx.HibernateService;

public class HibernateAnnotationFilterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return HibernateAnnotationFilter.class;
    }
    
    public void testConstructor() throws Throwable {
        SessionFactory factory = (SessionFactory) callPrivateMethod("org.hibernate.jmx.SessionFactoryStub", "<init>", new Class[] {HibernateService.class}, null, new Object[] {new HibernateService()});
        HibernateAnnotationFilter hibernateAnnotationFilter = new HibernateAnnotationFilter(factory);
        assertNull("hibernateAnnotationFilter.input.get()", ((ThreadLocal) getPrivateField(hibernateAnnotationFilter, "input")).get());
        int actual = ((Collection) getPrivateField(hibernateAnnotationFilter, "resultsForRollback")).size();
        assertEquals("hibernateAnnotationFilter.resultsForRollback.size()", 0, actual);
        Object object = ((ThreadLocal) getPrivateField(hibernateAnnotationFilter, "hibernateTransactionThreadLocal")).get();
        assertNull("hibernateAnnotationFilter.hibernateTransactionThreadLocal.get()", object);
        assertEquals("hibernateAnnotationFilter.toString()", "HibernateFilter: sessionKey=session transKey=transaction transactional=false", hibernateAnnotationFilter.toString());
        Object object2 = ((ThreadLocal) getPrivateField(hibernateAnnotationFilter, "hibernateSessionThreadLocal")).get();
        assertNull("hibernateAnnotationFilter.hibernateSessionThreadLocal.get()", object2);
        assertSame("hibernateAnnotationFilter.sessionFactory", factory, getPrivateField(hibernateAnnotationFilter, "sessionFactory"));
    }
}

