/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 8, 2007 6:20:44 PM
 * Time to generate: 00:34.688 seconds
 *
 */

package org.mentawai.filter;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Map;
import org.mentawai.action.LogoutAction;
import org.mentawai.action.SuccessAction;
import org.mentawai.core.Action;
import org.mentawai.core.ActionException;
import org.mentawai.core.ClassActionConfig;
import org.mentawai.core.FilterException;
import org.mentawai.core.Input;
import org.mentawai.core.InvocationChain;
import org.mentawai.core.PojoAction;
import org.mentawai.util.FindMethod;
import org.mentawai.util.InjectionUtils;
import org.mentawai.util.MockAction;

public class DependencyFilterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return DependencyFilter.class;
    }
    
    public void testConstructor() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", "testDependencyFilterAttribute");
        assertEquals("dependencyFilter.cache.size()", 0, ((Map) getPrivateField(dependencyFilter, "cache")).size());
        assertEquals("dependencyFilter.toString()", "DependencyFilter: sourceKey=testDependencyFilterSource_key targetKey=testDependencyFilterTarget_key attribute=testDependencyFilterAttribute sourceScope=? targetScope=INPUT", dependencyFilter.toString());
        assertTrue("dependencyFilter.tryField", ((Boolean) getPrivateField(dependencyFilter, "tryField")).booleanValue());
        assertFalse("dependencyFilter.throwException", ((Boolean) getPrivateField(dependencyFilter, "throwException")).booleanValue());
    }
    
    public void testConstructor1() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", 1000, "testDependencyFilterAttribute");
        assertEquals("dependencyFilter.cache.size()", 0, ((Map) getPrivateField(dependencyFilter, "cache")).size());
        assertEquals("dependencyFilter.toString()", "DependencyFilter: sourceKey=testDependencyFilterSource_key targetKey=testDependencyFilterTarget_key attribute=testDependencyFilterAttribute sourceScope=? targetScope=?", dependencyFilter.toString());
        assertTrue("dependencyFilter.tryField", ((Boolean) getPrivateField(dependencyFilter, "tryField")).booleanValue());
        assertFalse("dependencyFilter.throwException", ((Boolean) getPrivateField(dependencyFilter, "throwException")).booleanValue());
    }
    
    public void testConstructor2() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", "testDependencyFilterTarget_key");
        assertEquals("dependencyFilter.cache.size()", 0, ((Map) getPrivateField(dependencyFilter, "cache")).size());
        assertEquals("dependencyFilter.toString()", "DependencyFilter: sourceKey=testDependencyFilterSource_key targetKey=testDependencyFilterTarget_key attribute=testDependencyFilterSource_key sourceScope=INPUT targetScope=INPUT", dependencyFilter.toString());
        assertTrue("dependencyFilter.tryField", ((Boolean) getPrivateField(dependencyFilter, "tryField")).booleanValue());
        assertFalse("dependencyFilter.throwException", ((Boolean) getPrivateField(dependencyFilter, "throwException")).booleanValue());
    }
    
    public void testConstructor3() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", "testDependencyFilterTarget_key", "testDependencyFilterAttribute");
        assertEquals("dependencyFilter.cache.size()", 0, ((Map) getPrivateField(dependencyFilter, "cache")).size());
        assertEquals("dependencyFilter.toString()", "DependencyFilter: sourceKey=testDependencyFilterSource_key targetKey=testDependencyFilterTarget_key attribute=testDependencyFilterAttribute sourceScope=INPUT targetScope=INPUT", dependencyFilter.toString());
        assertTrue("dependencyFilter.tryField", ((Boolean) getPrivateField(dependencyFilter, "tryField")).booleanValue());
        assertFalse("dependencyFilter.throwException", ((Boolean) getPrivateField(dependencyFilter, "throwException")).booleanValue());
    }
    
    public void testDestroy() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", "testDependencyFilterTarget_key");
        dependencyFilter.destroy();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testFilter() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", 2, "testDependencyFilterAttribute");
        String result = dependencyFilter.filter(new InvocationChain("testDependencyFilterActionName", new MockAction()));
        assertEquals("result", "success", result);
    }
    
    public void testFilter1() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", 3, "testDependencyFilterAttribute");
        String result = dependencyFilter.filter(new InvocationChain("testDependencyFilterActionName", new MockAction()));
        assertEquals("result", "success", result);
    }
    
    public void testFilter2() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", "testDependencyFilterAttribute");
        String result = dependencyFilter.filter(new InvocationChain("testDependencyFilterActionName", new MockAction()));
        assertEquals("result", "success", result);
    }
    
    public void testFilter3() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", 4, "testDependencyFilterAttribute");
        String result = dependencyFilter.filter(new InvocationChain("testDependencyFilterActionName", new MockAction()));
        assertEquals("result", "success", result);
    }
    
    public void testFilterWithAggressiveMocks() throws Throwable {
        DependencyFilter dependencyFilter = (DependencyFilter) Mockingbird.getProxyObject(DependencyFilter.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Input input2 = (Input) Mockingbird.getProxyObject(Input.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        NoSuchMethodException noSuchMethodException = (NoSuchMethodException) Mockingbird.getProxyObject(NoSuchMethodException.class);
        Class class2 = (Class) Mockingbird.getProxyObject(Class.class);
        Field field = (Field) Mockingbird.getProxyObject(Field.class);
        Method method = (Method) Mockingbird.getProxyObject(Method.class);
        setPrivateField(dependencyFilter, "target_scope", new Integer(1));
        setPrivateField(dependencyFilter, "target_key", "");
        setPrivateField(dependencyFilter, "source_scope", new Integer(1));
        setPrivateField(dependencyFilter, "source_key", "");
        setPrivateField(dependencyFilter, "attribute", "AA");
        dependencyFilter.setTryField(true);
        setPrivateField(dependencyFilter, "cache", map);
        dependencyFilter.setThrowException(false);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", obj, 1);
        Mockingbird.setReturnValue(action.getInput(), input2);
        Mockingbird.setReturnValue(false, input2, "getValue", "(java.lang.String)java.lang.Object", obj2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toUpperCase", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setException(true, FindMethod.class, "getMethod", "(java.lang.Class,java.lang.String,java.lang.Class[])java.lang.reflect.Method", noSuchMethodException, 1);
        Mockingbird.setReturnValue(InjectionUtils.getPrimitiveFrom(obj2), class2);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "getField", "(java.lang.Object,java.lang.String)java.lang.reflect.Field", field, 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", method, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Throwable.class), "printStackTrace", "()void", null, 1);
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.enterTestMode(DependencyFilter.class);
        String result = dependencyFilter.filter(invocationChain);
        assertEquals("result", "", result);
        assertNotNull("dependencyFilter.cache", getPrivateField(dependencyFilter, "cache"));
    }
    
    public void testFilterWithAggressiveMocks1() throws Throwable {
        DependencyFilter dependencyFilter = (DependencyFilter) Mockingbird.getProxyObject(DependencyFilter.class, true);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Input input2 = (Input) Mockingbird.getProxyObject(Input.class);
        setPrivateField(dependencyFilter, "target_scope", new Integer(1));
        setPrivateField(dependencyFilter, "target_key", "");
        setPrivateField(dependencyFilter, "source_scope", new Integer(1));
        setPrivateField(dependencyFilter, "source_key", "");
        dependencyFilter.setThrowException(false);
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", obj, 1);
        Mockingbird.setReturnValue(action.getInput(), input2);
        Mockingbird.setReturnValue(false, input2, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(invocationChain.invoke(), "");
        Mockingbird.enterTestMode(DependencyFilter.class);
        String result = dependencyFilter.filter(invocationChain);
        assertEquals("result", "", result);
        assertNull("dependencyFilter.cache", getPrivateField(dependencyFilter, "cache"));
    }
    
    public void testGetScope() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", "testDependencyFilterTarget_key", "testDependencyFilterAttribute");
        String result = (String) callPrivateMethod("org.mentawai.filter.DependencyFilter", "getScope", new Class[] {int.class}, dependencyFilter, new Object[] {new Integer(3)});
        assertEquals("result", "SESSION", result);
    }
    
    public void testGetScope1() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", "testDependencyFilterTarget_key");
        String result = (String) callPrivateMethod("org.mentawai.filter.DependencyFilter", "getScope", new Class[] {int.class}, dependencyFilter, new Object[] {new Integer(4)});
        assertEquals("result", "APPLICATION", result);
    }
    
    public void testGetScope2() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", "testDependencyFilterAttribute");
        String result = (String) callPrivateMethod("org.mentawai.filter.DependencyFilter", "getScope", new Class[] {int.class}, dependencyFilter, new Object[] {new Integer(100)});
        assertEquals("result", "?", result);
    }
    
    public void testGetScope3() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", 1000, "testDependencyFilterAttribute");
        String result = (String) callPrivateMethod("org.mentawai.filter.DependencyFilter", "getScope", new Class[] {int.class}, dependencyFilter, new Object[] {new Integer(2)});
        assertEquals("result", "OUTPUT", result);
    }
    
    public void testGetScope4() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", "testDependencyFilterAttribute");
        String result = (String) callPrivateMethod("org.mentawai.filter.DependencyFilter", "getScope", new Class[] {int.class}, dependencyFilter, new Object[] {new Integer(1)});
        assertEquals("result", "INPUT", result);
    }
    
    public void testSetThrowException() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", "testDependencyFilterTarget_key");
        dependencyFilter.setThrowException(true);
        assertTrue("dependencyFilter.throwException", ((Boolean) getPrivateField(dependencyFilter, "throwException")).booleanValue());
    }
    
    public void testSetTryField() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", "testDependencyFilterTarget_key");
        dependencyFilter.setTryField(false);
        assertFalse("dependencyFilter.tryField", ((Boolean) getPrivateField(dependencyFilter, "tryField")).booleanValue());
    }
    
    public void testSetValue() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", "testDependencyFilterAttribute");
        dependencyFilter.setTryField(false);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.DependencyFilter", "setValue", new Class[] {Object.class, String.class, Object.class}, dependencyFilter, new Object[] {"testString", " ", new Integer(28)})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValue1() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", 1000, "testDependencyFilterAttribute");
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.DependencyFilter", "setValue", new Class[] {Object.class, String.class, Object.class}, dependencyFilter, new Object[] {"", "2C", new Integer(0)})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValue2() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("NPUT", "OUTPUT");
        boolean value = ((Boolean) callPrivateMethod("org.mentawai.filter.DependencyFilter", "setValue", new Class[] {Object.class, String.class, Object.class}, dependencyFilter, new Object[] {"abcdefghijklmnopqrstuvwxyz", "m", new Integer(32)})).booleanValue();
        callPrivateMethod("org.mentawai.filter.DependencyFilter", "setValue", new Class[] {Object.class, String.class, Object.class}, dependencyFilter, new Object[] {"", "b", "testString"});
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.DependencyFilter", "setValue", new Class[] {Object.class, String.class, Object.class}, dependencyFilter, new Object[] {"", "m", ""})).booleanValue();
        assertFalse("result", result);
        assertNotNull("dependencyFilter.cache", getPrivateField(dependencyFilter, "cache"));
    }
    
    public void testSetValue3() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", "testDependencyFilterTarget_key");
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.DependencyFilter", "setValue", new Class[] {Object.class, String.class, Object.class}, dependencyFilter, new Object[] {"abcdefghijklmnopqrstuvwxyz", " ", new Integer(32)})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValue4() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", "testDependencyFilterTarget_key");
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.DependencyFilter", "setValue", new Class[] {Object.class, String.class, Object.class}, dependencyFilter, new Object[] {null, " ", "testString"})).booleanValue();
        assertFalse("result", result);
        assertEquals("dependencyFilter.cache.size()", 0, ((Map) getPrivateField(dependencyFilter, "cache")).size());
    }
    
    public void testSetValue5() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", "testDependencyFilterAttribute");
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.DependencyFilter", "setValue", new Class[] {Object.class, String.class, Object.class}, dependencyFilter, new Object[] {"testString", " ", ""})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValue6() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", 1000, "testDependencyFilterAttribute");
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.DependencyFilter", "setValue", new Class[] {Object.class, String.class, Object.class}, dependencyFilter, new Object[] {"", "", new Integer(31)})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValue7() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", "testDependencyFilterTarget_key", "testDependencyFilterAttribute");
        dependencyFilter.setTryField(false);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.DependencyFilter", "setValue", new Class[] {Object.class, String.class, Object.class}, dependencyFilter, new Object[] {"testString", "testDependencyFilterName", ""})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValue8() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", "testDependencyFilterTarget_key");
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.DependencyFilter", "setValue", new Class[] {Object.class, String.class, Object.class}, dependencyFilter, new Object[] {null, " ", new Integer(-32)})).booleanValue();
        assertFalse("result", result);
        assertEquals("dependencyFilter.cache.size()", 0, ((Map) getPrivateField(dependencyFilter, "cache")).size());
    }
    
    public void testSetValue9() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", "testDependencyFilterTarget_key", "testDependencyFilterAttribute");
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.DependencyFilter", "setValue", new Class[] {Object.class, String.class, Object.class}, dependencyFilter, new Object[] {null, "testDependencyFilterName", new Integer(33)})).booleanValue();
        assertFalse("result", result);
        assertEquals("dependencyFilter.cache.size()", 0, ((Map) getPrivateField(dependencyFilter, "cache")).size());
    }
    
    public void testSetValue10() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", 1000, "testDependencyFilterAttribute");
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.DependencyFilter", "setValue", new Class[] {Object.class, String.class, Object.class}, dependencyFilter, new Object[] {new Object(), "testDependencyFilterName", ""})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValue11() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", "testDependencyFilterAttribute");
        dependencyFilter.setTryField(false);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.DependencyFilter", "setValue", new Class[] {Object.class, String.class, Object.class}, dependencyFilter, new Object[] {new Object(), " ", ""})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValue12() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testString", "testString");
        boolean value = ((Boolean) callPrivateMethod("org.mentawai.filter.DependencyFilter", "setValue", new Class[] {Object.class, String.class, Object.class}, dependencyFilter, new Object[] {"", "2C", null})).booleanValue();
        Object obj = Mockingbird.getProxyObject(Object.class);
        Mockingbird.enterTestMode(DependencyFilter.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.DependencyFilter", "setValue", new Class[] {Object.class, String.class, Object.class}, dependencyFilter, new Object[] {obj, "2C", "testString"})).booleanValue();
        assertFalse("result", result);
        assertNotNull("dependencyFilter.cache", getPrivateField(dependencyFilter, "cache"));
    }
    
    public void testSetValue13() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", "testDependencyFilterTarget_key");
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.DependencyFilter", "setValue", new Class[] {Object.class, String.class, Object.class}, dependencyFilter, new Object[] {null, "testDependencyFilterName", ""})).booleanValue();
        assertFalse("result", result);
        assertEquals("dependencyFilter.cache.size()", 0, ((Map) getPrivateField(dependencyFilter, "cache")).size());
    }
    
    public void testSetValue14() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", "testDependencyFilterAttribute");
        dependencyFilter.setTryField(false);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.DependencyFilter", "setValue", new Class[] {Object.class, String.class, Object.class}, dependencyFilter, new Object[] {"testString", "2C", new Integer(28)})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testSetValueWithAggressiveMocks() throws Throwable {
        DependencyFilter dependencyFilter = (DependencyFilter) Mockingbird.getProxyObject(DependencyFilter.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        Method method = (Method) Mockingbird.getProxyObject(Method.class);
        setPrivateField(dependencyFilter, "cache", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, "AA", "substring", "(int,int)java.lang.String", new Object[] {new Integer(0), new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toUpperCase", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(true, FindMethod.class, "getMethod", "(java.lang.Class,java.lang.String,java.lang.Class[])java.lang.reflect.Method", method, 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(DependencyFilter.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.DependencyFilter", "setValue", new Class[] {Object.class, String.class, Object.class}, dependencyFilter, new Object[] {obj, "AA", obj2})).booleanValue();
        assertFalse("result", result);
        assertNotNull("dependencyFilter.cache", getPrivateField(dependencyFilter, "cache"));
    }
    
    public void testSetValueWithAggressiveMocks1() throws Throwable {
        DependencyFilter dependencyFilter = (DependencyFilter) Mockingbird.getProxyObject(DependencyFilter.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        NoSuchMethodException noSuchMethodException = (NoSuchMethodException) Mockingbird.getProxyObject(NoSuchMethodException.class);
        Class class2 = (Class) Mockingbird.getProxyObject(Class.class);
        Field field = (Field) Mockingbird.getProxyObject(Field.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        dependencyFilter.setTryField(true);
        setPrivateField(dependencyFilter, "cache", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, "AA", "substring", "(int,int)java.lang.String", new Object[] {new Integer(0), new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toUpperCase", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setException(true, FindMethod.class, "getMethod", "(java.lang.Class,java.lang.String,java.lang.Class[])java.lang.reflect.Method", noSuchMethodException, 1);
        Mockingbird.setReturnValue(InjectionUtils.getPrimitiveFrom(obj2), class2);
        Mockingbird.setReturnValue(true, InjectionUtils.class, "getField", "(java.lang.Object,java.lang.String)java.lang.reflect.Field", field, 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj3, 1);
        Mockingbird.enterTestMode(DependencyFilter.class);
        boolean result = ((Boolean) callPrivateMethod("org.mentawai.filter.DependencyFilter", "setValue", new Class[] {Object.class, String.class, Object.class}, dependencyFilter, new Object[] {obj, "AA", obj2})).booleanValue();
        assertTrue("result", result);
        assertNotNull("dependencyFilter.cache", getPrivateField(dependencyFilter, "cache"));
    }
    
    public void testToString() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", 3, "testDependencyFilterAttribute");
        String result = dependencyFilter.toString();
        assertEquals("result", "DependencyFilter: sourceKey=testDependencyFilterSource_key targetKey=testDependencyFilterTarget_key attribute=testDependencyFilterAttribute sourceScope=? targetScope=SESSION", result);
    }
    
    public void testToString1() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 4, "testDependencyFilterTarget_key", 2, "testDependencyFilterAttribute");
        String result = dependencyFilter.toString();
        assertEquals("result", "DependencyFilter: sourceKey=testDependencyFilterSource_key targetKey=testDependencyFilterTarget_key attribute=testDependencyFilterAttribute sourceScope=APPLICATION targetScope=OUTPUT", result);
    }
    
    public void testToString2() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 4, "testDependencyFilterTarget_key", 100, "testDependencyFilterAttribute");
        String result = dependencyFilter.toString();
        assertEquals("result", "DependencyFilter: sourceKey=testDependencyFilterSource_key targetKey=testDependencyFilterTarget_key attribute=testDependencyFilterAttribute sourceScope=APPLICATION targetScope=?", result);
    }
    
    public void testToString3() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 3, "testDependencyFilterTarget_key", 4, "testDependencyFilterAttribute");
        String result = dependencyFilter.toString();
        assertEquals("result", "DependencyFilter: sourceKey=testDependencyFilterSource_key targetKey=testDependencyFilterTarget_key attribute=testDependencyFilterAttribute sourceScope=SESSION targetScope=APPLICATION", result);
    }
    
    public void testToString4() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", "testDependencyFilterAttribute");
        String result = dependencyFilter.toString();
        assertEquals("result", "DependencyFilter: sourceKey=testDependencyFilterSource_key targetKey=testDependencyFilterTarget_key attribute=testDependencyFilterAttribute sourceScope=? targetScope=INPUT", result);
    }
    
    public void testToString5() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 4, "testDependencyFilterTarget_key", "testDependencyFilterAttribute");
        String result = dependencyFilter.toString();
        assertEquals("result", "DependencyFilter: sourceKey=testDependencyFilterSource_key targetKey=testDependencyFilterTarget_key attribute=testDependencyFilterAttribute sourceScope=APPLICATION targetScope=INPUT", result);
    }
    
    public void testToString6() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 3, "testDependencyFilterTarget_key", "testDependencyFilterAttribute");
        String result = dependencyFilter.toString();
        assertEquals("result", "DependencyFilter: sourceKey=testDependencyFilterSource_key targetKey=testDependencyFilterTarget_key attribute=testDependencyFilterAttribute sourceScope=SESSION targetScope=INPUT", result);
    }
    
    public void testToString7() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 1, "testDependencyFilterTarget_key", "testDependencyFilterAttribute");
        String result = dependencyFilter.toString();
        assertEquals("result", "DependencyFilter: sourceKey=testDependencyFilterSource_key targetKey=testDependencyFilterTarget_key attribute=testDependencyFilterAttribute sourceScope=INPUT targetScope=INPUT", result);
    }
    
    public void testToString8() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 2, "testDependencyFilterTarget_key", "testDependencyFilterAttribute");
        String result = dependencyFilter.toString();
        assertEquals("result", "DependencyFilter: sourceKey=testDependencyFilterSource_key targetKey=testDependencyFilterTarget_key attribute=testDependencyFilterAttribute sourceScope=OUTPUT targetScope=INPUT", result);
    }
    
    public void testToString9() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 4, "testDependencyFilterTarget_key", 4, "testDependencyFilterAttribute");
        String result = dependencyFilter.toString();
        assertEquals("result", "DependencyFilter: sourceKey=testDependencyFilterSource_key targetKey=testDependencyFilterTarget_key attribute=testDependencyFilterAttribute sourceScope=APPLICATION targetScope=APPLICATION", result);
    }
    
    public void testToString10() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", 1000, "testDependencyFilterAttribute");
        String result = dependencyFilter.toString();
        assertEquals("result", "DependencyFilter: sourceKey=testDependencyFilterSource_key targetKey=testDependencyFilterTarget_key attribute=testDependencyFilterAttribute sourceScope=? targetScope=?", result);
    }
    
    public void testToString11() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", 2, "testDependencyFilterAttribute");
        String result = dependencyFilter.toString();
        assertEquals("result", "DependencyFilter: sourceKey=testDependencyFilterSource_key targetKey=testDependencyFilterTarget_key attribute=testDependencyFilterAttribute sourceScope=? targetScope=OUTPUT", result);
    }
    
    public void testToString12() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 3, "testDependencyFilterTarget_key", 3, "testDependencyFilterAttribute");
        String result = dependencyFilter.toString();
        assertEquals("result", "DependencyFilter: sourceKey=testDependencyFilterSource_key targetKey=testDependencyFilterTarget_key attribute=testDependencyFilterAttribute sourceScope=SESSION targetScope=SESSION", result);
    }
    
    public void testFilterThrowsActionException() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", 3, "testDependencyFilterAttribute");
        InvocationChain chain = new InvocationChain("testDependencyFilterActionName", new MockAction());
        chain.setInnerAction("testDependencyFilterInnerAction");
        try {
            dependencyFilter.filter(chain);
            fail("Expected ActionException to be thrown");
        } catch (ActionException ex) {
            assertEquals("ex.getMessage()", "The inner action does not exist: testDependencyFilterInnerAction", ex.getMessage());
            assertThrownBy(InvocationChain.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("dependencyFilter.cache.size()", 0, ((Map) getPrivateField(dependencyFilter, "cache")).size());
            assertEquals("chain.getActionName()", "testDependencyFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsFilterException() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", 2, "testDependencyFilterAttribute");
        dependencyFilter.setThrowException(true);
        InvocationChain chain = new InvocationChain("testDependencyFilterActionName", new MockAction());
        try {
            dependencyFilter.filter(chain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertEquals("ex.getMessage()", "Cannot find target: testDependencyFilterTarget_key / 2", ex.getMessage());
            assertThrownBy(DependencyFilter.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("dependencyFilter.cache.size()", 0, ((Map) getPrivateField(dependencyFilter, "cache")).size());
            assertEquals("chain.getActionName()", "testDependencyFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsFilterException1() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", "testDependencyFilterAttribute");
        dependencyFilter.setThrowException(true);
        InvocationChain chain = new InvocationChain("testDependencyFilterActionName", new MockAction());
        try {
            dependencyFilter.filter(chain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertEquals("ex.getMessage()", "Cannot find target: testDependencyFilterTarget_key / 1", ex.getMessage());
            assertThrownBy(DependencyFilter.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("dependencyFilter.cache.size()", 0, ((Map) getPrivateField(dependencyFilter, "cache")).size());
            assertEquals("chain.getActionName()", "testDependencyFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsFilterException2() throws Throwable {
        InvocationChain chain = new InvocationChain("testDependencyFilterActionName", new MockAction());
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", 3, "testDependencyFilterAttribute");
        dependencyFilter.setThrowException(true);
        try {
            dependencyFilter.filter(chain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertEquals("ex.getMessage()", "Cannot find target: testDependencyFilterTarget_key / 3", ex.getMessage());
            assertThrownBy(DependencyFilter.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("dependencyFilter.cache.size()", 0, ((Map) getPrivateField(dependencyFilter, "cache")).size());
            assertEquals("chain.getActionName()", "testDependencyFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsFilterException3() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", 4, "testDependencyFilterAttribute");
        dependencyFilter.setThrowException(true);
        InvocationChain chain = new InvocationChain("testDependencyFilterActionName", new MockAction());
        try {
            dependencyFilter.filter(chain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertEquals("ex.getMessage()", "Cannot find target: testDependencyFilterTarget_key / 4", ex.getMessage());
            assertThrownBy(DependencyFilter.class, ex);
            assertNull("ex.getCause()", ex.getCause());
            assertEquals("dependencyFilter.cache.size()", 0, ((Map) getPrivateField(dependencyFilter, "cache")).size());
            assertEquals("chain.getActionName()", "testDependencyFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsFilterExceptionWithAggressiveMocks() throws Throwable {
        DependencyFilter dependencyFilter = (DependencyFilter) Mockingbird.getProxyObject(DependencyFilter.class, true);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Input input2 = (Input) Mockingbird.getProxyObject(Input.class);
        setPrivateField(dependencyFilter, "target_scope", new Integer(1));
        setPrivateField(dependencyFilter, "target_key", "");
        dependencyFilter.setThrowException(true);
        setPrivateField(dependencyFilter, "source_key", "");
        setPrivateField(dependencyFilter, "source_scope", new Integer(1));
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", obj, 1);
        Mockingbird.setReturnValue(action.getInput(), input2);
        Mockingbird.setReturnValue(false, input2, "getValue", "(java.lang.String)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(FilterException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(FilterException.class));
        Mockingbird.enterTestMode(DependencyFilter.class);
        try {
            dependencyFilter.filter(invocationChain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testFilterThrowsFilterExceptionWithAggressiveMocks1() throws Throwable {
        DependencyFilter dependencyFilter = (DependencyFilter) Mockingbird.getProxyObject(DependencyFilter.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Input input2 = (Input) Mockingbird.getProxyObject(Input.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        NoSuchMethodException noSuchMethodException = (NoSuchMethodException) Mockingbird.getProxyObject(NoSuchMethodException.class);
        Class class2 = (Class) Mockingbird.getProxyObject(Class.class);
        Method method = (Method) Mockingbird.getProxyObject(Method.class);
        setPrivateField(dependencyFilter, "target_scope", new Integer(1));
        setPrivateField(dependencyFilter, "source_scope", new Integer(1));
        setPrivateField(dependencyFilter, "cache", map);
        dependencyFilter.setThrowException(true);
        setPrivateField(dependencyFilter, "source_key", "");
        setPrivateField(dependencyFilter, "target_key", "");
        setPrivateField(dependencyFilter, "attribute", "AA");
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", obj, 1);
        Mockingbird.setReturnValue(action.getInput(), input2);
        Mockingbird.setReturnValue(false, input2, "getValue", "(java.lang.String)java.lang.Object", obj2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toUpperCase", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setException(true, FindMethod.class, "getMethod", "(java.lang.Class,java.lang.String,java.lang.Class[])java.lang.reflect.Method", noSuchMethodException, 1);
        Mockingbird.setReturnValue(InjectionUtils.getPrimitiveFrom(obj2), class2);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", method, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Throwable.class), "printStackTrace", "()void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(FilterException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(FilterException.class));
        Mockingbird.enterTestMode(DependencyFilter.class);
        try {
            dependencyFilter.filter(invocationChain);
            fail("Expected FilterException to be thrown");
        } catch (FilterException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testFilterThrowsIllegalArgumentException() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", 1000, "testDependencyFilterAttribute");
        InvocationChain chain = new InvocationChain("testDependencyFilterActionName", new MockAction());
        try {
            dependencyFilter.filter(chain);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Invalid target scope!", ex.getMessage());
            assertThrownBy(DependencyFilter.class, ex);
            assertEquals("dependencyFilter.cache.size()", 0, ((Map) getPrivateField(dependencyFilter, "cache")).size());
            assertEquals("chain.getActionName()", "testDependencyFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsIllegalArgumentExceptionWithAggressiveMocks() throws Throwable {
        DependencyFilter dependencyFilter = (DependencyFilter) Mockingbird.getProxyObject(DependencyFilter.class, true);
        InvocationChain invocationChain = (InvocationChain) Mockingbird.getProxyObject(InvocationChain.class);
        Action action = (Action) Mockingbird.getProxyObject(Action.class);
        Input input = (Input) Mockingbird.getProxyObject(Input.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        setPrivateField(dependencyFilter, "target_scope", new Integer(1));
        setPrivateField(dependencyFilter, "target_key", "");
        setPrivateField(dependencyFilter, "source_scope", new Integer(0));
        setPrivateField(invocationChain, "action", action);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(action.getInput(), input);
        Mockingbird.setReturnValue(false, input, "getValue", "(java.lang.String)java.lang.Object", obj, 1);
        Mockingbird.replaceObjectForRecording(IllegalArgumentException.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(IllegalArgumentException.class));
        Mockingbird.enterTestMode(DependencyFilter.class);
        try {
            dependencyFilter.filter(invocationChain);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("dependencyFilter.cache", getPrivateField(dependencyFilter, "cache"));
        }
    }
    
    public void testFilterThrowsNullPointerException() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", 3, "testDependencyFilterAttribute");
        InvocationChain chain = new InvocationChain("testDependencyFilterActionName", new LogoutAction());
        try {
            dependencyFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DependencyFilter.class, ex);
            assertEquals("dependencyFilter.cache.size()", 0, ((Map) getPrivateField(dependencyFilter, "cache")).size());
            assertEquals("chain.getActionName()", "testDependencyFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException1() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", "testDependencyFilterAttribute");
        try {
            dependencyFilter.filter(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DependencyFilter.class, ex);
            assertEquals("dependencyFilter.cache.size()", 0, ((Map) getPrivateField(dependencyFilter, "cache")).size());
        }
    }
    
    public void testFilterThrowsNullPointerException2() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", 4, "testDependencyFilterAttribute");
        InvocationChain chain = new InvocationChain("testDependencyFilterActionName", new SuccessAction());
        try {
            dependencyFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DependencyFilter.class, ex);
            assertEquals("dependencyFilter.cache.size()", 0, ((Map) getPrivateField(dependencyFilter, "cache")).size());
            assertEquals("chain.getActionName()", "testDependencyFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException3() throws Throwable {
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", "testDependencyFilterTarget_key");
        InvocationChain chain = new InvocationChain("testDependencyFilterActionName", new LogoutAction());
        try {
            dependencyFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DependencyFilter.class, ex);
            assertEquals("dependencyFilter.cache.size()", 0, ((Map) getPrivateField(dependencyFilter, "cache")).size());
            assertEquals("chain.getActionName()", "testDependencyFilterActionName", chain.getActionName());
        }
    }
    
    public void testFilterThrowsNullPointerException4() throws Throwable {
        InvocationChain chain = new InvocationChain("testDependencyFilterActionName", new LogoutAction());
        DependencyFilter dependencyFilter = new DependencyFilter("testDependencyFilterSource_key", 100, "testDependencyFilterTarget_key", 2, "testDependencyFilterAttribute");
        try {
            dependencyFilter.filter(chain);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DependencyFilter.class, ex);
            assertEquals("dependencyFilter.cache.size()", 0, ((Map) getPrivateField(dependencyFilter, "cache")).size());
            assertEquals("chain.getActionName()", "testDependencyFilterActionName", chain.getActionName());
        }
    }
}

